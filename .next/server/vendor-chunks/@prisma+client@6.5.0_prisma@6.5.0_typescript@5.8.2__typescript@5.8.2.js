"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2";
exports.ids = ["vendor-chunks/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/.prisma/client/default.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/.prisma/client/default.js ***!
  \****************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = {\n    ...__webpack_require__(/*! . */ \"(ssr)/./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/.prisma/client/index.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHByaXNtYStjbGllbnRANi41LjBfcHJpc21hQDYuNS4wX3R5cGVzY3JpcHRANS44LjJfX3R5cGVzY3JpcHRANS44LjIvbm9kZV9tb2R1bGVzLy5wcmlzbWEvY2xpZW50L2RlZmF1bHQuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUc7SUFBRSxHQUFHQyxtQkFBT0EsQ0FBQyxnSkFBSTtBQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVtcC1uZXh0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BwcmlzbWErY2xpZW50QDYuNS4wX3ByaXNtYUA2LjUuMF90eXBlc2NyaXB0QDUuOC4yX190eXBlc2NyaXB0QDUuOC4yL25vZGVfbW9kdWxlcy8ucHJpc21hL2NsaWVudC9kZWZhdWx0LmpzPzBkM2YiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IC4uLnJlcXVpcmUoJy4nKSB9Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/.prisma/client/default.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/.prisma/client/index.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/.prisma/client/index.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst { PrismaClientKnownRequestError, PrismaClientUnknownRequestError, PrismaClientRustPanicError, PrismaClientInitializationError, PrismaClientValidationError, getPrismaClient, sqltag, empty, join, raw, skip, Decimal, Debug, objectEnumValues, makeStrictEnum, Extensions, warnOnce, defineDmmfProperty, Public, getRuntime, createParam } = __webpack_require__(/*! @prisma/client/runtime/library.js */ \"(ssr)/./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/@prisma/client/runtime/library.js\");\nconst Prisma = {};\nexports.Prisma = Prisma;\nexports.$Enums = {};\n/**\n * Prisma Client JS version: 6.5.0\n * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60\n */ Prisma.prismaVersion = {\n    client: \"6.5.0\",\n    engine: \"173f8d54f8d52e692c7e27e72a88314ec7aeff60\"\n};\nPrisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;\nPrisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;\nPrisma.PrismaClientRustPanicError = PrismaClientRustPanicError;\nPrisma.PrismaClientInitializationError = PrismaClientInitializationError;\nPrisma.PrismaClientValidationError = PrismaClientValidationError;\nPrisma.Decimal = Decimal;\n/**\n * Re-export of sql-template-tag\n */ Prisma.sql = sqltag;\nPrisma.empty = empty;\nPrisma.join = join;\nPrisma.raw = raw;\nPrisma.validator = Public.validator;\n/**\n* Extensions\n*/ Prisma.getExtensionContext = Extensions.getExtensionContext;\nPrisma.defineExtension = Extensions.defineExtension;\n/**\n * Shorthand utilities for JSON filtering\n */ Prisma.DbNull = objectEnumValues.instances.DbNull;\nPrisma.JsonNull = objectEnumValues.instances.JsonNull;\nPrisma.AnyNull = objectEnumValues.instances.AnyNull;\nPrisma.NullTypes = {\n    DbNull: objectEnumValues.classes.DbNull,\n    JsonNull: objectEnumValues.classes.JsonNull,\n    AnyNull: objectEnumValues.classes.AnyNull\n};\nconst path = __webpack_require__(/*! path */ \"path\");\n/**\n * Enums\n */ exports.Prisma.TransactionIsolationLevel = makeStrictEnum({\n    ReadUncommitted: \"ReadUncommitted\",\n    ReadCommitted: \"ReadCommitted\",\n    RepeatableRead: \"RepeatableRead\",\n    Serializable: \"Serializable\"\n});\nexports.Prisma.AppSettingsScalarFieldEnum = {\n    id: \"id\",\n    lunaryEnabled: \"lunaryEnabled\",\n    lunaryProjectId: \"lunaryProjectId\",\n    brandName: \"brandName\",\n    logoUrl: \"logoUrl\",\n    defaultPrimaryColor: \"defaultPrimaryColor\",\n    defaultWelcomeMessage: \"defaultWelcomeMessage\",\n    enableDebugMode: \"enableDebugMode\",\n    cacheTimeout: \"cacheTimeout\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.BotScalarFieldEnum = {\n    id: \"id\",\n    name: \"name\",\n    description: \"description\",\n    avatarUrl: \"avatarUrl\",\n    welcomeMessage: \"welcomeMessage\",\n    flowiseId: \"flowiseId\",\n    active: \"active\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.BotSettingsScalarFieldEnum = {\n    id: \"id\",\n    primaryColor: \"primaryColor\",\n    botBgColor: \"botBgColor\",\n    botTextColor: \"botTextColor\",\n    botAccentColor: \"botAccentColor\",\n    userBgColor: \"userBgColor\",\n    userTextColor: \"userTextColor\",\n    enableFeedback: \"enableFeedback\",\n    enableAnalytics: \"enableAnalytics\",\n    showSuggestions: \"showSuggestions\",\n    showCopyButton: \"showCopyButton\",\n    avatarUrl: \"avatarUrl\",\n    botId: \"botId\"\n};\nexports.Prisma.ConversationScalarFieldEnum = {\n    id: \"id\",\n    sessionId: \"sessionId\",\n    botId: \"botId\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.MessageScalarFieldEnum = {\n    id: \"id\",\n    content: \"content\",\n    role: \"role\",\n    conversationId: \"conversationId\",\n    createdAt: \"createdAt\"\n};\nexports.Prisma.SortOrder = {\n    asc: \"asc\",\n    desc: \"desc\"\n};\nexports.Prisma.QueryMode = {\n    default: \"default\",\n    insensitive: \"insensitive\"\n};\nexports.Prisma.NullsOrder = {\n    first: \"first\",\n    last: \"last\"\n};\nexports.Prisma.ModelName = {\n    AppSettings: \"AppSettings\",\n    Bot: \"Bot\",\n    BotSettings: \"BotSettings\",\n    Conversation: \"Conversation\",\n    Message: \"Message\"\n};\n/**\n * Create the Client\n */ const config = {\n    \"generator\": {\n        \"name\": \"client\",\n        \"provider\": {\n            \"fromEnvVar\": null,\n            \"value\": \"prisma-client-js\"\n        },\n        \"output\": {\n            \"value\": \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/@prisma/client\",\n            \"fromEnvVar\": null\n        },\n        \"config\": {\n            \"engineType\": \"library\"\n        },\n        \"binaryTargets\": [\n            {\n                \"fromEnvVar\": null,\n                \"value\": \"darwin-arm64\",\n                \"native\": true\n            }\n        ],\n        \"previewFeatures\": [],\n        \"sourceFilePath\": \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/prisma/schema.prisma\"\n    },\n    \"relativeEnvPaths\": {\n        \"rootEnvPath\": null,\n        \"schemaEnvPath\": \"../../../../../../.env\"\n    },\n    \"relativePath\": \"../../../../../../prisma\",\n    \"clientVersion\": \"6.5.0\",\n    \"engineVersion\": \"173f8d54f8d52e692c7e27e72a88314ec7aeff60\",\n    \"datasourceNames\": [\n        \"db\"\n    ],\n    \"activeProvider\": \"postgresql\",\n    \"inlineDatasources\": {\n        \"db\": {\n            \"url\": {\n                \"fromEnvVar\": \"DATABASE_URL\",\n                \"value\": null\n            }\n        }\n    },\n    \"inlineSchema\": '// This is your Prisma schema file,\\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\\n\\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\\n\\ngenerator client {\\n  provider = \"prisma-client-js\"\\n}\\n\\ndatasource db {\\n  provider = \"postgresql\"\\n  url      = env(\"DATABASE_URL\")\\n}\\n\\n// Globale Anwendungseinstellungen\\nmodel AppSettings {\\n  id                    String   @id @default(\"global\")\\n  // Analytics\\n  lunaryEnabled         Boolean  @default(false)\\n  lunaryProjectId       String?\\n  // Allgemeine UI-Einstellungen\\n  brandName             String   @default(\"Brandenburg Dialog\")\\n  logoUrl               String?\\n  defaultPrimaryColor   String   @default(\"#e63946\")\\n  // Nachrichten\\n  defaultWelcomeMessage String   @default(\"Willkommen! Wie kann ich Ihnen mit Informationen zur Stadtverwaltung Brandenburg an der Havel helfen?\")\\n  // Erweiterte Optionen\\n  enableDebugMode       Boolean  @default(false)\\n  cacheTimeout          Int      @default(3600) // In Sekunden\\n  updatedAt             DateTime @updatedAt\\n}\\n\\n// Bot-Modell f\\xfcr die Verwaltung verschiedener Chatbots\\nmodel Bot {\\n  id             String         @id @default(uuid())\\n  name           String\\n  description    String?\\n  avatarUrl      String?\\n  welcomeMessage String         @default(\"Willkommen! Wie kann ich Ihnen helfen?\")\\n  flowiseId      String // Flowise Chatflow ID\\n  active         Boolean        @default(true)\\n  createdAt      DateTime       @default(now())\\n  updatedAt      DateTime       @updatedAt\\n  settings       BotSettings?\\n  conversations  Conversation[]\\n}\\n\\n// Einstellungen f\\xfcr einen Bot\\nmodel BotSettings {\\n  id              String  @id @default(uuid())\\n  primaryColor    String  @default(\"#3b82f6\") // Standardfarbe (Blau)\\n  // Neue Farbeinstellungen\\n  botBgColor      String  @default(\"rgba(248, 250, 252, 0.8)\")\\n  botTextColor    String  @default(\"#000000\")\\n  botAccentColor  String  @default(\"#3b82f6\")\\n  userBgColor     String  @default(\"\")\\n  userTextColor   String  @default(\"#ffffff\")\\n  // Funktionsschalter\\n  enableFeedback  Boolean @default(true)\\n  enableAnalytics Boolean @default(true)\\n  showSuggestions Boolean @default(true)\\n  showCopyButton  Boolean @default(true)\\n  avatarUrl       String?\\n  botId           String  @unique\\n  bot             Bot     @relation(fields: [botId], references: [id], onDelete: Cascade)\\n}\\n\\n// Gespr\\xe4che mit Nutzern\\nmodel Conversation {\\n  id        String    @id @default(uuid())\\n  sessionId String    @unique\\n  botId     String\\n  bot       Bot       @relation(fields: [botId], references: [id])\\n  messages  Message[]\\n  createdAt DateTime  @default(now())\\n  updatedAt DateTime  @updatedAt\\n}\\n\\n// Nachrichten in einer Konversation\\nmodel Message {\\n  id             String       @id @default(uuid())\\n  content        String\\n  role           String // \"user\" oder \"assistant\"\\n  conversationId String\\n  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)\\n  createdAt      DateTime     @default(now())\\n}\\n',\n    \"inlineSchemaHash\": \"a8a8a113580eba2bfe83c83fb781b7e9b3d0819f542b9115edbe112e5be4edac\",\n    \"copyEngine\": true\n};\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconfig.dirname = __dirname;\nif (!fs.existsSync(path.join(__dirname, \"schema.prisma\"))) {\n    const alternativePaths = [\n        \"node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/.prisma/client\",\n        \".pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/.prisma/client\"\n    ];\n    const alternativePath = alternativePaths.find((altPath)=>{\n        return fs.existsSync(path.join(process.cwd(), altPath, \"schema.prisma\"));\n    }) ?? alternativePaths[0];\n    config.dirname = path.join(process.cwd(), alternativePath);\n    config.isBundled = true;\n}\nconfig.runtimeDataModel = JSON.parse('{\"models\":{\"AppSettings\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":\"global\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"lunaryEnabled\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"lunaryProjectId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"brandName\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":\"Brandenburg Dialog\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"logoUrl\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"defaultPrimaryColor\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":\"#e63946\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"defaultWelcomeMessage\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":\"Willkommen! Wie kann ich Ihnen mit Informationen zur Stadtverwaltung Brandenburg an der Havel helfen?\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"enableDebugMode\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"cacheTimeout\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":3600,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Bot\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"uuid\",\"args\":[4]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"description\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"avatarUrl\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"welcomeMessage\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":\"Willkommen! Wie kann ich Ihnen helfen?\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"flowiseId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"active\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":true,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"settings\",\"kind\":\"object\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"BotSettings\",\"nativeType\":null,\"relationName\":\"BotToBotSettings\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"conversations\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Conversation\",\"nativeType\":null,\"relationName\":\"BotToConversation\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"BotSettings\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"uuid\",\"args\":[4]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"primaryColor\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":\"#3b82f6\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"botBgColor\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":\"rgba(248, 250, 252, 0.8)\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"botTextColor\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":\"#000000\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"botAccentColor\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":\"#3b82f6\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"userBgColor\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":\"\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"userTextColor\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":\"#ffffff\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"enableFeedback\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":true,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"enableAnalytics\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":true,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"showSuggestions\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":true,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"showCopyButton\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":true,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"avatarUrl\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"botId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"bot\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Bot\",\"nativeType\":null,\"relationName\":\"BotToBotSettings\",\"relationFromFields\":[\"botId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Conversation\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"uuid\",\"args\":[4]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"botId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"bot\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Bot\",\"nativeType\":null,\"relationName\":\"BotToConversation\",\"relationFromFields\":[\"botId\"],\"relationToFields\":[\"id\"],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"messages\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Message\",\"nativeType\":null,\"relationName\":\"ConversationToMessage\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Message\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"uuid\",\"args\":[4]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"content\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"role\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"conversation\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Conversation\",\"nativeType\":null,\"relationName\":\"ConversationToMessage\",\"relationFromFields\":[\"conversationId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false}},\"enums\":{},\"types\":{}}');\ndefineDmmfProperty(exports.Prisma, config.runtimeDataModel);\nconfig.engineWasm = undefined;\nconfig.compilerWasm = undefined;\nconst { warnEnvConflicts } = __webpack_require__(/*! @prisma/client/runtime/library.js */ \"(ssr)/./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/@prisma/client/runtime/library.js\");\nwarnEnvConflicts({\n    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),\n    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath)\n});\nconst PrismaClient = getPrismaClient(config);\nexports.PrismaClient = PrismaClient;\nObject.assign(exports, Prisma);\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"libquery_engine-darwin-arm64.dylib.node\");\npath.join(process.cwd(), \"node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/.prisma/client/libquery_engine-darwin-arm64.dylib.node\");\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"schema.prisma\");\npath.join(process.cwd(), \"node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/.prisma/client/schema.prisma\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/.prisma/client/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/@prisma/client/default.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/@prisma/client/default.js ***!
  \****************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = {\n    ...__webpack_require__(/*! .prisma/client/default */ \"(ssr)/./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/.prisma/client/default.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHByaXNtYStjbGllbnRANi41LjBfcHJpc21hQDYuNS4wX3R5cGVzY3JpcHRANS44LjJfX3R5cGVzY3JpcHRANS44LjIvbm9kZV9tb2R1bGVzL0BwcmlzbWEvY2xpZW50L2RlZmF1bHQuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZixHQUFHQyxtQkFBT0EsQ0FBQyx1S0FBeUI7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZW1wLW5leHQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHByaXNtYStjbGllbnRANi41LjBfcHJpc21hQDYuNS4wX3R5cGVzY3JpcHRANS44LjJfX3R5cGVzY3JpcHRANS44LjIvbm9kZV9tb2R1bGVzL0BwcmlzbWEvY2xpZW50L2RlZmF1bHQuanM/YjNkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgLi4ucmVxdWlyZSgnLnByaXNtYS9jbGllbnQvZGVmYXVsdCcpLFxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/@prisma/client/default.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/@prisma/client/runtime/library.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/@prisma/client/runtime/library.js ***!
  \************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar mu = Object.create;\nvar Jt = Object.defineProperty;\nvar fu = Object.getOwnPropertyDescriptor;\nvar gu = Object.getOwnPropertyNames;\nvar hu = Object.getPrototypeOf, yu = Object.prototype.hasOwnProperty;\nvar Eu = (e, t, r)=>t in e ? Jt(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[t] = r;\nvar K = (e, t)=>()=>(t || e((t = {\n            exports: {}\n        }).exports, t), t.exports), Wt = (e, t)=>{\n    for(var r in t)Jt(e, r, {\n        get: t[r],\n        enumerable: !0\n    });\n}, Ao = (e, t, r, n)=>{\n    if (t && typeof t == \"object\" || typeof t == \"function\") for (let i of gu(t))!yu.call(e, i) && i !== r && Jt(e, i, {\n        get: ()=>t[i],\n        enumerable: !(n = fu(t, i)) || n.enumerable\n    });\n    return e;\n};\nvar D = (e, t, r)=>(r = e != null ? mu(hu(e)) : {}, Ao(t || !e || !e.__esModule ? Jt(r, \"default\", {\n        value: e,\n        enumerable: !0\n    }) : r, e)), bu = (e)=>Ao(Jt({}, \"__esModule\", {\n        value: !0\n    }), e);\nvar d = (e, t, r)=>Eu(e, typeof t != \"symbol\" ? t + \"\" : t, r);\nvar Zo = K((Kf, pi)=>{\n    \"use strict\";\n    var v = pi.exports;\n    pi.exports.default = v;\n    var N = \"\\x1b[\", Zt = \"\\x1b]\", gt = \"\\x07\", Kr = \";\", zo = process.env.TERM_PROGRAM === \"Apple_Terminal\";\n    v.cursorTo = (e, t)=>{\n        if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n        return typeof t != \"number\" ? N + (e + 1) + \"G\" : N + (t + 1) + \";\" + (e + 1) + \"H\";\n    };\n    v.cursorMove = (e, t)=>{\n        if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n        let r = \"\";\n        return e < 0 ? r += N + -e + \"D\" : e > 0 && (r += N + e + \"C\"), t < 0 ? r += N + -t + \"A\" : t > 0 && (r += N + t + \"B\"), r;\n    };\n    v.cursorUp = (e = 1)=>N + e + \"A\";\n    v.cursorDown = (e = 1)=>N + e + \"B\";\n    v.cursorForward = (e = 1)=>N + e + \"C\";\n    v.cursorBackward = (e = 1)=>N + e + \"D\";\n    v.cursorLeft = N + \"G\";\n    v.cursorSavePosition = zo ? \"\\x1b7\" : N + \"s\";\n    v.cursorRestorePosition = zo ? \"\\x1b8\" : N + \"u\";\n    v.cursorGetPosition = N + \"6n\";\n    v.cursorNextLine = N + \"E\";\n    v.cursorPrevLine = N + \"F\";\n    v.cursorHide = N + \"?25l\";\n    v.cursorShow = N + \"?25h\";\n    v.eraseLines = (e)=>{\n        let t = \"\";\n        for(let r = 0; r < e; r++)t += v.eraseLine + (r < e - 1 ? v.cursorUp() : \"\");\n        return e && (t += v.cursorLeft), t;\n    };\n    v.eraseEndLine = N + \"K\";\n    v.eraseStartLine = N + \"1K\";\n    v.eraseLine = N + \"2K\";\n    v.eraseDown = N + \"J\";\n    v.eraseUp = N + \"1J\";\n    v.eraseScreen = N + \"2J\";\n    v.scrollUp = N + \"S\";\n    v.scrollDown = N + \"T\";\n    v.clearScreen = \"\\x1bc\";\n    v.clearTerminal = process.platform === \"win32\" ? `${v.eraseScreen}${N}0f` : `${v.eraseScreen}${N}3J${N}H`;\n    v.beep = gt;\n    v.link = (e, t)=>[\n            Zt,\n            \"8\",\n            Kr,\n            Kr,\n            t,\n            gt,\n            e,\n            Zt,\n            \"8\",\n            Kr,\n            Kr,\n            gt\n        ].join(\"\");\n    v.image = (e, t = {})=>{\n        let r = `${Zt}1337;File=inline=1`;\n        return t.width && (r += `;width=${t.width}`), t.height && (r += `;height=${t.height}`), t.preserveAspectRatio === !1 && (r += \";preserveAspectRatio=0\"), r + \":\" + e.toString(\"base64\") + gt;\n    };\n    v.iTerm = {\n        setCwd: (e = process.cwd())=>`${Zt}50;CurrentDir=${e}${gt}`,\n        annotation: (e, t = {})=>{\n            let r = `${Zt}1337;`, n = typeof t.x < \"u\", i = typeof t.y < \"u\";\n            if ((n || i) && !(n && i && typeof t.length < \"u\")) throw new Error(\"`x`, `y` and `length` must be defined when `x` or `y` is defined\");\n            return e = e.replace(/\\|/g, \"\"), r += t.isHidden ? \"AddHiddenAnnotation=\" : \"AddAnnotation=\", t.length > 0 ? r += (n ? [\n                e,\n                t.length,\n                t.x,\n                t.y\n            ] : [\n                t.length,\n                e\n            ]).join(\"|\") : r += e, r + gt;\n        }\n    };\n});\nvar di = K((Yf, Xo)=>{\n    \"use strict\";\n    Xo.exports = (e, t = process.argv)=>{\n        let r = e.startsWith(\"-\") ? \"\" : e.length === 1 ? \"-\" : \"--\", n = t.indexOf(r + e), i = t.indexOf(\"--\");\n        return n !== -1 && (i === -1 || n < i);\n    };\n});\nvar rs = K((zf, ts)=>{\n    \"use strict\";\n    var ac = __webpack_require__(/*! os */ \"os\"), es = __webpack_require__(/*! tty */ \"tty\"), he = di(), { env: W } = process, We;\n    he(\"no-color\") || he(\"no-colors\") || he(\"color=false\") || he(\"color=never\") ? We = 0 : (he(\"color\") || he(\"colors\") || he(\"color=true\") || he(\"color=always\")) && (We = 1);\n    \"FORCE_COLOR\" in W && (W.FORCE_COLOR === \"true\" ? We = 1 : W.FORCE_COLOR === \"false\" ? We = 0 : We = W.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(W.FORCE_COLOR, 10), 3));\n    function mi(e) {\n        return e === 0 ? !1 : {\n            level: e,\n            hasBasic: !0,\n            has256: e >= 2,\n            has16m: e >= 3\n        };\n    }\n    function fi(e, t) {\n        if (We === 0) return 0;\n        if (he(\"color=16m\") || he(\"color=full\") || he(\"color=truecolor\")) return 3;\n        if (he(\"color=256\")) return 2;\n        if (e && !t && We === void 0) return 0;\n        let r = We || 0;\n        if (W.TERM === \"dumb\") return r;\n        if (process.platform === \"win32\") {\n            let n = ac.release().split(\".\");\n            return Number(n[0]) >= 10 && Number(n[2]) >= 10586 ? Number(n[2]) >= 14931 ? 3 : 2 : 1;\n        }\n        if (\"CI\" in W) return [\n            \"TRAVIS\",\n            \"CIRCLECI\",\n            \"APPVEYOR\",\n            \"GITLAB_CI\",\n            \"GITHUB_ACTIONS\",\n            \"BUILDKITE\"\n        ].some((n)=>n in W) || W.CI_NAME === \"codeship\" ? 1 : r;\n        if (\"TEAMCITY_VERSION\" in W) return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(W.TEAMCITY_VERSION) ? 1 : 0;\n        if (W.COLORTERM === \"truecolor\") return 3;\n        if (\"TERM_PROGRAM\" in W) {\n            let n = parseInt((W.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n            switch(W.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return n >= 3 ? 3 : 2;\n                case \"Apple_Terminal\":\n                    return 2;\n            }\n        }\n        return /-256(color)?$/i.test(W.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(W.TERM) || \"COLORTERM\" in W ? 1 : r;\n    }\n    function lc(e) {\n        let t = fi(e, e && e.isTTY);\n        return mi(t);\n    }\n    ts.exports = {\n        supportsColor: lc,\n        stdout: mi(fi(!0, es.isatty(1))),\n        stderr: mi(fi(!0, es.isatty(2)))\n    };\n});\nvar os = K((Zf, is)=>{\n    \"use strict\";\n    var uc = rs(), ht = di();\n    function ns(e) {\n        if (/^\\d{3,4}$/.test(e)) {\n            let r = /(\\d{1,2})(\\d{2})/.exec(e);\n            return {\n                major: 0,\n                minor: parseInt(r[1], 10),\n                patch: parseInt(r[2], 10)\n            };\n        }\n        let t = (e || \"\").split(\".\").map((r)=>parseInt(r, 10));\n        return {\n            major: t[0],\n            minor: t[1],\n            patch: t[2]\n        };\n    }\n    function gi(e) {\n        let { env: t } = process;\n        if (\"FORCE_HYPERLINK\" in t) return !(t.FORCE_HYPERLINK.length > 0 && parseInt(t.FORCE_HYPERLINK, 10) === 0);\n        if (ht(\"no-hyperlink\") || ht(\"no-hyperlinks\") || ht(\"hyperlink=false\") || ht(\"hyperlink=never\")) return !1;\n        if (ht(\"hyperlink=true\") || ht(\"hyperlink=always\") || \"NETLIFY\" in t) return !0;\n        if (!uc.supportsColor(e) || e && !e.isTTY || process.platform === \"win32\" || \"CI\" in t || \"TEAMCITY_VERSION\" in t) return !1;\n        if (\"TERM_PROGRAM\" in t) {\n            let r = ns(t.TERM_PROGRAM_VERSION);\n            switch(t.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return r.major === 3 ? r.minor >= 1 : r.major > 3;\n                case \"WezTerm\":\n                    return r.major >= 20200620;\n                case \"vscode\":\n                    return r.major > 1 || r.major === 1 && r.minor >= 72;\n            }\n        }\n        if (\"VTE_VERSION\" in t) {\n            if (t.VTE_VERSION === \"0.50.0\") return !1;\n            let r = ns(t.VTE_VERSION);\n            return r.major > 0 || r.minor >= 50;\n        }\n        return !1;\n    }\n    is.exports = {\n        supportsHyperlink: gi,\n        stdout: gi(process.stdout),\n        stderr: gi(process.stderr)\n    };\n});\nvar as = K((Xf, Xt)=>{\n    \"use strict\";\n    var cc = Zo(), hi = os(), ss = (e, t, { target: r = \"stdout\", ...n } = {})=>hi[r] ? cc.link(e, t) : n.fallback === !1 ? e : typeof n.fallback == \"function\" ? n.fallback(e, t) : `${e} (\\u200B${t}\\u200B)`;\n    Xt.exports = (e, t, r = {})=>ss(e, t, r);\n    Xt.exports.stderr = (e, t, r = {})=>ss(e, t, {\n            target: \"stderr\",\n            ...r\n        });\n    Xt.exports.isSupported = hi.stdout;\n    Xt.exports.stderr.isSupported = hi.stderr;\n});\nvar us = K((ug, pc)=>{\n    pc.exports = {\n        name: \"@prisma/internals\",\n        version: \"6.5.0\",\n        description: \"This package is intended for Prisma's internal use\",\n        main: \"dist/index.js\",\n        types: \"dist/index.d.ts\",\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/prisma.git\",\n            directory: \"packages/internals\"\n        },\n        homepage: \"https://www.prisma.io\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        bugs: \"https://github.com/prisma/prisma/issues\",\n        license: \"Apache-2.0\",\n        scripts: {\n            dev: \"DEV=true tsx helpers/build.ts\",\n            build: \"tsx helpers/build.ts\",\n            test: \"dotenv -e ../../.db.env -- jest --silent\",\n            prepublishOnly: \"pnpm run build\"\n        },\n        files: [\n            \"README.md\",\n            \"dist\",\n            \"!**/libquery_engine*\",\n            \"!dist/get-generators/engines/*\",\n            \"scripts\"\n        ],\n        devDependencies: {\n            \"@antfu/ni\": \"0.21.12\",\n            \"@babel/helper-validator-identifier\": \"7.25.9\",\n            \"@opentelemetry/api\": \"1.9.0\",\n            \"@swc/core\": \"1.11.5\",\n            \"@swc/jest\": \"0.2.37\",\n            \"@types/babel__helper-validator-identifier\": \"7.15.2\",\n            \"@types/jest\": \"29.5.14\",\n            \"@types/node\": \"18.19.76\",\n            \"@types/resolve\": \"1.20.6\",\n            archiver: \"6.0.2\",\n            \"checkpoint-client\": \"1.1.33\",\n            \"cli-truncate\": \"4.0.0\",\n            dotenv: \"16.4.7\",\n            esbuild: \"0.24.2\",\n            \"escape-string-regexp\": \"4.0.0\",\n            execa: \"5.1.1\",\n            \"fast-glob\": \"3.3.3\",\n            \"find-up\": \"7.0.0\",\n            \"fp-ts\": \"2.16.9\",\n            \"fs-extra\": \"11.3.0\",\n            \"fs-jetpack\": \"5.1.0\",\n            \"global-dirs\": \"4.0.0\",\n            globby: \"11.1.0\",\n            \"identifier-regex\": \"1.0.0\",\n            \"indent-string\": \"4.0.0\",\n            \"is-windows\": \"1.0.2\",\n            \"is-wsl\": \"3.1.0\",\n            jest: \"29.7.0\",\n            \"jest-junit\": \"16.0.0\",\n            kleur: \"4.1.5\",\n            \"mock-stdin\": \"1.0.0\",\n            \"new-github-issue-url\": \"0.2.1\",\n            \"node-fetch\": \"3.3.2\",\n            \"npm-packlist\": \"5.1.3\",\n            open: \"7.4.2\",\n            \"p-map\": \"4.0.0\",\n            \"read-package-up\": \"11.0.0\",\n            resolve: \"1.22.10\",\n            \"string-width\": \"4.2.3\",\n            \"strip-ansi\": \"6.0.1\",\n            \"strip-indent\": \"3.0.0\",\n            \"temp-dir\": \"2.0.0\",\n            tempy: \"1.0.1\",\n            \"terminal-link\": \"2.1.1\",\n            tmp: \"0.2.3\",\n            \"ts-node\": \"10.9.2\",\n            \"ts-pattern\": \"5.6.2\",\n            \"ts-toolbelt\": \"9.6.0\",\n            typescript: \"5.4.5\",\n            yarn: \"1.22.22\"\n        },\n        dependencies: {\n            \"@prisma/config\": \"workspace:*\",\n            \"@prisma/debug\": \"workspace:*\",\n            \"@prisma/engines\": \"workspace:*\",\n            \"@prisma/fetch-engine\": \"workspace:*\",\n            \"@prisma/generator-helper\": \"workspace:*\",\n            \"@prisma/get-platform\": \"workspace:*\",\n            \"@prisma/prisma-schema-wasm\": \"6.5.0-73.173f8d54f8d52e692c7e27e72a88314ec7aeff60\",\n            \"@prisma/schema-files-loader\": \"workspace:*\",\n            arg: \"5.0.2\",\n            prompts: \"2.4.2\"\n        },\n        peerDependencies: {\n            typescript: \">=5.1.0\"\n        },\n        peerDependenciesMeta: {\n            typescript: {\n                optional: !0\n            }\n        },\n        sideEffects: !1\n    };\n});\nvar bi = K((pg, mc)=>{\n    mc.exports = {\n        name: \"@prisma/engines-version\",\n        version: \"6.5.0-73.173f8d54f8d52e692c7e27e72a88314ec7aeff60\",\n        main: \"index.js\",\n        types: \"index.d.ts\",\n        license: \"Apache-2.0\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        prisma: {\n            enginesVersion: \"173f8d54f8d52e692c7e27e72a88314ec7aeff60\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/engines-wrapper.git\",\n            directory: \"packages/engines-version\"\n        },\n        devDependencies: {\n            \"@types/node\": \"18.19.76\",\n            typescript: \"4.9.5\"\n        },\n        files: [\n            \"index.js\",\n            \"index.d.ts\"\n        ],\n        scripts: {\n            build: \"tsc -d\"\n        }\n    };\n});\nvar wi = K((Yr)=>{\n    \"use strict\";\n    Object.defineProperty(Yr, \"__esModule\", {\n        value: !0\n    });\n    Yr.enginesVersion = void 0;\n    Yr.enginesVersion = bi().prisma.enginesVersion;\n});\nvar ds = K((kg, hc)=>{\n    hc.exports = {\n        name: \"dotenv\",\n        version: \"16.4.7\",\n        description: \"Loads environment variables from .env file\",\n        main: \"lib/main.js\",\n        types: \"lib/main.d.ts\",\n        exports: {\n            \".\": {\n                types: \"./lib/main.d.ts\",\n                require: \"./lib/main.js\",\n                default: \"./lib/main.js\"\n            },\n            \"./config\": \"./config.js\",\n            \"./config.js\": \"./config.js\",\n            \"./lib/env-options\": \"./lib/env-options.js\",\n            \"./lib/env-options.js\": \"./lib/env-options.js\",\n            \"./lib/cli-options\": \"./lib/cli-options.js\",\n            \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n            \"./package.json\": \"./package.json\"\n        },\n        scripts: {\n            \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n            lint: \"standard\",\n            pretest: \"npm run lint && npm run dts-check\",\n            test: \"tap run --allow-empty-coverage --disable-coverage --timeout=60000\",\n            \"test:coverage\": \"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov\",\n            prerelease: \"npm test\",\n            release: \"standard-version\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/motdotla/dotenv.git\"\n        },\n        funding: \"https://dotenvx.com\",\n        keywords: [\n            \"dotenv\",\n            \"env\",\n            \".env\",\n            \"environment\",\n            \"variables\",\n            \"config\",\n            \"settings\"\n        ],\n        readmeFilename: \"README.md\",\n        license: \"BSD-2-Clause\",\n        devDependencies: {\n            \"@types/node\": \"^18.11.3\",\n            decache: \"^4.6.2\",\n            sinon: \"^14.0.1\",\n            standard: \"^17.0.0\",\n            \"standard-version\": \"^9.5.0\",\n            tap: \"^19.2.0\",\n            typescript: \"^4.8.4\"\n        },\n        engines: {\n            node: \">=12\"\n        },\n        browser: {\n            fs: !1\n        }\n    };\n});\nvar hs = K((Og, Fe)=>{\n    \"use strict\";\n    var Ti = __webpack_require__(/*! fs */ \"fs\"), Ci = __webpack_require__(/*! path */ \"path\"), yc = __webpack_require__(/*! os */ \"os\"), Ec = __webpack_require__(/*! crypto */ \"crypto\"), bc = ds(), Ri = bc.version, wc = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n    function xc(e) {\n        let t = {}, r = e.toString();\n        r = r.replace(/\\r\\n?/mg, `\n`);\n        let n;\n        for(; (n = wc.exec(r)) != null;){\n            let i = n[1], o = n[2] || \"\";\n            o = o.trim();\n            let s = o[0];\n            o = o.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, \"$2\"), s === '\"' && (o = o.replace(/\\\\n/g, `\n`), o = o.replace(/\\\\r/g, \"\\r\")), t[i] = o;\n        }\n        return t;\n    }\n    function Pc(e) {\n        let t = gs(e), r = G.configDotenv({\n            path: t\n        });\n        if (!r.parsed) {\n            let s = new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);\n            throw s.code = \"MISSING_DATA\", s;\n        }\n        let n = fs(e).split(\",\"), i = n.length, o;\n        for(let s = 0; s < i; s++)try {\n            let a = n[s].trim(), l = Cc(r, a);\n            o = G.decrypt(l.ciphertext, l.key);\n            break;\n        } catch (a) {\n            if (s + 1 >= i) throw a;\n        }\n        return G.parse(o);\n    }\n    function vc(e) {\n        console.log(`[dotenv@${Ri}][INFO] ${e}`);\n    }\n    function Tc(e) {\n        console.log(`[dotenv@${Ri}][WARN] ${e}`);\n    }\n    function zr(e) {\n        console.log(`[dotenv@${Ri}][DEBUG] ${e}`);\n    }\n    function fs(e) {\n        return e && e.DOTENV_KEY && e.DOTENV_KEY.length > 0 ? e.DOTENV_KEY : process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0 ? process.env.DOTENV_KEY : \"\";\n    }\n    function Cc(e, t) {\n        let r;\n        try {\n            r = new URL(t);\n        } catch (a) {\n            if (a.code === \"ERR_INVALID_URL\") {\n                let l = new Error(\"INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development\");\n                throw l.code = \"INVALID_DOTENV_KEY\", l;\n            }\n            throw a;\n        }\n        let n = r.password;\n        if (!n) {\n            let a = new Error(\"INVALID_DOTENV_KEY: Missing key part\");\n            throw a.code = \"INVALID_DOTENV_KEY\", a;\n        }\n        let i = r.searchParams.get(\"environment\");\n        if (!i) {\n            let a = new Error(\"INVALID_DOTENV_KEY: Missing environment part\");\n            throw a.code = \"INVALID_DOTENV_KEY\", a;\n        }\n        let o = `DOTENV_VAULT_${i.toUpperCase()}`, s = e.parsed[o];\n        if (!s) {\n            let a = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${o} in your .env.vault file.`);\n            throw a.code = \"NOT_FOUND_DOTENV_ENVIRONMENT\", a;\n        }\n        return {\n            ciphertext: s,\n            key: n\n        };\n    }\n    function gs(e) {\n        let t = null;\n        if (e && e.path && e.path.length > 0) if (Array.isArray(e.path)) for (let r of e.path)Ti.existsSync(r) && (t = r.endsWith(\".vault\") ? r : `${r}.vault`);\n        else t = e.path.endsWith(\".vault\") ? e.path : `${e.path}.vault`;\n        else t = Ci.resolve(process.cwd(), \".env.vault\");\n        return Ti.existsSync(t) ? t : null;\n    }\n    function ms(e) {\n        return e[0] === \"~\" ? Ci.join(yc.homedir(), e.slice(1)) : e;\n    }\n    function Rc(e) {\n        vc(\"Loading env from encrypted .env.vault\");\n        let t = G._parseVault(e), r = process.env;\n        return e && e.processEnv != null && (r = e.processEnv), G.populate(r, t, e), {\n            parsed: t\n        };\n    }\n    function Sc(e) {\n        let t = Ci.resolve(process.cwd(), \".env\"), r = \"utf8\", n = !!(e && e.debug);\n        e && e.encoding ? r = e.encoding : n && zr(\"No encoding is specified. UTF-8 is used by default\");\n        let i = [\n            t\n        ];\n        if (e && e.path) if (!Array.isArray(e.path)) i = [\n            ms(e.path)\n        ];\n        else {\n            i = [];\n            for (let l of e.path)i.push(ms(l));\n        }\n        let o, s = {};\n        for (let l of i)try {\n            let u = G.parse(Ti.readFileSync(l, {\n                encoding: r\n            }));\n            G.populate(s, u, e);\n        } catch (u) {\n            n && zr(`Failed to load ${l} ${u.message}`), o = u;\n        }\n        let a = process.env;\n        return e && e.processEnv != null && (a = e.processEnv), G.populate(a, s, e), o ? {\n            parsed: s,\n            error: o\n        } : {\n            parsed: s\n        };\n    }\n    function Ac(e) {\n        if (fs(e).length === 0) return G.configDotenv(e);\n        let t = gs(e);\n        return t ? G._configVault(e) : (Tc(`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`), G.configDotenv(e));\n    }\n    function Ic(e, t) {\n        let r = Buffer.from(t.slice(-64), \"hex\"), n = Buffer.from(e, \"base64\"), i = n.subarray(0, 12), o = n.subarray(-16);\n        n = n.subarray(12, -16);\n        try {\n            let s = Ec.createDecipheriv(\"aes-256-gcm\", r, i);\n            return s.setAuthTag(o), `${s.update(n)}${s.final()}`;\n        } catch (s) {\n            let a = s instanceof RangeError, l = s.message === \"Invalid key length\", u = s.message === \"Unsupported state or unable to authenticate data\";\n            if (a || l) {\n                let c = new Error(\"INVALID_DOTENV_KEY: It must be 64 characters long (or more)\");\n                throw c.code = \"INVALID_DOTENV_KEY\", c;\n            } else if (u) {\n                let c = new Error(\"DECRYPTION_FAILED: Please check your DOTENV_KEY\");\n                throw c.code = \"DECRYPTION_FAILED\", c;\n            } else throw s;\n        }\n    }\n    function kc(e, t, r = {}) {\n        let n = !!(r && r.debug), i = !!(r && r.override);\n        if (typeof t != \"object\") {\n            let o = new Error(\"OBJECT_REQUIRED: Please check the processEnv argument being passed to populate\");\n            throw o.code = \"OBJECT_REQUIRED\", o;\n        }\n        for (let o of Object.keys(t))Object.prototype.hasOwnProperty.call(e, o) ? (i === !0 && (e[o] = t[o]), n && zr(i === !0 ? `\"${o}\" is already defined and WAS overwritten` : `\"${o}\" is already defined and was NOT overwritten`)) : e[o] = t[o];\n    }\n    var G = {\n        configDotenv: Sc,\n        _configVault: Rc,\n        _parseVault: Pc,\n        config: Ac,\n        decrypt: Ic,\n        parse: xc,\n        populate: kc\n    };\n    Fe.exports.configDotenv = G.configDotenv;\n    Fe.exports._configVault = G._configVault;\n    Fe.exports._parseVault = G._parseVault;\n    Fe.exports.config = G.config;\n    Fe.exports.decrypt = G.decrypt;\n    Fe.exports.parse = G.parse;\n    Fe.exports.populate = G.populate;\n    Fe.exports = G;\n});\nvar Ps = K(($g, xs)=>{\n    \"use strict\";\n    xs.exports = (e)=>{\n        let t = e.match(/^[ \\t]*(?=\\S)/gm);\n        return t ? t.reduce((r, n)=>Math.min(r, n.length), 1 / 0) : 0;\n    };\n});\nvar Ts = K((qg, vs)=>{\n    \"use strict\";\n    var Nc = Ps();\n    vs.exports = (e)=>{\n        let t = Nc(e);\n        if (t === 0) return e;\n        let r = new RegExp(`^[ \\\\t]{${t}}`, \"gm\");\n        return e.replace(r, \"\");\n    };\n});\nvar Oi = K((Jg, Rs)=>{\n    \"use strict\";\n    Rs.exports = (e, t = 1, r)=>{\n        if (r = {\n            indent: \" \",\n            includeEmptyLines: !1,\n            ...r\n        }, typeof e != \"string\") throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof e}\\``);\n        if (typeof t != \"number\") throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof t}\\``);\n        if (typeof r.indent != \"string\") throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof r.indent}\\``);\n        if (t === 0) return e;\n        let n = r.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n        return e.replace(n, r.indent.repeat(t));\n    };\n});\nvar ks = K((Kg, Is)=>{\n    \"use strict\";\n    Is.exports = ({ onlyFirst: e = !1 } = {})=>{\n        let t = [\n            \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n            \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"\n        ].join(\"|\");\n        return new RegExp(t, e ? void 0 : \"g\");\n    };\n});\nvar Li = K((Yg, Os)=>{\n    \"use strict\";\n    var Bc = ks();\n    Os.exports = (e)=>typeof e == \"string\" ? e.replace(Bc(), \"\") : e;\n});\nvar _s = K((Xg, tn)=>{\n    \"use strict\";\n    tn.exports = (e = {})=>{\n        let t;\n        if (e.repoUrl) t = e.repoUrl;\n        else if (e.user && e.repo) t = `https://github.com/${e.user}/${e.repo}`;\n        else throw new Error(\"You need to specify either the `repoUrl` option or both the `user` and `repo` options\");\n        let r = new URL(`${t}/issues/new`), n = [\n            \"body\",\n            \"title\",\n            \"labels\",\n            \"template\",\n            \"milestone\",\n            \"assignee\",\n            \"projects\"\n        ];\n        for (let i of n){\n            let o = e[i];\n            if (o !== void 0) {\n                if (i === \"labels\" || i === \"projects\") {\n                    if (!Array.isArray(o)) throw new TypeError(`The \\`${i}\\` option should be an array`);\n                    o = o.join(\",\");\n                }\n                r.searchParams.set(i, o);\n            }\n        }\n        return r.toString();\n    };\n    tn.exports.default = tn.exports;\n});\nvar Qi = K((hy, ea)=>{\n    \"use strict\";\n    ea.exports = function() {\n        function e(t, r, n, i, o) {\n            return t < r || n < r ? t > n ? n + 1 : t + 1 : i === o ? r : r + 1;\n        }\n        return function(t, r) {\n            if (t === r) return 0;\n            if (t.length > r.length) {\n                var n = t;\n                t = r, r = n;\n            }\n            for(var i = t.length, o = r.length; i > 0 && t.charCodeAt(i - 1) === r.charCodeAt(o - 1);)i--, o--;\n            for(var s = 0; s < i && t.charCodeAt(s) === r.charCodeAt(s);)s++;\n            if (i -= s, o -= s, i === 0 || o < 3) return o;\n            var a = 0, l, u, c, p, m, g, h, y, O, T, S, R, _ = [];\n            for(l = 0; l < i; l++)_.push(l + 1), _.push(t.charCodeAt(s + l));\n            for(var I = _.length - 1; a < o - 3;)for(O = r.charCodeAt(s + (u = a)), T = r.charCodeAt(s + (c = a + 1)), S = r.charCodeAt(s + (p = a + 2)), R = r.charCodeAt(s + (m = a + 3)), g = a += 4, l = 0; l < I; l += 2)h = _[l], y = _[l + 1], u = e(h, u, c, O, y), c = e(u, c, p, T, y), p = e(c, p, m, S, y), g = e(p, m, g, R, y), _[l] = g, m = p, p = c, c = u, u = h;\n            for(; a < o;)for(O = r.charCodeAt(s + (u = a)), g = ++a, l = 0; l < I; l += 2)h = _[l], _[l] = g = e(h, u, g, O, _[l + 1]), u = h;\n            return g;\n        };\n    }();\n});\nvar pf = {};\nWt(pf, {\n    Debug: ()=>ri,\n    Decimal: ()=>Ce,\n    Extensions: ()=>Kn,\n    MetricsClient: ()=>Dt,\n    PrismaClientInitializationError: ()=>C,\n    PrismaClientKnownRequestError: ()=>te,\n    PrismaClientRustPanicError: ()=>pe,\n    PrismaClientUnknownRequestError: ()=>U,\n    PrismaClientValidationError: ()=>re,\n    Public: ()=>Yn,\n    Sql: ()=>le,\n    createParam: ()=>xa,\n    defineDmmfProperty: ()=>Aa,\n    deserializeJsonResponse: ()=>Pt,\n    deserializeRawResult: ()=>Jn,\n    dmmfToRuntimeDataModel: ()=>Sa,\n    empty: ()=>Oa,\n    getPrismaClient: ()=>cu,\n    getRuntime: ()=>Fn,\n    join: ()=>ka,\n    makeStrictEnum: ()=>pu,\n    makeTypedQueryFactory: ()=>Ia,\n    objectEnumValues: ()=>Pn,\n    raw: ()=>Xi,\n    serializeJsonQuery: ()=>In,\n    skip: ()=>An,\n    sqltag: ()=>eo,\n    warnEnvConflicts: ()=>du,\n    warnOnce: ()=>or\n});\nmodule.exports = bu(pf);\nvar Kn = {};\nWt(Kn, {\n    defineExtension: ()=>Io,\n    getExtensionContext: ()=>ko\n});\nfunction Io(e) {\n    return typeof e == \"function\" ? e : (t)=>t.$extends(e);\n}\nfunction ko(e) {\n    return e;\n}\nvar Yn = {};\nWt(Yn, {\n    validator: ()=>Oo\n});\nfunction Oo(...e) {\n    return (t)=>t;\n}\nfunction zn(e) {\n    return e.name === \"DriverAdapterError\" && typeof e.cause == \"object\";\n}\nfunction qr(e) {\n    return {\n        ok: !0,\n        value: e,\n        map (t) {\n            return qr(t(e));\n        },\n        flatMap (t) {\n            return t(e);\n        }\n    };\n}\nfunction nt(e) {\n    return {\n        ok: !1,\n        error: e,\n        map () {\n            return nt(e);\n        },\n        flatMap () {\n            return nt(e);\n        }\n    };\n}\nvar Zn = class {\n    constructor(){\n        d(this, \"registeredErrors\", []);\n    }\n    consumeError(t) {\n        return this.registeredErrors[t];\n    }\n    registerNewError(t) {\n        let r = 0;\n        for(; this.registeredErrors[r] !== void 0;)r++;\n        return this.registeredErrors[r] = {\n            error: t\n        }, r;\n    }\n}, Xn = (e)=>{\n    let t = new Zn, r = me(t, e.transactionContext.bind(e)), n = {\n        adapterName: e.adapterName,\n        errorRegistry: t,\n        queryRaw: me(t, e.queryRaw.bind(e)),\n        executeRaw: me(t, e.executeRaw.bind(e)),\n        executeScript: me(t, e.executeScript.bind(e)),\n        dispose: me(t, e.dispose.bind(e)),\n        provider: e.provider,\n        transactionContext: async (...i)=>(await r(...i)).map((s)=>wu(t, s))\n    };\n    return e.getConnectionInfo && (n.getConnectionInfo = Pu(t, e.getConnectionInfo.bind(e))), n;\n}, wu = (e, t)=>{\n    let r = me(e, t.startTransaction.bind(t));\n    return {\n        adapterName: t.adapterName,\n        provider: t.provider,\n        queryRaw: me(e, t.queryRaw.bind(t)),\n        executeRaw: me(e, t.executeRaw.bind(t)),\n        startTransaction: async (...n)=>(await r(...n)).map((o)=>xu(e, o))\n    };\n}, xu = (e, t)=>({\n        adapterName: t.adapterName,\n        provider: t.provider,\n        options: t.options,\n        queryRaw: me(e, t.queryRaw.bind(t)),\n        executeRaw: me(e, t.executeRaw.bind(t)),\n        commit: me(e, t.commit.bind(t)),\n        rollback: me(e, t.rollback.bind(t))\n    });\nfunction me(e, t) {\n    return async (...r)=>{\n        try {\n            return qr(await t(...r));\n        } catch (n) {\n            if (zn(n)) return nt(n.cause);\n            let i = e.registerNewError(n);\n            return nt({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nfunction Pu(e, t) {\n    return (...r)=>{\n        try {\n            return qr(t(...r));\n        } catch (n) {\n            if (zn(n)) return nt(n.cause);\n            let i = e.registerNewError(n);\n            return nt({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nvar Vr = {};\nWt(Vr, {\n    $: ()=>Fo,\n    bgBlack: ()=>_u,\n    bgBlue: ()=>Fu,\n    bgCyan: ()=>$u,\n    bgGreen: ()=>Nu,\n    bgMagenta: ()=>Mu,\n    bgRed: ()=>Du,\n    bgWhite: ()=>qu,\n    bgYellow: ()=>Lu,\n    black: ()=>Au,\n    blue: ()=>it,\n    bold: ()=>Y,\n    cyan: ()=>Ne,\n    dim: ()=>_e,\n    gray: ()=>Ht,\n    green: ()=>je,\n    grey: ()=>Ou,\n    hidden: ()=>Ru,\n    inverse: ()=>Cu,\n    italic: ()=>Tu,\n    magenta: ()=>Iu,\n    red: ()=>fe,\n    reset: ()=>vu,\n    strikethrough: ()=>Su,\n    underline: ()=>ee,\n    white: ()=>ku,\n    yellow: ()=>De\n});\nvar ei, _o, Do, No, Lo = !0;\ntypeof process < \"u\" && ({ FORCE_COLOR: ei, NODE_DISABLE_COLORS: _o, NO_COLOR: Do, TERM: No } = process.env || {}, Lo = process.stdout && process.stdout.isTTY);\nvar Fo = {\n    enabled: !_o && Do == null && No !== \"dumb\" && (ei != null && ei !== \"0\" || Lo)\n};\nfunction q(e, t) {\n    let r = new RegExp(`\\\\x1b\\\\[${t}m`, \"g\"), n = `\\x1B[${e}m`, i = `\\x1B[${t}m`;\n    return function(o) {\n        return !Fo.enabled || o == null ? o : n + (~(\"\" + o).indexOf(i) ? o.replace(r, i + n) : o) + i;\n    };\n}\nvar vu = q(0, 0), Y = q(1, 22), _e = q(2, 22), Tu = q(3, 23), ee = q(4, 24), Cu = q(7, 27), Ru = q(8, 28), Su = q(9, 29), Au = q(30, 39), fe = q(31, 39), je = q(32, 39), De = q(33, 39), it = q(34, 39), Iu = q(35, 39), Ne = q(36, 39), ku = q(37, 39), Ht = q(90, 39), Ou = q(90, 39), _u = q(40, 49), Du = q(41, 49), Nu = q(42, 49), Lu = q(43, 49), Fu = q(44, 49), Mu = q(45, 49), $u = q(46, 49), qu = q(47, 49);\nvar Vu = 100, Mo = [\n    \"green\",\n    \"yellow\",\n    \"blue\",\n    \"magenta\",\n    \"cyan\",\n    \"red\"\n], Kt = [], $o = Date.now(), ju = 0, ti = typeof process < \"u\" ? process.env : {};\nglobalThis.DEBUG ??= ti.DEBUG ?? \"\";\nglobalThis.DEBUG_COLORS ??= ti.DEBUG_COLORS ? ti.DEBUG_COLORS === \"true\" : !0;\nvar Yt = {\n    enable (e) {\n        typeof e == \"string\" && (globalThis.DEBUG = e);\n    },\n    disable () {\n        let e = globalThis.DEBUG;\n        return globalThis.DEBUG = \"\", e;\n    },\n    enabled (e) {\n        let t = globalThis.DEBUG.split(\",\").map((i)=>i.replace(/[.+?^${}()|[\\]\\\\]/g, \"\\\\$&\")), r = t.some((i)=>i === \"\" || i[0] === \"-\" ? !1 : e.match(RegExp(i.split(\"*\").join(\".*\") + \"$\"))), n = t.some((i)=>i === \"\" || i[0] !== \"-\" ? !1 : e.match(RegExp(i.slice(1).split(\"*\").join(\".*\") + \"$\")));\n        return r && !n;\n    },\n    log: (...e)=>{\n        let [t, r, ...n] = e;\n        (console.warn ?? console.log)(`${t} ${r}`, ...n);\n    },\n    formatters: {}\n};\nfunction Bu(e) {\n    let t = {\n        color: Mo[ju++ % Mo.length],\n        enabled: Yt.enabled(e),\n        namespace: e,\n        log: Yt.log,\n        extend: ()=>{}\n    }, r = (...n)=>{\n        let { enabled: i, namespace: o, color: s, log: a } = t;\n        if (n.length !== 0 && Kt.push([\n            o,\n            ...n\n        ]), Kt.length > Vu && Kt.shift(), Yt.enabled(o) || i) {\n            let l = n.map((c)=>typeof c == \"string\" ? c : Uu(c)), u = `+${Date.now() - $o}ms`;\n            $o = Date.now(), globalThis.DEBUG_COLORS ? a(Vr[s](Y(o)), ...l, Vr[s](u)) : a(o, ...l, u);\n        }\n    };\n    return new Proxy(r, {\n        get: (n, i)=>t[i],\n        set: (n, i, o)=>t[i] = o\n    });\n}\nvar ri = new Proxy(Bu, {\n    get: (e, t)=>Yt[t],\n    set: (e, t, r)=>Yt[t] = r\n});\nfunction Uu(e, t = 2) {\n    let r = new Set;\n    return JSON.stringify(e, (n, i)=>{\n        if (typeof i == \"object\" && i !== null) {\n            if (r.has(i)) return \"[Circular *]\";\n            r.add(i);\n        } else if (typeof i == \"bigint\") return i.toString();\n        return i;\n    }, t);\n}\nfunction qo(e = 7500) {\n    let t = Kt.map(([r, ...n])=>`${r} ${n.map((i)=>typeof i == \"string\" ? i : JSON.stringify(i)).join(\" \")}`).join(`\n`);\n    return t.length < e ? t : t.slice(-e);\n}\nfunction Vo() {\n    Kt.length = 0;\n}\nvar M = ri;\nvar jo = D(__webpack_require__(/*! fs */ \"fs\"));\nfunction ni() {\n    let e = process.env.PRISMA_QUERY_ENGINE_LIBRARY;\n    if (!(e && jo.default.existsSync(e)) && process.arch === \"ia32\") throw new Error('The default query engine type (Node-API, \"library\") is currently not supported for 32bit Node. Please set `engineType = \"binary\"` in the \"generator\" block of your \"schema.prisma\" file (or use the environment variables \"PRISMA_CLIENT_ENGINE_TYPE=binary\" and/or \"PRISMA_CLI_QUERY_ENGINE_TYPE=binary\".)');\n}\nvar ii = [\n    \"darwin\",\n    \"darwin-arm64\",\n    \"debian-openssl-1.0.x\",\n    \"debian-openssl-1.1.x\",\n    \"debian-openssl-3.0.x\",\n    \"rhel-openssl-1.0.x\",\n    \"rhel-openssl-1.1.x\",\n    \"rhel-openssl-3.0.x\",\n    \"linux-arm64-openssl-1.1.x\",\n    \"linux-arm64-openssl-1.0.x\",\n    \"linux-arm64-openssl-3.0.x\",\n    \"linux-arm-openssl-1.1.x\",\n    \"linux-arm-openssl-1.0.x\",\n    \"linux-arm-openssl-3.0.x\",\n    \"linux-musl\",\n    \"linux-musl-openssl-3.0.x\",\n    \"linux-musl-arm64-openssl-1.1.x\",\n    \"linux-musl-arm64-openssl-3.0.x\",\n    \"linux-nixos\",\n    \"linux-static-x64\",\n    \"linux-static-arm64\",\n    \"windows\",\n    \"freebsd11\",\n    \"freebsd12\",\n    \"freebsd13\",\n    \"freebsd14\",\n    \"freebsd15\",\n    \"openbsd\",\n    \"netbsd\",\n    \"arm\"\n];\nvar jr = \"libquery_engine\";\nfunction Br(e, t) {\n    let r = t === \"url\";\n    return e.includes(\"windows\") ? r ? \"query_engine.dll.node\" : `query_engine-${e}.dll.node` : e.includes(\"darwin\") ? r ? `${jr}.dylib.node` : `${jr}-${e}.dylib.node` : r ? `${jr}.so.node` : `${jr}-${e}.so.node`;\n}\nvar Go = D(__webpack_require__(/*! child_process */ \"child_process\")), ui = D(__webpack_require__(/*! fs/promises */ \"fs/promises\")), Wr = D(__webpack_require__(/*! os */ \"os\"));\nvar Le = Symbol.for(\"@ts-pattern/matcher\"), Qu = Symbol.for(\"@ts-pattern/isVariadic\"), Qr = \"@ts-pattern/anonymous-select-key\", oi = (e)=>!!(e && typeof e == \"object\"), Ur = (e)=>e && !!e[Le], Pe = (e, t, r)=>{\n    if (Ur(e)) {\n        let n = e[Le](), { matched: i, selections: o } = n.match(t);\n        return i && o && Object.keys(o).forEach((s)=>r(s, o[s])), i;\n    }\n    if (oi(e)) {\n        if (!oi(t)) return !1;\n        if (Array.isArray(e)) {\n            if (!Array.isArray(t)) return !1;\n            let n = [], i = [], o = [];\n            for (let s of e.keys()){\n                let a = e[s];\n                Ur(a) && a[Qu] ? o.push(a) : o.length ? i.push(a) : n.push(a);\n            }\n            if (o.length) {\n                if (o.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (t.length < n.length + i.length) return !1;\n                let s = t.slice(0, n.length), a = i.length === 0 ? [] : t.slice(-i.length), l = t.slice(n.length, i.length === 0 ? 1 / 0 : -i.length);\n                return n.every((u, c)=>Pe(u, s[c], r)) && i.every((u, c)=>Pe(u, a[c], r)) && (o.length === 0 || Pe(o[0], l, r));\n            }\n            return e.length === t.length && e.every((s, a)=>Pe(s, t[a], r));\n        }\n        return Reflect.ownKeys(e).every((n)=>{\n            let i = e[n];\n            return (n in t || Ur(o = i) && o[Le]().matcherType === \"optional\") && Pe(i, t[n], r);\n            var o;\n        });\n    }\n    return Object.is(t, e);\n}, Je = (e)=>{\n    var t, r, n;\n    return oi(e) ? Ur(e) ? (t = (r = (n = e[Le]()).getSelectionKeys) == null ? void 0 : r.call(n)) != null ? t : [] : Array.isArray(e) ? zt(e, Je) : zt(Object.values(e), Je) : [];\n}, zt = (e, t)=>e.reduce((r, n)=>r.concat(t(n)), []);\nfunction ge(e) {\n    return Object.assign(e, {\n        optional: ()=>Gu(e),\n        and: (t)=>B(e, t),\n        or: (t)=>Ju(e, t),\n        select: (t)=>t === void 0 ? Bo(e) : Bo(t, e)\n    });\n}\nfunction Gu(e) {\n    return ge({\n        [Le]: ()=>({\n                match: (t)=>{\n                    let r = {}, n = (i, o)=>{\n                        r[i] = o;\n                    };\n                    return t === void 0 ? (Je(e).forEach((i)=>n(i, void 0)), {\n                        matched: !0,\n                        selections: r\n                    }) : {\n                        matched: Pe(e, t, n),\n                        selections: r\n                    };\n                },\n                getSelectionKeys: ()=>Je(e),\n                matcherType: \"optional\"\n            })\n    });\n}\nfunction B(...e) {\n    return ge({\n        [Le]: ()=>({\n                match: (t)=>{\n                    let r = {}, n = (i, o)=>{\n                        r[i] = o;\n                    };\n                    return {\n                        matched: e.every((i)=>Pe(i, t, n)),\n                        selections: r\n                    };\n                },\n                getSelectionKeys: ()=>zt(e, Je),\n                matcherType: \"and\"\n            })\n    });\n}\nfunction Ju(...e) {\n    return ge({\n        [Le]: ()=>({\n                match: (t)=>{\n                    let r = {}, n = (i, o)=>{\n                        r[i] = o;\n                    };\n                    return zt(e, Je).forEach((i)=>n(i, void 0)), {\n                        matched: e.some((i)=>Pe(i, t, n)),\n                        selections: r\n                    };\n                },\n                getSelectionKeys: ()=>zt(e, Je),\n                matcherType: \"or\"\n            })\n    });\n}\nfunction k(e) {\n    return {\n        [Le]: ()=>({\n                match: (t)=>({\n                        matched: !!e(t)\n                    })\n            })\n    };\n}\nfunction Bo(...e) {\n    let t = typeof e[0] == \"string\" ? e[0] : void 0, r = e.length === 2 ? e[1] : typeof e[0] == \"string\" ? void 0 : e[0];\n    return ge({\n        [Le]: ()=>({\n                match: (n)=>{\n                    let i = {\n                        [t ?? Qr]: n\n                    };\n                    return {\n                        matched: r === void 0 || Pe(r, n, (o, s)=>{\n                            i[o] = s;\n                        }),\n                        selections: i\n                    };\n                },\n                getSelectionKeys: ()=>[\n                        t ?? Qr\n                    ].concat(r === void 0 ? [] : Je(r))\n            })\n    });\n}\nfunction we(e) {\n    return typeof e == \"number\";\n}\nfunction Be(e) {\n    return typeof e == \"string\";\n}\nfunction Ue(e) {\n    return typeof e == \"bigint\";\n}\nvar Nf = ge(k(function(e) {\n    return !0;\n}));\nvar Qe = (e)=>Object.assign(ge(e), {\n        startsWith: (t)=>{\n            return Qe(B(e, (r = t, k((n)=>Be(n) && n.startsWith(r)))));\n            var r;\n        },\n        endsWith: (t)=>{\n            return Qe(B(e, (r = t, k((n)=>Be(n) && n.endsWith(r)))));\n            var r;\n        },\n        minLength: (t)=>Qe(B(e, ((r)=>k((n)=>Be(n) && n.length >= r))(t))),\n        length: (t)=>Qe(B(e, ((r)=>k((n)=>Be(n) && n.length === r))(t))),\n        maxLength: (t)=>Qe(B(e, ((r)=>k((n)=>Be(n) && n.length <= r))(t))),\n        includes: (t)=>{\n            return Qe(B(e, (r = t, k((n)=>Be(n) && n.includes(r)))));\n            var r;\n        },\n        regex: (t)=>{\n            return Qe(B(e, (r = t, k((n)=>Be(n) && !!n.match(r)))));\n            var r;\n        }\n    }), Lf = Qe(k(Be)), xe = (e)=>Object.assign(ge(e), {\n        between: (t, r)=>xe(B(e, ((n, i)=>k((o)=>we(o) && n <= o && i >= o))(t, r))),\n        lt: (t)=>xe(B(e, ((r)=>k((n)=>we(n) && n < r))(t))),\n        gt: (t)=>xe(B(e, ((r)=>k((n)=>we(n) && n > r))(t))),\n        lte: (t)=>xe(B(e, ((r)=>k((n)=>we(n) && n <= r))(t))),\n        gte: (t)=>xe(B(e, ((r)=>k((n)=>we(n) && n >= r))(t))),\n        int: ()=>xe(B(e, k((t)=>we(t) && Number.isInteger(t)))),\n        finite: ()=>xe(B(e, k((t)=>we(t) && Number.isFinite(t)))),\n        positive: ()=>xe(B(e, k((t)=>we(t) && t > 0))),\n        negative: ()=>xe(B(e, k((t)=>we(t) && t < 0)))\n    }), Ff = xe(k(we)), Ge = (e)=>Object.assign(ge(e), {\n        between: (t, r)=>Ge(B(e, ((n, i)=>k((o)=>Ue(o) && n <= o && i >= o))(t, r))),\n        lt: (t)=>Ge(B(e, ((r)=>k((n)=>Ue(n) && n < r))(t))),\n        gt: (t)=>Ge(B(e, ((r)=>k((n)=>Ue(n) && n > r))(t))),\n        lte: (t)=>Ge(B(e, ((r)=>k((n)=>Ue(n) && n <= r))(t))),\n        gte: (t)=>Ge(B(e, ((r)=>k((n)=>Ue(n) && n >= r))(t))),\n        positive: ()=>Ge(B(e, k((t)=>Ue(t) && t > 0))),\n        negative: ()=>Ge(B(e, k((t)=>Ue(t) && t < 0)))\n    }), Mf = Ge(k(Ue)), $f = ge(k(function(e) {\n    return typeof e == \"boolean\";\n})), qf = ge(k(function(e) {\n    return typeof e == \"symbol\";\n})), Vf = ge(k(function(e) {\n    return e == null;\n})), jf = ge(k(function(e) {\n    return e != null;\n}));\nvar si = class extends Error {\n    constructor(t){\n        let r;\n        try {\n            r = JSON.stringify(t);\n        } catch  {\n            r = t;\n        }\n        super(`Pattern matching error: no pattern matches value ${r}`), this.input = void 0, this.input = t;\n    }\n}, ai = {\n    matched: !1,\n    value: void 0\n};\nfunction ft(e) {\n    return new li(e, ai);\n}\nvar li = class e {\n    constructor(t, r){\n        this.input = void 0, this.state = void 0, this.input = t, this.state = r;\n    }\n    with(...t) {\n        if (this.state.matched) return this;\n        let r = t[t.length - 1], n = [\n            t[0]\n        ], i;\n        t.length === 3 && typeof t[1] == \"function\" ? i = t[1] : t.length > 2 && n.push(...t.slice(1, t.length - 1));\n        let o = !1, s = {}, a = (u, c)=>{\n            o = !0, s[u] = c;\n        }, l = !n.some((u)=>Pe(u, this.input, a)) || i && !i(this.input) ? ai : {\n            matched: !0,\n            value: r(o ? Qr in s ? s[Qr] : s : this.input, this.input)\n        };\n        return new e(this.input, l);\n    }\n    when(t, r) {\n        if (this.state.matched) return this;\n        let n = !!t(this.input);\n        return new e(this.input, n ? {\n            matched: !0,\n            value: r(this.input, this.input)\n        } : ai);\n    }\n    otherwise(t) {\n        return this.state.matched ? this.state.value : t(this.input);\n    }\n    exhaustive() {\n        if (this.state.matched) return this.state.value;\n        throw new si(this.input);\n    }\n    run() {\n        return this.exhaustive();\n    }\n    returnType() {\n        return this;\n    }\n};\nvar Jo = __webpack_require__(/*! util */ \"util\");\nvar Wu = {\n    warn: De(\"prisma:warn\")\n}, Hu = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction Gr(e, ...t) {\n    Hu.warn() && console.warn(`${Wu.warn} ${e}`, ...t);\n}\nvar Ku = (0, Jo.promisify)(Go.default.exec), ie = M(\"prisma:get-platform\"), Yu = [\n    \"1.0.x\",\n    \"1.1.x\",\n    \"3.0.x\"\n];\nasync function Wo() {\n    let e = Wr.default.platform(), t = process.arch;\n    if (e === \"freebsd\") {\n        let s = await Hr(\"freebsd-version\");\n        if (s && s.trim().length > 0) {\n            let l = /^(\\d+)\\.?/.exec(s);\n            if (l) return {\n                platform: \"freebsd\",\n                targetDistro: `freebsd${l[1]}`,\n                arch: t\n            };\n        }\n    }\n    if (e !== \"linux\") return {\n        platform: e,\n        arch: t\n    };\n    let r = await Zu(), n = await sc(), i = ec({\n        arch: t,\n        archFromUname: n,\n        familyDistro: r.familyDistro\n    }), { libssl: o } = await tc(i);\n    return {\n        platform: \"linux\",\n        libssl: o,\n        arch: t,\n        archFromUname: n,\n        ...r\n    };\n}\nfunction zu(e) {\n    let t = /^ID=\"?([^\"\\n]*)\"?$/im, r = /^ID_LIKE=\"?([^\"\\n]*)\"?$/im, n = t.exec(e), i = n && n[1] && n[1].toLowerCase() || \"\", o = r.exec(e), s = o && o[1] && o[1].toLowerCase() || \"\", a = ft({\n        id: i,\n        idLike: s\n    }).with({\n        id: \"alpine\"\n    }, ({ id: l })=>({\n            targetDistro: \"musl\",\n            familyDistro: l,\n            originalDistro: l\n        })).with({\n        id: \"raspbian\"\n    }, ({ id: l })=>({\n            targetDistro: \"arm\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"nixos\"\n    }, ({ id: l })=>({\n            targetDistro: \"nixos\",\n            originalDistro: l,\n            familyDistro: \"nixos\"\n        })).with({\n        id: \"debian\"\n    }, {\n        id: \"ubuntu\"\n    }, ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"rhel\"\n    }, {\n        id: \"centos\"\n    }, {\n        id: \"fedora\"\n    }, ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"debian\") || l.includes(\"ubuntu\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).when(({ idLike: l })=>i === \"arch\" || l.includes(\"arch\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"arch\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"centos\") || l.includes(\"fedora\") || l.includes(\"rhel\") || l.includes(\"suse\"), ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).otherwise(({ id: l })=>({\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: l\n        }));\n    return ie(`Found distro info:\n${JSON.stringify(a, null, 2)}`), a;\n}\nasync function Zu() {\n    let e = \"/etc/os-release\";\n    try {\n        let t = await ui.default.readFile(e, {\n            encoding: \"utf-8\"\n        });\n        return zu(t);\n    } catch  {\n        return {\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: void 0\n        };\n    }\n}\nfunction Xu(e) {\n    let t = /^OpenSSL\\s(\\d+\\.\\d+)\\.\\d+/.exec(e);\n    if (t) {\n        let r = `${t[1]}.x`;\n        return Ho(r);\n    }\n}\nfunction Uo(e) {\n    let t = /libssl\\.so\\.(\\d)(\\.\\d)?/.exec(e);\n    if (t) {\n        let r = `${t[1]}${t[2] ?? \".0\"}.x`;\n        return Ho(r);\n    }\n}\nfunction Ho(e) {\n    let t = (()=>{\n        if (Yo(e)) return e;\n        let r = e.split(\".\");\n        return r[1] = \"0\", r.join(\".\");\n    })();\n    if (Yu.includes(t)) return t;\n}\nfunction ec(e) {\n    return ft(e).with({\n        familyDistro: \"musl\"\n    }, ()=>(ie('Trying platform-specific paths for \"alpine\"'), [\n            \"/lib\",\n            \"/usr/lib\"\n        ])).with({\n        familyDistro: \"debian\"\n    }, ({ archFromUname: t })=>(ie('Trying platform-specific paths for \"debian\" (and \"ubuntu\")'), [\n            `/usr/lib/${t}-linux-gnu`,\n            `/lib/${t}-linux-gnu`\n        ])).with({\n        familyDistro: \"rhel\"\n    }, ()=>(ie('Trying platform-specific paths for \"rhel\"'), [\n            \"/lib64\",\n            \"/usr/lib64\"\n        ])).otherwise(({ familyDistro: t, arch: r, archFromUname: n })=>(ie(`Don't know any platform-specific paths for \"${t}\" on ${r} (${n})`), []));\n}\nasync function tc(e) {\n    let t = 'grep -v \"libssl.so.0\"', r = await Qo(e);\n    if (r) {\n        ie(`Found libssl.so file using platform-specific paths: ${r}`);\n        let o = Uo(r);\n        if (ie(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"libssl-specific-path\"\n        };\n    }\n    ie('Falling back to \"ldconfig\" and other generic paths');\n    let n = await Hr(`ldconfig -p | sed \"s/.*=>s*//\" | sed \"s|.*/||\" | grep libssl | sort | ${t}`);\n    if (n || (n = await Qo([\n        \"/lib64\",\n        \"/usr/lib64\",\n        \"/lib\",\n        \"/usr/lib\"\n    ])), n) {\n        ie(`Found libssl.so file using \"ldconfig\" or other generic paths: ${n}`);\n        let o = Uo(n);\n        if (ie(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"ldconfig\"\n        };\n    }\n    let i = await Hr(\"openssl version -v\");\n    if (i) {\n        ie(`Found openssl binary with version: ${i}`);\n        let o = Xu(i);\n        if (ie(`The parsed openssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"openssl-binary\"\n        };\n    }\n    return ie(\"Couldn't find any version of libssl or OpenSSL in the system\"), {};\n}\nasync function Qo(e) {\n    for (let t of e){\n        let r = await rc(t);\n        if (r) return r;\n    }\n}\nasync function rc(e) {\n    try {\n        return (await ui.default.readdir(e)).find((r)=>r.startsWith(\"libssl.so.\") && !r.startsWith(\"libssl.so.0\"));\n    } catch (t) {\n        if (t.code === \"ENOENT\") return;\n        throw t;\n    }\n}\nasync function ot() {\n    let { binaryTarget: e } = await Ko();\n    return e;\n}\nfunction nc(e) {\n    return e.binaryTarget !== void 0;\n}\nasync function ci() {\n    let { memoized: e, ...t } = await Ko();\n    return t;\n}\nvar Jr = {};\nasync function Ko() {\n    if (nc(Jr)) return Promise.resolve({\n        ...Jr,\n        memoized: !0\n    });\n    let e = await Wo(), t = ic(e);\n    return Jr = {\n        ...e,\n        binaryTarget: t\n    }, {\n        ...Jr,\n        memoized: !1\n    };\n}\nfunction ic(e) {\n    let { platform: t, arch: r, archFromUname: n, libssl: i, targetDistro: o, familyDistro: s, originalDistro: a } = e;\n    t === \"linux\" && ![\n        \"x64\",\n        \"arm64\"\n    ].includes(r) && Gr(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures (detected \"${r}\" instead). If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture \"${n}\".`);\n    let l = \"1.1.x\";\n    if (t === \"linux\" && i === void 0) {\n        let c = ft({\n            familyDistro: s\n        }).with({\n            familyDistro: \"debian\"\n        }, ()=>\"Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.\").otherwise(()=>\"Please manually install OpenSSL and try installing Prisma again.\");\n        Gr(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to \"openssl-${l}\".\n${c}`);\n    }\n    let u = \"debian\";\n    if (t === \"linux\" && o === void 0 && ie(`Distro is \"${a}\". Falling back to Prisma engines built for \"${u}\".`), t === \"darwin\" && r === \"arm64\") return \"darwin-arm64\";\n    if (t === \"darwin\") return \"darwin\";\n    if (t === \"win32\") return \"windows\";\n    if (t === \"freebsd\") return o;\n    if (t === \"openbsd\") return \"openbsd\";\n    if (t === \"netbsd\") return \"netbsd\";\n    if (t === \"linux\" && o === \"nixos\") return \"linux-nixos\";\n    if (t === \"linux\" && r === \"arm64\") return `${o === \"musl\" ? \"linux-musl-arm64\" : \"linux-arm64\"}-openssl-${i || l}`;\n    if (t === \"linux\" && r === \"arm\") return `linux-arm-openssl-${i || l}`;\n    if (t === \"linux\" && o === \"musl\") {\n        let c = \"linux-musl\";\n        return !i || Yo(i) ? c : `${c}-openssl-${i}`;\n    }\n    return t === \"linux\" && o && i ? `${o}-openssl-${i}` : (t !== \"linux\" && Gr(`Prisma detected unknown OS \"${t}\" and may not work as expected. Defaulting to \"linux\".`), i ? `${u}-openssl-${i}` : o ? `${o}-openssl-${l}` : `${u}-openssl-${l}`);\n}\nasync function oc(e) {\n    try {\n        return await e();\n    } catch  {\n        return;\n    }\n}\nfunction Hr(e) {\n    return oc(async ()=>{\n        let t = await Ku(e);\n        return ie(`Command \"${e}\" successfully returned \"${t.stdout}\"`), t.stdout;\n    });\n}\nasync function sc() {\n    return typeof Wr.default.machine == \"function\" ? Wr.default.machine() : (await Hr(\"uname -m\"))?.trim();\n}\nfunction Yo(e) {\n    return e.startsWith(\"1.\");\n}\nvar ls = D(as());\nfunction yi(e) {\n    return (0, ls.default)(e, e, {\n        fallback: ee\n    });\n}\nvar dc = us(), Ei = dc.version;\nvar fc = D(wi());\nvar V = D(__webpack_require__(/*! path */ \"path\")), gc = D(wi()), xg = M(\"prisma:engines\");\nfunction cs() {\n    return V.default.join(__dirname, \"../\");\n}\nvar Pg = \"libquery-engine\";\nV.default.join(__dirname, \"../query-engine-darwin\");\nV.default.join(__dirname, \"../query-engine-darwin-arm64\");\nV.default.join(__dirname, \"../query-engine-debian-openssl-1.0.x\");\nV.default.join(__dirname, \"../query-engine-debian-openssl-1.1.x\");\nV.default.join(__dirname, \"../query-engine-debian-openssl-3.0.x\");\nV.default.join(__dirname, \"../query-engine-linux-static-x64\");\nV.default.join(__dirname, \"../query-engine-linux-static-arm64\");\nV.default.join(__dirname, \"../query-engine-rhel-openssl-1.0.x\");\nV.default.join(__dirname, \"../query-engine-rhel-openssl-1.1.x\");\nV.default.join(__dirname, \"../query-engine-rhel-openssl-3.0.x\");\nV.default.join(__dirname, \"../libquery_engine-darwin.dylib.node\");\nV.default.join(__dirname, \"../libquery_engine-darwin-arm64.dylib.node\");\nV.default.join(__dirname, \"../libquery_engine-debian-openssl-1.0.x.so.node\");\nV.default.join(__dirname, \"../libquery_engine-debian-openssl-1.1.x.so.node\");\nV.default.join(__dirname, \"../libquery_engine-debian-openssl-3.0.x.so.node\");\nV.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.0.x.so.node\");\nV.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.1.x.so.node\");\nV.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-3.0.x.so.node\");\nV.default.join(__dirname, \"../libquery_engine-linux-musl.so.node\");\nV.default.join(__dirname, \"../libquery_engine-linux-musl-openssl-3.0.x.so.node\");\nV.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.0.x.so.node\");\nV.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.1.x.so.node\");\nV.default.join(__dirname, \"../libquery_engine-rhel-openssl-3.0.x.so.node\");\nV.default.join(__dirname, \"../query_engine-windows.dll.node\");\nvar xi = D(__webpack_require__(/*! fs */ \"fs\")), ps = M(\"chmodPlusX\");\nfunction Pi(e) {\n    if (process.platform === \"win32\") return;\n    let t = xi.default.statSync(e), r = t.mode | 64 | 8 | 1;\n    if (t.mode === r) {\n        ps(`Execution permissions of ${e} are fine`);\n        return;\n    }\n    let n = r.toString(8).slice(-3);\n    ps(`Have to call chmodPlusX on ${e}`), xi.default.chmodSync(e, n);\n}\nfunction vi(e) {\n    let t = e.e, r = (a)=>`Prisma cannot find the required \\`${a}\\` system library in your system`, n = t.message.includes(\"cannot open shared object file\"), i = `Please refer to the documentation about Prisma's system requirements: ${yi(\"https://pris.ly/d/system-requirements\")}`, o = `Unable to require(\\`${_e(e.id)}\\`).`, s = ft({\n        message: t.message,\n        code: t.code\n    }).with({\n        code: \"ENOENT\"\n    }, ()=>\"File does not exist.\").when(({ message: a })=>n && a.includes(\"libz\"), ()=>`${r(\"libz\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libgcc_s\"), ()=>`${r(\"libgcc_s\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libssl\"), ()=>{\n        let a = e.platformInfo.libssl ? `openssl-${e.platformInfo.libssl}` : \"openssl\";\n        return `${r(\"libssl\")}. Please install ${a} and try again.`;\n    }).when(({ message: a })=>a.includes(\"GLIBC\"), ()=>`Prisma has detected an incompatible version of the \\`glibc\\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i}`).when(({ message: a })=>e.platformInfo.platform === \"linux\" && a.includes(\"symbol not found\"), ()=>`The Prisma engines are not compatible with your system ${e.platformInfo.originalDistro} on (${e.platformInfo.archFromUname}) which uses the \\`${e.platformInfo.binaryTarget}\\` binaryTarget by default. ${i}`).otherwise(()=>`The Prisma engines do not seem to be compatible with your system. ${i}`);\n    return `${o}\n${s}\n\nDetails: ${t.message}`;\n}\nvar Ai = D(hs()), Zr = D(__webpack_require__(/*! fs */ \"fs\"));\nvar yt = D(__webpack_require__(/*! path */ \"path\"));\nfunction ys(e) {\n    let t = e.ignoreProcessEnv ? {} : process.env, r = (n)=>n.match(/(.?\\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(o, s) {\n            let a = /(.?)\\${([a-zA-Z0-9_]+)?}/g.exec(s);\n            if (!a) return o;\n            let l = a[1], u, c;\n            if (l === \"\\\\\") c = a[0], u = c.replace(\"\\\\$\", \"$\");\n            else {\n                let p = a[2];\n                c = a[0].substring(l.length), u = Object.hasOwnProperty.call(t, p) ? t[p] : e.parsed[p] || \"\", u = r(u);\n            }\n            return o.replace(c, u);\n        }, n) ?? n;\n    for(let n in e.parsed){\n        let i = Object.hasOwnProperty.call(t, n) ? t[n] : e.parsed[n];\n        e.parsed[n] = r(i);\n    }\n    for(let n in e.parsed)t[n] = e.parsed[n];\n    return e;\n}\nvar Si = M(\"prisma:tryLoadEnv\");\nfunction er({ rootEnvPath: e, schemaEnvPath: t }, r = {\n    conflictCheck: \"none\"\n}) {\n    let n = Es(e);\n    r.conflictCheck !== \"none\" && Oc(n, t, r.conflictCheck);\n    let i = null;\n    return bs(n?.path, t) || (i = Es(t)), !n && !i && Si(\"No Environment variables loaded\"), i?.dotenvResult.error ? console.error(fe(Y(\"Schema Env Error: \")) + i.dotenvResult.error) : {\n        message: [\n            n?.message,\n            i?.message\n        ].filter(Boolean).join(`\n`),\n        parsed: {\n            ...n?.dotenvResult?.parsed,\n            ...i?.dotenvResult?.parsed\n        }\n    };\n}\nfunction Oc(e, t, r) {\n    let n = e?.dotenvResult.parsed, i = !bs(e?.path, t);\n    if (n && t && i && Zr.default.existsSync(t)) {\n        let o = Ai.default.parse(Zr.default.readFileSync(t)), s = [];\n        for(let a in o)n[a] === o[a] && s.push(a);\n        if (s.length > 0) {\n            let a = yt.default.relative(process.cwd(), e.path), l = yt.default.relative(process.cwd(), t);\n            if (r === \"error\") {\n                let u = `There is a conflict between env var${s.length > 1 ? \"s\" : \"\"} in ${ee(a)} and ${ee(l)}\nConflicting env vars:\n${s.map((c)=>`  ${Y(c)}`).join(`\n`)}\n\nWe suggest to move the contents of ${ee(l)} to ${ee(a)} to consolidate your env vars.\n`;\n                throw new Error(u);\n            } else if (r === \"warn\") {\n                let u = `Conflict for env var${s.length > 1 ? \"s\" : \"\"} ${s.map((c)=>Y(c)).join(\", \")} in ${ee(a)} and ${ee(l)}\nEnv vars from ${ee(l)} overwrite the ones from ${ee(a)}\n      `;\n                console.warn(`${De(\"warn(prisma)\")} ${u}`);\n            }\n        }\n    }\n}\nfunction Es(e) {\n    if (_c(e)) {\n        Si(`Environment variables loaded from ${e}`);\n        let t = Ai.default.config({\n            path: e,\n            debug: process.env.DOTENV_CONFIG_DEBUG ? !0 : void 0\n        });\n        return {\n            dotenvResult: ys(t),\n            message: _e(`Environment variables loaded from ${yt.default.relative(process.cwd(), e)}`),\n            path: e\n        };\n    } else Si(`Environment variables not found at ${e}`);\n    return null;\n}\nfunction bs(e, t) {\n    return e && t && yt.default.resolve(e) === yt.default.resolve(t);\n}\nfunction _c(e) {\n    return !!(e && Zr.default.existsSync(e));\n}\nvar ws = \"library\";\nfunction Et(e) {\n    let t = Dc();\n    return t || (e?.config.engineType === \"library\" ? \"library\" : e?.config.engineType === \"binary\" ? \"binary\" : e?.config.engineType === \"client\" ? \"client\" : ws);\n}\nfunction Dc() {\n    let e = process.env.PRISMA_CLIENT_ENGINE_TYPE;\n    return e === \"library\" ? \"library\" : e === \"binary\" ? \"binary\" : e === \"client\" ? \"client\" : void 0;\n}\nvar Cs = \"prisma+postgres\", Xr = `${Cs}:`;\nfunction Ii(e) {\n    return e?.startsWith(`${Xr}//`) ?? !1;\n}\nvar tr;\n((t)=>{\n    let e;\n    ((I)=>(I.findUnique = \"findUnique\", I.findUniqueOrThrow = \"findUniqueOrThrow\", I.findFirst = \"findFirst\", I.findFirstOrThrow = \"findFirstOrThrow\", I.findMany = \"findMany\", I.create = \"create\", I.createMany = \"createMany\", I.createManyAndReturn = \"createManyAndReturn\", I.update = \"update\", I.updateMany = \"updateMany\", I.updateManyAndReturn = \"updateManyAndReturn\", I.upsert = \"upsert\", I.delete = \"delete\", I.deleteMany = \"deleteMany\", I.groupBy = \"groupBy\", I.count = \"count\", I.aggregate = \"aggregate\", I.findRaw = \"findRaw\", I.aggregateRaw = \"aggregateRaw\"))(e = t.ModelAction ||= {});\n})(tr ||= {});\nvar rr = D(__webpack_require__(/*! path */ \"path\"));\nfunction ki(e) {\n    return rr.default.sep === rr.default.posix.sep ? e : e.split(rr.default.sep).join(rr.default.posix.sep);\n}\nvar Ss = D(Oi());\nfunction Di(e) {\n    return String(new _i(e));\n}\nvar _i = class {\n    constructor(t){\n        this.config = t;\n    }\n    toString() {\n        let { config: t } = this, r = t.provider.fromEnvVar ? `env(\"${t.provider.fromEnvVar}\")` : t.provider.value, n = JSON.parse(JSON.stringify({\n            provider: r,\n            binaryTargets: Lc(t.binaryTargets)\n        }));\n        return `generator ${t.name} {\n${(0, Ss.default)(Fc(n), 2)}\n}`;\n    }\n};\nfunction Lc(e) {\n    let t;\n    if (e.length > 0) {\n        let r = e.find((n)=>n.fromEnvVar !== null);\n        r ? t = `env(\"${r.fromEnvVar}\")` : t = e.map((n)=>n.native ? \"native\" : n.value);\n    } else t = void 0;\n    return t;\n}\nfunction Fc(e) {\n    let t = Object.keys(e).reduce((r, n)=>Math.max(r, n.length), 0);\n    return Object.entries(e).map(([r, n])=>`${r.padEnd(t)} = ${Mc(n)}`).join(`\n`);\n}\nfunction Mc(e) {\n    return JSON.parse(JSON.stringify(e, (t, r)=>Array.isArray(r) ? `[${r.map((n)=>JSON.stringify(n)).join(\", \")}]` : JSON.stringify(r)));\n}\nvar ir = {};\nWt(ir, {\n    error: ()=>Vc,\n    info: ()=>qc,\n    log: ()=>$c,\n    query: ()=>jc,\n    should: ()=>As,\n    tags: ()=>nr,\n    warn: ()=>Ni\n});\nvar nr = {\n    error: fe(\"prisma:error\"),\n    warn: De(\"prisma:warn\"),\n    info: Ne(\"prisma:info\"),\n    query: it(\"prisma:query\")\n}, As = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction $c(...e) {\n    console.log(...e);\n}\nfunction Ni(e, ...t) {\n    As.warn() && console.warn(`${nr.warn} ${e}`, ...t);\n}\nfunction qc(e, ...t) {\n    console.info(`${nr.info} ${e}`, ...t);\n}\nfunction Vc(e, ...t) {\n    console.error(`${nr.error} ${e}`, ...t);\n}\nfunction jc(e, ...t) {\n    console.log(`${nr.query} ${e}`, ...t);\n}\nfunction en(e, t) {\n    if (!e) throw new Error(`${t}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`);\n}\nfunction Me(e, t) {\n    throw new Error(t);\n}\nfunction Fi(e, t) {\n    return Object.prototype.hasOwnProperty.call(e, t);\n}\nvar Mi = (e, t)=>e.reduce((r, n)=>(r[t(n)] = n, r), {});\nfunction bt(e, t) {\n    let r = {};\n    for (let n of Object.keys(e))r[n] = t(e[n], n);\n    return r;\n}\nfunction $i(e, t) {\n    if (e.length === 0) return;\n    let r = e[0];\n    for(let n = 1; n < e.length; n++)t(r, e[n]) < 0 && (r = e[n]);\n    return r;\n}\nfunction x(e, t) {\n    Object.defineProperty(e, \"name\", {\n        value: t,\n        configurable: !0\n    });\n}\nvar Ds = new Set, or = (e, t, ...r)=>{\n    Ds.has(e) || (Ds.add(e), Ni(t, ...r));\n};\nvar C = class e extends Error {\n    constructor(r, n, i){\n        super(r);\n        d(this, \"clientVersion\");\n        d(this, \"errorCode\");\n        d(this, \"retryable\");\n        this.name = \"PrismaClientInitializationError\", this.clientVersion = n, this.errorCode = i, Error.captureStackTrace(e);\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientInitializationError\";\n    }\n};\nx(C, \"PrismaClientInitializationError\");\nvar te = class extends Error {\n    constructor(r, { code: n, clientVersion: i, meta: o, batchRequestIdx: s }){\n        super(r);\n        d(this, \"code\");\n        d(this, \"meta\");\n        d(this, \"clientVersion\");\n        d(this, \"batchRequestIdx\");\n        this.name = \"PrismaClientKnownRequestError\", this.code = n, this.clientVersion = i, this.meta = o, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: s,\n            enumerable: !1,\n            writable: !0\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientKnownRequestError\";\n    }\n};\nx(te, \"PrismaClientKnownRequestError\");\nvar pe = class extends Error {\n    constructor(r, n){\n        super(r);\n        d(this, \"clientVersion\");\n        this.name = \"PrismaClientRustPanicError\", this.clientVersion = n;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientRustPanicError\";\n    }\n};\nx(pe, \"PrismaClientRustPanicError\");\nvar U = class extends Error {\n    constructor(r, { clientVersion: n, batchRequestIdx: i }){\n        super(r);\n        d(this, \"clientVersion\");\n        d(this, \"batchRequestIdx\");\n        this.name = \"PrismaClientUnknownRequestError\", this.clientVersion = n, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: i,\n            writable: !0,\n            enumerable: !1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientUnknownRequestError\";\n    }\n};\nx(U, \"PrismaClientUnknownRequestError\");\nvar re = class extends Error {\n    constructor(r, { clientVersion: n }){\n        super(r);\n        d(this, \"name\", \"PrismaClientValidationError\");\n        d(this, \"clientVersion\");\n        this.clientVersion = n;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientValidationError\";\n    }\n};\nx(re, \"PrismaClientValidationError\");\nvar wt = 9e15, ze = 1e9, qi = \"0123456789abcdef\", sn = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", an = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", Vi = {\n    precision: 20,\n    rounding: 4,\n    modulo: 1,\n    toExpNeg: -7,\n    toExpPos: 21,\n    minE: -wt,\n    maxE: wt,\n    crypto: !1\n}, Ms, $e, w = !0, un = \"[DecimalError] \", Ye = un + \"Invalid argument: \", $s = un + \"Precision limit exceeded\", qs = un + \"crypto unavailable\", Vs = \"[object Decimal]\", ne = Math.floor, J = Math.pow, Uc = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, Qc = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, Gc = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, js = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, ye = 1e7, b = 7, Jc = 9007199254740991, Wc = sn.length - 1, ji = an.length - 1, f = {\n    toStringTag: Vs\n};\nf.absoluteValue = f.abs = function() {\n    var e = new this.constructor(this);\n    return e.s < 0 && (e.s = 1), E(e);\n};\nf.ceil = function() {\n    return E(new this.constructor(this), this.e + 1, 2);\n};\nf.clampedTo = f.clamp = function(e, t) {\n    var r, n = this, i = n.constructor;\n    if (e = new i(e), t = new i(t), !e.s || !t.s) return new i(NaN);\n    if (e.gt(t)) throw Error(Ye + t);\n    return r = n.cmp(e), r < 0 ? e : n.cmp(t) > 0 ? t : new i(n);\n};\nf.comparedTo = f.cmp = function(e) {\n    var t, r, n, i, o = this, s = o.d, a = (e = new o.constructor(e)).d, l = o.s, u = e.s;\n    if (!s || !a) return !l || !u ? NaN : l !== u ? l : s === a ? 0 : !s ^ l < 0 ? 1 : -1;\n    if (!s[0] || !a[0]) return s[0] ? l : a[0] ? -u : 0;\n    if (l !== u) return l;\n    if (o.e !== e.e) return o.e > e.e ^ l < 0 ? 1 : -1;\n    for(n = s.length, i = a.length, t = 0, r = n < i ? n : i; t < r; ++t)if (s[t] !== a[t]) return s[t] > a[t] ^ l < 0 ? 1 : -1;\n    return n === i ? 0 : n > i ^ l < 0 ? 1 : -1;\n};\nf.cosine = f.cos = function() {\n    var e, t, r = this, n = r.constructor;\n    return r.d ? r.d[0] ? (e = n.precision, t = n.rounding, n.precision = e + Math.max(r.e, r.sd()) + b, n.rounding = 1, r = Hc(n, Js(n, r)), n.precision = e, n.rounding = t, E($e == 2 || $e == 3 ? r.neg() : r, e, t, !0)) : new n(1) : new n(NaN);\n};\nf.cubeRoot = f.cbrt = function() {\n    var e, t, r, n, i, o, s, a, l, u, c = this, p = c.constructor;\n    if (!c.isFinite() || c.isZero()) return new p(c);\n    for(w = !1, o = c.s * J(c.s * c, 1 / 3), !o || Math.abs(o) == 1 / 0 ? (r = z(c.d), e = c.e, (o = (e - r.length + 1) % 3) && (r += o == 1 || o == -2 ? \"0\" : \"00\"), o = J(r, 1 / 3), e = ne((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2)), o == 1 / 0 ? r = \"5e\" + e : (r = o.toExponential(), r = r.slice(0, r.indexOf(\"e\") + 1) + e), n = new p(r), n.s = c.s) : n = new p(o.toString()), s = (e = p.precision) + 3;;)if (a = n, l = a.times(a).times(a), u = l.plus(c), n = $(u.plus(c).times(a), u.plus(l), s + 2, 1), z(a.d).slice(0, s) === (r = z(n.d)).slice(0, s)) if (r = r.slice(s - 3, s + 1), r == \"9999\" || !i && r == \"4999\") {\n        if (!i && (E(a, e + 1, 0), a.times(a).times(a).eq(c))) {\n            n = a;\n            break;\n        }\n        s += 4, i = 1;\n    } else {\n        (!+r || !+r.slice(1) && r.charAt(0) == \"5\") && (E(n, e + 1, 1), t = !n.times(n).times(n).eq(c));\n        break;\n    }\n    return w = !0, E(n, e, p.rounding, t);\n};\nf.decimalPlaces = f.dp = function() {\n    var e, t = this.d, r = NaN;\n    if (t) {\n        if (e = t.length - 1, r = (e - ne(this.e / b)) * b, e = t[e], e) for(; e % 10 == 0; e /= 10)r--;\n        r < 0 && (r = 0);\n    }\n    return r;\n};\nf.dividedBy = f.div = function(e) {\n    return $(this, new this.constructor(e));\n};\nf.dividedToIntegerBy = f.divToInt = function(e) {\n    var t = this, r = t.constructor;\n    return E($(t, new r(e), 0, 1, 1), r.precision, r.rounding);\n};\nf.equals = f.eq = function(e) {\n    return this.cmp(e) === 0;\n};\nf.floor = function() {\n    return E(new this.constructor(this), this.e + 1, 3);\n};\nf.greaterThan = f.gt = function(e) {\n    return this.cmp(e) > 0;\n};\nf.greaterThanOrEqualTo = f.gte = function(e) {\n    var t = this.cmp(e);\n    return t == 1 || t === 0;\n};\nf.hyperbolicCosine = f.cosh = function() {\n    var e, t, r, n, i, o = this, s = o.constructor, a = new s(1);\n    if (!o.isFinite()) return new s(o.s ? 1 / 0 : NaN);\n    if (o.isZero()) return a;\n    r = s.precision, n = s.rounding, s.precision = r + Math.max(o.e, o.sd()) + 4, s.rounding = 1, i = o.d.length, i < 32 ? (e = Math.ceil(i / 3), t = (1 / pn(4, e)).toString()) : (e = 16, t = \"2.3283064365386962890625e-10\"), o = xt(s, 1, o.times(t), new s(1), !0);\n    for(var l, u = e, c = new s(8); u--;)l = o.times(o), o = a.minus(l.times(c.minus(l.times(c))));\n    return E(o, s.precision = r, s.rounding = n, !0);\n};\nf.hyperbolicSine = f.sinh = function() {\n    var e, t, r, n, i = this, o = i.constructor;\n    if (!i.isFinite() || i.isZero()) return new o(i);\n    if (t = o.precision, r = o.rounding, o.precision = t + Math.max(i.e, i.sd()) + 4, o.rounding = 1, n = i.d.length, n < 3) i = xt(o, 2, i, i, !0);\n    else {\n        e = 1.4 * Math.sqrt(n), e = e > 16 ? 16 : e | 0, i = i.times(1 / pn(5, e)), i = xt(o, 2, i, i, !0);\n        for(var s, a = new o(5), l = new o(16), u = new o(20); e--;)s = i.times(i), i = i.times(a.plus(s.times(l.times(s).plus(u))));\n    }\n    return o.precision = t, o.rounding = r, E(i, t, r, !0);\n};\nf.hyperbolicTangent = f.tanh = function() {\n    var e, t, r = this, n = r.constructor;\n    return r.isFinite() ? r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + 7, n.rounding = 1, $(r.sinh(), r.cosh(), n.precision = e, n.rounding = t)) : new n(r.s);\n};\nf.inverseCosine = f.acos = function() {\n    var e = this, t = e.constructor, r = e.abs().cmp(1), n = t.precision, i = t.rounding;\n    return r !== -1 ? r === 0 ? e.isNeg() ? ve(t, n, i) : new t(0) : new t(NaN) : e.isZero() ? ve(t, n + 4, i).times(.5) : (t.precision = n + 6, t.rounding = 1, e = new t(1).minus(e).div(e.plus(1)).sqrt().atan(), t.precision = n, t.rounding = i, e.times(2));\n};\nf.inverseHyperbolicCosine = f.acosh = function() {\n    var e, t, r = this, n = r.constructor;\n    return r.lte(1) ? new n(r.eq(1) ? 0 : NaN) : r.isFinite() ? (e = n.precision, t = n.rounding, n.precision = e + Math.max(Math.abs(r.e), r.sd()) + 4, n.rounding = 1, w = !1, r = r.times(r).minus(1).sqrt().plus(r), w = !0, n.precision = e, n.rounding = t, r.ln()) : new n(r);\n};\nf.inverseHyperbolicSine = f.asinh = function() {\n    var e, t, r = this, n = r.constructor;\n    return !r.isFinite() || r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + 2 * Math.max(Math.abs(r.e), r.sd()) + 6, n.rounding = 1, w = !1, r = r.times(r).plus(1).sqrt().plus(r), w = !0, n.precision = e, n.rounding = t, r.ln());\n};\nf.inverseHyperbolicTangent = f.atanh = function() {\n    var e, t, r, n, i = this, o = i.constructor;\n    return i.isFinite() ? i.e >= 0 ? new o(i.abs().eq(1) ? i.s / 0 : i.isZero() ? i : NaN) : (e = o.precision, t = o.rounding, n = i.sd(), Math.max(n, e) < 2 * -i.e - 1 ? E(new o(i), e, t, !0) : (o.precision = r = n - i.e, i = $(i.plus(1), new o(1).minus(i), r + e, 1), o.precision = e + 4, o.rounding = 1, i = i.ln(), o.precision = e, o.rounding = t, i.times(.5))) : new o(NaN);\n};\nf.inverseSine = f.asin = function() {\n    var e, t, r, n, i = this, o = i.constructor;\n    return i.isZero() ? new o(i) : (t = i.abs().cmp(1), r = o.precision, n = o.rounding, t !== -1 ? t === 0 ? (e = ve(o, r + 4, n).times(.5), e.s = i.s, e) : new o(NaN) : (o.precision = r + 6, o.rounding = 1, i = i.div(new o(1).minus(i.times(i)).sqrt().plus(1)).atan(), o.precision = r, o.rounding = n, i.times(2)));\n};\nf.inverseTangent = f.atan = function() {\n    var e, t, r, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, m = c.rounding;\n    if (u.isFinite()) {\n        if (u.isZero()) return new c(u);\n        if (u.abs().eq(1) && p + 4 <= ji) return s = ve(c, p + 4, m).times(.25), s.s = u.s, s;\n    } else {\n        if (!u.s) return new c(NaN);\n        if (p + 4 <= ji) return s = ve(c, p + 4, m).times(.5), s.s = u.s, s;\n    }\n    for(c.precision = a = p + 10, c.rounding = 1, r = Math.min(28, a / b + 2 | 0), e = r; e; --e)u = u.div(u.times(u).plus(1).sqrt().plus(1));\n    for(w = !1, t = Math.ceil(a / b), n = 1, l = u.times(u), s = new c(u), i = u; e !== -1;)if (i = i.times(l), o = s.minus(i.div(n += 2)), i = i.times(l), s = o.plus(i.div(n += 2)), s.d[t] !== void 0) for(e = t; s.d[e] === o.d[e] && e--;);\n    return r && (s = s.times(2 << r - 1)), w = !0, E(s, c.precision = p, c.rounding = m, !0);\n};\nf.isFinite = function() {\n    return !!this.d;\n};\nf.isInteger = f.isInt = function() {\n    return !!this.d && ne(this.e / b) > this.d.length - 2;\n};\nf.isNaN = function() {\n    return !this.s;\n};\nf.isNegative = f.isNeg = function() {\n    return this.s < 0;\n};\nf.isPositive = f.isPos = function() {\n    return this.s > 0;\n};\nf.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\nf.lessThan = f.lt = function(e) {\n    return this.cmp(e) < 0;\n};\nf.lessThanOrEqualTo = f.lte = function(e) {\n    return this.cmp(e) < 1;\n};\nf.logarithm = f.log = function(e) {\n    var t, r, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, m = c.rounding, g = 5;\n    if (e == null) e = new c(10), t = !0;\n    else {\n        if (e = new c(e), r = e.d, e.s < 0 || !r || !r[0] || e.eq(1)) return new c(NaN);\n        t = e.eq(10);\n    }\n    if (r = u.d, u.s < 0 || !r || !r[0] || u.eq(1)) return new c(r && !r[0] ? -1 / 0 : u.s != 1 ? NaN : r ? 0 : 1 / 0);\n    if (t) if (r.length > 1) o = !0;\n    else {\n        for(i = r[0]; i % 10 === 0;)i /= 10;\n        o = i !== 1;\n    }\n    if (w = !1, a = p + g, s = Ke(u, a), n = t ? ln(c, a + 10) : Ke(e, a), l = $(s, n, a, 1), sr(l.d, i = p, m)) do if (a += 10, s = Ke(u, a), n = t ? ln(c, a + 10) : Ke(e, a), l = $(s, n, a, 1), !o) {\n        +z(l.d).slice(i + 1, i + 15) + 1 == 1e14 && (l = E(l, p + 1, 0));\n        break;\n    }\n    while (sr(l.d, i += 10, m));\n    return w = !0, E(l, p, m);\n};\nf.minus = f.sub = function(e) {\n    var t, r, n, i, o, s, a, l, u, c, p, m, g = this, h = g.constructor;\n    if (e = new h(e), !g.d || !e.d) return !g.s || !e.s ? e = new h(NaN) : g.d ? e.s = -e.s : e = new h(e.d || g.s !== e.s ? g : NaN), e;\n    if (g.s != e.s) return e.s = -e.s, g.plus(e);\n    if (u = g.d, m = e.d, a = h.precision, l = h.rounding, !u[0] || !m[0]) {\n        if (m[0]) e.s = -e.s;\n        else if (u[0]) e = new h(g);\n        else return new h(l === 3 ? -0 : 0);\n        return w ? E(e, a, l) : e;\n    }\n    if (r = ne(e.e / b), c = ne(g.e / b), u = u.slice(), o = c - r, o) {\n        for(p = o < 0, p ? (t = u, o = -o, s = m.length) : (t = m, r = c, s = u.length), n = Math.max(Math.ceil(a / b), s) + 2, o > n && (o = n, t.length = 1), t.reverse(), n = o; n--;)t.push(0);\n        t.reverse();\n    } else {\n        for(n = u.length, s = m.length, p = n < s, p && (s = n), n = 0; n < s; n++)if (u[n] != m[n]) {\n            p = u[n] < m[n];\n            break;\n        }\n        o = 0;\n    }\n    for(p && (t = u, u = m, m = t, e.s = -e.s), s = u.length, n = m.length - s; n > 0; --n)u[s++] = 0;\n    for(n = m.length; n > o;){\n        if (u[--n] < m[n]) {\n            for(i = n; i && u[--i] === 0;)u[i] = ye - 1;\n            --u[i], u[n] += ye;\n        }\n        u[n] -= m[n];\n    }\n    for(; u[--s] === 0;)u.pop();\n    for(; u[0] === 0; u.shift())--r;\n    return u[0] ? (e.d = u, e.e = cn(u, r), w ? E(e, a, l) : e) : new h(l === 3 ? -0 : 0);\n};\nf.modulo = f.mod = function(e) {\n    var t, r = this, n = r.constructor;\n    return e = new n(e), !r.d || !e.s || e.d && !e.d[0] ? new n(NaN) : !e.d || r.d && !r.d[0] ? E(new n(r), n.precision, n.rounding) : (w = !1, n.modulo == 9 ? (t = $(r, e.abs(), 0, 3, 1), t.s *= e.s) : t = $(r, e, 0, n.modulo, 1), t = t.times(e), w = !0, r.minus(t));\n};\nf.naturalExponential = f.exp = function() {\n    return Bi(this);\n};\nf.naturalLogarithm = f.ln = function() {\n    return Ke(this);\n};\nf.negated = f.neg = function() {\n    var e = new this.constructor(this);\n    return e.s = -e.s, E(e);\n};\nf.plus = f.add = function(e) {\n    var t, r, n, i, o, s, a, l, u, c, p = this, m = p.constructor;\n    if (e = new m(e), !p.d || !e.d) return !p.s || !e.s ? e = new m(NaN) : p.d || (e = new m(e.d || p.s === e.s ? p : NaN)), e;\n    if (p.s != e.s) return e.s = -e.s, p.minus(e);\n    if (u = p.d, c = e.d, a = m.precision, l = m.rounding, !u[0] || !c[0]) return c[0] || (e = new m(p)), w ? E(e, a, l) : e;\n    if (o = ne(p.e / b), n = ne(e.e / b), u = u.slice(), i = o - n, i) {\n        for(i < 0 ? (r = u, i = -i, s = c.length) : (r = c, n = o, s = u.length), o = Math.ceil(a / b), s = o > s ? o + 1 : s + 1, i > s && (i = s, r.length = 1), r.reverse(); i--;)r.push(0);\n        r.reverse();\n    }\n    for(s = u.length, i = c.length, s - i < 0 && (i = s, r = c, c = u, u = r), t = 0; i;)t = (u[--i] = u[i] + c[i] + t) / ye | 0, u[i] %= ye;\n    for(t && (u.unshift(t), ++n), s = u.length; u[--s] == 0;)u.pop();\n    return e.d = u, e.e = cn(u, n), w ? E(e, a, l) : e;\n};\nf.precision = f.sd = function(e) {\n    var t, r = this;\n    if (e !== void 0 && e !== !!e && e !== 1 && e !== 0) throw Error(Ye + e);\n    return r.d ? (t = Bs(r.d), e && r.e + 1 > t && (t = r.e + 1)) : t = NaN, t;\n};\nf.round = function() {\n    var e = this, t = e.constructor;\n    return E(new t(e), e.e + 1, t.rounding);\n};\nf.sine = f.sin = function() {\n    var e, t, r = this, n = r.constructor;\n    return r.isFinite() ? r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + Math.max(r.e, r.sd()) + b, n.rounding = 1, r = Yc(n, Js(n, r)), n.precision = e, n.rounding = t, E($e > 2 ? r.neg() : r, e, t, !0)) : new n(NaN);\n};\nf.squareRoot = f.sqrt = function() {\n    var e, t, r, n, i, o, s = this, a = s.d, l = s.e, u = s.s, c = s.constructor;\n    if (u !== 1 || !a || !a[0]) return new c(!u || u < 0 && (!a || a[0]) ? NaN : a ? s : 1 / 0);\n    for(w = !1, u = Math.sqrt(+s), u == 0 || u == 1 / 0 ? (t = z(a), (t.length + l) % 2 == 0 && (t += \"0\"), u = Math.sqrt(t), l = ne((l + 1) / 2) - (l < 0 || l % 2), u == 1 / 0 ? t = \"5e\" + l : (t = u.toExponential(), t = t.slice(0, t.indexOf(\"e\") + 1) + l), n = new c(t)) : n = new c(u.toString()), r = (l = c.precision) + 3;;)if (o = n, n = o.plus($(s, o, r + 2, 1)).times(.5), z(o.d).slice(0, r) === (t = z(n.d)).slice(0, r)) if (t = t.slice(r - 3, r + 1), t == \"9999\" || !i && t == \"4999\") {\n        if (!i && (E(o, l + 1, 0), o.times(o).eq(s))) {\n            n = o;\n            break;\n        }\n        r += 4, i = 1;\n    } else {\n        (!+t || !+t.slice(1) && t.charAt(0) == \"5\") && (E(n, l + 1, 1), e = !n.times(n).eq(s));\n        break;\n    }\n    return w = !0, E(n, l, c.rounding, e);\n};\nf.tangent = f.tan = function() {\n    var e, t, r = this, n = r.constructor;\n    return r.isFinite() ? r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + 10, n.rounding = 1, r = r.sin(), r.s = 1, r = $(r, new n(1).minus(r.times(r)).sqrt(), e + 10, 0), n.precision = e, n.rounding = t, E($e == 2 || $e == 4 ? r.neg() : r, e, t, !0)) : new n(NaN);\n};\nf.times = f.mul = function(e) {\n    var t, r, n, i, o, s, a, l, u, c = this, p = c.constructor, m = c.d, g = (e = new p(e)).d;\n    if (e.s *= c.s, !m || !m[0] || !g || !g[0]) return new p(!e.s || m && !m[0] && !g || g && !g[0] && !m ? NaN : !m || !g ? e.s / 0 : e.s * 0);\n    for(r = ne(c.e / b) + ne(e.e / b), l = m.length, u = g.length, l < u && (o = m, m = g, g = o, s = l, l = u, u = s), o = [], s = l + u, n = s; n--;)o.push(0);\n    for(n = u; --n >= 0;){\n        for(t = 0, i = l + n; i > n;)a = o[i] + g[n] * m[i - n - 1] + t, o[i--] = a % ye | 0, t = a / ye | 0;\n        o[i] = (o[i] + t) % ye | 0;\n    }\n    for(; !o[--s];)o.pop();\n    return t ? ++r : o.shift(), e.d = o, e.e = cn(o, r), w ? E(e, p.precision, p.rounding) : e;\n};\nf.toBinary = function(e, t) {\n    return Ui(this, 2, e, t);\n};\nf.toDecimalPlaces = f.toDP = function(e, t) {\n    var r = this, n = r.constructor;\n    return r = new n(r), e === void 0 ? r : (ae(e, 0, ze), t === void 0 ? t = n.rounding : ae(t, 0, 8), E(r, e + r.e + 1, t));\n};\nf.toExponential = function(e, t) {\n    var r, n = this, i = n.constructor;\n    return e === void 0 ? r = Te(n, !0) : (ae(e, 0, ze), t === void 0 ? t = i.rounding : ae(t, 0, 8), n = E(new i(n), e + 1, t), r = Te(n, !0, e + 1)), n.isNeg() && !n.isZero() ? \"-\" + r : r;\n};\nf.toFixed = function(e, t) {\n    var r, n, i = this, o = i.constructor;\n    return e === void 0 ? r = Te(i) : (ae(e, 0, ze), t === void 0 ? t = o.rounding : ae(t, 0, 8), n = E(new o(i), e + i.e + 1, t), r = Te(n, !1, e + n.e + 1)), i.isNeg() && !i.isZero() ? \"-\" + r : r;\n};\nf.toFraction = function(e) {\n    var t, r, n, i, o, s, a, l, u, c, p, m, g = this, h = g.d, y = g.constructor;\n    if (!h) return new y(g);\n    if (u = r = new y(1), n = l = new y(0), t = new y(n), o = t.e = Bs(h) - g.e - 1, s = o % b, t.d[0] = J(10, s < 0 ? b + s : s), e == null) e = o > 0 ? t : u;\n    else {\n        if (a = new y(e), !a.isInt() || a.lt(u)) throw Error(Ye + a);\n        e = a.gt(t) ? o > 0 ? t : u : a;\n    }\n    for(w = !1, a = new y(z(h)), c = y.precision, y.precision = o = h.length * b * 2; p = $(a, t, 0, 1, 1), i = r.plus(p.times(n)), i.cmp(e) != 1;)r = n, n = i, i = u, u = l.plus(p.times(i)), l = i, i = t, t = a.minus(p.times(i)), a = i;\n    return i = $(e.minus(r), n, 0, 1, 1), l = l.plus(i.times(u)), r = r.plus(i.times(n)), l.s = u.s = g.s, m = $(u, n, o, 1).minus(g).abs().cmp($(l, r, o, 1).minus(g).abs()) < 1 ? [\n        u,\n        n\n    ] : [\n        l,\n        r\n    ], y.precision = c, w = !0, m;\n};\nf.toHexadecimal = f.toHex = function(e, t) {\n    return Ui(this, 16, e, t);\n};\nf.toNearest = function(e, t) {\n    var r = this, n = r.constructor;\n    if (r = new n(r), e == null) {\n        if (!r.d) return r;\n        e = new n(1), t = n.rounding;\n    } else {\n        if (e = new n(e), t === void 0 ? t = n.rounding : ae(t, 0, 8), !r.d) return e.s ? r : e;\n        if (!e.d) return e.s && (e.s = r.s), e;\n    }\n    return e.d[0] ? (w = !1, r = $(r, e, 0, t, 1).times(e), w = !0, E(r)) : (e.s = r.s, r = e), r;\n};\nf.toNumber = function() {\n    return +this;\n};\nf.toOctal = function(e, t) {\n    return Ui(this, 8, e, t);\n};\nf.toPower = f.pow = function(e) {\n    var t, r, n, i, o, s, a = this, l = a.constructor, u = +(e = new l(e));\n    if (!a.d || !e.d || !a.d[0] || !e.d[0]) return new l(J(+a, u));\n    if (a = new l(a), a.eq(1)) return a;\n    if (n = l.precision, o = l.rounding, e.eq(1)) return E(a, n, o);\n    if (t = ne(e.e / b), t >= e.d.length - 1 && (r = u < 0 ? -u : u) <= Jc) return i = Us(l, a, r, n), e.s < 0 ? new l(1).div(i) : E(i, n, o);\n    if (s = a.s, s < 0) {\n        if (t < e.d.length - 1) return new l(NaN);\n        if (e.d[t] & 1 || (s = 1), a.e == 0 && a.d[0] == 1 && a.d.length == 1) return a.s = s, a;\n    }\n    return r = J(+a, u), t = r == 0 || !isFinite(r) ? ne(u * (Math.log(\"0.\" + z(a.d)) / Math.LN10 + a.e + 1)) : new l(r + \"\").e, t > l.maxE + 1 || t < l.minE - 1 ? new l(t > 0 ? s / 0 : 0) : (w = !1, l.rounding = a.s = 1, r = Math.min(12, (t + \"\").length), i = Bi(e.times(Ke(a, n + r)), n), i.d && (i = E(i, n + 5, 1), sr(i.d, n, o) && (t = n + 10, i = E(Bi(e.times(Ke(a, t + r)), t), t + 5, 1), +z(i.d).slice(n + 1, n + 15) + 1 == 1e14 && (i = E(i, n + 1, 0)))), i.s = s, w = !0, l.rounding = o, E(i, n, o));\n};\nf.toPrecision = function(e, t) {\n    var r, n = this, i = n.constructor;\n    return e === void 0 ? r = Te(n, n.e <= i.toExpNeg || n.e >= i.toExpPos) : (ae(e, 1, ze), t === void 0 ? t = i.rounding : ae(t, 0, 8), n = E(new i(n), e, t), r = Te(n, e <= n.e || n.e <= i.toExpNeg, e)), n.isNeg() && !n.isZero() ? \"-\" + r : r;\n};\nf.toSignificantDigits = f.toSD = function(e, t) {\n    var r = this, n = r.constructor;\n    return e === void 0 ? (e = n.precision, t = n.rounding) : (ae(e, 1, ze), t === void 0 ? t = n.rounding : ae(t, 0, 8)), E(new n(r), e, t);\n};\nf.toString = function() {\n    var e = this, t = e.constructor, r = Te(e, e.e <= t.toExpNeg || e.e >= t.toExpPos);\n    return e.isNeg() && !e.isZero() ? \"-\" + r : r;\n};\nf.truncated = f.trunc = function() {\n    return E(new this.constructor(this), this.e + 1, 1);\n};\nf.valueOf = f.toJSON = function() {\n    var e = this, t = e.constructor, r = Te(e, e.e <= t.toExpNeg || e.e >= t.toExpPos);\n    return e.isNeg() ? \"-\" + r : r;\n};\nfunction z(e) {\n    var t, r, n, i = e.length - 1, o = \"\", s = e[0];\n    if (i > 0) {\n        for(o += s, t = 1; t < i; t++)n = e[t] + \"\", r = b - n.length, r && (o += He(r)), o += n;\n        s = e[t], n = s + \"\", r = b - n.length, r && (o += He(r));\n    } else if (s === 0) return \"0\";\n    for(; s % 10 === 0;)s /= 10;\n    return o + s;\n}\nfunction ae(e, t, r) {\n    if (e !== ~~e || e < t || e > r) throw Error(Ye + e);\n}\nfunction sr(e, t, r, n) {\n    var i, o, s, a;\n    for(o = e[0]; o >= 10; o /= 10)--t;\n    return --t < 0 ? (t += b, i = 0) : (i = Math.ceil((t + 1) / b), t %= b), o = J(10, b - t), a = e[i] % o | 0, n == null ? t < 3 ? (t == 0 ? a = a / 100 | 0 : t == 1 && (a = a / 10 | 0), s = r < 4 && a == 99999 || r > 3 && a == 49999 || a == 5e4 || a == 0) : s = (r < 4 && a + 1 == o || r > 3 && a + 1 == o / 2) && (e[i + 1] / o / 100 | 0) == J(10, t - 2) - 1 || (a == o / 2 || a == 0) && (e[i + 1] / o / 100 | 0) == 0 : t < 4 ? (t == 0 ? a = a / 1e3 | 0 : t == 1 ? a = a / 100 | 0 : t == 2 && (a = a / 10 | 0), s = (n || r < 4) && a == 9999 || !n && r > 3 && a == 4999) : s = ((n || r < 4) && a + 1 == o || !n && r > 3 && a + 1 == o / 2) && (e[i + 1] / o / 1e3 | 0) == J(10, t - 3) - 1, s;\n}\nfunction nn(e, t, r) {\n    for(var n, i = [\n        0\n    ], o, s = 0, a = e.length; s < a;){\n        for(o = i.length; o--;)i[o] *= t;\n        for(i[0] += qi.indexOf(e.charAt(s++)), n = 0; n < i.length; n++)i[n] > r - 1 && (i[n + 1] === void 0 && (i[n + 1] = 0), i[n + 1] += i[n] / r | 0, i[n] %= r);\n    }\n    return i.reverse();\n}\nfunction Hc(e, t) {\n    var r, n, i;\n    if (t.isZero()) return t;\n    n = t.d.length, n < 32 ? (r = Math.ceil(n / 3), i = (1 / pn(4, r)).toString()) : (r = 16, i = \"2.3283064365386962890625e-10\"), e.precision += r, t = xt(e, 1, t.times(i), new e(1));\n    for(var o = r; o--;){\n        var s = t.times(t);\n        t = s.times(s).minus(s).times(8).plus(1);\n    }\n    return e.precision -= r, t;\n}\nvar $ = function() {\n    function e(n, i, o) {\n        var s, a = 0, l = n.length;\n        for(n = n.slice(); l--;)s = n[l] * i + a, n[l] = s % o | 0, a = s / o | 0;\n        return a && n.unshift(a), n;\n    }\n    function t(n, i, o, s) {\n        var a, l;\n        if (o != s) l = o > s ? 1 : -1;\n        else for(a = l = 0; a < o; a++)if (n[a] != i[a]) {\n            l = n[a] > i[a] ? 1 : -1;\n            break;\n        }\n        return l;\n    }\n    function r(n, i, o, s) {\n        for(var a = 0; o--;)n[o] -= a, a = n[o] < i[o] ? 1 : 0, n[o] = a * s + n[o] - i[o];\n        for(; !n[0] && n.length > 1;)n.shift();\n    }\n    return function(n, i, o, s, a, l) {\n        var u, c, p, m, g, h, y, O, T, S, R, _, I, ce, Gt, Q, se, Oe, Z, mt, $r = n.constructor, Hn = n.s == i.s ? 1 : -1, X = n.d, F = i.d;\n        if (!X || !X[0] || !F || !F[0]) return new $r(!n.s || !i.s || (X ? F && X[0] == F[0] : !F) ? NaN : X && X[0] == 0 || !F ? Hn * 0 : Hn / 0);\n        for(l ? (g = 1, c = n.e - i.e) : (l = ye, g = b, c = ne(n.e / g) - ne(i.e / g)), Z = F.length, se = X.length, T = new $r(Hn), S = T.d = [], p = 0; F[p] == (X[p] || 0); p++);\n        if (F[p] > (X[p] || 0) && c--, o == null ? (ce = o = $r.precision, s = $r.rounding) : a ? ce = o + (n.e - i.e) + 1 : ce = o, ce < 0) S.push(1), h = !0;\n        else {\n            if (ce = ce / g + 2 | 0, p = 0, Z == 1) {\n                for(m = 0, F = F[0], ce++; (p < se || m) && ce--; p++)Gt = m * l + (X[p] || 0), S[p] = Gt / F | 0, m = Gt % F | 0;\n                h = m || p < se;\n            } else {\n                for(m = l / (F[0] + 1) | 0, m > 1 && (F = e(F, m, l), X = e(X, m, l), Z = F.length, se = X.length), Q = Z, R = X.slice(0, Z), _ = R.length; _ < Z;)R[_++] = 0;\n                mt = F.slice(), mt.unshift(0), Oe = F[0], F[1] >= l / 2 && ++Oe;\n                do m = 0, u = t(F, R, Z, _), u < 0 ? (I = R[0], Z != _ && (I = I * l + (R[1] || 0)), m = I / Oe | 0, m > 1 ? (m >= l && (m = l - 1), y = e(F, m, l), O = y.length, _ = R.length, u = t(y, R, O, _), u == 1 && (m--, r(y, Z < O ? mt : F, O, l))) : (m == 0 && (u = m = 1), y = F.slice()), O = y.length, O < _ && y.unshift(0), r(R, y, _, l), u == -1 && (_ = R.length, u = t(F, R, Z, _), u < 1 && (m++, r(R, Z < _ ? mt : F, _, l))), _ = R.length) : u === 0 && (m++, R = [\n                    0\n                ]), S[p++] = m, u && R[0] ? R[_++] = X[Q] || 0 : (R = [\n                    X[Q]\n                ], _ = 1);\n                while ((Q++ < se || R[0] !== void 0) && ce--);\n                h = R[0] !== void 0;\n            }\n            S[0] || S.shift();\n        }\n        if (g == 1) T.e = c, Ms = h;\n        else {\n            for(p = 1, m = S[0]; m >= 10; m /= 10)p++;\n            T.e = p + c * g - 1, E(T, a ? o + T.e + 1 : o, s, h);\n        }\n        return T;\n    };\n}();\nfunction E(e, t, r, n) {\n    var i, o, s, a, l, u, c, p, m, g = e.constructor;\n    e: if (t != null) {\n        if (p = e.d, !p) return e;\n        for(i = 1, a = p[0]; a >= 10; a /= 10)i++;\n        if (o = t - i, o < 0) o += b, s = t, c = p[m = 0], l = c / J(10, i - s - 1) % 10 | 0;\n        else if (m = Math.ceil((o + 1) / b), a = p.length, m >= a) if (n) {\n            for(; a++ <= m;)p.push(0);\n            c = l = 0, i = 1, o %= b, s = o - b + 1;\n        } else break e;\n        else {\n            for(c = a = p[m], i = 1; a >= 10; a /= 10)i++;\n            o %= b, s = o - b + i, l = s < 0 ? 0 : c / J(10, i - s - 1) % 10 | 0;\n        }\n        if (n = n || t < 0 || p[m + 1] !== void 0 || (s < 0 ? c : c % J(10, i - s - 1)), u = r < 4 ? (l || n) && (r == 0 || r == (e.s < 0 ? 3 : 2)) : l > 5 || l == 5 && (r == 4 || n || r == 6 && (o > 0 ? s > 0 ? c / J(10, i - s) : 0 : p[m - 1]) % 10 & 1 || r == (e.s < 0 ? 8 : 7)), t < 1 || !p[0]) return p.length = 0, u ? (t -= e.e + 1, p[0] = J(10, (b - t % b) % b), e.e = -t || 0) : p[0] = e.e = 0, e;\n        if (o == 0 ? (p.length = m, a = 1, m--) : (p.length = m + 1, a = J(10, b - o), p[m] = s > 0 ? (c / J(10, i - s) % J(10, s) | 0) * a : 0), u) for(;;)if (m == 0) {\n            for(o = 1, s = p[0]; s >= 10; s /= 10)o++;\n            for(s = p[0] += a, a = 1; s >= 10; s /= 10)a++;\n            o != a && (e.e++, p[0] == ye && (p[0] = 1));\n            break;\n        } else {\n            if (p[m] += a, p[m] != ye) break;\n            p[m--] = 0, a = 1;\n        }\n        for(o = p.length; p[--o] === 0;)p.pop();\n    }\n    return w && (e.e > g.maxE ? (e.d = null, e.e = NaN) : e.e < g.minE && (e.e = 0, e.d = [\n        0\n    ])), e;\n}\nfunction Te(e, t, r) {\n    if (!e.isFinite()) return Gs(e);\n    var n, i = e.e, o = z(e.d), s = o.length;\n    return t ? (r && (n = r - s) > 0 ? o = o.charAt(0) + \".\" + o.slice(1) + He(n) : s > 1 && (o = o.charAt(0) + \".\" + o.slice(1)), o = o + (e.e < 0 ? \"e\" : \"e+\") + e.e) : i < 0 ? (o = \"0.\" + He(-i - 1) + o, r && (n = r - s) > 0 && (o += He(n))) : i >= s ? (o += He(i + 1 - s), r && (n = r - i - 1) > 0 && (o = o + \".\" + He(n))) : ((n = i + 1) < s && (o = o.slice(0, n) + \".\" + o.slice(n)), r && (n = r - s) > 0 && (i + 1 === s && (o += \".\"), o += He(n))), o;\n}\nfunction cn(e, t) {\n    var r = e[0];\n    for(t *= b; r >= 10; r /= 10)t++;\n    return t;\n}\nfunction ln(e, t, r) {\n    if (t > Wc) throw w = !0, r && (e.precision = r), Error($s);\n    return E(new e(sn), t, 1, !0);\n}\nfunction ve(e, t, r) {\n    if (t > ji) throw Error($s);\n    return E(new e(an), t, r, !0);\n}\nfunction Bs(e) {\n    var t = e.length - 1, r = t * b + 1;\n    if (t = e[t], t) {\n        for(; t % 10 == 0; t /= 10)r--;\n        for(t = e[0]; t >= 10; t /= 10)r++;\n    }\n    return r;\n}\nfunction He(e) {\n    for(var t = \"\"; e--;)t += \"0\";\n    return t;\n}\nfunction Us(e, t, r, n) {\n    var i, o = new e(1), s = Math.ceil(n / b + 4);\n    for(w = !1;;){\n        if (r % 2 && (o = o.times(t), Ls(o.d, s) && (i = !0)), r = ne(r / 2), r === 0) {\n            r = o.d.length - 1, i && o.d[r] === 0 && ++o.d[r];\n            break;\n        }\n        t = t.times(t), Ls(t.d, s);\n    }\n    return w = !0, o;\n}\nfunction Ns(e) {\n    return e.d[e.d.length - 1] & 1;\n}\nfunction Qs(e, t, r) {\n    for(var n, i, o = new e(t[0]), s = 0; ++s < t.length;){\n        if (i = new e(t[s]), !i.s) {\n            o = i;\n            break;\n        }\n        n = o.cmp(i), (n === r || n === 0 && o.s === r) && (o = i);\n    }\n    return o;\n}\nfunction Bi(e, t) {\n    var r, n, i, o, s, a, l, u = 0, c = 0, p = 0, m = e.constructor, g = m.rounding, h = m.precision;\n    if (!e.d || !e.d[0] || e.e > 17) return new m(e.d ? e.d[0] ? e.s < 0 ? 0 : 1 / 0 : 1 : e.s ? e.s < 0 ? 0 : e : NaN);\n    for(t == null ? (w = !1, l = h) : l = t, a = new m(.03125); e.e > -2;)e = e.times(a), p += 5;\n    for(n = Math.log(J(2, p)) / Math.LN10 * 2 + 5 | 0, l += n, r = o = s = new m(1), m.precision = l;;){\n        if (o = E(o.times(e), l, 1), r = r.times(++c), a = s.plus($(o, r, l, 1)), z(a.d).slice(0, l) === z(s.d).slice(0, l)) {\n            for(i = p; i--;)s = E(s.times(s), l, 1);\n            if (t == null) if (u < 3 && sr(s.d, l - n, g, u)) m.precision = l += 10, r = o = a = new m(1), c = 0, u++;\n            else return E(s, m.precision = h, g, w = !0);\n            else return m.precision = h, s;\n        }\n        s = a;\n    }\n}\nfunction Ke(e, t) {\n    var r, n, i, o, s, a, l, u, c, p, m, g = 1, h = 10, y = e, O = y.d, T = y.constructor, S = T.rounding, R = T.precision;\n    if (y.s < 0 || !O || !O[0] || !y.e && O[0] == 1 && O.length == 1) return new T(O && !O[0] ? -1 / 0 : y.s != 1 ? NaN : O ? 0 : y);\n    if (t == null ? (w = !1, c = R) : c = t, T.precision = c += h, r = z(O), n = r.charAt(0), Math.abs(o = y.e) < 15e14) {\n        for(; n < 7 && n != 1 || n == 1 && r.charAt(1) > 3;)y = y.times(e), r = z(y.d), n = r.charAt(0), g++;\n        o = y.e, n > 1 ? (y = new T(\"0.\" + r), o++) : y = new T(n + \".\" + r.slice(1));\n    } else return u = ln(T, c + 2, R).times(o + \"\"), y = Ke(new T(n + \".\" + r.slice(1)), c - h).plus(u), T.precision = R, t == null ? E(y, R, S, w = !0) : y;\n    for(p = y, l = s = y = $(y.minus(1), y.plus(1), c, 1), m = E(y.times(y), c, 1), i = 3;;){\n        if (s = E(s.times(m), c, 1), u = l.plus($(s, new T(i), c, 1)), z(u.d).slice(0, c) === z(l.d).slice(0, c)) if (l = l.times(2), o !== 0 && (l = l.plus(ln(T, c + 2, R).times(o + \"\"))), l = $(l, new T(g), c, 1), t == null) if (sr(l.d, c - h, S, a)) T.precision = c += h, u = s = y = $(p.minus(1), p.plus(1), c, 1), m = E(y.times(y), c, 1), i = a = 1;\n        else return E(l, T.precision = R, S, w = !0);\n        else return T.precision = R, l;\n        l = u, i += 2;\n    }\n}\nfunction Gs(e) {\n    return String(e.s * e.s / 0);\n}\nfunction on(e, t) {\n    var r, n, i;\n    for((r = t.indexOf(\".\")) > -1 && (t = t.replace(\".\", \"\")), (n = t.search(/e/i)) > 0 ? (r < 0 && (r = n), r += +t.slice(n + 1), t = t.substring(0, n)) : r < 0 && (r = t.length), n = 0; t.charCodeAt(n) === 48; n++);\n    for(i = t.length; t.charCodeAt(i - 1) === 48; --i);\n    if (t = t.slice(n, i), t) {\n        if (i -= n, e.e = r = r - n - 1, e.d = [], n = (r + 1) % b, r < 0 && (n += b), n < i) {\n            for(n && e.d.push(+t.slice(0, n)), i -= b; n < i;)e.d.push(+t.slice(n, n += b));\n            t = t.slice(n), n = b - t.length;\n        } else n -= i;\n        for(; n--;)t += \"0\";\n        e.d.push(+t), w && (e.e > e.constructor.maxE ? (e.d = null, e.e = NaN) : e.e < e.constructor.minE && (e.e = 0, e.d = [\n            0\n        ]));\n    } else e.e = 0, e.d = [\n        0\n    ];\n    return e;\n}\nfunction Kc(e, t) {\n    var r, n, i, o, s, a, l, u, c;\n    if (t.indexOf(\"_\") > -1) {\n        if (t = t.replace(/(\\d)_(?=\\d)/g, \"$1\"), js.test(t)) return on(e, t);\n    } else if (t === \"Infinity\" || t === \"NaN\") return +t || (e.s = NaN), e.e = NaN, e.d = null, e;\n    if (Qc.test(t)) r = 16, t = t.toLowerCase();\n    else if (Uc.test(t)) r = 2;\n    else if (Gc.test(t)) r = 8;\n    else throw Error(Ye + t);\n    for(o = t.search(/p/i), o > 0 ? (l = +t.slice(o + 1), t = t.substring(2, o)) : t = t.slice(2), o = t.indexOf(\".\"), s = o >= 0, n = e.constructor, s && (t = t.replace(\".\", \"\"), a = t.length, o = a - o, i = Us(n, new n(r), o, o * 2)), u = nn(t, r, ye), c = u.length - 1, o = c; u[o] === 0; --o)u.pop();\n    return o < 0 ? new n(e.s * 0) : (e.e = cn(u, c), e.d = u, w = !1, s && (e = $(e, i, a * 4)), l && (e = e.times(Math.abs(l) < 54 ? J(2, l) : st.pow(2, l))), w = !0, e);\n}\nfunction Yc(e, t) {\n    var r, n = t.d.length;\n    if (n < 3) return t.isZero() ? t : xt(e, 2, t, t);\n    r = 1.4 * Math.sqrt(n), r = r > 16 ? 16 : r | 0, t = t.times(1 / pn(5, r)), t = xt(e, 2, t, t);\n    for(var i, o = new e(5), s = new e(16), a = new e(20); r--;)i = t.times(t), t = t.times(o.plus(i.times(s.times(i).minus(a))));\n    return t;\n}\nfunction xt(e, t, r, n, i) {\n    var o, s, a, l, u = 1, c = e.precision, p = Math.ceil(c / b);\n    for(w = !1, l = r.times(r), a = new e(n);;){\n        if (s = $(a.times(l), new e(t++ * t++), c, 1), a = i ? n.plus(s) : n.minus(s), n = $(s.times(l), new e(t++ * t++), c, 1), s = a.plus(n), s.d[p] !== void 0) {\n            for(o = p; s.d[o] === a.d[o] && o--;);\n            if (o == -1) break;\n        }\n        o = a, a = n, n = s, s = o, u++;\n    }\n    return w = !0, s.d.length = p + 1, s;\n}\nfunction pn(e, t) {\n    for(var r = e; --t;)r *= e;\n    return r;\n}\nfunction Js(e, t) {\n    var r, n = t.s < 0, i = ve(e, e.precision, 1), o = i.times(.5);\n    if (t = t.abs(), t.lte(o)) return $e = n ? 4 : 1, t;\n    if (r = t.divToInt(i), r.isZero()) $e = n ? 3 : 2;\n    else {\n        if (t = t.minus(r.times(i)), t.lte(o)) return $e = Ns(r) ? n ? 2 : 3 : n ? 4 : 1, t;\n        $e = Ns(r) ? n ? 1 : 4 : n ? 3 : 2;\n    }\n    return t.minus(i).abs();\n}\nfunction Ui(e, t, r, n) {\n    var i, o, s, a, l, u, c, p, m, g = e.constructor, h = r !== void 0;\n    if (h ? (ae(r, 1, ze), n === void 0 ? n = g.rounding : ae(n, 0, 8)) : (r = g.precision, n = g.rounding), !e.isFinite()) c = Gs(e);\n    else {\n        for(c = Te(e), s = c.indexOf(\".\"), h ? (i = 2, t == 16 ? r = r * 4 - 3 : t == 8 && (r = r * 3 - 2)) : i = t, s >= 0 && (c = c.replace(\".\", \"\"), m = new g(1), m.e = c.length - s, m.d = nn(Te(m), 10, i), m.e = m.d.length), p = nn(c, 10, i), o = l = p.length; p[--l] == 0;)p.pop();\n        if (!p[0]) c = h ? \"0p+0\" : \"0\";\n        else {\n            if (s < 0 ? o-- : (e = new g(e), e.d = p, e.e = o, e = $(e, m, r, n, 0, i), p = e.d, o = e.e, u = Ms), s = p[r], a = i / 2, u = u || p[r + 1] !== void 0, u = n < 4 ? (s !== void 0 || u) && (n === 0 || n === (e.s < 0 ? 3 : 2)) : s > a || s === a && (n === 4 || u || n === 6 && p[r - 1] & 1 || n === (e.s < 0 ? 8 : 7)), p.length = r, u) for(; ++p[--r] > i - 1;)p[r] = 0, r || (++o, p.unshift(1));\n            for(l = p.length; !p[l - 1]; --l);\n            for(s = 0, c = \"\"; s < l; s++)c += qi.charAt(p[s]);\n            if (h) {\n                if (l > 1) if (t == 16 || t == 8) {\n                    for(s = t == 16 ? 4 : 3, --l; l % s; l++)c += \"0\";\n                    for(p = nn(c, i, t), l = p.length; !p[l - 1]; --l);\n                    for(s = 1, c = \"1.\"; s < l; s++)c += qi.charAt(p[s]);\n                } else c = c.charAt(0) + \".\" + c.slice(1);\n                c = c + (o < 0 ? \"p\" : \"p+\") + o;\n            } else if (o < 0) {\n                for(; ++o;)c = \"0\" + c;\n                c = \"0.\" + c;\n            } else if (++o > l) for(o -= l; o--;)c += \"0\";\n            else o < l && (c = c.slice(0, o) + \".\" + c.slice(o));\n        }\n        c = (t == 16 ? \"0x\" : t == 2 ? \"0b\" : t == 8 ? \"0o\" : \"\") + c;\n    }\n    return e.s < 0 ? \"-\" + c : c;\n}\nfunction Ls(e, t) {\n    if (e.length > t) return e.length = t, !0;\n}\nfunction zc(e) {\n    return new this(e).abs();\n}\nfunction Zc(e) {\n    return new this(e).acos();\n}\nfunction Xc(e) {\n    return new this(e).acosh();\n}\nfunction ep(e, t) {\n    return new this(e).plus(t);\n}\nfunction tp(e) {\n    return new this(e).asin();\n}\nfunction rp(e) {\n    return new this(e).asinh();\n}\nfunction np(e) {\n    return new this(e).atan();\n}\nfunction ip(e) {\n    return new this(e).atanh();\n}\nfunction op(e, t) {\n    e = new this(e), t = new this(t);\n    var r, n = this.precision, i = this.rounding, o = n + 4;\n    return !e.s || !t.s ? r = new this(NaN) : !e.d && !t.d ? (r = ve(this, o, 1).times(t.s > 0 ? .25 : .75), r.s = e.s) : !t.d || e.isZero() ? (r = t.s < 0 ? ve(this, n, i) : new this(0), r.s = e.s) : !e.d || t.isZero() ? (r = ve(this, o, 1).times(.5), r.s = e.s) : t.s < 0 ? (this.precision = o, this.rounding = 1, r = this.atan($(e, t, o, 1)), t = ve(this, o, 1), this.precision = n, this.rounding = i, r = e.s < 0 ? r.minus(t) : r.plus(t)) : r = this.atan($(e, t, o, 1)), r;\n}\nfunction sp(e) {\n    return new this(e).cbrt();\n}\nfunction ap(e) {\n    return E(e = new this(e), e.e + 1, 2);\n}\nfunction lp(e, t, r) {\n    return new this(e).clamp(t, r);\n}\nfunction up(e) {\n    if (!e || typeof e != \"object\") throw Error(un + \"Object expected\");\n    var t, r, n, i = e.defaults === !0, o = [\n        \"precision\",\n        1,\n        ze,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -wt,\n        0,\n        \"toExpPos\",\n        0,\n        wt,\n        \"maxE\",\n        0,\n        wt,\n        \"minE\",\n        -wt,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(t = 0; t < o.length; t += 3)if (r = o[t], i && (this[r] = Vi[r]), (n = e[r]) !== void 0) if (ne(n) === n && n >= o[t + 1] && n <= o[t + 2]) this[r] = n;\n    else throw Error(Ye + r + \": \" + n);\n    if (r = \"crypto\", i && (this[r] = Vi[r]), (n = e[r]) !== void 0) if (n === !0 || n === !1 || n === 0 || n === 1) if (n) if (typeof crypto < \"u\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[r] = !0;\n    else throw Error(qs);\n    else this[r] = !1;\n    else throw Error(Ye + r + \": \" + n);\n    return this;\n}\nfunction cp(e) {\n    return new this(e).cos();\n}\nfunction pp(e) {\n    return new this(e).cosh();\n}\nfunction Ws(e) {\n    var t, r, n;\n    function i(o) {\n        var s, a, l, u = this;\n        if (!(u instanceof i)) return new i(o);\n        if (u.constructor = i, Fs(o)) {\n            u.s = o.s, w ? !o.d || o.e > i.maxE ? (u.e = NaN, u.d = null) : o.e < i.minE ? (u.e = 0, u.d = [\n                0\n            ]) : (u.e = o.e, u.d = o.d.slice()) : (u.e = o.e, u.d = o.d ? o.d.slice() : o.d);\n            return;\n        }\n        if (l = typeof o, l === \"number\") {\n            if (o === 0) {\n                u.s = 1 / o < 0 ? -1 : 1, u.e = 0, u.d = [\n                    0\n                ];\n                return;\n            }\n            if (o < 0 ? (o = -o, u.s = -1) : u.s = 1, o === ~~o && o < 1e7) {\n                for(s = 0, a = o; a >= 10; a /= 10)s++;\n                w ? s > i.maxE ? (u.e = NaN, u.d = null) : s < i.minE ? (u.e = 0, u.d = [\n                    0\n                ]) : (u.e = s, u.d = [\n                    o\n                ]) : (u.e = s, u.d = [\n                    o\n                ]);\n                return;\n            }\n            if (o * 0 !== 0) {\n                o || (u.s = NaN), u.e = NaN, u.d = null;\n                return;\n            }\n            return on(u, o.toString());\n        }\n        if (l === \"string\") return (a = o.charCodeAt(0)) === 45 ? (o = o.slice(1), u.s = -1) : (a === 43 && (o = o.slice(1)), u.s = 1), js.test(o) ? on(u, o) : Kc(u, o);\n        if (l === \"bigint\") return o < 0 ? (o = -o, u.s = -1) : u.s = 1, on(u, o.toString());\n        throw Error(Ye + o);\n    }\n    if (i.prototype = f, i.ROUND_UP = 0, i.ROUND_DOWN = 1, i.ROUND_CEIL = 2, i.ROUND_FLOOR = 3, i.ROUND_HALF_UP = 4, i.ROUND_HALF_DOWN = 5, i.ROUND_HALF_EVEN = 6, i.ROUND_HALF_CEIL = 7, i.ROUND_HALF_FLOOR = 8, i.EUCLID = 9, i.config = i.set = up, i.clone = Ws, i.isDecimal = Fs, i.abs = zc, i.acos = Zc, i.acosh = Xc, i.add = ep, i.asin = tp, i.asinh = rp, i.atan = np, i.atanh = ip, i.atan2 = op, i.cbrt = sp, i.ceil = ap, i.clamp = lp, i.cos = cp, i.cosh = pp, i.div = dp, i.exp = mp, i.floor = fp, i.hypot = gp, i.ln = hp, i.log = yp, i.log10 = bp, i.log2 = Ep, i.max = wp, i.min = xp, i.mod = Pp, i.mul = vp, i.pow = Tp, i.random = Cp, i.round = Rp, i.sign = Sp, i.sin = Ap, i.sinh = Ip, i.sqrt = kp, i.sub = Op, i.sum = _p, i.tan = Dp, i.tanh = Np, i.trunc = Lp, e === void 0 && (e = {}), e && e.defaults !== !0) for(n = [\n        \"precision\",\n        \"rounding\",\n        \"toExpNeg\",\n        \"toExpPos\",\n        \"maxE\",\n        \"minE\",\n        \"modulo\",\n        \"crypto\"\n    ], t = 0; t < n.length;)e.hasOwnProperty(r = n[t++]) || (e[r] = this[r]);\n    return i.config(e), i;\n}\nfunction dp(e, t) {\n    return new this(e).div(t);\n}\nfunction mp(e) {\n    return new this(e).exp();\n}\nfunction fp(e) {\n    return E(e = new this(e), e.e + 1, 3);\n}\nfunction gp() {\n    var e, t, r = new this(0);\n    for(w = !1, e = 0; e < arguments.length;)if (t = new this(arguments[e++]), t.d) r.d && (r = r.plus(t.times(t)));\n    else {\n        if (t.s) return w = !0, new this(1 / 0);\n        r = t;\n    }\n    return w = !0, r.sqrt();\n}\nfunction Fs(e) {\n    return e instanceof st || e && e.toStringTag === Vs || !1;\n}\nfunction hp(e) {\n    return new this(e).ln();\n}\nfunction yp(e, t) {\n    return new this(e).log(t);\n}\nfunction Ep(e) {\n    return new this(e).log(2);\n}\nfunction bp(e) {\n    return new this(e).log(10);\n}\nfunction wp() {\n    return Qs(this, arguments, -1);\n}\nfunction xp() {\n    return Qs(this, arguments, 1);\n}\nfunction Pp(e, t) {\n    return new this(e).mod(t);\n}\nfunction vp(e, t) {\n    return new this(e).mul(t);\n}\nfunction Tp(e, t) {\n    return new this(e).pow(t);\n}\nfunction Cp(e) {\n    var t, r, n, i, o = 0, s = new this(1), a = [];\n    if (e === void 0 ? e = this.precision : ae(e, 1, ze), n = Math.ceil(e / b), this.crypto) if (crypto.getRandomValues) for(t = crypto.getRandomValues(new Uint32Array(n)); o < n;)i = t[o], i >= 429e7 ? t[o] = crypto.getRandomValues(new Uint32Array(1))[0] : a[o++] = i % 1e7;\n    else if (crypto.randomBytes) {\n        for(t = crypto.randomBytes(n *= 4); o < n;)i = t[o] + (t[o + 1] << 8) + (t[o + 2] << 16) + ((t[o + 3] & 127) << 24), i >= 214e7 ? crypto.randomBytes(4).copy(t, o) : (a.push(i % 1e7), o += 4);\n        o = n / 4;\n    } else throw Error(qs);\n    else for(; o < n;)a[o++] = Math.random() * 1e7 | 0;\n    for(n = a[--o], e %= b, n && e && (i = J(10, b - e), a[o] = (n / i | 0) * i); a[o] === 0; o--)a.pop();\n    if (o < 0) r = 0, a = [\n        0\n    ];\n    else {\n        for(r = -1; a[0] === 0; r -= b)a.shift();\n        for(n = 1, i = a[0]; i >= 10; i /= 10)n++;\n        n < b && (r -= b - n);\n    }\n    return s.e = r, s.d = a, s;\n}\nfunction Rp(e) {\n    return E(e = new this(e), e.e + 1, this.rounding);\n}\nfunction Sp(e) {\n    return e = new this(e), e.d ? e.d[0] ? e.s : 0 * e.s : e.s || NaN;\n}\nfunction Ap(e) {\n    return new this(e).sin();\n}\nfunction Ip(e) {\n    return new this(e).sinh();\n}\nfunction kp(e) {\n    return new this(e).sqrt();\n}\nfunction Op(e, t) {\n    return new this(e).sub(t);\n}\nfunction _p() {\n    var e = 0, t = arguments, r = new this(t[e]);\n    for(w = !1; r.s && ++e < t.length;)r = r.plus(t[e]);\n    return w = !0, E(r, this.precision, this.rounding);\n}\nfunction Dp(e) {\n    return new this(e).tan();\n}\nfunction Np(e) {\n    return new this(e).tanh();\n}\nfunction Lp(e) {\n    return E(e = new this(e), e.e + 1, 1);\n}\nf[Symbol.for(\"nodejs.util.inspect.custom\")] = f.toString;\nf[Symbol.toStringTag] = \"Decimal\";\nvar st = f.constructor = Ws(Vi);\nsn = new st(sn);\nan = new st(an);\nvar Ce = st;\nfunction Pt(e) {\n    return e === null ? e : Array.isArray(e) ? e.map(Pt) : typeof e == \"object\" ? Fp(e) ? Mp(e) : bt(e, Pt) : e;\n}\nfunction Fp(e) {\n    return e !== null && typeof e == \"object\" && typeof e.$type == \"string\";\n}\nfunction Mp({ $type: e, value: t }) {\n    switch(e){\n        case \"BigInt\":\n            return BigInt(t);\n        case \"Bytes\":\n            {\n                let { buffer: r, byteOffset: n, byteLength: i } = Buffer.from(t, \"base64\");\n                return new Uint8Array(r, n, i);\n            }\n        case \"DateTime\":\n            return new Date(t);\n        case \"Decimal\":\n            return new Ce(t);\n        case \"Json\":\n            return JSON.parse(t);\n        default:\n            Me(t, \"Unknown tagged value\");\n    }\n}\nfunction vt(e) {\n    return e.substring(0, 1).toLowerCase() + e.substring(1);\n}\nfunction Tt(e) {\n    return e instanceof Date || Object.prototype.toString.call(e) === \"[object Date]\";\n}\nfunction dn(e) {\n    return e.toString() !== \"Invalid Date\";\n}\nfunction Ct(e) {\n    return st.isDecimal(e) ? !0 : e !== null && typeof e == \"object\" && typeof e.s == \"number\" && typeof e.e == \"number\" && typeof e.toFixed == \"function\" && Array.isArray(e.d);\n}\nvar Xs = D(Oi());\nvar Zs = D(__webpack_require__(/*! fs */ \"fs\"));\nvar Hs = {\n    keyword: Ne,\n    entity: Ne,\n    value: (e)=>Y(it(e)),\n    punctuation: it,\n    directive: Ne,\n    function: Ne,\n    variable: (e)=>Y(it(e)),\n    string: (e)=>Y(je(e)),\n    boolean: De,\n    number: Ne,\n    comment: Ht\n};\nvar $p = (e)=>e, mn = {}, qp = 0, P = {\n    manual: mn.Prism && mn.Prism.manual,\n    disableWorkerMessageHandler: mn.Prism && mn.Prism.disableWorkerMessageHandler,\n    util: {\n        encode: function(e) {\n            if (e instanceof Ee) {\n                let t = e;\n                return new Ee(t.type, P.util.encode(t.content), t.alias);\n            } else return Array.isArray(e) ? e.map(P.util.encode) : e.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        },\n        type: function(e) {\n            return Object.prototype.toString.call(e).slice(8, -1);\n        },\n        objId: function(e) {\n            return e.__id || Object.defineProperty(e, \"__id\", {\n                value: ++qp\n            }), e.__id;\n        },\n        clone: function e(t, r) {\n            let n, i, o = P.util.type(t);\n            switch(r = r || {}, o){\n                case \"Object\":\n                    if (i = P.util.objId(t), r[i]) return r[i];\n                    n = {}, r[i] = n;\n                    for(let s in t)t.hasOwnProperty(s) && (n[s] = e(t[s], r));\n                    return n;\n                case \"Array\":\n                    return i = P.util.objId(t), r[i] ? r[i] : (n = [], r[i] = n, t.forEach(function(s, a) {\n                        n[a] = e(s, r);\n                    }), n);\n                default:\n                    return t;\n            }\n        }\n    },\n    languages: {\n        extend: function(e, t) {\n            let r = P.util.clone(P.languages[e]);\n            for(let n in t)r[n] = t[n];\n            return r;\n        },\n        insertBefore: function(e, t, r, n) {\n            n = n || P.languages;\n            let i = n[e], o = {};\n            for(let a in i)if (i.hasOwnProperty(a)) {\n                if (a == t) for(let l in r)r.hasOwnProperty(l) && (o[l] = r[l]);\n                r.hasOwnProperty(a) || (o[a] = i[a]);\n            }\n            let s = n[e];\n            return n[e] = o, P.languages.DFS(P.languages, function(a, l) {\n                l === s && a != e && (this[a] = o);\n            }), o;\n        },\n        DFS: function e(t, r, n, i) {\n            i = i || {};\n            let o = P.util.objId;\n            for(let s in t)if (t.hasOwnProperty(s)) {\n                r.call(t, s, t[s], n || s);\n                let a = t[s], l = P.util.type(a);\n                l === \"Object\" && !i[o(a)] ? (i[o(a)] = !0, e(a, r, null, i)) : l === \"Array\" && !i[o(a)] && (i[o(a)] = !0, e(a, r, s, i));\n            }\n        }\n    },\n    plugins: {},\n    highlight: function(e, t, r) {\n        let n = {\n            code: e,\n            grammar: t,\n            language: r\n        };\n        return P.hooks.run(\"before-tokenize\", n), n.tokens = P.tokenize(n.code, n.grammar), P.hooks.run(\"after-tokenize\", n), Ee.stringify(P.util.encode(n.tokens), n.language);\n    },\n    matchGrammar: function(e, t, r, n, i, o, s) {\n        for(let y in r){\n            if (!r.hasOwnProperty(y) || !r[y]) continue;\n            if (y == s) return;\n            let O = r[y];\n            O = P.util.type(O) === \"Array\" ? O : [\n                O\n            ];\n            for(let T = 0; T < O.length; ++T){\n                let S = O[T], R = S.inside, _ = !!S.lookbehind, I = !!S.greedy, ce = 0, Gt = S.alias;\n                if (I && !S.pattern.global) {\n                    let Q = S.pattern.toString().match(/[imuy]*$/)[0];\n                    S.pattern = RegExp(S.pattern.source, Q + \"g\");\n                }\n                S = S.pattern || S;\n                for(let Q = n, se = i; Q < t.length; se += t[Q].length, ++Q){\n                    let Oe = t[Q];\n                    if (t.length > e.length) return;\n                    if (Oe instanceof Ee) continue;\n                    if (I && Q != t.length - 1) {\n                        S.lastIndex = se;\n                        var p = S.exec(e);\n                        if (!p) break;\n                        var c = p.index + (_ ? p[1].length : 0), m = p.index + p[0].length, a = Q, l = se;\n                        for(let F = t.length; a < F && (l < m || !t[a].type && !t[a - 1].greedy); ++a)l += t[a].length, c >= l && (++Q, se = l);\n                        if (t[Q] instanceof Ee) continue;\n                        u = a - Q, Oe = e.slice(se, l), p.index -= se;\n                    } else {\n                        S.lastIndex = 0;\n                        var p = S.exec(Oe), u = 1;\n                    }\n                    if (!p) {\n                        if (o) break;\n                        continue;\n                    }\n                    _ && (ce = p[1] ? p[1].length : 0);\n                    var c = p.index + ce, p = p[0].slice(ce), m = c + p.length, g = Oe.slice(0, c), h = Oe.slice(m);\n                    let Z = [\n                        Q,\n                        u\n                    ];\n                    g && (++Q, se += g.length, Z.push(g));\n                    let mt = new Ee(y, R ? P.tokenize(p, R) : p, Gt, p, I);\n                    if (Z.push(mt), h && Z.push(h), Array.prototype.splice.apply(t, Z), u != 1 && P.matchGrammar(e, t, r, Q, se, !0, y), o) break;\n                }\n            }\n        }\n    },\n    tokenize: function(e, t) {\n        let r = [\n            e\n        ], n = t.rest;\n        if (n) {\n            for(let i in n)t[i] = n[i];\n            delete t.rest;\n        }\n        return P.matchGrammar(e, r, t, 0, 0, !1), r;\n    },\n    hooks: {\n        all: {},\n        add: function(e, t) {\n            let r = P.hooks.all;\n            r[e] = r[e] || [], r[e].push(t);\n        },\n        run: function(e, t) {\n            let r = P.hooks.all[e];\n            if (!(!r || !r.length)) for(var n = 0, i; i = r[n++];)i(t);\n        }\n    },\n    Token: Ee\n};\nP.languages.clike = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n        lookbehind: !0,\n        inside: {\n            punctuation: /[.\\\\]/\n        }\n    },\n    keyword: /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    function: /\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n    punctuation: /[{}[\\];(),.:]/\n};\nP.languages.javascript = P.languages.extend(\"clike\", {\n    \"class-name\": [\n        P.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n            lookbehind: !0\n        }\n    ],\n    keyword: [\n        {\n            pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: !0\n        }\n    ],\n    number: /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n    function: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    operator: /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nP.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nP.languages.insertBefore(\"javascript\", \"keyword\", {\n    regex: {\n        pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"function-variable\": {\n        pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n        alias: \"function\"\n    },\n    parameter: [\n        {\n            pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n            lookbehind: !0,\n            inside: P.languages.javascript\n        },\n        {\n            pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n            inside: P.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n            lookbehind: !0,\n            inside: P.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n            lookbehind: !0,\n            inside: P.languages.javascript\n        }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nP.languages.markup && P.languages.markup.tag.addInlined(\"script\", \"javascript\");\nP.languages.js = P.languages.javascript;\nP.languages.typescript = P.languages.extend(\"javascript\", {\n    keyword: /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n    builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nP.languages.ts = P.languages.typescript;\nfunction Ee(e, t, r, n, i) {\n    this.type = e, this.content = t, this.alias = r, this.length = (n || \"\").length | 0, this.greedy = !!i;\n}\nEe.stringify = function(e, t) {\n    return typeof e == \"string\" ? e : Array.isArray(e) ? e.map(function(r) {\n        return Ee.stringify(r, t);\n    }).join(\"\") : Vp(e.type)(e.content);\n};\nfunction Vp(e) {\n    return Hs[e] || $p;\n}\nfunction Ks(e) {\n    return jp(e, P.languages.javascript);\n}\nfunction jp(e, t) {\n    return P.tokenize(e, t).map((n)=>Ee.stringify(n)).join(\"\");\n}\nvar Ys = D(Ts());\nfunction zs(e) {\n    return (0, Ys.default)(e);\n}\nvar fn = class e {\n    constructor(t, r){\n        d(this, \"firstLineNumber\");\n        d(this, \"lines\");\n        this.firstLineNumber = t, this.lines = r;\n    }\n    static read(t) {\n        let r;\n        try {\n            r = Zs.default.readFileSync(t, \"utf-8\");\n        } catch  {\n            return null;\n        }\n        return e.fromContent(r);\n    }\n    static fromContent(t) {\n        let r = t.split(/\\r?\\n/);\n        return new e(1, r);\n    }\n    get lastLineNumber() {\n        return this.firstLineNumber + this.lines.length - 1;\n    }\n    mapLineAt(t, r) {\n        if (t < this.firstLineNumber || t > this.lines.length + this.firstLineNumber) return this;\n        let n = t - this.firstLineNumber, i = [\n            ...this.lines\n        ];\n        return i[n] = r(i[n]), new e(this.firstLineNumber, i);\n    }\n    mapLines(t) {\n        return new e(this.firstLineNumber, this.lines.map((r, n)=>t(r, this.firstLineNumber + n)));\n    }\n    lineAt(t) {\n        return this.lines[t - this.firstLineNumber];\n    }\n    prependSymbolAt(t, r) {\n        return this.mapLines((n, i)=>i === t ? `${r} ${n}` : `  ${n}`);\n    }\n    slice(t, r) {\n        let n = this.lines.slice(t - 1, r).join(`\n`);\n        return new e(t, zs(n).split(`\n`));\n    }\n    highlight() {\n        let t = Ks(this.toString());\n        return new e(this.firstLineNumber, t.split(`\n`));\n    }\n    toString() {\n        return this.lines.join(`\n`);\n    }\n};\nvar Bp = {\n    red: fe,\n    gray: Ht,\n    dim: _e,\n    bold: Y,\n    underline: ee,\n    highlightSource: (e)=>e.highlight()\n}, Up = {\n    red: (e)=>e,\n    gray: (e)=>e,\n    dim: (e)=>e,\n    bold: (e)=>e,\n    underline: (e)=>e,\n    highlightSource: (e)=>e\n};\nfunction Qp({ message: e, originalMethod: t, isPanic: r, callArguments: n }) {\n    return {\n        functionName: `prisma.${t}()`,\n        message: e,\n        isPanic: r ?? !1,\n        callArguments: n\n    };\n}\nfunction Gp({ callsite: e, message: t, originalMethod: r, isPanic: n, callArguments: i }, o) {\n    let s = Qp({\n        message: t,\n        originalMethod: r,\n        isPanic: n,\n        callArguments: i\n    });\n    if (!e || \"undefined\" < \"u\" || \"development\" === \"production\") return s;\n    let a = e.getLocation();\n    if (!a || !a.lineNumber || !a.columnNumber) return s;\n    let l = Math.max(1, a.lineNumber - 3), u = fn.read(a.fileName)?.slice(l, a.lineNumber), c = u?.lineAt(a.lineNumber);\n    if (u && c) {\n        let p = Wp(c), m = Jp(c);\n        if (!m) return s;\n        s.functionName = `${m.code})`, s.location = a, n || (u = u.mapLineAt(a.lineNumber, (h)=>h.slice(0, m.openingBraceIndex))), u = o.highlightSource(u);\n        let g = String(u.lastLineNumber).length;\n        if (s.contextLines = u.mapLines((h, y)=>o.gray(String(y).padStart(g)) + \" \" + h).mapLines((h)=>o.dim(h)).prependSymbolAt(a.lineNumber, o.bold(o.red(\"→\"))), i) {\n            let h = p + g + 1;\n            h += 2, s.callArguments = (0, Xs.default)(i, h).slice(h);\n        }\n    }\n    return s;\n}\nfunction Jp(e) {\n    let t = Object.keys(tr.ModelAction).join(\"|\"), n = new RegExp(String.raw`\\.(${t})\\(`).exec(e);\n    if (n) {\n        let i = n.index + n[0].length, o = e.lastIndexOf(\" \", n.index) + 1;\n        return {\n            code: e.slice(o, i),\n            openingBraceIndex: i\n        };\n    }\n    return null;\n}\nfunction Wp(e) {\n    let t = 0;\n    for(let r = 0; r < e.length; r++){\n        if (e.charAt(r) !== \" \") return t;\n        t++;\n    }\n    return t;\n}\nfunction Hp({ functionName: e, location: t, message: r, isPanic: n, contextLines: i, callArguments: o }, s) {\n    let a = [\n        \"\"\n    ], l = t ? \" in\" : \":\";\n    if (n ? (a.push(s.red(`Oops, an unknown error occurred! This is ${s.bold(\"on us\")}, you did nothing wrong.`)), a.push(s.red(`It occurred in the ${s.bold(`\\`${e}\\``)} invocation${l}`))) : a.push(s.red(`Invalid ${s.bold(`\\`${e}\\``)} invocation${l}`)), t && a.push(s.underline(Kp(t))), i) {\n        a.push(\"\");\n        let u = [\n            i.toString()\n        ];\n        o && (u.push(o), u.push(s.dim(\")\"))), a.push(u.join(\"\")), o && a.push(\"\");\n    } else a.push(\"\"), o && a.push(o), a.push(\"\");\n    return a.push(r), a.join(`\n`);\n}\nfunction Kp(e) {\n    let t = [\n        e.fileName\n    ];\n    return e.lineNumber && t.push(String(e.lineNumber)), e.columnNumber && t.push(String(e.columnNumber)), t.join(\":\");\n}\nfunction gn(e) {\n    let t = e.showColors ? Bp : Up, r;\n    return r = Gp(e, t), Hp(r, t);\n}\nvar sa = D(Qi());\nfunction na(e, t, r) {\n    let n = ia(e), i = Yp(n), o = Zp(i);\n    o ? hn(o, t, r) : t.addErrorMessage(()=>\"Unknown error\");\n}\nfunction ia(e) {\n    return e.errors.flatMap((t)=>t.kind === \"Union\" ? ia(t) : [\n            t\n        ]);\n}\nfunction Yp(e) {\n    let t = new Map, r = [];\n    for (let n of e){\n        if (n.kind !== \"InvalidArgumentType\") {\n            r.push(n);\n            continue;\n        }\n        let i = `${n.selectionPath.join(\".\")}:${n.argumentPath.join(\".\")}`, o = t.get(i);\n        o ? t.set(i, {\n            ...n,\n            argument: {\n                ...n.argument,\n                typeNames: zp(o.argument.typeNames, n.argument.typeNames)\n            }\n        }) : t.set(i, n);\n    }\n    return r.push(...t.values()), r;\n}\nfunction zp(e, t) {\n    return [\n        ...new Set(e.concat(t))\n    ];\n}\nfunction Zp(e) {\n    return $i(e, (t, r)=>{\n        let n = ta(t), i = ta(r);\n        return n !== i ? n - i : ra(t) - ra(r);\n    });\n}\nfunction ta(e) {\n    let t = 0;\n    return Array.isArray(e.selectionPath) && (t += e.selectionPath.length), Array.isArray(e.argumentPath) && (t += e.argumentPath.length), t;\n}\nfunction ra(e) {\n    switch(e.kind){\n        case \"InvalidArgumentValue\":\n        case \"ValueTooLarge\":\n            return 20;\n        case \"InvalidArgumentType\":\n            return 10;\n        case \"RequiredArgumentMissing\":\n            return -10;\n        default:\n            return 0;\n    }\n}\nvar de = class {\n    constructor(t, r){\n        this.name = t;\n        this.value = r;\n        d(this, \"isRequired\", !1);\n    }\n    makeRequired() {\n        return this.isRequired = !0, this;\n    }\n    write(t) {\n        let { colors: { green: r } } = t.context;\n        t.addMarginSymbol(r(this.isRequired ? \"+\" : \"?\")), t.write(r(this.name)), this.isRequired || t.write(r(\"?\")), t.write(r(\": \")), typeof this.value == \"string\" ? t.write(r(this.value)) : t.write(this.value);\n    }\n};\nvar Rt = class {\n    constructor(t = 0, r){\n        this.context = r;\n        d(this, \"lines\", []);\n        d(this, \"currentLine\", \"\");\n        d(this, \"currentIndent\", 0);\n        d(this, \"marginSymbol\");\n        d(this, \"afterNextNewLineCallback\");\n        this.currentIndent = t;\n    }\n    write(t) {\n        return typeof t == \"string\" ? this.currentLine += t : t.write(this), this;\n    }\n    writeJoined(t, r, n = (i, o)=>o.write(i)) {\n        let i = r.length - 1;\n        for(let o = 0; o < r.length; o++)n(r[o], this), o !== i && this.write(t);\n        return this;\n    }\n    writeLine(t) {\n        return this.write(t).newLine();\n    }\n    newLine() {\n        this.lines.push(this.indentedCurrentLine()), this.currentLine = \"\", this.marginSymbol = void 0;\n        let t = this.afterNextNewLineCallback;\n        return this.afterNextNewLineCallback = void 0, t?.(), this;\n    }\n    withIndent(t) {\n        return this.indent(), t(this), this.unindent(), this;\n    }\n    afterNextNewline(t) {\n        return this.afterNextNewLineCallback = t, this;\n    }\n    indent() {\n        return this.currentIndent++, this;\n    }\n    unindent() {\n        return this.currentIndent > 0 && this.currentIndent--, this;\n    }\n    addMarginSymbol(t) {\n        return this.marginSymbol = t, this;\n    }\n    toString() {\n        return this.lines.concat(this.indentedCurrentLine()).join(`\n`);\n    }\n    getCurrentLineLength() {\n        return this.currentLine.length;\n    }\n    indentedCurrentLine() {\n        let t = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);\n        return this.marginSymbol ? this.marginSymbol + t.slice(1) : t;\n    }\n};\nvar yn = class {\n    constructor(t){\n        this.value = t;\n    }\n    write(t) {\n        t.write(this.value);\n    }\n    markAsError() {\n        this.value.markAsError();\n    }\n};\nvar En = (e)=>e, bn = {\n    bold: En,\n    red: En,\n    green: En,\n    dim: En,\n    enabled: !1\n}, oa = {\n    bold: Y,\n    red: fe,\n    green: je,\n    dim: _e,\n    enabled: !0\n}, St = {\n    write (e) {\n        e.writeLine(\",\");\n    }\n};\nvar Re = class {\n    constructor(t){\n        this.contents = t;\n        d(this, \"isUnderlined\", !1);\n        d(this, \"color\", (t)=>t);\n    }\n    underline() {\n        return this.isUnderlined = !0, this;\n    }\n    setColor(t) {\n        return this.color = t, this;\n    }\n    write(t) {\n        let r = t.getCurrentLineLength();\n        t.write(this.color(this.contents)), this.isUnderlined && t.afterNextNewline(()=>{\n            t.write(\" \".repeat(r)).writeLine(this.color(\"~\".repeat(this.contents.length)));\n        });\n    }\n};\nvar Ze = class {\n    constructor(){\n        d(this, \"hasError\", !1);\n    }\n    markAsError() {\n        return this.hasError = !0, this;\n    }\n};\nvar At = class extends Ze {\n    constructor(){\n        super(...arguments);\n        d(this, \"items\", []);\n    }\n    addItem(r) {\n        return this.items.push(new yn(r)), this;\n    }\n    getField(r) {\n        return this.items[r];\n    }\n    getPrintWidth() {\n        return this.items.length === 0 ? 2 : Math.max(...this.items.map((n)=>n.value.getPrintWidth())) + 2;\n    }\n    write(r) {\n        if (this.items.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithItems(r);\n    }\n    writeEmpty(r) {\n        let n = new Re(\"[]\");\n        this.hasError && n.setColor(r.context.colors.red).underline(), r.write(n);\n    }\n    writeWithItems(r) {\n        let { colors: n } = r.context;\n        r.writeLine(\"[\").withIndent(()=>r.writeJoined(St, this.items).newLine()).write(\"]\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(n.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n    asObject() {}\n};\nvar It = class e extends Ze {\n    constructor(){\n        super(...arguments);\n        d(this, \"fields\", {});\n        d(this, \"suggestions\", []);\n    }\n    addField(r) {\n        this.fields[r.name] = r;\n    }\n    addSuggestion(r) {\n        this.suggestions.push(r);\n    }\n    getField(r) {\n        return this.fields[r];\n    }\n    getDeepField(r) {\n        let [n, ...i] = r, o = this.getField(n);\n        if (!o) return;\n        let s = o;\n        for (let a of i){\n            let l;\n            if (s.value instanceof e ? l = s.value.getField(a) : s.value instanceof At && (l = s.value.getField(Number(a))), !l) return;\n            s = l;\n        }\n        return s;\n    }\n    getDeepFieldValue(r) {\n        return r.length === 0 ? this : this.getDeepField(r)?.value;\n    }\n    hasField(r) {\n        return !!this.getField(r);\n    }\n    removeAllFields() {\n        this.fields = {};\n    }\n    removeField(r) {\n        delete this.fields[r];\n    }\n    getFields() {\n        return this.fields;\n    }\n    isEmpty() {\n        return Object.keys(this.fields).length === 0;\n    }\n    getFieldValue(r) {\n        return this.getField(r)?.value;\n    }\n    getDeepSubSelectionValue(r) {\n        let n = this;\n        for (let i of r){\n            if (!(n instanceof e)) return;\n            let o = n.getSubSelectionValue(i);\n            if (!o) return;\n            n = o;\n        }\n        return n;\n    }\n    getDeepSelectionParent(r) {\n        let n = this.getSelectionParent();\n        if (!n) return;\n        let i = n;\n        for (let o of r){\n            let s = i.value.getFieldValue(o);\n            if (!s || !(s instanceof e)) return;\n            let a = s.getSelectionParent();\n            if (!a) return;\n            i = a;\n        }\n        return i;\n    }\n    getSelectionParent() {\n        let r = this.getField(\"select\")?.value.asObject();\n        if (r) return {\n            kind: \"select\",\n            value: r\n        };\n        let n = this.getField(\"include\")?.value.asObject();\n        if (n) return {\n            kind: \"include\",\n            value: n\n        };\n    }\n    getSubSelectionValue(r) {\n        return this.getSelectionParent()?.value.fields[r].value;\n    }\n    getPrintWidth() {\n        let r = Object.values(this.fields);\n        return r.length == 0 ? 2 : Math.max(...r.map((i)=>i.getPrintWidth())) + 2;\n    }\n    write(r) {\n        let n = Object.values(this.fields);\n        if (n.length === 0 && this.suggestions.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithContents(r, n);\n    }\n    asObject() {\n        return this;\n    }\n    writeEmpty(r) {\n        let n = new Re(\"{}\");\n        this.hasError && n.setColor(r.context.colors.red).underline(), r.write(n);\n    }\n    writeWithContents(r, n) {\n        r.writeLine(\"{\").withIndent(()=>{\n            r.writeJoined(St, [\n                ...n,\n                ...this.suggestions\n            ]).newLine();\n        }), r.write(\"}\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(r.context.colors.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n};\nvar H = class extends Ze {\n    constructor(r){\n        super();\n        this.text = r;\n    }\n    getPrintWidth() {\n        return this.text.length;\n    }\n    write(r) {\n        let n = new Re(this.text);\n        this.hasError && n.underline().setColor(r.context.colors.red), r.write(n);\n    }\n    asObject() {}\n};\nvar ar = class {\n    constructor(){\n        d(this, \"fields\", []);\n    }\n    addField(t, r) {\n        return this.fields.push({\n            write (n) {\n                let { green: i, dim: o } = n.context.colors;\n                n.write(i(o(`${t}: ${r}`))).addMarginSymbol(i(o(\"+\")));\n            }\n        }), this;\n    }\n    write(t) {\n        let { colors: { green: r } } = t.context;\n        t.writeLine(r(\"{\")).withIndent(()=>{\n            t.writeJoined(St, this.fields).newLine();\n        }).write(r(\"}\")).addMarginSymbol(r(\"+\"));\n    }\n};\nfunction hn(e, t, r) {\n    switch(e.kind){\n        case \"MutuallyExclusiveFields\":\n            ed(e, t);\n            break;\n        case \"IncludeOnScalar\":\n            td(e, t);\n            break;\n        case \"EmptySelection\":\n            rd(e, t, r);\n            break;\n        case \"UnknownSelectionField\":\n            sd(e, t);\n            break;\n        case \"InvalidSelectionValue\":\n            ad(e, t);\n            break;\n        case \"UnknownArgument\":\n            ld(e, t);\n            break;\n        case \"UnknownInputField\":\n            ud(e, t);\n            break;\n        case \"RequiredArgumentMissing\":\n            cd(e, t);\n            break;\n        case \"InvalidArgumentType\":\n            pd(e, t);\n            break;\n        case \"InvalidArgumentValue\":\n            dd(e, t);\n            break;\n        case \"ValueTooLarge\":\n            md(e, t);\n            break;\n        case \"SomeFieldsMissing\":\n            fd(e, t);\n            break;\n        case \"TooManyFieldsGiven\":\n            gd(e, t);\n            break;\n        case \"Union\":\n            na(e, t, r);\n            break;\n        default:\n            throw new Error(\"not implemented: \" + e.kind);\n    }\n}\nfunction ed(e, t) {\n    let r = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    r && (r.getField(e.firstField)?.markAsError(), r.getField(e.secondField)?.markAsError()), t.addErrorMessage((n)=>`Please ${n.bold(\"either\")} use ${n.green(`\\`${e.firstField}\\``)} or ${n.green(`\\`${e.secondField}\\``)}, but ${n.red(\"not both\")} at the same time.`);\n}\nfunction td(e, t) {\n    let [r, n] = lr(e.selectionPath), i = e.outputType, o = t.arguments.getDeepSelectionParent(r)?.value;\n    if (o && (o.getField(n)?.markAsError(), i)) for (let s of i.fields)s.isRelation && o.addSuggestion(new de(s.name, \"true\"));\n    t.addErrorMessage((s)=>{\n        let a = `Invalid scalar field ${s.red(`\\`${n}\\``)} for ${s.bold(\"include\")} statement`;\n        return i ? a += ` on model ${s.bold(i.name)}. ${ur(s)}` : a += \".\", a += `\nNote that ${s.bold(\"include\")} statements only accept relation fields.`, a;\n    });\n}\nfunction rd(e, t, r) {\n    let n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (n) {\n        let i = n.getField(\"omit\")?.value.asObject();\n        if (i) {\n            nd(e, t, i);\n            return;\n        }\n        if (n.hasField(\"select\")) {\n            id(e, t);\n            return;\n        }\n    }\n    if (r?.[vt(e.outputType.name)]) {\n        od(e, t);\n        return;\n    }\n    t.addErrorMessage(()=>`Unknown field at \"${e.selectionPath.join(\".\")} selection\"`);\n}\nfunction nd(e, t, r) {\n    r.removeAllFields();\n    for (let n of e.outputType.fields)r.addSuggestion(new de(n.name, \"false\"));\n    t.addErrorMessage((n)=>`The ${n.red(\"omit\")} statement includes every field of the model ${n.bold(e.outputType.name)}. At least one field must be included in the result`);\n}\nfunction id(e, t) {\n    let r = e.outputType, n = t.arguments.getDeepSelectionParent(e.selectionPath)?.value, i = n?.isEmpty() ?? !1;\n    n && (n.removeAllFields(), ua(n, r)), t.addErrorMessage((o)=>i ? `The ${o.red(\"`select`\")} statement for type ${o.bold(r.name)} must not be empty. ${ur(o)}` : `The ${o.red(\"`select`\")} statement for type ${o.bold(r.name)} needs ${o.bold(\"at least one truthy value\")}.`);\n}\nfunction od(e, t) {\n    let r = new ar;\n    for (let i of e.outputType.fields)i.isRelation || r.addField(i.name, \"false\");\n    let n = new de(\"omit\", r).makeRequired();\n    if (e.selectionPath.length === 0) t.arguments.addSuggestion(n);\n    else {\n        let [i, o] = lr(e.selectionPath), a = t.arguments.getDeepSelectionParent(i)?.value.asObject()?.getField(o);\n        if (a) {\n            let l = a?.value.asObject() ?? new It;\n            l.addSuggestion(n), a.value = l;\n        }\n    }\n    t.addErrorMessage((i)=>`The global ${i.red(\"omit\")} configuration excludes every field of the model ${i.bold(e.outputType.name)}. At least one field must be included in the result`);\n}\nfunction sd(e, t) {\n    let r = ca(e.selectionPath, t);\n    if (r.parentKind !== \"unknown\") {\n        r.field.markAsError();\n        let n = r.parent;\n        switch(r.parentKind){\n            case \"select\":\n                ua(n, e.outputType);\n                break;\n            case \"include\":\n                hd(n, e.outputType);\n                break;\n            case \"omit\":\n                yd(n, e.outputType);\n                break;\n        }\n    }\n    t.addErrorMessage((n)=>{\n        let i = [\n            `Unknown field ${n.red(`\\`${r.fieldName}\\``)}`\n        ];\n        return r.parentKind !== \"unknown\" && i.push(`for ${n.bold(r.parentKind)} statement`), i.push(`on model ${n.bold(`\\`${e.outputType.name}\\``)}.`), i.push(ur(n)), i.join(\" \");\n    });\n}\nfunction ad(e, t) {\n    let r = ca(e.selectionPath, t);\n    r.parentKind !== \"unknown\" && r.field.value.markAsError(), t.addErrorMessage((n)=>`Invalid value for selection field \\`${n.red(r.fieldName)}\\`: ${e.underlyingError}`);\n}\nfunction ld(e, t) {\n    let r = e.argumentPath[0], n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && (n.getField(r)?.markAsError(), Ed(n, e.arguments)), t.addErrorMessage((i)=>aa(i, r, e.arguments.map((o)=>o.name)));\n}\nfunction ud(e, t) {\n    let [r, n] = lr(e.argumentPath), i = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (i) {\n        i.getDeepField(e.argumentPath)?.markAsError();\n        let o = i.getDeepFieldValue(r)?.asObject();\n        o && pa(o, e.inputType);\n    }\n    t.addErrorMessage((o)=>aa(o, n, e.inputType.fields.map((s)=>s.name)));\n}\nfunction aa(e, t, r) {\n    let n = [\n        `Unknown argument \\`${e.red(t)}\\`.`\n    ], i = wd(t, r);\n    return i && n.push(`Did you mean \\`${e.green(i)}\\`?`), r.length > 0 && n.push(ur(e)), n.join(\" \");\n}\nfunction cd(e, t) {\n    let r;\n    t.addErrorMessage((l)=>r?.value instanceof H && r.value.text === \"null\" ? `Argument \\`${l.green(o)}\\` must not be ${l.red(\"null\")}.` : `Argument \\`${l.green(o)}\\` is missing.`);\n    let n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (!n) return;\n    let [i, o] = lr(e.argumentPath), s = new ar, a = n.getDeepFieldValue(i)?.asObject();\n    if (a) if (r = a.getField(o), r && a.removeField(o), e.inputTypes.length === 1 && e.inputTypes[0].kind === \"object\") {\n        for (let l of e.inputTypes[0].fields)s.addField(l.name, l.typeNames.join(\" | \"));\n        a.addSuggestion(new de(o, s).makeRequired());\n    } else {\n        let l = e.inputTypes.map(la).join(\" | \");\n        a.addSuggestion(new de(o, l).makeRequired());\n    }\n}\nfunction la(e) {\n    return e.kind === \"list\" ? `${la(e.elementType)}[]` : e.name;\n}\nfunction pd(e, t) {\n    let r = e.argument.name, n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), t.addErrorMessage((i)=>{\n        let o = wn(\"or\", e.argument.typeNames.map((s)=>i.green(s)));\n        return `Argument \\`${i.bold(r)}\\`: Invalid value provided. Expected ${o}, provided ${i.red(e.inferredType)}.`;\n    });\n}\nfunction dd(e, t) {\n    let r = e.argument.name, n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), t.addErrorMessage((i)=>{\n        let o = [\n            `Invalid value for argument \\`${i.bold(r)}\\``\n        ];\n        if (e.underlyingError && o.push(`: ${e.underlyingError}`), o.push(\".\"), e.argument.typeNames.length > 0) {\n            let s = wn(\"or\", e.argument.typeNames.map((a)=>i.green(a)));\n            o.push(` Expected ${s}.`);\n        }\n        return o.join(\"\");\n    });\n}\nfunction md(e, t) {\n    let r = e.argument.name, n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i;\n    if (n) {\n        let s = n.getDeepField(e.argumentPath)?.value;\n        s?.markAsError(), s instanceof H && (i = s.text);\n    }\n    t.addErrorMessage((o)=>{\n        let s = [\n            \"Unable to fit value\"\n        ];\n        return i && s.push(o.red(i)), s.push(`into a 64-bit signed integer for field \\`${o.bold(r)}\\``), s.join(\" \");\n    });\n}\nfunction fd(e, t) {\n    let r = e.argumentPath[e.argumentPath.length - 1], n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (n) {\n        let i = n.getDeepFieldValue(e.argumentPath)?.asObject();\n        i && pa(i, e.inputType);\n    }\n    t.addErrorMessage((i)=>{\n        let o = [\n            `Argument \\`${i.bold(r)}\\` of type ${i.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 ? e.constraints.requiredFields ? o.push(`${i.green(\"at least one of\")} ${wn(\"or\", e.constraints.requiredFields.map((s)=>`\\`${i.bold(s)}\\``))} arguments.`) : o.push(`${i.green(\"at least one\")} argument.`) : o.push(`${i.green(`at least ${e.constraints.minFieldCount}`)} arguments.`), o.push(ur(i)), o.join(\" \");\n    });\n}\nfunction gd(e, t) {\n    let r = e.argumentPath[e.argumentPath.length - 1], n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i = [];\n    if (n) {\n        let o = n.getDeepFieldValue(e.argumentPath)?.asObject();\n        o && (o.markAsError(), i = Object.keys(o.getFields()));\n    }\n    t.addErrorMessage((o)=>{\n        let s = [\n            `Argument \\`${o.bold(r)}\\` of type ${o.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 && e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"exactly one\")} argument,`) : e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"at most one\")} argument,`) : s.push(`${o.green(`at most ${e.constraints.maxFieldCount}`)} arguments,`), s.push(`but you provided ${wn(\"and\", i.map((a)=>o.red(a)))}. Please choose`), e.constraints.maxFieldCount === 1 ? s.push(\"one.\") : s.push(`${e.constraints.maxFieldCount}.`), s.join(\" \");\n    });\n}\nfunction ua(e, t) {\n    for (let r of t.fields)e.hasField(r.name) || e.addSuggestion(new de(r.name, \"true\"));\n}\nfunction hd(e, t) {\n    for (let r of t.fields)r.isRelation && !e.hasField(r.name) && e.addSuggestion(new de(r.name, \"true\"));\n}\nfunction yd(e, t) {\n    for (let r of t.fields)!e.hasField(r.name) && !r.isRelation && e.addSuggestion(new de(r.name, \"true\"));\n}\nfunction Ed(e, t) {\n    for (let r of t)e.hasField(r.name) || e.addSuggestion(new de(r.name, r.typeNames.join(\" | \")));\n}\nfunction ca(e, t) {\n    let [r, n] = lr(e), i = t.arguments.getDeepSubSelectionValue(r)?.asObject();\n    if (!i) return {\n        parentKind: \"unknown\",\n        fieldName: n\n    };\n    let o = i.getFieldValue(\"select\")?.asObject(), s = i.getFieldValue(\"include\")?.asObject(), a = i.getFieldValue(\"omit\")?.asObject(), l = o?.getField(n);\n    return o && l ? {\n        parentKind: \"select\",\n        parent: o,\n        field: l,\n        fieldName: n\n    } : (l = s?.getField(n), s && l ? {\n        parentKind: \"include\",\n        field: l,\n        parent: s,\n        fieldName: n\n    } : (l = a?.getField(n), a && l ? {\n        parentKind: \"omit\",\n        field: l,\n        parent: a,\n        fieldName: n\n    } : {\n        parentKind: \"unknown\",\n        fieldName: n\n    }));\n}\nfunction pa(e, t) {\n    if (t.kind === \"object\") for (let r of t.fields)e.hasField(r.name) || e.addSuggestion(new de(r.name, r.typeNames.join(\" | \")));\n}\nfunction lr(e) {\n    let t = [\n        ...e\n    ], r = t.pop();\n    if (!r) throw new Error(\"unexpected empty path\");\n    return [\n        t,\n        r\n    ];\n}\nfunction ur({ green: e, enabled: t }) {\n    return \"Available options are \" + (t ? `listed in ${e(\"green\")}` : \"marked with ?\") + \".\";\n}\nfunction wn(e, t) {\n    if (t.length === 1) return t[0];\n    let r = [\n        ...t\n    ], n = r.pop();\n    return `${r.join(\", \")} ${e} ${n}`;\n}\nvar bd = 3;\nfunction wd(e, t) {\n    let r = 1 / 0, n;\n    for (let i of t){\n        let o = (0, sa.default)(e, i);\n        o > bd || o < r && (r = o, n = i);\n    }\n    return n;\n}\nfunction da(e) {\n    return e.substring(0, 1).toLowerCase() + e.substring(1);\n}\nvar cr = class {\n    constructor(t, r, n, i, o){\n        d(this, \"modelName\");\n        d(this, \"name\");\n        d(this, \"typeName\");\n        d(this, \"isList\");\n        d(this, \"isEnum\");\n        this.modelName = t, this.name = r, this.typeName = n, this.isList = i, this.isEnum = o;\n    }\n    _toGraphQLInputType() {\n        let t = this.isList ? \"List\" : \"\", r = this.isEnum ? \"Enum\" : \"\";\n        return `${t}${r}${this.typeName}FieldRefInput<${this.modelName}>`;\n    }\n};\nfunction kt(e) {\n    return e instanceof cr;\n}\nvar xn = Symbol(), Gi = new WeakMap, qe = class {\n    constructor(t){\n        t === xn ? Gi.set(this, `Prisma.${this._getName()}`) : Gi.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);\n    }\n    _getName() {\n        return this.constructor.name;\n    }\n    toString() {\n        return Gi.get(this);\n    }\n}, pr = class extends qe {\n    _getNamespace() {\n        return \"NullTypes\";\n    }\n}, dr = class extends pr {\n};\nJi(dr, \"DbNull\");\nvar mr = class extends pr {\n};\nJi(mr, \"JsonNull\");\nvar fr = class extends pr {\n};\nJi(fr, \"AnyNull\");\nvar Pn = {\n    classes: {\n        DbNull: dr,\n        JsonNull: mr,\n        AnyNull: fr\n    },\n    instances: {\n        DbNull: new dr(xn),\n        JsonNull: new mr(xn),\n        AnyNull: new fr(xn)\n    }\n};\nfunction Ji(e, t) {\n    Object.defineProperty(e, \"name\", {\n        value: t,\n        configurable: !0\n    });\n}\nvar ma = \": \", vn = class {\n    constructor(t, r){\n        this.name = t;\n        this.value = r;\n        d(this, \"hasError\", !1);\n    }\n    markAsError() {\n        this.hasError = !0;\n    }\n    getPrintWidth() {\n        return this.name.length + this.value.getPrintWidth() + ma.length;\n    }\n    write(t) {\n        let r = new Re(this.name);\n        this.hasError && r.underline().setColor(t.context.colors.red), t.write(r).write(ma).write(this.value);\n    }\n};\nvar Wi = class {\n    constructor(t){\n        d(this, \"arguments\");\n        d(this, \"errorMessages\", []);\n        this.arguments = t;\n    }\n    write(t) {\n        t.write(this.arguments);\n    }\n    addErrorMessage(t) {\n        this.errorMessages.push(t);\n    }\n    renderAllMessages(t) {\n        return this.errorMessages.map((r)=>r(t)).join(`\n`);\n    }\n};\nfunction Ot(e) {\n    return new Wi(fa(e));\n}\nfunction fa(e) {\n    let t = new It;\n    for (let [r, n] of Object.entries(e)){\n        let i = new vn(r, ga(n));\n        t.addField(i);\n    }\n    return t;\n}\nfunction ga(e) {\n    if (typeof e == \"string\") return new H(JSON.stringify(e));\n    if (typeof e == \"number\" || typeof e == \"boolean\") return new H(String(e));\n    if (typeof e == \"bigint\") return new H(`${e}n`);\n    if (e === null) return new H(\"null\");\n    if (e === void 0) return new H(\"undefined\");\n    if (Ct(e)) return new H(`new Prisma.Decimal(\"${e.toFixed()}\")`);\n    if (e instanceof Uint8Array) return Buffer.isBuffer(e) ? new H(`Buffer.alloc(${e.byteLength})`) : new H(`new Uint8Array(${e.byteLength})`);\n    if (e instanceof Date) {\n        let t = dn(e) ? e.toISOString() : \"Invalid Date\";\n        return new H(`new Date(\"${t}\")`);\n    }\n    return e instanceof qe ? new H(`Prisma.${e._getName()}`) : kt(e) ? new H(`prisma.${da(e.modelName)}.$fields.${e.name}`) : Array.isArray(e) ? xd(e) : typeof e == \"object\" ? fa(e) : new H(Object.prototype.toString.call(e));\n}\nfunction xd(e) {\n    let t = new At;\n    for (let r of e)t.addItem(ga(r));\n    return t;\n}\nfunction Tn(e, t) {\n    let r = t === \"pretty\" ? oa : bn, n = e.renderAllMessages(r), i = new Rt(0, {\n        colors: r\n    }).write(e).toString();\n    return {\n        message: n,\n        args: i\n    };\n}\nfunction Cn({ args: e, errors: t, errorFormat: r, callsite: n, originalMethod: i, clientVersion: o, globalOmit: s }) {\n    let a = Ot(e);\n    for (let p of t)hn(p, a, s);\n    let { message: l, args: u } = Tn(a, r), c = gn({\n        message: l,\n        callsite: n,\n        originalMethod: i,\n        showColors: r === \"pretty\",\n        callArguments: u\n    });\n    throw new re(c, {\n        clientVersion: o\n    });\n}\nvar Se = class {\n    constructor(){\n        d(this, \"_map\", new Map);\n    }\n    get(t) {\n        return this._map.get(t)?.value;\n    }\n    set(t, r) {\n        this._map.set(t, {\n            value: r\n        });\n    }\n    getOrCreate(t, r) {\n        let n = this._map.get(t);\n        if (n) return n.value;\n        let i = r();\n        return this.set(t, i), i;\n    }\n};\nfunction gr(e) {\n    let t;\n    return {\n        get () {\n            return t || (t = {\n                value: e()\n            }), t.value;\n        }\n    };\n}\nfunction Ae(e) {\n    return e.replace(/^./, (t)=>t.toLowerCase());\n}\nfunction ya(e, t, r) {\n    let n = Ae(r);\n    return !t.result || !(t.result.$allModels || t.result[n]) ? e : Pd({\n        ...e,\n        ...ha(t.name, e, t.result.$allModels),\n        ...ha(t.name, e, t.result[n])\n    });\n}\nfunction Pd(e) {\n    let t = new Se, r = (n, i)=>t.getOrCreate(n, ()=>i.has(n) ? [\n                n\n            ] : (i.add(n), e[n] ? e[n].needs.flatMap((o)=>r(o, i)) : [\n                n\n            ]));\n    return bt(e, (n)=>({\n            ...n,\n            needs: r(n.name, new Set)\n        }));\n}\nfunction ha(e, t, r) {\n    return r ? bt(r, ({ needs: n, compute: i }, o)=>({\n            name: o,\n            needs: n ? Object.keys(n).filter((s)=>n[s]) : [],\n            compute: vd(t, o, i)\n        })) : {};\n}\nfunction vd(e, t, r) {\n    let n = e?.[t]?.compute;\n    return n ? (i)=>r({\n            ...i,\n            [t]: n(i)\n        }) : r;\n}\nfunction Ea(e, t) {\n    if (!t) return e;\n    let r = {\n        ...e\n    };\n    for (let n of Object.values(t))if (e[n.name]) for (let i of n.needs)r[i] = !0;\n    return r;\n}\nfunction ba(e, t) {\n    if (!t) return e;\n    let r = {\n        ...e\n    };\n    for (let n of Object.values(t))if (!e[n.name]) for (let i of n.needs)delete r[i];\n    return r;\n}\nvar Rn = class {\n    constructor(t, r){\n        this.extension = t;\n        this.previous = r;\n        d(this, \"computedFieldsCache\", new Se);\n        d(this, \"modelExtensionsCache\", new Se);\n        d(this, \"queryCallbacksCache\", new Se);\n        d(this, \"clientExtensions\", gr(()=>this.extension.client ? {\n                ...this.previous?.getAllClientExtensions(),\n                ...this.extension.client\n            } : this.previous?.getAllClientExtensions()));\n        d(this, \"batchCallbacks\", gr(()=>{\n            let t = this.previous?.getAllBatchQueryCallbacks() ?? [], r = this.extension.query?.$__internalBatch;\n            return r ? t.concat(r) : t;\n        }));\n    }\n    getAllComputedFields(t) {\n        return this.computedFieldsCache.getOrCreate(t, ()=>ya(this.previous?.getAllComputedFields(t), this.extension, t));\n    }\n    getAllClientExtensions() {\n        return this.clientExtensions.get();\n    }\n    getAllModelExtensions(t) {\n        return this.modelExtensionsCache.getOrCreate(t, ()=>{\n            let r = Ae(t);\n            return !this.extension.model || !(this.extension.model[r] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(t) : {\n                ...this.previous?.getAllModelExtensions(t),\n                ...this.extension.model.$allModels,\n                ...this.extension.model[r]\n            };\n        });\n    }\n    getAllQueryCallbacks(t, r) {\n        return this.queryCallbacksCache.getOrCreate(`${t}:${r}`, ()=>{\n            let n = this.previous?.getAllQueryCallbacks(t, r) ?? [], i = [], o = this.extension.query;\n            return !o || !(o[t] || o.$allModels || o[r] || o.$allOperations) ? n : (o[t] !== void 0 && (o[t][r] !== void 0 && i.push(o[t][r]), o[t].$allOperations !== void 0 && i.push(o[t].$allOperations)), t !== \"$none\" && o.$allModels !== void 0 && (o.$allModels[r] !== void 0 && i.push(o.$allModels[r]), o.$allModels.$allOperations !== void 0 && i.push(o.$allModels.$allOperations)), o[r] !== void 0 && i.push(o[r]), o.$allOperations !== void 0 && i.push(o.$allOperations), n.concat(i));\n        });\n    }\n    getAllBatchQueryCallbacks() {\n        return this.batchCallbacks.get();\n    }\n}, _t = class e {\n    constructor(t){\n        this.head = t;\n    }\n    static empty() {\n        return new e;\n    }\n    static single(t) {\n        return new e(new Rn(t));\n    }\n    isEmpty() {\n        return this.head === void 0;\n    }\n    append(t) {\n        return new e(new Rn(t, this.head));\n    }\n    getAllComputedFields(t) {\n        return this.head?.getAllComputedFields(t);\n    }\n    getAllClientExtensions() {\n        return this.head?.getAllClientExtensions();\n    }\n    getAllModelExtensions(t) {\n        return this.head?.getAllModelExtensions(t);\n    }\n    getAllQueryCallbacks(t, r) {\n        return this.head?.getAllQueryCallbacks(t, r) ?? [];\n    }\n    getAllBatchQueryCallbacks() {\n        return this.head?.getAllBatchQueryCallbacks() ?? [];\n    }\n};\nvar Sn = class {\n    constructor(t){\n        this.name = t;\n    }\n};\nfunction wa(e) {\n    return e instanceof Sn;\n}\nfunction xa(e) {\n    return new Sn(e);\n}\nvar Pa = Symbol(), hr = class {\n    constructor(t){\n        if (t !== Pa) throw new Error(\"Skip instance can not be constructed directly\");\n    }\n    ifUndefined(t) {\n        return t === void 0 ? An : t;\n    }\n}, An = new hr(Pa);\nfunction Ie(e) {\n    return e instanceof hr;\n}\nvar Td = {\n    findUnique: \"findUnique\",\n    findUniqueOrThrow: \"findUniqueOrThrow\",\n    findFirst: \"findFirst\",\n    findFirstOrThrow: \"findFirstOrThrow\",\n    findMany: \"findMany\",\n    count: \"aggregate\",\n    create: \"createOne\",\n    createMany: \"createMany\",\n    createManyAndReturn: \"createManyAndReturn\",\n    update: \"updateOne\",\n    updateMany: \"updateMany\",\n    updateManyAndReturn: \"updateManyAndReturn\",\n    upsert: \"upsertOne\",\n    delete: \"deleteOne\",\n    deleteMany: \"deleteMany\",\n    executeRaw: \"executeRaw\",\n    queryRaw: \"queryRaw\",\n    aggregate: \"aggregate\",\n    groupBy: \"groupBy\",\n    runCommandRaw: \"runCommandRaw\",\n    findRaw: \"findRaw\",\n    aggregateRaw: \"aggregateRaw\"\n}, va = \"explicitly `undefined` values are not allowed\";\nfunction In({ modelName: e, action: t, args: r, runtimeDataModel: n, extensions: i = _t.empty(), callsite: o, clientMethod: s, errorFormat: a, clientVersion: l, previewFeatures: u, globalOmit: c }) {\n    let p = new Hi({\n        runtimeDataModel: n,\n        modelName: e,\n        action: t,\n        rootArgs: r,\n        callsite: o,\n        extensions: i,\n        selectionPath: [],\n        argumentPath: [],\n        originalMethod: s,\n        errorFormat: a,\n        clientVersion: l,\n        previewFeatures: u,\n        globalOmit: c\n    });\n    return {\n        modelName: e,\n        action: Td[t],\n        query: yr(r, p)\n    };\n}\nfunction yr({ select: e, include: t, ...r } = {}, n) {\n    let i = r.omit;\n    return delete r.omit, {\n        arguments: Ca(r, n),\n        selection: Cd(e, t, i, n)\n    };\n}\nfunction Cd(e, t, r, n) {\n    return e ? (t ? n.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"include\",\n        secondField: \"select\",\n        selectionPath: n.getSelectionPath()\n    }) : r && n.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"omit\",\n        secondField: \"select\",\n        selectionPath: n.getSelectionPath()\n    }), Id(e, n)) : Rd(n, t, r);\n}\nfunction Rd(e, t, r) {\n    let n = {};\n    return e.modelOrType && !e.isRawAction() && (n.$composites = !0, n.$scalars = !0), t && Sd(n, t, e), Ad(n, r, e), n;\n}\nfunction Sd(e, t, r) {\n    for (let [n, i] of Object.entries(t)){\n        if (Ie(i)) continue;\n        let o = r.nestSelection(n);\n        if (Ki(i, o), i === !1 || i === void 0) {\n            e[n] = !1;\n            continue;\n        }\n        let s = r.findField(n);\n        if (s && s.kind !== \"object\" && r.throwValidationError({\n            kind: \"IncludeOnScalar\",\n            selectionPath: r.getSelectionPath().concat(n),\n            outputType: r.getOutputTypeDescription()\n        }), s) {\n            e[n] = yr(i === !0 ? {} : i, o);\n            continue;\n        }\n        if (i === !0) {\n            e[n] = !0;\n            continue;\n        }\n        e[n] = yr(i, o);\n    }\n}\nfunction Ad(e, t, r) {\n    let n = r.getComputedFields(), i = {\n        ...r.getGlobalOmit(),\n        ...t\n    }, o = ba(i, n);\n    for (let [s, a] of Object.entries(o)){\n        if (Ie(a)) continue;\n        Ki(a, r.nestSelection(s));\n        let l = r.findField(s);\n        n?.[s] && !l || (e[s] = !a);\n    }\n}\nfunction Id(e, t) {\n    let r = {}, n = t.getComputedFields(), i = Ea(e, n);\n    for (let [o, s] of Object.entries(i)){\n        if (Ie(s)) continue;\n        let a = t.nestSelection(o);\n        Ki(s, a);\n        let l = t.findField(o);\n        if (!(n?.[o] && !l)) {\n            if (s === !1 || s === void 0 || Ie(s)) {\n                r[o] = !1;\n                continue;\n            }\n            if (s === !0) {\n                l?.kind === \"object\" ? r[o] = yr({}, a) : r[o] = !0;\n                continue;\n            }\n            r[o] = yr(s, a);\n        }\n    }\n    return r;\n}\nfunction Ta(e, t) {\n    if (e === null) return null;\n    if (typeof e == \"string\" || typeof e == \"number\" || typeof e == \"boolean\") return e;\n    if (typeof e == \"bigint\") return {\n        $type: \"BigInt\",\n        value: String(e)\n    };\n    if (Tt(e)) {\n        if (dn(e)) return {\n            $type: \"DateTime\",\n            value: e.toISOString()\n        };\n        t.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            selectionPath: t.getSelectionPath(),\n            argumentPath: t.getArgumentPath(),\n            argument: {\n                name: t.getArgumentName(),\n                typeNames: [\n                    \"Date\"\n                ]\n            },\n            underlyingError: \"Provided Date object is invalid\"\n        });\n    }\n    if (wa(e)) return {\n        $type: \"Param\",\n        value: e.name\n    };\n    if (kt(e)) return {\n        $type: \"FieldRef\",\n        value: {\n            _ref: e.name,\n            _container: e.modelName\n        }\n    };\n    if (Array.isArray(e)) return kd(e, t);\n    if (ArrayBuffer.isView(e)) {\n        let { buffer: r, byteOffset: n, byteLength: i } = e;\n        return {\n            $type: \"Bytes\",\n            value: Buffer.from(r, n, i).toString(\"base64\")\n        };\n    }\n    if (Od(e)) return e.values;\n    if (Ct(e)) return {\n        $type: \"Decimal\",\n        value: e.toFixed()\n    };\n    if (e instanceof qe) {\n        if (e !== Pn.instances[e._getName()]) throw new Error(\"Invalid ObjectEnumValue\");\n        return {\n            $type: \"Enum\",\n            value: e._getName()\n        };\n    }\n    if (_d(e)) return e.toJSON();\n    if (typeof e == \"object\") return Ca(e, t);\n    t.throwValidationError({\n        kind: \"InvalidArgumentValue\",\n        selectionPath: t.getSelectionPath(),\n        argumentPath: t.getArgumentPath(),\n        argument: {\n            name: t.getArgumentName(),\n            typeNames: []\n        },\n        underlyingError: `We could not serialize ${Object.prototype.toString.call(e)} value. Serialize the object to JSON or implement a \".toJSON()\" method on it`\n    });\n}\nfunction Ca(e, t) {\n    if (e.$type) return {\n        $type: \"Raw\",\n        value: e\n    };\n    let r = {};\n    for(let n in e){\n        let i = e[n], o = t.nestArgument(n);\n        Ie(i) || (i !== void 0 ? r[n] = Ta(i, o) : t.isPreviewFeatureOn(\"strictUndefinedChecks\") && t.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            argumentPath: o.getArgumentPath(),\n            selectionPath: t.getSelectionPath(),\n            argument: {\n                name: t.getArgumentName(),\n                typeNames: []\n            },\n            underlyingError: va\n        }));\n    }\n    return r;\n}\nfunction kd(e, t) {\n    let r = [];\n    for(let n = 0; n < e.length; n++){\n        let i = t.nestArgument(String(n)), o = e[n];\n        if (o === void 0 || Ie(o)) {\n            let s = o === void 0 ? \"undefined\" : \"Prisma.skip\";\n            t.throwValidationError({\n                kind: \"InvalidArgumentValue\",\n                selectionPath: i.getSelectionPath(),\n                argumentPath: i.getArgumentPath(),\n                argument: {\n                    name: `${t.getArgumentName()}[${n}]`,\n                    typeNames: []\n                },\n                underlyingError: `Can not use \\`${s}\\` value within array. Use \\`null\\` or filter out \\`${s}\\` values`\n            });\n        }\n        r.push(Ta(o, i));\n    }\n    return r;\n}\nfunction Od(e) {\n    return typeof e == \"object\" && e !== null && e.__prismaRawParameters__ === !0;\n}\nfunction _d(e) {\n    return typeof e == \"object\" && e !== null && typeof e.toJSON == \"function\";\n}\nfunction Ki(e, t) {\n    e === void 0 && t.isPreviewFeatureOn(\"strictUndefinedChecks\") && t.throwValidationError({\n        kind: \"InvalidSelectionValue\",\n        selectionPath: t.getSelectionPath(),\n        underlyingError: va\n    });\n}\nvar Hi = class e {\n    constructor(t){\n        this.params = t;\n        d(this, \"modelOrType\");\n        this.params.modelName && (this.modelOrType = this.params.runtimeDataModel.models[this.params.modelName] ?? this.params.runtimeDataModel.types[this.params.modelName]);\n    }\n    throwValidationError(t) {\n        Cn({\n            errors: [\n                t\n            ],\n            originalMethod: this.params.originalMethod,\n            args: this.params.rootArgs ?? {},\n            callsite: this.params.callsite,\n            errorFormat: this.params.errorFormat,\n            clientVersion: this.params.clientVersion,\n            globalOmit: this.params.globalOmit\n        });\n    }\n    getSelectionPath() {\n        return this.params.selectionPath;\n    }\n    getArgumentPath() {\n        return this.params.argumentPath;\n    }\n    getArgumentName() {\n        return this.params.argumentPath[this.params.argumentPath.length - 1];\n    }\n    getOutputTypeDescription() {\n        if (!(!this.params.modelName || !this.modelOrType)) return {\n            name: this.params.modelName,\n            fields: this.modelOrType.fields.map((t)=>({\n                    name: t.name,\n                    typeName: \"boolean\",\n                    isRelation: t.kind === \"object\"\n                }))\n        };\n    }\n    isRawAction() {\n        return [\n            \"executeRaw\",\n            \"queryRaw\",\n            \"runCommandRaw\",\n            \"findRaw\",\n            \"aggregateRaw\"\n        ].includes(this.params.action);\n    }\n    isPreviewFeatureOn(t) {\n        return this.params.previewFeatures.includes(t);\n    }\n    getComputedFields() {\n        if (this.params.modelName) return this.params.extensions.getAllComputedFields(this.params.modelName);\n    }\n    findField(t) {\n        return this.modelOrType?.fields.find((r)=>r.name === t);\n    }\n    nestSelection(t) {\n        let r = this.findField(t), n = r?.kind === \"object\" ? r.type : void 0;\n        return new e({\n            ...this.params,\n            modelName: n,\n            selectionPath: this.params.selectionPath.concat(t)\n        });\n    }\n    getGlobalOmit() {\n        return this.params.modelName && this.shouldApplyGlobalOmit() ? this.params.globalOmit?.[vt(this.params.modelName)] ?? {} : {};\n    }\n    shouldApplyGlobalOmit() {\n        switch(this.params.action){\n            case \"findFirst\":\n            case \"findFirstOrThrow\":\n            case \"findUniqueOrThrow\":\n            case \"findMany\":\n            case \"upsert\":\n            case \"findUnique\":\n            case \"createManyAndReturn\":\n            case \"create\":\n            case \"update\":\n            case \"updateManyAndReturn\":\n            case \"delete\":\n                return !0;\n            case \"executeRaw\":\n            case \"aggregateRaw\":\n            case \"runCommandRaw\":\n            case \"findRaw\":\n            case \"createMany\":\n            case \"deleteMany\":\n            case \"groupBy\":\n            case \"updateMany\":\n            case \"count\":\n            case \"aggregate\":\n            case \"queryRaw\":\n                return !1;\n            default:\n                Me(this.params.action, \"Unknown action\");\n        }\n    }\n    nestArgument(t) {\n        return new e({\n            ...this.params,\n            argumentPath: this.params.argumentPath.concat(t)\n        });\n    }\n};\nfunction Ra(e) {\n    if (!e._hasPreviewFlag(\"metrics\")) throw new re(\"`metrics` preview feature must be enabled in order to access metrics API\", {\n        clientVersion: e._clientVersion\n    });\n}\nvar Dt = class {\n    constructor(t){\n        d(this, \"_client\");\n        this._client = t;\n    }\n    prometheus(t) {\n        return Ra(this._client), this._client._engine.metrics({\n            format: \"prometheus\",\n            ...t\n        });\n    }\n    json(t) {\n        return Ra(this._client), this._client._engine.metrics({\n            format: \"json\",\n            ...t\n        });\n    }\n};\nfunction Sa(e) {\n    return {\n        models: Yi(e.models),\n        enums: Yi(e.enums),\n        types: Yi(e.types)\n    };\n}\nfunction Yi(e) {\n    let t = {};\n    for (let { name: r, ...n } of e)t[r] = n;\n    return t;\n}\nfunction Aa(e, t) {\n    let r = gr(()=>Dd(t));\n    Object.defineProperty(e, \"dmmf\", {\n        get: ()=>r.get()\n    });\n}\nfunction Dd(e) {\n    return {\n        datamodel: {\n            models: zi(e.models),\n            enums: zi(e.enums),\n            types: zi(e.types)\n        }\n    };\n}\nfunction zi(e) {\n    return Object.entries(e).map(([t, r])=>({\n            name: t,\n            ...r\n        }));\n}\nvar Zi = new WeakMap, kn = \"$$PrismaTypedSql\", Er = class {\n    constructor(t, r){\n        Zi.set(this, {\n            sql: t,\n            values: r\n        }), Object.defineProperty(this, kn, {\n            value: kn\n        });\n    }\n    get sql() {\n        return Zi.get(this).sql;\n    }\n    get values() {\n        return Zi.get(this).values;\n    }\n};\nfunction Ia(e) {\n    return (...t)=>new Er(e, t);\n}\nfunction On(e) {\n    return e != null && e[kn] === kn;\n}\nvar su = D(bi());\nvar au = __webpack_require__(/*! async_hooks */ \"async_hooks\"), lu = __webpack_require__(/*! events */ \"events\"), uu = D(__webpack_require__(/*! fs */ \"fs\")), Mr = D(__webpack_require__(/*! path */ \"path\"));\nvar le = class e {\n    constructor(t, r){\n        if (t.length - 1 !== r.length) throw t.length === 0 ? new TypeError(\"Expected at least 1 string\") : new TypeError(`Expected ${t.length} strings to have ${t.length - 1} values`);\n        let n = r.reduce((s, a)=>s + (a instanceof e ? a.values.length : 1), 0);\n        this.values = new Array(n), this.strings = new Array(n + 1), this.strings[0] = t[0];\n        let i = 0, o = 0;\n        for(; i < r.length;){\n            let s = r[i++], a = t[i];\n            if (s instanceof e) {\n                this.strings[o] += s.strings[0];\n                let l = 0;\n                for(; l < s.values.length;)this.values[o++] = s.values[l++], this.strings[o] = s.strings[l];\n                this.strings[o] += a;\n            } else this.values[o++] = s, this.strings[o] = a;\n        }\n    }\n    get sql() {\n        let t = this.strings.length, r = 1, n = this.strings[0];\n        for(; r < t;)n += `?${this.strings[r++]}`;\n        return n;\n    }\n    get statement() {\n        let t = this.strings.length, r = 1, n = this.strings[0];\n        for(; r < t;)n += `:${r}${this.strings[r++]}`;\n        return n;\n    }\n    get text() {\n        let t = this.strings.length, r = 1, n = this.strings[0];\n        for(; r < t;)n += `$${r}${this.strings[r++]}`;\n        return n;\n    }\n    inspect() {\n        return {\n            sql: this.sql,\n            statement: this.statement,\n            text: this.text,\n            values: this.values\n        };\n    }\n};\nfunction ka(e, t = \",\", r = \"\", n = \"\") {\n    if (e.length === 0) throw new TypeError(\"Expected `join([])` to be called with an array of multiple elements, but got an empty array\");\n    return new le([\n        r,\n        ...Array(e.length - 1).fill(t),\n        n\n    ], e);\n}\nfunction Xi(e) {\n    return new le([\n        e\n    ], []);\n}\nvar Oa = Xi(\"\");\nfunction eo(e, ...t) {\n    return new le(e, t);\n}\nfunction br(e) {\n    return {\n        getKeys () {\n            return Object.keys(e);\n        },\n        getPropertyValue (t) {\n            return e[t];\n        }\n    };\n}\nfunction oe(e, t) {\n    return {\n        getKeys () {\n            return [\n                e\n            ];\n        },\n        getPropertyValue () {\n            return t();\n        }\n    };\n}\nfunction at(e) {\n    let t = new Se;\n    return {\n        getKeys () {\n            return e.getKeys();\n        },\n        getPropertyValue (r) {\n            return t.getOrCreate(r, ()=>e.getPropertyValue(r));\n        },\n        getPropertyDescriptor (r) {\n            return e.getPropertyDescriptor?.(r);\n        }\n    };\n}\nvar _n = {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n};\nfunction Dn(e) {\n    let t = new Set(e);\n    return {\n        getPrototypeOf: ()=>Object.prototype,\n        getOwnPropertyDescriptor: ()=>_n,\n        has: (r, n)=>t.has(n),\n        set: (r, n, i)=>t.add(n) && Reflect.set(r, n, i),\n        ownKeys: ()=>[\n                ...t\n            ]\n    };\n}\nvar _a = Symbol.for(\"nodejs.util.inspect.custom\");\nfunction be(e, t) {\n    let r = Nd(t), n = new Set, i = new Proxy(e, {\n        get (o, s) {\n            if (n.has(s)) return o[s];\n            let a = r.get(s);\n            return a ? a.getPropertyValue(s) : o[s];\n        },\n        has (o, s) {\n            if (n.has(s)) return !0;\n            let a = r.get(s);\n            return a ? a.has?.(s) ?? !0 : Reflect.has(o, s);\n        },\n        ownKeys (o) {\n            let s = Da(Reflect.ownKeys(o), r), a = Da(Array.from(r.keys()), r);\n            return [\n                ...new Set([\n                    ...s,\n                    ...a,\n                    ...n\n                ])\n            ];\n        },\n        set (o, s, a) {\n            return r.get(s)?.getPropertyDescriptor?.(s)?.writable === !1 ? !1 : (n.add(s), Reflect.set(o, s, a));\n        },\n        getOwnPropertyDescriptor (o, s) {\n            let a = Reflect.getOwnPropertyDescriptor(o, s);\n            if (a && !a.configurable) return a;\n            let l = r.get(s);\n            return l ? l.getPropertyDescriptor ? {\n                ..._n,\n                ...l?.getPropertyDescriptor(s)\n            } : _n : a;\n        },\n        defineProperty (o, s, a) {\n            return n.add(s), Reflect.defineProperty(o, s, a);\n        },\n        getPrototypeOf: ()=>Object.prototype\n    });\n    return i[_a] = function() {\n        let o = {\n            ...this\n        };\n        return delete o[_a], o;\n    }, i;\n}\nfunction Nd(e) {\n    let t = new Map;\n    for (let r of e){\n        let n = r.getKeys();\n        for (let i of n)t.set(i, r);\n    }\n    return t;\n}\nfunction Da(e, t) {\n    return e.filter((r)=>t.get(r)?.has?.(r) ?? !0);\n}\nfunction Nt(e) {\n    return {\n        getKeys () {\n            return e;\n        },\n        has () {\n            return !1;\n        },\n        getPropertyValue () {}\n    };\n}\nfunction Lt(e, t) {\n    return {\n        batch: e,\n        transaction: t?.kind === \"batch\" ? {\n            isolationLevel: t.options.isolationLevel\n        } : void 0\n    };\n}\nfunction Na(e) {\n    if (e === void 0) return \"\";\n    let t = Ot(e);\n    return new Rt(0, {\n        colors: bn\n    }).write(t).toString();\n}\nvar Ld = \"P2037\";\nfunction Ft({ error: e, user_facing_error: t }, r, n) {\n    return t.error_code ? new te(Fd(t, n), {\n        code: t.error_code,\n        clientVersion: r,\n        meta: t.meta,\n        batchRequestIdx: t.batch_request_idx\n    }) : new U(e, {\n        clientVersion: r,\n        batchRequestIdx: t.batch_request_idx\n    });\n}\nfunction Fd(e, t) {\n    let r = e.message;\n    return (t === \"postgresql\" || t === \"postgres\" || t === \"mysql\") && e.error_code === Ld && (r += `\nPrisma Accelerate has built-in connection pooling to prevent such errors: https://pris.ly/client/error-accelerate`), r;\n}\nvar wr = \"<unknown>\";\nfunction La(e) {\n    var t = e.split(`\n`);\n    return t.reduce(function(r, n) {\n        var i = qd(n) || jd(n) || Qd(n) || Hd(n) || Jd(n);\n        return i && r.push(i), r;\n    }, []);\n}\nvar Md = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|rsc|<anonymous>|\\/|[a-z]:\\\\|\\\\\\\\).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i, $d = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\nfunction qd(e) {\n    var t = Md.exec(e);\n    if (!t) return null;\n    var r = t[2] && t[2].indexOf(\"native\") === 0, n = t[2] && t[2].indexOf(\"eval\") === 0, i = $d.exec(t[2]);\n    return n && i != null && (t[2] = i[1], t[3] = i[2], t[4] = i[3]), {\n        file: r ? null : t[2],\n        methodName: t[1] || wr,\n        arguments: r ? [\n            t[2]\n        ] : [],\n        lineNumber: t[3] ? +t[3] : null,\n        column: t[4] ? +t[4] : null\n    };\n}\nvar Vd = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|rsc|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction jd(e) {\n    var t = Vd.exec(e);\n    return t ? {\n        file: t[2],\n        methodName: t[1] || wr,\n        arguments: [],\n        lineNumber: +t[3],\n        column: t[4] ? +t[4] : null\n    } : null;\n}\nvar Bd = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|rsc|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i, Ud = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nfunction Qd(e) {\n    var t = Bd.exec(e);\n    if (!t) return null;\n    var r = t[3] && t[3].indexOf(\" > eval\") > -1, n = Ud.exec(t[3]);\n    return r && n != null && (t[3] = n[1], t[4] = n[2], t[5] = null), {\n        file: t[3],\n        methodName: t[1] || wr,\n        arguments: t[2] ? t[2].split(\",\") : [],\n        lineNumber: t[4] ? +t[4] : null,\n        column: t[5] ? +t[5] : null\n    };\n}\nvar Gd = /^\\s*(?:([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i;\nfunction Jd(e) {\n    var t = Gd.exec(e);\n    return t ? {\n        file: t[3],\n        methodName: t[1] || wr,\n        arguments: [],\n        lineNumber: +t[4],\n        column: t[5] ? +t[5] : null\n    } : null;\n}\nvar Wd = /^\\s*at (?:((?:\\[object object\\])?[^\\\\/]+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction Hd(e) {\n    var t = Wd.exec(e);\n    return t ? {\n        file: t[2],\n        methodName: t[1] || wr,\n        arguments: [],\n        lineNumber: +t[3],\n        column: t[4] ? +t[4] : null\n    } : null;\n}\nvar to = class {\n    getLocation() {\n        return null;\n    }\n}, ro = class {\n    constructor(){\n        d(this, \"_error\");\n        this._error = new Error;\n    }\n    getLocation() {\n        let t = this._error.stack;\n        if (!t) return null;\n        let n = La(t).find((i)=>{\n            if (!i.file) return !1;\n            let o = ki(i.file);\n            return o !== \"<anonymous>\" && !o.includes(\"@prisma\") && !o.includes(\"/packages/client/src/runtime/\") && !o.endsWith(\"/runtime/binary.js\") && !o.endsWith(\"/runtime/library.js\") && !o.endsWith(\"/runtime/edge.js\") && !o.endsWith(\"/runtime/edge-esm.js\") && !o.startsWith(\"internal/\") && !i.methodName.includes(\"new \") && !i.methodName.includes(\"getCallSite\") && !i.methodName.includes(\"Proxy.\") && i.methodName.split(\".\").length < 4;\n        });\n        return !n || !n.file ? null : {\n            fileName: n.file,\n            lineNumber: n.lineNumber,\n            columnNumber: n.column\n        };\n    }\n};\nfunction Xe(e) {\n    return e === \"minimal\" ? typeof $EnabledCallSite == \"function\" && e !== \"minimal\" ? new $EnabledCallSite : new to : new ro;\n}\nvar Fa = {\n    _avg: !0,\n    _count: !0,\n    _sum: !0,\n    _min: !0,\n    _max: !0\n};\nfunction Mt(e = {}) {\n    let t = Yd(e);\n    return Object.entries(t).reduce((n, [i, o])=>(Fa[i] !== void 0 ? n.select[i] = {\n            select: o\n        } : n[i] = o, n), {\n        select: {}\n    });\n}\nfunction Yd(e = {}) {\n    return typeof e._count == \"boolean\" ? {\n        ...e,\n        _count: {\n            _all: e._count\n        }\n    } : e;\n}\nfunction Nn(e = {}) {\n    return (t)=>(typeof e._count == \"boolean\" && (t._count = t._count._all), t);\n}\nfunction Ma(e, t) {\n    let r = Nn(e);\n    return t({\n        action: \"aggregate\",\n        unpacker: r,\n        argsMapper: Mt\n    })(e);\n}\nfunction zd(e = {}) {\n    let { select: t, ...r } = e;\n    return typeof t == \"object\" ? Mt({\n        ...r,\n        _count: t\n    }) : Mt({\n        ...r,\n        _count: {\n            _all: !0\n        }\n    });\n}\nfunction Zd(e = {}) {\n    return typeof e.select == \"object\" ? (t)=>Nn(e)(t)._count : (t)=>Nn(e)(t)._count._all;\n}\nfunction $a(e, t) {\n    return t({\n        action: \"count\",\n        unpacker: Zd(e),\n        argsMapper: zd\n    })(e);\n}\nfunction Xd(e = {}) {\n    let t = Mt(e);\n    if (Array.isArray(t.by)) for (let r of t.by)typeof r == \"string\" && (t.select[r] = !0);\n    else typeof t.by == \"string\" && (t.select[t.by] = !0);\n    return t;\n}\nfunction em(e = {}) {\n    return (t)=>(typeof e?._count == \"boolean\" && t.forEach((r)=>{\n            r._count = r._count._all;\n        }), t);\n}\nfunction qa(e, t) {\n    return t({\n        action: \"groupBy\",\n        unpacker: em(e),\n        argsMapper: Xd\n    })(e);\n}\nfunction Va(e, t, r) {\n    if (t === \"aggregate\") return (n)=>Ma(n, r);\n    if (t === \"count\") return (n)=>$a(n, r);\n    if (t === \"groupBy\") return (n)=>qa(n, r);\n}\nfunction ja(e, t) {\n    let r = t.fields.filter((i)=>!i.relationName), n = Mi(r, (i)=>i.name);\n    return new Proxy({}, {\n        get (i, o) {\n            if (o in i || typeof o == \"symbol\") return i[o];\n            let s = n[o];\n            if (s) return new cr(e, o, s.type, s.isList, s.kind === \"enum\");\n        },\n        ...Dn(Object.keys(n))\n    });\n}\nvar Ba = (e)=>Array.isArray(e) ? e : e.split(\".\"), no = (e, t)=>Ba(t).reduce((r, n)=>r && r[n], e), Ua = (e, t, r)=>Ba(t).reduceRight((n, i, o, s)=>Object.assign({}, no(e, s.slice(0, o)), {\n            [i]: n\n        }), r);\nfunction tm(e, t) {\n    return e === void 0 || t === void 0 ? [] : [\n        ...t,\n        \"select\",\n        e\n    ];\n}\nfunction rm(e, t, r) {\n    return t === void 0 ? e ?? {} : Ua(t, r, e || !0);\n}\nfunction io(e, t, r, n, i, o) {\n    let a = e._runtimeDataModel.models[t].fields.reduce((l, u)=>({\n            ...l,\n            [u.name]: u\n        }), {});\n    return (l)=>{\n        let u = Xe(e._errorFormat), c = tm(n, i), p = rm(l, o, c), m = r({\n            dataPath: c,\n            callsite: u\n        })(p), g = nm(e, t);\n        return new Proxy(m, {\n            get (h, y) {\n                if (!g.includes(y)) return h[y];\n                let T = [\n                    a[y].type,\n                    r,\n                    y\n                ], S = [\n                    c,\n                    p\n                ];\n                return io(e, ...T, ...S);\n            },\n            ...Dn([\n                ...g,\n                ...Object.getOwnPropertyNames(m)\n            ])\n        });\n    };\n}\nfunction nm(e, t) {\n    return e._runtimeDataModel.models[t].fields.filter((r)=>r.kind === \"object\").map((r)=>r.name);\n}\nvar im = [\n    \"findUnique\",\n    \"findUniqueOrThrow\",\n    \"findFirst\",\n    \"findFirstOrThrow\",\n    \"create\",\n    \"update\",\n    \"upsert\",\n    \"delete\"\n], om = [\n    \"aggregate\",\n    \"count\",\n    \"groupBy\"\n];\nfunction oo(e, t) {\n    let r = e._extensions.getAllModelExtensions(t) ?? {}, n = [\n        sm(e, t),\n        lm(e, t),\n        br(r),\n        oe(\"name\", ()=>t),\n        oe(\"$name\", ()=>t),\n        oe(\"$parent\", ()=>e._appliedParent)\n    ];\n    return be({}, n);\n}\nfunction sm(e, t) {\n    let r = Ae(t), n = Object.keys(tr.ModelAction).concat(\"count\");\n    return {\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = i, s = (a)=>(l)=>{\n                    let u = Xe(e._errorFormat);\n                    return e._createPrismaPromise((c)=>{\n                        let p = {\n                            args: l,\n                            dataPath: [],\n                            action: o,\n                            model: t,\n                            clientMethod: `${r}.${i}`,\n                            jsModelName: r,\n                            transaction: c,\n                            callsite: u\n                        };\n                        return e._request({\n                            ...p,\n                            ...a\n                        });\n                    }, {\n                        action: o,\n                        args: l,\n                        model: t\n                    });\n                };\n            return im.includes(o) ? io(e, t, s) : am(i) ? Va(e, i, s) : s({});\n        }\n    };\n}\nfunction am(e) {\n    return om.includes(e);\n}\nfunction lm(e, t) {\n    return at(oe(\"fields\", ()=>{\n        let r = e._runtimeDataModel.models[t];\n        return ja(t, r);\n    }));\n}\nfunction Qa(e) {\n    return e.replace(/^./, (t)=>t.toUpperCase());\n}\nvar so = Symbol();\nfunction xr(e) {\n    let t = [\n        um(e),\n        cm(e),\n        oe(so, ()=>e),\n        oe(\"$parent\", ()=>e._appliedParent)\n    ], r = e._extensions.getAllClientExtensions();\n    return r && t.push(br(r)), be(e, t);\n}\nfunction um(e) {\n    let t = Object.getPrototypeOf(e._originalClient), r = [\n        ...new Set(Object.getOwnPropertyNames(t))\n    ];\n    return {\n        getKeys () {\n            return r;\n        },\n        getPropertyValue (n) {\n            return e[n];\n        }\n    };\n}\nfunction cm(e) {\n    let t = Object.keys(e._runtimeDataModel.models), r = t.map(Ae), n = [\n        ...new Set(t.concat(r))\n    ];\n    return at({\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = Qa(i);\n            if (e._runtimeDataModel.models[o] !== void 0) return oo(e, o);\n            if (e._runtimeDataModel.models[i] !== void 0) return oo(e, i);\n        },\n        getPropertyDescriptor (i) {\n            if (!r.includes(i)) return {\n                enumerable: !1\n            };\n        }\n    });\n}\nfunction Ga(e) {\n    return e[so] ? e[so] : e;\n}\nfunction Ja(e) {\n    if (typeof e == \"function\") return e(this);\n    if (e.client?.__AccelerateEngine) {\n        let r = e.client.__AccelerateEngine;\n        this._originalClient._engine = new r(this._originalClient._accelerateEngineConfig);\n    }\n    let t = Object.create(this._originalClient, {\n        _extensions: {\n            value: this._extensions.append(e)\n        },\n        _appliedParent: {\n            value: this,\n            configurable: !0\n        },\n        $use: {\n            value: void 0\n        },\n        $on: {\n            value: void 0\n        }\n    });\n    return xr(t);\n}\nfunction Wa({ result: e, modelName: t, select: r, omit: n, extensions: i }) {\n    let o = i.getAllComputedFields(t);\n    if (!o) return e;\n    let s = [], a = [];\n    for (let l of Object.values(o)){\n        if (n) {\n            if (n[l.name]) continue;\n            let u = l.needs.filter((c)=>n[c]);\n            u.length > 0 && a.push(Nt(u));\n        } else if (r) {\n            if (!r[l.name]) continue;\n            let u = l.needs.filter((c)=>!r[c]);\n            u.length > 0 && a.push(Nt(u));\n        }\n        pm(e, l.needs) && s.push(dm(l, be(e, s)));\n    }\n    return s.length > 0 || a.length > 0 ? be(e, [\n        ...s,\n        ...a\n    ]) : e;\n}\nfunction pm(e, t) {\n    return t.every((r)=>Fi(e, r));\n}\nfunction dm(e, t) {\n    return at(oe(e.name, ()=>e.compute(t)));\n}\nfunction Ln({ visitor: e, result: t, args: r, runtimeDataModel: n, modelName: i }) {\n    if (Array.isArray(t)) {\n        for(let s = 0; s < t.length; s++)t[s] = Ln({\n            result: t[s],\n            args: r,\n            modelName: i,\n            runtimeDataModel: n,\n            visitor: e\n        });\n        return t;\n    }\n    let o = e(t, i, r) ?? t;\n    return r.include && Ha({\n        includeOrSelect: r.include,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), r.select && Ha({\n        includeOrSelect: r.select,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), o;\n}\nfunction Ha({ includeOrSelect: e, result: t, parentModelName: r, runtimeDataModel: n, visitor: i }) {\n    for (let [o, s] of Object.entries(e)){\n        if (!s || t[o] == null || Ie(s)) continue;\n        let l = n.models[r].fields.find((c)=>c.name === o);\n        if (!l || l.kind !== \"object\" || !l.relationName) continue;\n        let u = typeof s == \"object\" ? s : {};\n        t[o] = Ln({\n            visitor: i,\n            result: t[o],\n            args: u,\n            modelName: l.type,\n            runtimeDataModel: n\n        });\n    }\n}\nfunction Ka({ result: e, modelName: t, args: r, extensions: n, runtimeDataModel: i, globalOmit: o }) {\n    return n.isEmpty() || e == null || typeof e != \"object\" || !i.models[t] ? e : Ln({\n        result: e,\n        args: r ?? {},\n        modelName: t,\n        runtimeDataModel: i,\n        visitor: (a, l, u)=>{\n            let c = Ae(l);\n            return Wa({\n                result: a,\n                modelName: c,\n                select: u.select,\n                omit: u.select ? void 0 : {\n                    ...o?.[c],\n                    ...u.omit\n                },\n                extensions: n\n            });\n        }\n    });\n}\nvar mm = [\n    \"$connect\",\n    \"$disconnect\",\n    \"$on\",\n    \"$transaction\",\n    \"$use\",\n    \"$extends\"\n], Ya = mm;\nfunction za(e) {\n    if (e instanceof le) return fm(e);\n    if (On(e)) return gm(e);\n    if (Array.isArray(e)) {\n        let r = [\n            e[0]\n        ];\n        for(let n = 1; n < e.length; n++)r[n] = Pr(e[n]);\n        return r;\n    }\n    let t = {};\n    for(let r in e)t[r] = Pr(e[r]);\n    return t;\n}\nfunction fm(e) {\n    return new le(e.strings, e.values);\n}\nfunction gm(e) {\n    return new Er(e.sql, e.values);\n}\nfunction Pr(e) {\n    if (typeof e != \"object\" || e == null || e instanceof qe || kt(e)) return e;\n    if (Ct(e)) return new Ce(e.toFixed());\n    if (Tt(e)) return new Date(+e);\n    if (ArrayBuffer.isView(e)) return e.slice(0);\n    if (Array.isArray(e)) {\n        let t = e.length, r;\n        for(r = Array(t); t--;)r[t] = Pr(e[t]);\n        return r;\n    }\n    if (typeof e == \"object\") {\n        let t = {};\n        for(let r in e)r === \"__proto__\" ? Object.defineProperty(t, r, {\n            value: Pr(e[r]),\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n        }) : t[r] = Pr(e[r]);\n        return t;\n    }\n    Me(e, \"Unknown value\");\n}\nfunction Xa(e, t, r, n = 0) {\n    return e._createPrismaPromise((i)=>{\n        let o = t.customDataProxyFetch;\n        return \"transaction\" in t && i !== void 0 && (t.transaction?.kind === \"batch\" && t.transaction.lock.then(), t.transaction = i), n === r.length ? e._executeRequest(t) : r[n]({\n            model: t.model,\n            operation: t.model ? t.action : t.clientMethod,\n            args: za(t.args ?? {}),\n            __internalParams: t,\n            query: (s, a = t)=>{\n                let l = a.customDataProxyFetch;\n                return a.customDataProxyFetch = nl(o, l), a.args = s, Xa(e, a, r, n + 1);\n            }\n        });\n    });\n}\nfunction el(e, t) {\n    let { jsModelName: r, action: n, clientMethod: i } = t, o = r ? n : i;\n    if (e._extensions.isEmpty()) return e._executeRequest(t);\n    let s = e._extensions.getAllQueryCallbacks(r ?? \"$none\", o);\n    return Xa(e, t, s);\n}\nfunction tl(e) {\n    return (t)=>{\n        let r = {\n            requests: t\n        }, n = t[0].extensions.getAllBatchQueryCallbacks();\n        return n.length ? rl(r, n, 0, e) : e(r);\n    };\n}\nfunction rl(e, t, r, n) {\n    if (r === t.length) return n(e);\n    let i = e.customDataProxyFetch, o = e.requests[0].transaction;\n    return t[r]({\n        args: {\n            queries: e.requests.map((s)=>({\n                    model: s.modelName,\n                    operation: s.action,\n                    args: s.args\n                })),\n            transaction: o ? {\n                isolationLevel: o.kind === \"batch\" ? o.isolationLevel : void 0\n            } : void 0\n        },\n        __internalParams: e,\n        query (s, a = e) {\n            let l = a.customDataProxyFetch;\n            return a.customDataProxyFetch = nl(i, l), rl(a, t, r + 1, n);\n        }\n    });\n}\nvar Za = (e)=>e;\nfunction nl(e = Za, t = Za) {\n    return (r)=>e(t(r));\n}\nvar il = M(\"prisma:client\"), ol = {\n    Vercel: \"vercel\",\n    \"Netlify CI\": \"netlify\"\n};\nfunction sl({ postinstall: e, ciName: t, clientVersion: r }) {\n    if (il(\"checkPlatformCaching:postinstall\", e), il(\"checkPlatformCaching:ciName\", t), e === !0 && t && t in ol) {\n        let n = `Prisma has detected that this project was built on ${t}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \\`prisma generate\\` command during the build process.\n\nLearn how: https://pris.ly/d/${ol[t]}-build`;\n        throw console.error(n), new C(n, r);\n    }\n}\nfunction al(e, t) {\n    return e ? e.datasources ? e.datasources : e.datasourceUrl ? {\n        [t[0]]: {\n            url: e.datasourceUrl\n        }\n    } : {} : {};\n}\nvar hm = ()=>globalThis.process?.release?.name === \"node\", ym = ()=>!!globalThis.Bun || !!globalThis.process?.versions?.bun, Em = ()=>!!globalThis.Deno, bm = ()=>typeof globalThis.Netlify == \"object\", wm = ()=>typeof globalThis.EdgeRuntime == \"object\", xm = ()=>globalThis.navigator?.userAgent === \"Cloudflare-Workers\";\nfunction Pm() {\n    return [\n        [\n            bm,\n            \"netlify\"\n        ],\n        [\n            wm,\n            \"edge-light\"\n        ],\n        [\n            xm,\n            \"workerd\"\n        ],\n        [\n            Em,\n            \"deno\"\n        ],\n        [\n            ym,\n            \"bun\"\n        ],\n        [\n            hm,\n            \"node\"\n        ]\n    ].flatMap((r)=>r[0]() ? [\n            r[1]\n        ] : []).at(0) ?? \"\";\n}\nvar vm = {\n    node: \"Node.js\",\n    workerd: \"Cloudflare Workers\",\n    deno: \"Deno and Deno Deploy\",\n    netlify: \"Netlify Edge Functions\",\n    \"edge-light\": \"Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)\"\n};\nfunction Fn() {\n    let e = Pm();\n    return {\n        id: e,\n        prettyName: vm[e] || e,\n        isEdge: [\n            \"workerd\",\n            \"deno\",\n            \"netlify\",\n            \"edge-light\"\n        ].includes(e)\n    };\n}\nvar dl = D(__webpack_require__(/*! fs */ \"fs\")), vr = D(__webpack_require__(/*! path */ \"path\"));\nfunction Mn(e) {\n    let { runtimeBinaryTarget: t } = e;\n    return `Add \"${t}\" to \\`binaryTargets\\` in the \"schema.prisma\" file and run \\`prisma generate\\` after saving it:\n\n${Tm(e)}`;\n}\nfunction Tm(e) {\n    let { generator: t, generatorBinaryTargets: r, runtimeBinaryTarget: n } = e, i = {\n        fromEnvVar: null,\n        value: n\n    }, o = [\n        ...r,\n        i\n    ];\n    return Di({\n        ...t,\n        binaryTargets: o\n    });\n}\nfunction et(e) {\n    let { runtimeBinaryTarget: t } = e;\n    return `Prisma Client could not locate the Query Engine for runtime \"${t}\".`;\n}\nfunction tt(e) {\n    let { searchedLocations: t } = e;\n    return `The following locations have been searched:\n${[\n        ...new Set(t)\n    ].map((i)=>`  ${i}`).join(`\n`)}`;\n}\nfunction ll(e) {\n    let { runtimeBinaryTarget: t } = e;\n    return `${et(e)}\n\nThis happened because \\`binaryTargets\\` have been pinned, but the actual deployment also required \"${t}\".\n${Mn(e)}\n\n${tt(e)}`;\n}\nfunction $n(e) {\n    return `We would appreciate if you could take the time to share some information with us.\nPlease help us by answering a few questions: https://pris.ly/${e}`;\n}\nfunction qn(e) {\n    let { errorStack: t } = e;\n    return t?.match(/\\/\\.next|\\/next@|\\/next\\//) ? `\n\nWe detected that you are using Next.js, learn how to fix this: https://pris.ly/d/engine-not-found-nextjs.` : \"\";\n}\nfunction ul(e) {\n    let { queryEngineName: t } = e;\n    return `${et(e)}${qn(e)}\n\nThis is likely caused by a bundler that has not copied \"${t}\" next to the resulting bundle.\nEnsure that \"${t}\" has been copied next to the bundle or in \"${e.expectedLocation}\".\n\n${$n(\"engine-not-found-bundler-investigation\")}\n\n${tt(e)}`;\n}\nfunction cl(e) {\n    let { runtimeBinaryTarget: t, generatorBinaryTargets: r } = e, n = r.find((i)=>i.native);\n    return `${et(e)}\n\nThis happened because Prisma Client was generated for \"${n?.value ?? \"unknown\"}\", but the actual deployment required \"${t}\".\n${Mn(e)}\n\n${tt(e)}`;\n}\nfunction pl(e) {\n    let { queryEngineName: t } = e;\n    return `${et(e)}${qn(e)}\n\nThis is likely caused by tooling that has not copied \"${t}\" to the deployment folder.\nEnsure that you ran \\`prisma generate\\` and that \"${t}\" has been copied to \"${e.expectedLocation}\".\n\n${$n(\"engine-not-found-tooling-investigation\")}\n\n${tt(e)}`;\n}\nvar Cm = M(\"prisma:client:engines:resolveEnginePath\"), Rm = ()=>new RegExp(\"runtime[\\\\\\\\/]library\\\\.m?js$\");\nasync function ml(e, t) {\n    let r = {\n        binary: process.env.PRISMA_QUERY_ENGINE_BINARY,\n        library: process.env.PRISMA_QUERY_ENGINE_LIBRARY\n    }[e] ?? t.prismaPath;\n    if (r !== void 0) return r;\n    let { enginePath: n, searchedLocations: i } = await Sm(e, t);\n    if (Cm(\"enginePath\", n), n !== void 0 && e === \"binary\" && Pi(n), n !== void 0) return t.prismaPath = n;\n    let o = await ot(), s = t.generator?.binaryTargets ?? [], a = s.some((m)=>m.native), l = !s.some((m)=>m.value === o), u = __filename.match(Rm()) === null, c = {\n        searchedLocations: i,\n        generatorBinaryTargets: s,\n        generator: t.generator,\n        runtimeBinaryTarget: o,\n        queryEngineName: fl(e, o),\n        expectedLocation: vr.default.relative(process.cwd(), t.dirname),\n        errorStack: new Error().stack\n    }, p;\n    throw a && l ? p = cl(c) : l ? p = ll(c) : u ? p = ul(c) : p = pl(c), new C(p, t.clientVersion);\n}\nasync function Sm(engineType, config) {\n    let binaryTarget = await ot(), searchedLocations = [], dirname = eval(\"__dirname\"), searchLocations = [\n        config.dirname,\n        vr.default.resolve(dirname, \"..\"),\n        config.generator?.output?.value ?? dirname,\n        vr.default.resolve(dirname, \"../../../.prisma/client\"),\n        \"/tmp/prisma-engines\",\n        config.cwd\n    ];\n    __filename.includes(\"resolveEnginePath\") && searchLocations.push(cs());\n    for (let e of searchLocations){\n        let t = fl(engineType, binaryTarget), r = vr.default.join(e, t);\n        if (searchedLocations.push(e), dl.default.existsSync(r)) return {\n            enginePath: r,\n            searchedLocations\n        };\n    }\n    return {\n        enginePath: void 0,\n        searchedLocations\n    };\n}\nfunction fl(e, t) {\n    return e === \"library\" ? Br(t, \"fs\") : `query-engine-${t}${t === \"windows\" ? \".exe\" : \"\"}`;\n}\nvar ao = D(Li());\nfunction gl(e) {\n    return e ? e.replace(/\".*\"/g, '\"X\"').replace(/[\\s:\\[]([+-]?([0-9]*[.])?[0-9]+)/g, (t)=>`${t[0]}5`) : \"\";\n}\nfunction hl(e) {\n    return e.split(`\n`).map((t)=>t.replace(/^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)\\s*/, \"\").replace(/\\+\\d+\\s*ms$/, \"\")).join(`\n`);\n}\nvar yl = D(_s());\nfunction El({ title: e, user: t = \"prisma\", repo: r = \"prisma\", template: n = \"bug_report.yml\", body: i }) {\n    return (0, yl.default)({\n        user: t,\n        repo: r,\n        template: n,\n        title: e,\n        body: i\n    });\n}\nfunction bl({ version: e, binaryTarget: t, title: r, description: n, engineVersion: i, database: o, query: s }) {\n    let a = qo(6e3 - (s?.length ?? 0)), l = hl((0, ao.default)(a)), u = n ? `# Description\n\\`\\`\\`\n${n}\n\\`\\`\\`` : \"\", c = (0, ao.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:\n## Versions\n\n| Name            | Version            |\n|-----------------|--------------------|\n| Node            | ${process.version?.padEnd(19)}| \n| OS              | ${t?.padEnd(19)}|\n| Prisma Client   | ${e?.padEnd(19)}|\n| Query Engine    | ${i?.padEnd(19)}|\n| Database        | ${o?.padEnd(19)}|\n\n${u}\n\n## Logs\n\\`\\`\\`\n${l}\n\\`\\`\\`\n\n## Client Snippet\n\\`\\`\\`ts\n// PLEASE FILL YOUR CODE SNIPPET HERE\n\\`\\`\\`\n\n## Schema\n\\`\\`\\`prisma\n// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE\n\\`\\`\\`\n\n## Prisma Engine Query\n\\`\\`\\`\n${s ? gl(s) : \"\"}\n\\`\\`\\`\n`), p = El({\n        title: r,\n        body: c\n    });\n    return `${r}\n\nThis is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.\n\n${ee(p)}\n\nIf you want the Prisma team to look into it, please open the link above \\u{1F64F}\nTo increase the chance of success, please post your schema and a snippet of\nhow you used Prisma Client in the issue. \n`;\n}\nfunction $t({ inlineDatasources: e, overrideDatasources: t, env: r, clientVersion: n }) {\n    let i, o = Object.keys(e)[0], s = e[o]?.url, a = t[o]?.url;\n    if (o === void 0 ? i = void 0 : a ? i = a : s?.value ? i = s.value : s?.fromEnvVar && (i = r[s.fromEnvVar]), s?.fromEnvVar !== void 0 && i === void 0) throw new C(`error: Environment variable not found: ${s.fromEnvVar}.`, n);\n    if (i === void 0) throw new C(\"error: Missing URL environment variable, value, or override.\", n);\n    return i;\n}\nvar Vn = class extends Error {\n    constructor(r, n){\n        super(r);\n        d(this, \"clientVersion\");\n        d(this, \"cause\");\n        this.clientVersion = n.clientVersion, this.cause = n.cause;\n    }\n    get [Symbol.toStringTag]() {\n        return this.name;\n    }\n};\nvar ue = class extends Vn {\n    constructor(r, n){\n        super(r, n);\n        d(this, \"isRetryable\");\n        this.isRetryable = n.isRetryable ?? !0;\n    }\n};\nfunction A(e, t) {\n    return {\n        ...e,\n        isRetryable: t\n    };\n}\nvar qt = class extends ue {\n    constructor(r){\n        super(\"This request must be retried\", A(r, !0));\n        d(this, \"name\", \"ForcedRetryError\");\n        d(this, \"code\", \"P5001\");\n    }\n};\nx(qt, \"ForcedRetryError\");\nvar lt = class extends ue {\n    constructor(r, n){\n        super(r, A(n, !1));\n        d(this, \"name\", \"InvalidDatasourceError\");\n        d(this, \"code\", \"P6001\");\n    }\n};\nx(lt, \"InvalidDatasourceError\");\nvar ut = class extends ue {\n    constructor(r, n){\n        super(r, A(n, !1));\n        d(this, \"name\", \"NotImplementedYetError\");\n        d(this, \"code\", \"P5004\");\n    }\n};\nx(ut, \"NotImplementedYetError\");\nvar j = class extends ue {\n    constructor(r, n){\n        super(r, n);\n        d(this, \"response\");\n        this.response = n.response;\n        let i = this.response.headers.get(\"prisma-request-id\");\n        if (i) {\n            let o = `(The request id was: ${i})`;\n            this.message = this.message + \" \" + o;\n        }\n    }\n};\nvar ct = class extends j {\n    constructor(r){\n        super(\"Schema needs to be uploaded\", A(r, !0));\n        d(this, \"name\", \"SchemaMissingError\");\n        d(this, \"code\", \"P5005\");\n    }\n};\nx(ct, \"SchemaMissingError\");\nvar lo = \"This request could not be understood by the server\", Tr = class extends j {\n    constructor(r, n, i){\n        super(n || lo, A(r, !1));\n        d(this, \"name\", \"BadRequestError\");\n        d(this, \"code\", \"P5000\");\n        i && (this.code = i);\n    }\n};\nx(Tr, \"BadRequestError\");\nvar Cr = class extends j {\n    constructor(r, n){\n        super(\"Engine not started: healthcheck timeout\", A(r, !0));\n        d(this, \"name\", \"HealthcheckTimeoutError\");\n        d(this, \"code\", \"P5013\");\n        d(this, \"logs\");\n        this.logs = n;\n    }\n};\nx(Cr, \"HealthcheckTimeoutError\");\nvar Rr = class extends j {\n    constructor(r, n, i){\n        super(n, A(r, !0));\n        d(this, \"name\", \"EngineStartupError\");\n        d(this, \"code\", \"P5014\");\n        d(this, \"logs\");\n        this.logs = i;\n    }\n};\nx(Rr, \"EngineStartupError\");\nvar Sr = class extends j {\n    constructor(r){\n        super(\"Engine version is not supported\", A(r, !1));\n        d(this, \"name\", \"EngineVersionNotSupportedError\");\n        d(this, \"code\", \"P5012\");\n    }\n};\nx(Sr, \"EngineVersionNotSupportedError\");\nvar uo = \"Request timed out\", Ar = class extends j {\n    constructor(r, n = uo){\n        super(n, A(r, !1));\n        d(this, \"name\", \"GatewayTimeoutError\");\n        d(this, \"code\", \"P5009\");\n    }\n};\nx(Ar, \"GatewayTimeoutError\");\nvar Am = \"Interactive transaction error\", Ir = class extends j {\n    constructor(r, n = Am){\n        super(n, A(r, !1));\n        d(this, \"name\", \"InteractiveTransactionError\");\n        d(this, \"code\", \"P5015\");\n    }\n};\nx(Ir, \"InteractiveTransactionError\");\nvar Im = \"Request parameters are invalid\", kr = class extends j {\n    constructor(r, n = Im){\n        super(n, A(r, !1));\n        d(this, \"name\", \"InvalidRequestError\");\n        d(this, \"code\", \"P5011\");\n    }\n};\nx(kr, \"InvalidRequestError\");\nvar co = \"Requested resource does not exist\", Or = class extends j {\n    constructor(r, n = co){\n        super(n, A(r, !1));\n        d(this, \"name\", \"NotFoundError\");\n        d(this, \"code\", \"P5003\");\n    }\n};\nx(Or, \"NotFoundError\");\nvar po = \"Unknown server error\", Vt = class extends j {\n    constructor(r, n, i){\n        super(n || po, A(r, !0));\n        d(this, \"name\", \"ServerError\");\n        d(this, \"code\", \"P5006\");\n        d(this, \"logs\");\n        this.logs = i;\n    }\n};\nx(Vt, \"ServerError\");\nvar mo = \"Unauthorized, check your connection string\", _r = class extends j {\n    constructor(r, n = mo){\n        super(n, A(r, !1));\n        d(this, \"name\", \"UnauthorizedError\");\n        d(this, \"code\", \"P5007\");\n    }\n};\nx(_r, \"UnauthorizedError\");\nvar fo = \"Usage exceeded, retry again later\", Dr = class extends j {\n    constructor(r, n = fo){\n        super(n, A(r, !0));\n        d(this, \"name\", \"UsageExceededError\");\n        d(this, \"code\", \"P5008\");\n    }\n};\nx(Dr, \"UsageExceededError\");\nasync function km(e) {\n    let t;\n    try {\n        t = await e.text();\n    } catch  {\n        return {\n            type: \"EmptyError\"\n        };\n    }\n    try {\n        let r = JSON.parse(t);\n        if (typeof r == \"string\") switch(r){\n            case \"InternalDataProxyError\":\n                return {\n                    type: \"DataProxyError\",\n                    body: r\n                };\n            default:\n                return {\n                    type: \"UnknownTextError\",\n                    body: r\n                };\n        }\n        if (typeof r == \"object\" && r !== null) {\n            if (\"is_panic\" in r && \"message\" in r && \"error_code\" in r) return {\n                type: \"QueryEngineError\",\n                body: r\n            };\n            if (\"EngineNotStarted\" in r || \"InteractiveTransactionMisrouted\" in r || \"InvalidRequestError\" in r) {\n                let n = Object.values(r)[0].reason;\n                return typeof n == \"string\" && ![\n                    \"SchemaMissing\",\n                    \"EngineVersionNotSupported\"\n                ].includes(n) ? {\n                    type: \"UnknownJsonError\",\n                    body: r\n                } : {\n                    type: \"DataProxyError\",\n                    body: r\n                };\n            }\n        }\n        return {\n            type: \"UnknownJsonError\",\n            body: r\n        };\n    } catch  {\n        return t === \"\" ? {\n            type: \"EmptyError\"\n        } : {\n            type: \"UnknownTextError\",\n            body: t\n        };\n    }\n}\nasync function Nr(e, t) {\n    if (e.ok) return;\n    let r = {\n        clientVersion: t,\n        response: e\n    }, n = await km(e);\n    if (n.type === \"QueryEngineError\") throw new te(n.body.message, {\n        code: n.body.error_code,\n        clientVersion: t\n    });\n    if (n.type === \"DataProxyError\") {\n        if (n.body === \"InternalDataProxyError\") throw new Vt(r, \"Internal Data Proxy error\");\n        if (\"EngineNotStarted\" in n.body) {\n            if (n.body.EngineNotStarted.reason === \"SchemaMissing\") return new ct(r);\n            if (n.body.EngineNotStarted.reason === \"EngineVersionNotSupported\") throw new Sr(r);\n            if (\"EngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, logs: o } = n.body.EngineNotStarted.reason.EngineStartupError;\n                throw new Rr(r, i, o);\n            }\n            if (\"KnownEngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, error_code: o } = n.body.EngineNotStarted.reason.KnownEngineStartupError;\n                throw new C(i, t, o);\n            }\n            if (\"HealthcheckTimeout\" in n.body.EngineNotStarted.reason) {\n                let { logs: i } = n.body.EngineNotStarted.reason.HealthcheckTimeout;\n                throw new Cr(r, i);\n            }\n        }\n        if (\"InteractiveTransactionMisrouted\" in n.body) {\n            let i = {\n                IDParseError: \"Could not parse interactive transaction ID\",\n                NoQueryEngineFoundError: \"Could not find Query Engine for the specified host and transaction ID\",\n                TransactionStartError: \"Could not start interactive transaction\"\n            };\n            throw new Ir(r, i[n.body.InteractiveTransactionMisrouted.reason]);\n        }\n        if (\"InvalidRequestError\" in n.body) throw new kr(r, n.body.InvalidRequestError.reason);\n    }\n    if (e.status === 401 || e.status === 403) throw new _r(r, jt(mo, n));\n    if (e.status === 404) return new Or(r, jt(co, n));\n    if (e.status === 429) throw new Dr(r, jt(fo, n));\n    if (e.status === 504) throw new Ar(r, jt(uo, n));\n    if (e.status >= 500) throw new Vt(r, jt(po, n));\n    if (e.status >= 400) throw new Tr(r, jt(lo, n));\n}\nfunction jt(e, t) {\n    return t.type === \"EmptyError\" ? e : `${e}: ${JSON.stringify(t)}`;\n}\nfunction wl(e) {\n    let t = Math.pow(2, e) * 50, r = Math.ceil(Math.random() * t) - Math.ceil(t / 2), n = t + r;\n    return new Promise((i)=>setTimeout(()=>i(n), n));\n}\nvar Ve = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfunction xl(e) {\n    let t = new TextEncoder().encode(e), r = \"\", n = t.byteLength, i = n % 3, o = n - i, s, a, l, u, c;\n    for(let p = 0; p < o; p = p + 3)c = t[p] << 16 | t[p + 1] << 8 | t[p + 2], s = (c & 16515072) >> 18, a = (c & 258048) >> 12, l = (c & 4032) >> 6, u = c & 63, r += Ve[s] + Ve[a] + Ve[l] + Ve[u];\n    return i == 1 ? (c = t[o], s = (c & 252) >> 2, a = (c & 3) << 4, r += Ve[s] + Ve[a] + \"==\") : i == 2 && (c = t[o] << 8 | t[o + 1], s = (c & 64512) >> 10, a = (c & 1008) >> 4, l = (c & 15) << 2, r += Ve[s] + Ve[a] + Ve[l] + \"=\"), r;\n}\nfunction Pl(e) {\n    if (!!e.generator?.previewFeatures.some((r)=>r.toLowerCase().includes(\"metrics\"))) throw new C(\"The `metrics` preview feature is not yet available with Accelerate.\\nPlease remove `metrics` from the `previewFeatures` in your schema.\\n\\nMore information about Accelerate: https://pris.ly/d/accelerate\", e.clientVersion);\n}\nfunction Om(e) {\n    return e[0] * 1e3 + e[1] / 1e6;\n}\nfunction go(e) {\n    return new Date(Om(e));\n}\nvar vl = {\n    \"@prisma/debug\": \"workspace:*\",\n    \"@prisma/engines-version\": \"6.5.0-73.173f8d54f8d52e692c7e27e72a88314ec7aeff60\",\n    \"@prisma/fetch-engine\": \"workspace:*\",\n    \"@prisma/get-platform\": \"workspace:*\"\n};\nvar Lr = class extends ue {\n    constructor(r, n){\n        super(`Cannot fetch data from service:\n${r}`, A(n, !0));\n        d(this, \"name\", \"RequestError\");\n        d(this, \"code\", \"P5010\");\n    }\n};\nx(Lr, \"RequestError\");\nasync function pt(e, t, r = (n)=>n) {\n    let { clientVersion: n, ...i } = t, o = r(fetch);\n    try {\n        return await o(e, i);\n    } catch (s) {\n        let a = s.message ?? \"Unknown error\";\n        throw new Lr(a, {\n            clientVersion: n,\n            cause: s\n        });\n    }\n}\nvar Dm = /^[1-9][0-9]*\\.[0-9]+\\.[0-9]+$/, Tl = M(\"prisma:client:dataproxyEngine\");\nasync function Nm(e, t) {\n    let r = vl[\"@prisma/engines-version\"], n = t.clientVersion ?? \"unknown\";\n    if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION) return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;\n    if (e.includes(\"accelerate\") && n !== \"0.0.0\" && n !== \"in-memory\") return n;\n    let [i, o] = n?.split(\"-\") ?? [];\n    if (o === void 0 && Dm.test(i)) return i;\n    if (o !== void 0 || n === \"0.0.0\" || n === \"in-memory\") {\n        if (e.startsWith(\"localhost\") || e.startsWith(\"127.0.0.1\")) return \"0.0.0\";\n        let [s] = r.split(\"-\") ?? [], [a, l, u] = s.split(\".\"), c = Lm(`<=${a}.${l}.${u}`), p = await pt(c, {\n            clientVersion: n\n        });\n        if (!p.ok) throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${p.status} ${p.statusText}, response body: ${await p.text() || \"<empty body>\"}`);\n        let m = await p.text();\n        Tl(\"length of body fetched from unpkg.com\", m.length);\n        let g;\n        try {\n            g = JSON.parse(m);\n        } catch (h) {\n            throw console.error(\"JSON.parse error: body fetched from unpkg.com: \", m), h;\n        }\n        return g.version;\n    }\n    throw new ut(\"Only `major.minor.patch` versions are supported by Accelerate.\", {\n        clientVersion: n\n    });\n}\nasync function Cl(e, t) {\n    let r = await Nm(e, t);\n    return Tl(\"version\", r), r;\n}\nfunction Lm(e) {\n    return encodeURI(`https://unpkg.com/prisma@${e}/package.json`);\n}\nvar Rl = 3, jn = M(\"prisma:client:dataproxyEngine\"), ho = class {\n    constructor({ apiKey: t, tracingHelper: r, logLevel: n, logQueries: i, engineHash: o }){\n        d(this, \"apiKey\");\n        d(this, \"tracingHelper\");\n        d(this, \"logLevel\");\n        d(this, \"logQueries\");\n        d(this, \"engineHash\");\n        this.apiKey = t, this.tracingHelper = r, this.logLevel = n, this.logQueries = i, this.engineHash = o;\n    }\n    build({ traceparent: t, interactiveTransaction: r } = {}) {\n        let n = {\n            Authorization: `Bearer ${this.apiKey}`,\n            \"Prisma-Engine-Hash\": this.engineHash\n        };\n        this.tracingHelper.isEnabled() && (n.traceparent = t ?? this.tracingHelper.getTraceParent()), r && (n[\"X-transaction-id\"] = r.id);\n        let i = this.buildCaptureSettings();\n        return i.length > 0 && (n[\"X-capture-telemetry\"] = i.join(\", \")), n;\n    }\n    buildCaptureSettings() {\n        let t = [];\n        return this.tracingHelper.isEnabled() && t.push(\"tracing\"), this.logLevel && t.push(this.logLevel), this.logQueries && t.push(\"query\"), t;\n    }\n}, Fr = class {\n    constructor(t){\n        d(this, \"name\", \"DataProxyEngine\");\n        d(this, \"inlineSchema\");\n        d(this, \"inlineSchemaHash\");\n        d(this, \"inlineDatasources\");\n        d(this, \"config\");\n        d(this, \"logEmitter\");\n        d(this, \"env\");\n        d(this, \"clientVersion\");\n        d(this, \"engineHash\");\n        d(this, \"tracingHelper\");\n        d(this, \"remoteClientVersion\");\n        d(this, \"host\");\n        d(this, \"headerBuilder\");\n        d(this, \"startPromise\");\n        Pl(t), this.config = t, this.env = {\n            ...t.env,\n            ...typeof process < \"u\" ? process.env : {}\n        }, this.inlineSchema = xl(t.inlineSchema), this.inlineDatasources = t.inlineDatasources, this.inlineSchemaHash = t.inlineSchemaHash, this.clientVersion = t.clientVersion, this.engineHash = t.engineVersion, this.logEmitter = t.logEmitter, this.tracingHelper = t.tracingHelper;\n    }\n    apiKey() {\n        return this.headerBuilder.apiKey;\n    }\n    version() {\n        return this.engineHash;\n    }\n    async start() {\n        this.startPromise !== void 0 && await this.startPromise, this.startPromise = (async ()=>{\n            let [t, r] = this.extractHostAndApiKey();\n            this.host = t, this.headerBuilder = new ho({\n                apiKey: r,\n                tracingHelper: this.tracingHelper,\n                logLevel: this.config.logLevel,\n                logQueries: this.config.logQueries,\n                engineHash: this.engineHash\n            }), this.remoteClientVersion = await Cl(t, this.config), jn(\"host\", this.host);\n        })(), await this.startPromise;\n    }\n    async stop() {}\n    propagateResponseExtensions(t) {\n        t?.logs?.length && t.logs.forEach((r)=>{\n            switch(r.level){\n                case \"debug\":\n                case \"trace\":\n                    jn(r);\n                    break;\n                case \"error\":\n                case \"warn\":\n                case \"info\":\n                    {\n                        this.logEmitter.emit(r.level, {\n                            timestamp: go(r.timestamp),\n                            message: r.attributes.message ?? \"\",\n                            target: r.target\n                        });\n                        break;\n                    }\n                case \"query\":\n                    {\n                        this.logEmitter.emit(\"query\", {\n                            query: r.attributes.query ?? \"\",\n                            timestamp: go(r.timestamp),\n                            duration: r.attributes.duration_ms ?? 0,\n                            params: r.attributes.params ?? \"\",\n                            target: r.target\n                        });\n                        break;\n                    }\n                default:\n                    r.level;\n            }\n        }), t?.traces?.length && this.tracingHelper.dispatchEngineSpans(t.traces);\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the remote query engine');\n    }\n    async url(t) {\n        return await this.start(), `https://${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${t}`;\n    }\n    async uploadSchema() {\n        let t = {\n            name: \"schemaUpload\",\n            internal: !0\n        };\n        return this.tracingHelper.runInChildSpan(t, async ()=>{\n            let r = await pt(await this.url(\"schema\"), {\n                method: \"PUT\",\n                headers: this.headerBuilder.build(),\n                body: this.inlineSchema,\n                clientVersion: this.clientVersion\n            });\n            r.ok || jn(\"schema response status\", r.status);\n            let n = await Nr(r, this.clientVersion);\n            if (n) throw this.logEmitter.emit(\"warn\", {\n                message: `Error while uploading schema: ${n.message}`,\n                timestamp: new Date,\n                target: \"\"\n            }), n;\n            this.logEmitter.emit(\"info\", {\n                message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`,\n                timestamp: new Date,\n                target: \"\"\n            });\n        });\n    }\n    request(t, { traceparent: r, interactiveTransaction: n, customDataProxyFetch: i }) {\n        return this.requestInternal({\n            body: t,\n            traceparent: r,\n            interactiveTransaction: n,\n            customDataProxyFetch: i\n        });\n    }\n    async requestBatch(t, { traceparent: r, transaction: n, customDataProxyFetch: i }) {\n        let o = n?.kind === \"itx\" ? n.options : void 0, s = Lt(t, n);\n        return (await this.requestInternal({\n            body: s,\n            customDataProxyFetch: i,\n            interactiveTransaction: o,\n            traceparent: r\n        })).map((l)=>(l.extensions && this.propagateResponseExtensions(l.extensions), \"errors\" in l ? this.convertProtocolErrorsToClientError(l.errors) : l));\n    }\n    requestInternal({ body: t, traceparent: r, customDataProxyFetch: n, interactiveTransaction: i }) {\n        return this.withRetry({\n            actionGerund: \"querying\",\n            callback: async ({ logHttpCall: o })=>{\n                let s = i ? `${i.payload.endpoint}/graphql` : await this.url(\"graphql\");\n                o(s);\n                let a = await pt(s, {\n                    method: \"POST\",\n                    headers: this.headerBuilder.build({\n                        traceparent: r,\n                        interactiveTransaction: i\n                    }),\n                    body: JSON.stringify(t),\n                    clientVersion: this.clientVersion\n                }, n);\n                a.ok || jn(\"graphql response status\", a.status), await this.handleError(await Nr(a, this.clientVersion));\n                let l = await a.json();\n                if (l.extensions && this.propagateResponseExtensions(l.extensions), \"errors\" in l) throw this.convertProtocolErrorsToClientError(l.errors);\n                return \"batchResult\" in l ? l.batchResult : l;\n            }\n        });\n    }\n    async transaction(t, r, n) {\n        let i = {\n            start: \"starting\",\n            commit: \"committing\",\n            rollback: \"rolling back\"\n        };\n        return this.withRetry({\n            actionGerund: `${i[t]} transaction`,\n            callback: async ({ logHttpCall: o })=>{\n                if (t === \"start\") {\n                    let s = JSON.stringify({\n                        max_wait: n.maxWait,\n                        timeout: n.timeout,\n                        isolation_level: n.isolationLevel\n                    }), a = await this.url(\"transaction/start\");\n                    o(a);\n                    let l = await pt(a, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: r.traceparent\n                        }),\n                        body: s,\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Nr(l, this.clientVersion));\n                    let u = await l.json(), { extensions: c } = u;\n                    c && this.propagateResponseExtensions(c);\n                    let p = u.id, m = u[\"data-proxy\"].endpoint;\n                    return {\n                        id: p,\n                        payload: {\n                            endpoint: m\n                        }\n                    };\n                } else {\n                    let s = `${n.payload.endpoint}/${t}`;\n                    o(s);\n                    let a = await pt(s, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: r.traceparent\n                        }),\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Nr(a, this.clientVersion));\n                    let l = await a.json(), { extensions: u } = l;\n                    u && this.propagateResponseExtensions(u);\n                    return;\n                }\n            }\n        });\n    }\n    extractHostAndApiKey() {\n        let t = {\n            clientVersion: this.clientVersion\n        }, r = Object.keys(this.inlineDatasources)[0], n = $t({\n            inlineDatasources: this.inlineDatasources,\n            overrideDatasources: this.config.overrideDatasources,\n            clientVersion: this.clientVersion,\n            env: this.env\n        }), i;\n        try {\n            i = new URL(n);\n        } catch  {\n            throw new lt(`Error validating datasource \\`${r}\\`: the URL must start with the protocol \\`prisma://\\``, t);\n        }\n        let { protocol: o, host: s, searchParams: a } = i;\n        if (o !== \"prisma:\" && o !== Xr) throw new lt(`Error validating datasource \\`${r}\\`: the URL must start with the protocol \\`prisma://\\``, t);\n        let l = a.get(\"api_key\");\n        if (l === null || l.length < 1) throw new lt(`Error validating datasource \\`${r}\\`: the URL must contain a valid API key`, t);\n        return [\n            s,\n            l\n        ];\n    }\n    metrics() {\n        throw new ut(\"Metrics are not yet supported for Accelerate\", {\n            clientVersion: this.clientVersion\n        });\n    }\n    async withRetry(t) {\n        for(let r = 0;; r++){\n            let n = (i)=>{\n                this.logEmitter.emit(\"info\", {\n                    message: `Calling ${i} (n=${r})`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            };\n            try {\n                return await t.callback({\n                    logHttpCall: n\n                });\n            } catch (i) {\n                if (!(i instanceof ue) || !i.isRetryable) throw i;\n                if (r >= Rl) throw i instanceof qt ? i.cause : i;\n                this.logEmitter.emit(\"warn\", {\n                    message: `Attempt ${r + 1}/${Rl} failed for ${t.actionGerund}: ${i.message ?? \"(unknown)\"}`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n                let o = await wl(r);\n                this.logEmitter.emit(\"warn\", {\n                    message: `Retrying after ${o}ms`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            }\n        }\n    }\n    async handleError(t) {\n        if (t instanceof ct) throw await this.uploadSchema(), new qt({\n            clientVersion: this.clientVersion,\n            cause: t\n        });\n        if (t) throw t;\n    }\n    convertProtocolErrorsToClientError(t) {\n        return t.length === 1 ? Ft(t[0], this.config.clientVersion, this.config.activeProvider) : new U(JSON.stringify(t), {\n            clientVersion: this.config.clientVersion\n        });\n    }\n    applyPendingMigrations() {\n        throw new Error(\"Method not implemented.\");\n    }\n};\nfunction Sl(e) {\n    if (e?.kind === \"itx\") return e.options.id;\n}\nvar Eo = D(__webpack_require__(/*! os */ \"os\")), Al = D(__webpack_require__(/*! path */ \"path\"));\nvar yo = Symbol(\"PrismaLibraryEngineCache\");\nfunction Fm() {\n    let e = globalThis;\n    return e[yo] === void 0 && (e[yo] = {}), e[yo];\n}\nfunction Mm(e) {\n    let t = Fm();\n    if (t[e] !== void 0) return t[e];\n    let r = Al.default.toNamespacedPath(e), n = {\n        exports: {}\n    }, i = 0;\n    return process.platform !== \"win32\" && (i = Eo.default.constants.dlopen.RTLD_LAZY | Eo.default.constants.dlopen.RTLD_DEEPBIND), process.dlopen(n, r, i), t[e] = n.exports, n.exports;\n}\nvar Il = {\n    async loadLibrary (e) {\n        let t = await ci(), r = await ml(\"library\", e);\n        try {\n            return e.tracingHelper.runInChildSpan({\n                name: \"loadLibrary\",\n                internal: !0\n            }, ()=>Mm(r));\n        } catch (n) {\n            let i = vi({\n                e: n,\n                platformInfo: t,\n                id: r\n            });\n            throw new C(i, e.clientVersion);\n        }\n    }\n};\nvar bo, kl = {\n    async loadLibrary (e) {\n        let { clientVersion: t, adapter: r, engineWasm: n } = e;\n        if (r === void 0) throw new C(`The \\`adapter\\` option for \\`PrismaClient\\` is required in this context (${Fn().prettyName})`, t);\n        if (n === void 0) throw new C(\"WASM engine was unexpectedly `undefined`\", t);\n        bo === void 0 && (bo = (async ()=>{\n            let o = n.getRuntime(), s = await n.getQueryEngineWasmModule();\n            if (s == null) throw new C(\"The loaded wasm module was unexpectedly `undefined` or `null` once loaded\", t);\n            let a = {\n                \"./query_engine_bg.js\": o\n            }, l = new WebAssembly.Instance(s, a), u = l.exports.__wbindgen_start;\n            return o.__wbg_set_wasm(l.exports), u(), o.QueryEngine;\n        })());\n        let i = await bo;\n        return {\n            debugPanic () {\n                return Promise.reject(\"{}\");\n            },\n            dmmf () {\n                return Promise.resolve(\"{}\");\n            },\n            version () {\n                return {\n                    commit: \"unknown\",\n                    version: \"unknown\"\n                };\n            },\n            QueryEngine: i\n        };\n    }\n};\nvar $m = \"P2036\", ke = M(\"prisma:client:libraryEngine\");\nfunction qm(e) {\n    return e.item_type === \"query\" && \"query\" in e;\n}\nfunction Vm(e) {\n    return \"level\" in e ? e.level === \"error\" && e.message === \"PANIC\" : !1;\n}\nvar Ol = [\n    ...ii,\n    \"native\"\n], jm = 0xffffffffffffffffn, wo = 1n;\nfunction Bm() {\n    let e = wo++;\n    return wo > jm && (wo = 1n), e;\n}\nvar Bt = class {\n    constructor(t, r){\n        d(this, \"name\", \"LibraryEngine\");\n        d(this, \"engine\");\n        d(this, \"libraryInstantiationPromise\");\n        d(this, \"libraryStartingPromise\");\n        d(this, \"libraryStoppingPromise\");\n        d(this, \"libraryStarted\");\n        d(this, \"executingQueryPromise\");\n        d(this, \"config\");\n        d(this, \"QueryEngineConstructor\");\n        d(this, \"libraryLoader\");\n        d(this, \"library\");\n        d(this, \"logEmitter\");\n        d(this, \"libQueryEnginePath\");\n        d(this, \"binaryTarget\");\n        d(this, \"datasourceOverrides\");\n        d(this, \"datamodel\");\n        d(this, \"logQueries\");\n        d(this, \"logLevel\");\n        d(this, \"lastQuery\");\n        d(this, \"loggerRustPanic\");\n        d(this, \"tracingHelper\");\n        d(this, \"versionInfo\");\n        this.libraryLoader = r ?? Il, t.engineWasm !== void 0 && (this.libraryLoader = r ?? kl), this.config = t, this.libraryStarted = !1, this.logQueries = t.logQueries ?? !1, this.logLevel = t.logLevel ?? \"error\", this.logEmitter = t.logEmitter, this.datamodel = t.inlineSchema, this.tracingHelper = t.tracingHelper, t.enableDebugLogs && (this.logLevel = \"debug\");\n        let n = Object.keys(t.overrideDatasources)[0], i = t.overrideDatasources[n]?.url;\n        n !== void 0 && i !== void 0 && (this.datasourceOverrides = {\n            [n]: i\n        }), this.libraryInstantiationPromise = this.instantiateLibrary();\n    }\n    wrapEngine(t) {\n        return {\n            applyPendingMigrations: t.applyPendingMigrations?.bind(t),\n            commitTransaction: this.withRequestId(t.commitTransaction.bind(t)),\n            connect: this.withRequestId(t.connect.bind(t)),\n            disconnect: this.withRequestId(t.disconnect.bind(t)),\n            metrics: t.metrics?.bind(t),\n            query: this.withRequestId(t.query.bind(t)),\n            rollbackTransaction: this.withRequestId(t.rollbackTransaction.bind(t)),\n            sdlSchema: t.sdlSchema?.bind(t),\n            startTransaction: this.withRequestId(t.startTransaction.bind(t)),\n            trace: t.trace.bind(t)\n        };\n    }\n    withRequestId(t) {\n        return async (...r)=>{\n            let n = Bm().toString();\n            try {\n                return await t(...r, n);\n            } finally{\n                if (this.tracingHelper.isEnabled()) {\n                    let i = await this.engine?.trace(n);\n                    if (i) {\n                        let o = JSON.parse(i);\n                        this.tracingHelper.dispatchEngineSpans(o.spans);\n                    }\n                }\n            }\n        };\n    }\n    async applyPendingMigrations() {\n        throw new Error(\"Cannot call this method from this type of engine instance\");\n    }\n    async transaction(t, r, n) {\n        await this.start();\n        let i = JSON.stringify(r), o;\n        if (t === \"start\") {\n            let a = JSON.stringify({\n                max_wait: n.maxWait,\n                timeout: n.timeout,\n                isolation_level: n.isolationLevel\n            });\n            o = await this.engine?.startTransaction(a, i);\n        } else t === \"commit\" ? o = await this.engine?.commitTransaction(n.id, i) : t === \"rollback\" && (o = await this.engine?.rollbackTransaction(n.id, i));\n        let s = this.parseEngineResponse(o);\n        if (Um(s)) {\n            let a = this.getExternalAdapterError(s);\n            throw a ? a.error : new te(s.message, {\n                code: s.error_code,\n                clientVersion: this.config.clientVersion,\n                meta: s.meta\n            });\n        } else if (typeof s.message == \"string\") throw new U(s.message, {\n            clientVersion: this.config.clientVersion\n        });\n        return s;\n    }\n    async instantiateLibrary() {\n        if (ke(\"internalSetup\"), this.libraryInstantiationPromise) return this.libraryInstantiationPromise;\n        ni(), this.binaryTarget = await this.getCurrentBinaryTarget(), await this.tracingHelper.runInChildSpan(\"load_engine\", ()=>this.loadEngine()), this.version();\n    }\n    async getCurrentBinaryTarget() {\n        {\n            if (this.binaryTarget) return this.binaryTarget;\n            let t = await this.tracingHelper.runInChildSpan(\"detect_platform\", ()=>ot());\n            if (!Ol.includes(t)) throw new C(`Unknown ${fe(\"PRISMA_QUERY_ENGINE_LIBRARY\")} ${fe(Y(t))}. Possible binaryTargets: ${je(Ol.join(\", \"))} or a path to the query engine library.\nYou may have to run ${je(\"prisma generate\")} for your changes to take effect.`, this.config.clientVersion);\n            return t;\n        }\n    }\n    parseEngineResponse(t) {\n        if (!t) throw new U(\"Response from the Engine was empty\", {\n            clientVersion: this.config.clientVersion\n        });\n        try {\n            return JSON.parse(t);\n        } catch  {\n            throw new U(\"Unable to JSON.parse response from engine\", {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async loadEngine() {\n        if (!this.engine) {\n            this.QueryEngineConstructor || (this.library = await this.libraryLoader.loadLibrary(this.config), this.QueryEngineConstructor = this.library.QueryEngine);\n            try {\n                let t = new WeakRef(this), { adapter: r } = this.config;\n                r && ke(\"Using driver adapter: %O\", r), this.engine = this.wrapEngine(new this.QueryEngineConstructor({\n                    datamodel: this.datamodel,\n                    env: process.env,\n                    logQueries: this.config.logQueries ?? !1,\n                    ignoreEnvVarErrors: !0,\n                    datasourceOverrides: this.datasourceOverrides ?? {},\n                    logLevel: this.logLevel,\n                    configDir: this.config.cwd,\n                    engineProtocol: \"json\",\n                    enableTracing: this.tracingHelper.isEnabled()\n                }, (n)=>{\n                    t.deref()?.logger(n);\n                }, r));\n            } catch (t) {\n                let r = t, n = this.parseInitError(r.message);\n                throw typeof n == \"string\" ? r : new C(n.message, this.config.clientVersion, n.error_code);\n            }\n        }\n    }\n    logger(t) {\n        let r = this.parseEngineResponse(t);\n        r && (r.level = r?.level.toLowerCase() ?? \"unknown\", qm(r) ? this.logEmitter.emit(\"query\", {\n            timestamp: new Date,\n            query: r.query,\n            params: r.params,\n            duration: Number(r.duration_ms),\n            target: r.module_path\n        }) : Vm(r) ? this.loggerRustPanic = new pe(xo(this, `${r.message}: ${r.reason} in ${r.file}:${r.line}:${r.column}`), this.config.clientVersion) : this.logEmitter.emit(r.level, {\n            timestamp: new Date,\n            message: r.message,\n            target: r.module_path\n        }));\n    }\n    parseInitError(t) {\n        try {\n            return JSON.parse(t);\n        } catch  {}\n        return t;\n    }\n    parseRequestError(t) {\n        try {\n            return JSON.parse(t);\n        } catch  {}\n        return t;\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');\n    }\n    async start() {\n        if (await this.libraryInstantiationPromise, await this.libraryStoppingPromise, this.libraryStartingPromise) return ke(`library already starting, this.libraryStarted: ${this.libraryStarted}`), this.libraryStartingPromise;\n        if (this.libraryStarted) return;\n        let t = async ()=>{\n            ke(\"library starting\");\n            try {\n                let r = {\n                    traceparent: this.tracingHelper.getTraceParent()\n                };\n                await this.engine?.connect(JSON.stringify(r)), this.libraryStarted = !0, ke(\"library started\");\n            } catch (r) {\n                let n = this.parseInitError(r.message);\n                throw typeof n == \"string\" ? r : new C(n.message, this.config.clientVersion, n.error_code);\n            } finally{\n                this.libraryStartingPromise = void 0;\n            }\n        };\n        return this.libraryStartingPromise = this.tracingHelper.runInChildSpan(\"connect\", t), this.libraryStartingPromise;\n    }\n    async stop() {\n        if (await this.libraryStartingPromise, await this.executingQueryPromise, this.libraryStoppingPromise) return ke(\"library is already stopping\"), this.libraryStoppingPromise;\n        if (!this.libraryStarted) return;\n        let t = async ()=>{\n            await new Promise((n)=>setTimeout(n, 5)), ke(\"library stopping\");\n            let r = {\n                traceparent: this.tracingHelper.getTraceParent()\n            };\n            await this.engine?.disconnect(JSON.stringify(r)), this.libraryStarted = !1, this.libraryStoppingPromise = void 0, ke(\"library stopped\");\n        };\n        return this.libraryStoppingPromise = this.tracingHelper.runInChildSpan(\"disconnect\", t), this.libraryStoppingPromise;\n    }\n    version() {\n        return this.versionInfo = this.library?.version(), this.versionInfo?.version ?? \"unknown\";\n    }\n    debugPanic(t) {\n        return this.library?.debugPanic(t);\n    }\n    async request(t, { traceparent: r, interactiveTransaction: n }) {\n        ke(`sending request, this.libraryStarted: ${this.libraryStarted}`);\n        let i = JSON.stringify({\n            traceparent: r\n        }), o = JSON.stringify(t);\n        try {\n            await this.start(), this.executingQueryPromise = this.engine?.query(o, i, n?.id), this.lastQuery = o;\n            let s = this.parseEngineResponse(await this.executingQueryPromise);\n            if (s.errors) throw s.errors.length === 1 ? this.buildQueryError(s.errors[0]) : new U(JSON.stringify(s.errors), {\n                clientVersion: this.config.clientVersion\n            });\n            if (this.loggerRustPanic) throw this.loggerRustPanic;\n            return {\n                data: s\n            };\n        } catch (s) {\n            if (s instanceof C) throw s;\n            if (s.code === \"GenericFailure\" && s.message?.startsWith(\"PANIC:\")) throw new pe(xo(this, s.message), this.config.clientVersion);\n            let a = this.parseRequestError(s.message);\n            throw typeof a == \"string\" ? s : new U(`${a.message}\n${a.backtrace}`, {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async requestBatch(t, { transaction: r, traceparent: n }) {\n        ke(\"requestBatch\");\n        let i = Lt(t, r);\n        await this.start(), this.lastQuery = JSON.stringify(i), this.executingQueryPromise = this.engine.query(this.lastQuery, JSON.stringify({\n            traceparent: n\n        }), Sl(r));\n        let o = await this.executingQueryPromise, s = this.parseEngineResponse(o);\n        if (s.errors) throw s.errors.length === 1 ? this.buildQueryError(s.errors[0]) : new U(JSON.stringify(s.errors), {\n            clientVersion: this.config.clientVersion\n        });\n        let { batchResult: a, errors: l } = s;\n        if (Array.isArray(a)) return a.map((u)=>u.errors && u.errors.length > 0 ? this.loggerRustPanic ?? this.buildQueryError(u.errors[0]) : {\n                data: u\n            });\n        throw l && l.length === 1 ? new Error(l[0].error) : new Error(JSON.stringify(s));\n    }\n    buildQueryError(t) {\n        if (t.user_facing_error.is_panic) return new pe(xo(this, t.user_facing_error.message), this.config.clientVersion);\n        let r = this.getExternalAdapterError(t.user_facing_error);\n        return r ? r.error : Ft(t, this.config.clientVersion, this.config.activeProvider);\n    }\n    getExternalAdapterError(t) {\n        if (t.error_code === $m && this.config.adapter) {\n            let r = t.meta?.id;\n            en(typeof r == \"number\", \"Malformed external JS error received from the engine\");\n            let n = this.config.adapter.errorRegistry.consumeError(r);\n            return en(n, \"External error with reported id was not registered\"), n;\n        }\n    }\n    async metrics(t) {\n        await this.start();\n        let r = await this.engine.metrics(JSON.stringify(t));\n        return t.format === \"prometheus\" ? r : this.parseEngineResponse(r);\n    }\n};\nfunction Um(e) {\n    return typeof e == \"object\" && e !== null && e.error_code !== void 0;\n}\nfunction xo(e, t) {\n    return bl({\n        binaryTarget: e.binaryTarget,\n        title: t,\n        version: e.config.clientVersion,\n        engineVersion: e.versionInfo?.commit,\n        database: e.config.activeProvider,\n        query: e.lastQuery\n    });\n}\nfunction _l({ copyEngine: e = !0 }, t) {\n    let r;\n    try {\n        r = $t({\n            inlineDatasources: t.inlineDatasources,\n            overrideDatasources: t.overrideDatasources,\n            env: {\n                ...t.env,\n                ...process.env\n            },\n            clientVersion: t.clientVersion\n        });\n    } catch  {}\n    let n = !!(r?.startsWith(\"prisma://\") || Ii(r));\n    e && n && or(\"recommend--no-engine\", \"In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)\");\n    let i = Et(t.generator), o = n || !e, s = !!t.adapter, a = i === \"library\", l = i === \"binary\", u = i === \"client\";\n    if (o && s || s && !1) {\n        let c;\n        throw e ? r?.startsWith(\"prisma://\") ? c = [\n            \"Prisma Client was configured to use the `adapter` option but the URL was a `prisma://` URL.\",\n            \"Please either use the `prisma://` URL or remove the `adapter` from the Prisma Client constructor.\"\n        ] : c = [\n            \"Prisma Client was configured to use both the `adapter` and Accelerate, please chose one.\"\n        ] : c = [\n            \"Prisma Client was configured to use the `adapter` option but `prisma generate` was run with `--no-engine`.\",\n            \"Please run `prisma generate` without `--no-engine` to be able to use Prisma Client with the adapter.\"\n        ], new re(c.join(`\n`), {\n            clientVersion: t.clientVersion\n        });\n    }\n    return o ? new Fr(t) : a ? new Bt(t) : new Bt(t);\n}\nfunction Bn({ generator: e }) {\n    return e?.previewFeatures ?? [];\n}\nvar Dl = (e)=>({\n        command: e\n    });\nvar Nl = (e)=>e.strings.reduce((t, r, n)=>`${t}@P${n}${r}`);\nfunction Ut(e) {\n    try {\n        return Ll(e, \"fast\");\n    } catch  {\n        return Ll(e, \"slow\");\n    }\n}\nfunction Ll(e, t) {\n    return JSON.stringify(e.map((r)=>Ml(r, t)));\n}\nfunction Ml(e, t) {\n    if (Array.isArray(e)) return e.map((r)=>Ml(r, t));\n    if (typeof e == \"bigint\") return {\n        prisma__type: \"bigint\",\n        prisma__value: e.toString()\n    };\n    if (Tt(e)) return {\n        prisma__type: \"date\",\n        prisma__value: e.toJSON()\n    };\n    if (Ce.isDecimal(e)) return {\n        prisma__type: \"decimal\",\n        prisma__value: e.toJSON()\n    };\n    if (Buffer.isBuffer(e)) return {\n        prisma__type: \"bytes\",\n        prisma__value: e.toString(\"base64\")\n    };\n    if (Qm(e)) return {\n        prisma__type: \"bytes\",\n        prisma__value: Buffer.from(e).toString(\"base64\")\n    };\n    if (ArrayBuffer.isView(e)) {\n        let { buffer: r, byteOffset: n, byteLength: i } = e;\n        return {\n            prisma__type: \"bytes\",\n            prisma__value: Buffer.from(r, n, i).toString(\"base64\")\n        };\n    }\n    return typeof e == \"object\" && t === \"slow\" ? $l(e) : e;\n}\nfunction Qm(e) {\n    return e instanceof ArrayBuffer || e instanceof SharedArrayBuffer ? !0 : typeof e == \"object\" && e !== null ? e[Symbol.toStringTag] === \"ArrayBuffer\" || e[Symbol.toStringTag] === \"SharedArrayBuffer\" : !1;\n}\nfunction $l(e) {\n    if (typeof e != \"object\" || e === null) return e;\n    if (typeof e.toJSON == \"function\") return e.toJSON();\n    if (Array.isArray(e)) return e.map(Fl);\n    let t = {};\n    for (let r of Object.keys(e))t[r] = Fl(e[r]);\n    return t;\n}\nfunction Fl(e) {\n    return typeof e == \"bigint\" ? e.toString() : $l(e);\n}\nvar Gm = /^(\\s*alter\\s)/i, ql = M(\"prisma:client\");\nfunction Po(e, t, r, n) {\n    if (!(e !== \"postgresql\" && e !== \"cockroachdb\") && r.length > 0 && Gm.exec(t)) throw new Error(`Running ALTER using ${n} is not supported\nUsing the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.\n\nExample:\n  await prisma.$executeRawUnsafe(\\`ALTER USER prisma WITH PASSWORD '\\${password}'\\`)\n\nMore Information: https://pris.ly/d/execute-raw\n`);\n}\nvar vo = ({ clientMethod: e, activeProvider: t })=>(r)=>{\n        let n = \"\", i;\n        if (On(r)) n = r.sql, i = {\n            values: Ut(r.values),\n            __prismaRawParameters__: !0\n        };\n        else if (Array.isArray(r)) {\n            let [o, ...s] = r;\n            n = o, i = {\n                values: Ut(s || []),\n                __prismaRawParameters__: !0\n            };\n        } else switch(t){\n            case \"sqlite\":\n            case \"mysql\":\n                {\n                    n = r.sql, i = {\n                        values: Ut(r.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"cockroachdb\":\n            case \"postgresql\":\n            case \"postgres\":\n                {\n                    n = r.text, i = {\n                        values: Ut(r.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"sqlserver\":\n                {\n                    n = Nl(r), i = {\n                        values: Ut(r.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            default:\n                throw new Error(`The ${t} provider does not support ${e}`);\n        }\n        return i?.values ? ql(`prisma.${e}(${n}, ${i.values})`) : ql(`prisma.${e}(${n})`), {\n            query: n,\n            parameters: i\n        };\n    }, Vl = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e.strings,\n            ...e.values\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        let [t, ...r] = e;\n        return new le(t, r);\n    }\n}, jl = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        return e[0];\n    }\n};\nfunction To(e) {\n    return function(r, n) {\n        let i, o = (s = e)=>{\n            try {\n                return s === void 0 || s?.kind === \"itx\" ? i ??= Bl(r(s)) : Bl(r(s));\n            } catch (a) {\n                return Promise.reject(a);\n            }\n        };\n        return {\n            get spec () {\n                return n;\n            },\n            then (s, a) {\n                return o().then(s, a);\n            },\n            catch (s) {\n                return o().catch(s);\n            },\n            finally (s) {\n                return o().finally(s);\n            },\n            requestTransaction (s) {\n                let a = o(s);\n                return a.requestTransaction ? a.requestTransaction(s) : a;\n            },\n            [Symbol.toStringTag]: \"PrismaPromise\"\n        };\n    };\n}\nfunction Bl(e) {\n    return typeof e.then == \"function\" ? e : Promise.resolve(e);\n}\nvar Jm = Ei.split(\".\")[0], Wm = {\n    isEnabled () {\n        return !1;\n    },\n    getTraceParent () {\n        return \"00-10-10-00\";\n    },\n    dispatchEngineSpans () {},\n    getActiveContext () {},\n    runInChildSpan (e, t) {\n        return t();\n    }\n}, Co = class {\n    isEnabled() {\n        return this.getGlobalTracingHelper().isEnabled();\n    }\n    getTraceParent(t) {\n        return this.getGlobalTracingHelper().getTraceParent(t);\n    }\n    dispatchEngineSpans(t) {\n        return this.getGlobalTracingHelper().dispatchEngineSpans(t);\n    }\n    getActiveContext() {\n        return this.getGlobalTracingHelper().getActiveContext();\n    }\n    runInChildSpan(t, r) {\n        return this.getGlobalTracingHelper().runInChildSpan(t, r);\n    }\n    getGlobalTracingHelper() {\n        let t = globalThis[`V${Jm}_PRISMA_INSTRUMENTATION`], r = globalThis.PRISMA_INSTRUMENTATION;\n        return t?.helper ?? r?.helper ?? Wm;\n    }\n};\nfunction Ul() {\n    return new Co;\n}\nfunction Ql(e, t = ()=>{}) {\n    let r, n = new Promise((i)=>r = i);\n    return {\n        then (i) {\n            return --e === 0 && r(t()), i?.(n);\n        }\n    };\n}\nfunction Gl(e) {\n    return typeof e == \"string\" ? e : e.reduce((t, r)=>{\n        let n = typeof r == \"string\" ? r : r.level;\n        return n === \"query\" ? t : t && (r === \"info\" || t === \"info\") ? \"info\" : n;\n    }, void 0);\n}\nvar Un = class {\n    constructor(){\n        d(this, \"_middlewares\", []);\n    }\n    use(t) {\n        this._middlewares.push(t);\n    }\n    get(t) {\n        return this._middlewares[t];\n    }\n    has(t) {\n        return !!this._middlewares[t];\n    }\n    length() {\n        return this._middlewares.length;\n    }\n};\nvar Wl = D(Li());\nfunction Qn(e) {\n    return typeof e.batchRequestIdx == \"number\";\n}\nfunction Jl(e) {\n    if (e.action !== \"findUnique\" && e.action !== \"findUniqueOrThrow\") return;\n    let t = [];\n    return e.modelName && t.push(e.modelName), e.query.arguments && t.push(Ro(e.query.arguments)), t.push(Ro(e.query.selection)), t.join(\"\");\n}\nfunction Ro(e) {\n    return `(${Object.keys(e).sort().map((r)=>{\n        let n = e[r];\n        return typeof n == \"object\" && n !== null ? `(${r} ${Ro(n)})` : r;\n    }).join(\" \")})`;\n}\nvar Hm = {\n    aggregate: !1,\n    aggregateRaw: !1,\n    createMany: !0,\n    createManyAndReturn: !0,\n    createOne: !0,\n    deleteMany: !0,\n    deleteOne: !0,\n    executeRaw: !0,\n    findFirst: !1,\n    findFirstOrThrow: !1,\n    findMany: !1,\n    findRaw: !1,\n    findUnique: !1,\n    findUniqueOrThrow: !1,\n    groupBy: !1,\n    queryRaw: !1,\n    runCommandRaw: !0,\n    updateMany: !0,\n    updateManyAndReturn: !0,\n    updateOne: !0,\n    upsertOne: !0\n};\nfunction So(e) {\n    return Hm[e];\n}\nvar Gn = class {\n    constructor(t){\n        this.options = t;\n        d(this, \"batches\");\n        d(this, \"tickActive\", !1);\n        this.batches = {};\n    }\n    request(t) {\n        let r = this.options.batchBy(t);\n        return r ? (this.batches[r] || (this.batches[r] = [], this.tickActive || (this.tickActive = !0, process.nextTick(()=>{\n            this.dispatchBatches(), this.tickActive = !1;\n        }))), new Promise((n, i)=>{\n            this.batches[r].push({\n                request: t,\n                resolve: n,\n                reject: i\n            });\n        })) : this.options.singleLoader(t);\n    }\n    dispatchBatches() {\n        for(let t in this.batches){\n            let r = this.batches[t];\n            delete this.batches[t], r.length === 1 ? this.options.singleLoader(r[0].request).then((n)=>{\n                n instanceof Error ? r[0].reject(n) : r[0].resolve(n);\n            }).catch((n)=>{\n                r[0].reject(n);\n            }) : (r.sort((n, i)=>this.options.batchOrder(n.request, i.request)), this.options.batchLoader(r.map((n)=>n.request)).then((n)=>{\n                if (n instanceof Error) for(let i = 0; i < r.length; i++)r[i].reject(n);\n                else for(let i = 0; i < r.length; i++){\n                    let o = n[i];\n                    o instanceof Error ? r[i].reject(o) : r[i].resolve(o);\n                }\n            }).catch((n)=>{\n                for(let i = 0; i < r.length; i++)r[i].reject(n);\n            }));\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"DataLoader\";\n    }\n};\nfunction dt(e, t) {\n    if (t === null) return t;\n    switch(e){\n        case \"bigint\":\n            return BigInt(t);\n        case \"bytes\":\n            {\n                let { buffer: r, byteOffset: n, byteLength: i } = Buffer.from(t, \"base64\");\n                return new Uint8Array(r, n, i);\n            }\n        case \"decimal\":\n            return new Ce(t);\n        case \"datetime\":\n        case \"date\":\n            return new Date(t);\n        case \"time\":\n            return new Date(`1970-01-01T${t}Z`);\n        case \"bigint-array\":\n            return t.map((r)=>dt(\"bigint\", r));\n        case \"bytes-array\":\n            return t.map((r)=>dt(\"bytes\", r));\n        case \"decimal-array\":\n            return t.map((r)=>dt(\"decimal\", r));\n        case \"datetime-array\":\n            return t.map((r)=>dt(\"datetime\", r));\n        case \"date-array\":\n            return t.map((r)=>dt(\"date\", r));\n        case \"time-array\":\n            return t.map((r)=>dt(\"time\", r));\n        default:\n            return t;\n    }\n}\nfunction Jn(e) {\n    let t = [], r = Km(e);\n    for(let n = 0; n < e.rows.length; n++){\n        let i = e.rows[n], o = {\n            ...r\n        };\n        for(let s = 0; s < i.length; s++)o[e.columns[s]] = dt(e.types[s], i[s]);\n        t.push(o);\n    }\n    return t;\n}\nfunction Km(e) {\n    let t = {};\n    for(let r = 0; r < e.columns.length; r++)t[e.columns[r]] = null;\n    return t;\n}\nvar Ym = M(\"prisma:client:request_handler\"), Wn = class {\n    constructor(t, r){\n        d(this, \"client\");\n        d(this, \"dataloader\");\n        d(this, \"logEmitter\");\n        this.logEmitter = r, this.client = t, this.dataloader = new Gn({\n            batchLoader: tl(async ({ requests: n, customDataProxyFetch: i })=>{\n                let { transaction: o, otelParentCtx: s } = n[0], a = n.map((p)=>p.protocolQuery), l = this.client._tracingHelper.getTraceParent(s), u = n.some((p)=>So(p.protocolQuery.action));\n                return (await this.client._engine.requestBatch(a, {\n                    traceparent: l,\n                    transaction: zm(o),\n                    containsWrite: u,\n                    customDataProxyFetch: i\n                })).map((p, m)=>{\n                    if (p instanceof Error) return p;\n                    try {\n                        return this.mapQueryEngineResult(n[m], p);\n                    } catch (g) {\n                        return g;\n                    }\n                });\n            }),\n            singleLoader: async (n)=>{\n                let i = n.transaction?.kind === \"itx\" ? Hl(n.transaction) : void 0, o = await this.client._engine.request(n.protocolQuery, {\n                    traceparent: this.client._tracingHelper.getTraceParent(),\n                    interactiveTransaction: i,\n                    isWrite: So(n.protocolQuery.action),\n                    customDataProxyFetch: n.customDataProxyFetch\n                });\n                return this.mapQueryEngineResult(n, o);\n            },\n            batchBy: (n)=>n.transaction?.id ? `transaction-${n.transaction.id}` : Jl(n.protocolQuery),\n            batchOrder (n, i) {\n                return n.transaction?.kind === \"batch\" && i.transaction?.kind === \"batch\" ? n.transaction.index - i.transaction.index : 0;\n            }\n        });\n    }\n    async request(t) {\n        try {\n            return await this.dataloader.request(t);\n        } catch (r) {\n            let { clientMethod: n, callsite: i, transaction: o, args: s, modelName: a } = t;\n            this.handleAndLogRequestError({\n                error: r,\n                clientMethod: n,\n                callsite: i,\n                transaction: o,\n                args: s,\n                modelName: a,\n                globalOmit: t.globalOmit\n            });\n        }\n    }\n    mapQueryEngineResult({ dataPath: t, unpacker: r }, n) {\n        let i = n?.data, o = this.unpack(i, t, r);\n        return process.env.PRISMA_CLIENT_GET_TIME ? {\n            data: o\n        } : o;\n    }\n    handleAndLogRequestError(t) {\n        try {\n            this.handleRequestError(t);\n        } catch (r) {\n            throw this.logEmitter && this.logEmitter.emit(\"error\", {\n                message: r.message,\n                target: t.clientMethod,\n                timestamp: new Date\n            }), r;\n        }\n    }\n    handleRequestError({ error: t, clientMethod: r, callsite: n, transaction: i, args: o, modelName: s, globalOmit: a }) {\n        if (Ym(t), Zm(t, i)) throw t;\n        if (t instanceof te && Xm(t)) {\n            let u = Kl(t.meta);\n            Cn({\n                args: o,\n                errors: [\n                    u\n                ],\n                callsite: n,\n                errorFormat: this.client._errorFormat,\n                originalMethod: r,\n                clientVersion: this.client._clientVersion,\n                globalOmit: a\n            });\n        }\n        let l = t.message;\n        if (n && (l = gn({\n            callsite: n,\n            originalMethod: r,\n            isPanic: t.isPanic,\n            showColors: this.client._errorFormat === \"pretty\",\n            message: l\n        })), l = this.sanitizeMessage(l), t.code) {\n            let u = s ? {\n                modelName: s,\n                ...t.meta\n            } : t.meta;\n            throw new te(l, {\n                code: t.code,\n                clientVersion: this.client._clientVersion,\n                meta: u,\n                batchRequestIdx: t.batchRequestIdx\n            });\n        } else {\n            if (t.isPanic) throw new pe(l, this.client._clientVersion);\n            if (t instanceof U) throw new U(l, {\n                clientVersion: this.client._clientVersion,\n                batchRequestIdx: t.batchRequestIdx\n            });\n            if (t instanceof C) throw new C(l, this.client._clientVersion);\n            if (t instanceof pe) throw new pe(l, this.client._clientVersion);\n        }\n        throw t.clientVersion = this.client._clientVersion, t;\n    }\n    sanitizeMessage(t) {\n        return this.client._errorFormat && this.client._errorFormat !== \"pretty\" ? (0, Wl.default)(t) : t;\n    }\n    unpack(t, r, n) {\n        if (!t || (t.data && (t = t.data), !t)) return t;\n        let i = Object.keys(t)[0], o = Object.values(t)[0], s = r.filter((u)=>u !== \"select\" && u !== \"include\"), a = no(o, s), l = i === \"queryRaw\" ? Jn(a) : Pt(a);\n        return n ? n(l) : l;\n    }\n    get [Symbol.toStringTag]() {\n        return \"RequestHandler\";\n    }\n};\nfunction zm(e) {\n    if (e) {\n        if (e.kind === \"batch\") return {\n            kind: \"batch\",\n            options: {\n                isolationLevel: e.isolationLevel\n            }\n        };\n        if (e.kind === \"itx\") return {\n            kind: \"itx\",\n            options: Hl(e)\n        };\n        Me(e, \"Unknown transaction kind\");\n    }\n}\nfunction Hl(e) {\n    return {\n        id: e.id,\n        payload: e.payload\n    };\n}\nfunction Zm(e, t) {\n    return Qn(e) && t?.kind === \"batch\" && e.batchRequestIdx !== t.index;\n}\nfunction Xm(e) {\n    return e.code === \"P2009\" || e.code === \"P2012\";\n}\nfunction Kl(e) {\n    if (e.kind === \"Union\") return {\n        kind: \"Union\",\n        errors: e.errors.map(Kl)\n    };\n    if (Array.isArray(e.selectionPath)) {\n        let [, ...t] = e.selectionPath;\n        return {\n            ...e,\n            selectionPath: t\n        };\n    }\n    return e;\n}\nvar Yl = \"6.5.0\";\nvar zl = Yl;\nvar ru = D(Qi());\nvar L = class extends Error {\n    constructor(t){\n        super(t + `\nRead more at https://pris.ly/d/client-constructor`), this.name = \"PrismaClientConstructorValidationError\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientConstructorValidationError\";\n    }\n};\nx(L, \"PrismaClientConstructorValidationError\");\nvar Zl = [\n    \"datasources\",\n    \"datasourceUrl\",\n    \"errorFormat\",\n    \"adapter\",\n    \"log\",\n    \"transactionOptions\",\n    \"omit\",\n    \"__internal\"\n], Xl = [\n    \"pretty\",\n    \"colorless\",\n    \"minimal\"\n], eu = [\n    \"info\",\n    \"query\",\n    \"warn\",\n    \"error\"\n], tf = {\n    datasources: (e, { datasourceNames: t })=>{\n        if (e) {\n            if (typeof e != \"object\" || Array.isArray(e)) throw new L(`Invalid value ${JSON.stringify(e)} for \"datasources\" provided to PrismaClient constructor`);\n            for (let [r, n] of Object.entries(e)){\n                if (!t.includes(r)) {\n                    let i = Qt(r, t) || ` Available datasources: ${t.join(\", \")}`;\n                    throw new L(`Unknown datasource ${r} provided to PrismaClient constructor.${i}`);\n                }\n                if (typeof n != \"object\" || Array.isArray(n)) throw new L(`Invalid value ${JSON.stringify(e)} for datasource \"${r}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                if (n && typeof n == \"object\") for (let [i, o] of Object.entries(n)){\n                    if (i !== \"url\") throw new L(`Invalid value ${JSON.stringify(e)} for datasource \"${r}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                    if (typeof o != \"string\") throw new L(`Invalid value ${JSON.stringify(o)} for datasource \"${r}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                }\n            }\n        }\n    },\n    adapter: (e, t)=>{\n        if (!e && Et(t.generator) === \"client\") throw new L('Using engine type \"client\" requires a driver adapter to be provided to PrismaClient constructor.');\n        if (e === null) return;\n        if (e === void 0) throw new L('\"adapter\" property must not be undefined, use null to conditionally disable driver adapters.');\n        if (!Bn(t).includes(\"driverAdapters\")) throw new L('\"adapter\" property can only be provided to PrismaClient constructor when \"driverAdapters\" preview feature is enabled.');\n        if (Et(t.generator) === \"binary\") throw new L('Cannot use a driver adapter with the \"binary\" Query Engine. Please use the \"library\" Query Engine.');\n    },\n    datasourceUrl: (e)=>{\n        if (typeof e < \"u\" && typeof e != \"string\") throw new L(`Invalid value ${JSON.stringify(e)} for \"datasourceUrl\" provided to PrismaClient constructor.\nExpected string or undefined.`);\n    },\n    errorFormat: (e)=>{\n        if (e) {\n            if (typeof e != \"string\") throw new L(`Invalid value ${JSON.stringify(e)} for \"errorFormat\" provided to PrismaClient constructor.`);\n            if (!Xl.includes(e)) {\n                let t = Qt(e, Xl);\n                throw new L(`Invalid errorFormat ${e} provided to PrismaClient constructor.${t}`);\n            }\n        }\n    },\n    log: (e)=>{\n        if (!e) return;\n        if (!Array.isArray(e)) throw new L(`Invalid value ${JSON.stringify(e)} for \"log\" provided to PrismaClient constructor.`);\n        function t(r) {\n            if (typeof r == \"string\" && !eu.includes(r)) {\n                let n = Qt(r, eu);\n                throw new L(`Invalid log level \"${r}\" provided to PrismaClient constructor.${n}`);\n            }\n        }\n        for (let r of e){\n            t(r);\n            let n = {\n                level: t,\n                emit: (i)=>{\n                    let o = [\n                        \"stdout\",\n                        \"event\"\n                    ];\n                    if (!o.includes(i)) {\n                        let s = Qt(i, o);\n                        throw new L(`Invalid value ${JSON.stringify(i)} for \"emit\" in logLevel provided to PrismaClient constructor.${s}`);\n                    }\n                }\n            };\n            if (r && typeof r == \"object\") for (let [i, o] of Object.entries(r))if (n[i]) n[i](o);\n            else throw new L(`Invalid property ${i} for \"log\" provided to PrismaClient constructor`);\n        }\n    },\n    transactionOptions: (e)=>{\n        if (!e) return;\n        let t = e.maxWait;\n        if (t != null && t <= 0) throw new L(`Invalid value ${t} for maxWait in \"transactionOptions\" provided to PrismaClient constructor. maxWait needs to be greater than 0`);\n        let r = e.timeout;\n        if (r != null && r <= 0) throw new L(`Invalid value ${r} for timeout in \"transactionOptions\" provided to PrismaClient constructor. timeout needs to be greater than 0`);\n    },\n    omit: (e, t)=>{\n        if (typeof e != \"object\") throw new L('\"omit\" option is expected to be an object.');\n        if (e === null) throw new L('\"omit\" option can not be `null`');\n        let r = [];\n        for (let [n, i] of Object.entries(e)){\n            let o = nf(n, t.runtimeDataModel);\n            if (!o) {\n                r.push({\n                    kind: \"UnknownModel\",\n                    modelKey: n\n                });\n                continue;\n            }\n            for (let [s, a] of Object.entries(i)){\n                let l = o.fields.find((u)=>u.name === s);\n                if (!l) {\n                    r.push({\n                        kind: \"UnknownField\",\n                        modelKey: n,\n                        fieldName: s\n                    });\n                    continue;\n                }\n                if (l.relationName) {\n                    r.push({\n                        kind: \"RelationInOmit\",\n                        modelKey: n,\n                        fieldName: s\n                    });\n                    continue;\n                }\n                typeof a != \"boolean\" && r.push({\n                    kind: \"InvalidFieldValue\",\n                    modelKey: n,\n                    fieldName: s\n                });\n            }\n        }\n        if (r.length > 0) throw new L(of(e, r));\n    },\n    __internal: (e)=>{\n        if (!e) return;\n        let t = [\n            \"debug\",\n            \"engine\",\n            \"configOverride\"\n        ];\n        if (typeof e != \"object\") throw new L(`Invalid value ${JSON.stringify(e)} for \"__internal\" to PrismaClient constructor`);\n        for (let [r] of Object.entries(e))if (!t.includes(r)) {\n            let n = Qt(r, t);\n            throw new L(`Invalid property ${JSON.stringify(r)} for \"__internal\" provided to PrismaClient constructor.${n}`);\n        }\n    }\n};\nfunction nu(e, t) {\n    for (let [r, n] of Object.entries(e)){\n        if (!Zl.includes(r)) {\n            let i = Qt(r, Zl);\n            throw new L(`Unknown property ${r} provided to PrismaClient constructor.${i}`);\n        }\n        tf[r](n, t);\n    }\n    if (e.datasourceUrl && e.datasources) throw new L('Can not use \"datasourceUrl\" and \"datasources\" options at the same time. Pick one of them');\n}\nfunction Qt(e, t) {\n    if (t.length === 0 || typeof e != \"string\") return \"\";\n    let r = rf(e, t);\n    return r ? ` Did you mean \"${r}\"?` : \"\";\n}\nfunction rf(e, t) {\n    if (t.length === 0) return null;\n    let r = t.map((i)=>({\n            value: i,\n            distance: (0, ru.default)(e, i)\n        }));\n    r.sort((i, o)=>i.distance < o.distance ? -1 : 1);\n    let n = r[0];\n    return n.distance < 3 ? n.value : null;\n}\nfunction nf(e, t) {\n    return tu(t.models, e) ?? tu(t.types, e);\n}\nfunction tu(e, t) {\n    let r = Object.keys(e).find((n)=>vt(n) === t);\n    if (r) return e[r];\n}\nfunction of(e, t) {\n    let r = Ot(e);\n    for (let o of t)switch(o.kind){\n        case \"UnknownModel\":\n            r.arguments.getField(o.modelKey)?.markAsError(), r.addErrorMessage(()=>`Unknown model name: ${o.modelKey}.`);\n            break;\n        case \"UnknownField\":\n            r.arguments.getDeepField([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), r.addErrorMessage(()=>`Model \"${o.modelKey}\" does not have a field named \"${o.fieldName}\".`);\n            break;\n        case \"RelationInOmit\":\n            r.arguments.getDeepField([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), r.addErrorMessage(()=>'Relations are already excluded by default and can not be specified in \"omit\".');\n            break;\n        case \"InvalidFieldValue\":\n            r.arguments.getDeepFieldValue([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), r.addErrorMessage(()=>\"Omit field option value must be a boolean.\");\n            break;\n    }\n    let { message: n, args: i } = Tn(r, \"colorless\");\n    return `Error validating \"omit\" option:\n\n${i}\n\n${n}`;\n}\nfunction iu(e) {\n    return e.length === 0 ? Promise.resolve([]) : new Promise((t, r)=>{\n        let n = new Array(e.length), i = null, o = !1, s = 0, a = ()=>{\n            o || (s++, s === e.length && (o = !0, i ? r(i) : t(n)));\n        }, l = (u)=>{\n            o || (o = !0, r(u));\n        };\n        for(let u = 0; u < e.length; u++)e[u].then((c)=>{\n            n[u] = c, a();\n        }, (c)=>{\n            if (!Qn(c)) {\n                l(c);\n                return;\n            }\n            c.batchRequestIdx === u ? l(c) : (i || (i = c), a());\n        });\n    });\n}\nvar rt = M(\"prisma:client\");\ntypeof globalThis == \"object\" && (globalThis.NODE_CLIENT = !0);\nvar sf = {\n    requestArgsToMiddlewareArgs: (e)=>e,\n    middlewareArgsToRequestArgs: (e)=>e\n}, af = Symbol.for(\"prisma.client.transaction.id\"), lf = {\n    id: 0,\n    nextId () {\n        return ++this.id;\n    }\n};\nfunction cu(e) {\n    class t {\n        constructor(n){\n            d(this, \"_originalClient\", this);\n            d(this, \"_runtimeDataModel\");\n            d(this, \"_requestHandler\");\n            d(this, \"_connectionPromise\");\n            d(this, \"_disconnectionPromise\");\n            d(this, \"_engineConfig\");\n            d(this, \"_accelerateEngineConfig\");\n            d(this, \"_clientVersion\");\n            d(this, \"_errorFormat\");\n            d(this, \"_tracingHelper\");\n            d(this, \"_middlewares\", new Un);\n            d(this, \"_previewFeatures\");\n            d(this, \"_activeProvider\");\n            d(this, \"_globalOmit\");\n            d(this, \"_extensions\");\n            d(this, \"_engine\");\n            d(this, \"_appliedParent\");\n            d(this, \"_createPrismaPromise\", To());\n            d(this, \"$metrics\", new Dt(this));\n            d(this, \"$extends\", Ja);\n            e = n?.__internal?.configOverride?.(e) ?? e, sl(e), n && nu(n, e);\n            let i = new lu.EventEmitter().on(\"error\", ()=>{});\n            this._extensions = _t.empty(), this._previewFeatures = Bn(e), this._clientVersion = e.clientVersion ?? zl, this._activeProvider = e.activeProvider, this._globalOmit = n?.omit, this._tracingHelper = Ul();\n            let o = {\n                rootEnvPath: e.relativeEnvPaths.rootEnvPath && Mr.default.resolve(e.dirname, e.relativeEnvPaths.rootEnvPath),\n                schemaEnvPath: e.relativeEnvPaths.schemaEnvPath && Mr.default.resolve(e.dirname, e.relativeEnvPaths.schemaEnvPath)\n            }, s;\n            if (n?.adapter) {\n                s = Xn(n.adapter);\n                let l = e.activeProvider === \"postgresql\" ? \"postgres\" : e.activeProvider;\n                if (s.provider !== l) throw new C(`The Driver Adapter \\`${s.adapterName}\\`, based on \\`${s.provider}\\`, is not compatible with the provider \\`${l}\\` specified in the Prisma schema.`, this._clientVersion);\n                if (n.datasources || n.datasourceUrl !== void 0) throw new C(\"Custom datasource configuration is not compatible with Prisma Driver Adapters. Please define the database connection string directly in the Driver Adapter configuration.\", this._clientVersion);\n            }\n            let a = !s && er(o, {\n                conflictCheck: \"none\"\n            }) || e.injectableEdgeEnv?.();\n            try {\n                let l = n ?? {}, u = l.__internal ?? {}, c = u.debug === !0;\n                c && M.enable(\"prisma:client\");\n                let p = Mr.default.resolve(e.dirname, e.relativePath);\n                uu.default.existsSync(p) || (p = e.dirname), rt(\"dirname\", e.dirname), rt(\"relativePath\", e.relativePath), rt(\"cwd\", p);\n                let m = u.engine || {};\n                if (l.errorFormat ? this._errorFormat = l.errorFormat :  false ? 0 : process.env.NO_COLOR ? this._errorFormat = \"colorless\" : this._errorFormat = \"colorless\", this._runtimeDataModel = e.runtimeDataModel, this._engineConfig = {\n                    cwd: p,\n                    dirname: e.dirname,\n                    enableDebugLogs: c,\n                    allowTriggerPanic: m.allowTriggerPanic,\n                    datamodelPath: Mr.default.join(e.dirname, e.filename ?? \"schema.prisma\"),\n                    prismaPath: m.binaryPath ?? void 0,\n                    engineEndpoint: m.endpoint,\n                    generator: e.generator,\n                    showColors: this._errorFormat === \"pretty\",\n                    logLevel: l.log && Gl(l.log),\n                    logQueries: l.log && !!(typeof l.log == \"string\" ? l.log === \"query\" : l.log.find((g)=>typeof g == \"string\" ? g === \"query\" : g.level === \"query\")),\n                    env: a?.parsed ?? {},\n                    flags: [],\n                    engineWasm: e.engineWasm,\n                    compilerWasm: e.compilerWasm,\n                    clientVersion: e.clientVersion,\n                    engineVersion: e.engineVersion,\n                    previewFeatures: this._previewFeatures,\n                    activeProvider: e.activeProvider,\n                    inlineSchema: e.inlineSchema,\n                    overrideDatasources: al(l, e.datasourceNames),\n                    inlineDatasources: e.inlineDatasources,\n                    inlineSchemaHash: e.inlineSchemaHash,\n                    tracingHelper: this._tracingHelper,\n                    transactionOptions: {\n                        maxWait: l.transactionOptions?.maxWait ?? 2e3,\n                        timeout: l.transactionOptions?.timeout ?? 5e3,\n                        isolationLevel: l.transactionOptions?.isolationLevel\n                    },\n                    logEmitter: i,\n                    isBundled: e.isBundled,\n                    adapter: s\n                }, this._accelerateEngineConfig = {\n                    ...this._engineConfig,\n                    accelerateUtils: {\n                        resolveDatasourceUrl: $t,\n                        getBatchRequestPayload: Lt,\n                        prismaGraphQLToJSError: Ft,\n                        PrismaClientUnknownRequestError: U,\n                        PrismaClientInitializationError: C,\n                        PrismaClientKnownRequestError: te,\n                        debug: M(\"prisma:client:accelerateEngine\"),\n                        engineVersion: su.version,\n                        clientVersion: e.clientVersion\n                    }\n                }, rt(\"clientVersion\", e.clientVersion), this._engine = _l(e, this._engineConfig), this._requestHandler = new Wn(this, i), l.log) for (let g of l.log){\n                    let h = typeof g == \"string\" ? g : g.emit === \"stdout\" ? g.level : null;\n                    h && this.$on(h, (y)=>{\n                        ir.log(`${ir.tags[h] ?? \"\"}`, y.message || y.query);\n                    });\n                }\n            } catch (l) {\n                throw l.clientVersion = this._clientVersion, l;\n            }\n            return this._appliedParent = xr(this);\n        }\n        get [Symbol.toStringTag]() {\n            return \"PrismaClient\";\n        }\n        $use(n) {\n            this._middlewares.use(n);\n        }\n        $on(n, i) {\n            return n === \"beforeExit\" ? this._engine.onBeforeExit(i) : n && this._engineConfig.logEmitter.on(n, i), this;\n        }\n        $connect() {\n            try {\n                return this._engine.start();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            }\n        }\n        async $disconnect() {\n            try {\n                await this._engine.stop();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            } finally{\n                Vo();\n            }\n        }\n        $executeRawInternal(n, i, o, s) {\n            let a = this._activeProvider;\n            return this._request({\n                action: \"executeRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: vo({\n                    clientMethod: i,\n                    activeProvider: a\n                }),\n                callsite: Xe(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            });\n        }\n        $executeRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) {\n                    let [s, a] = ou(n, i);\n                    return Po(this._activeProvider, s.text, s.values, Array.isArray(n) ? \"prisma.$executeRaw`<SQL>`\" : \"prisma.$executeRaw(sql`<SQL>`)\"), this.$executeRawInternal(o, \"$executeRaw\", s, a);\n                }\n                throw new re(\"`$executeRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $executeRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>(Po(this._activeProvider, n, i, \"prisma.$executeRawUnsafe(<SQL>, [...values])\"), this.$executeRawInternal(o, \"$executeRawUnsafe\", [\n                    n,\n                    ...i\n                ])));\n        }\n        $runCommandRaw(n) {\n            if (e.activeProvider !== \"mongodb\") throw new re(`The ${e.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, {\n                clientVersion: this._clientVersion\n            });\n            return this._createPrismaPromise((i)=>this._request({\n                    args: n,\n                    clientMethod: \"$runCommandRaw\",\n                    dataPath: [],\n                    action: \"runCommandRaw\",\n                    argsMapper: Dl,\n                    callsite: Xe(this._errorFormat),\n                    transaction: i\n                }));\n        }\n        async $queryRawInternal(n, i, o, s) {\n            let a = this._activeProvider;\n            return this._request({\n                action: \"queryRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: vo({\n                    clientMethod: i,\n                    activeProvider: a\n                }),\n                callsite: Xe(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            });\n        }\n        $queryRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) return this.$queryRawInternal(o, \"$queryRaw\", ...ou(n, i));\n                throw new re(\"`$queryRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $queryRawTyped(n) {\n            return this._createPrismaPromise((i)=>{\n                if (!this._hasPreviewFlag(\"typedSql\")) throw new re(\"`typedSql` preview feature must be enabled in order to access $queryRawTyped API\", {\n                    clientVersion: this._clientVersion\n                });\n                return this.$queryRawInternal(i, \"$queryRawTyped\", n);\n            });\n        }\n        $queryRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>this.$queryRawInternal(o, \"$queryRawUnsafe\", [\n                    n,\n                    ...i\n                ]));\n        }\n        _transactionWithArray({ promises: n, options: i }) {\n            let o = lf.nextId(), s = Ql(n.length), a = n.map((l, u)=>{\n                if (l?.[Symbol.toStringTag] !== \"PrismaPromise\") throw new Error(\"All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.\");\n                let c = i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel, p = {\n                    kind: \"batch\",\n                    id: o,\n                    index: u,\n                    isolationLevel: c,\n                    lock: s\n                };\n                return l.requestTransaction?.(p) ?? l;\n            });\n            return iu(a);\n        }\n        async _transactionWithCallback({ callback: n, options: i }) {\n            let o = {\n                traceparent: this._tracingHelper.getTraceParent()\n            }, s = {\n                maxWait: i?.maxWait ?? this._engineConfig.transactionOptions.maxWait,\n                timeout: i?.timeout ?? this._engineConfig.transactionOptions.timeout,\n                isolationLevel: i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel\n            }, a = await this._engine.transaction(\"start\", o, s), l;\n            try {\n                let u = {\n                    kind: \"itx\",\n                    ...a\n                };\n                l = await n(this._createItxClient(u)), await this._engine.transaction(\"commit\", o, a);\n            } catch (u) {\n                throw await this._engine.transaction(\"rollback\", o, a).catch(()=>{}), u;\n            }\n            return l;\n        }\n        _createItxClient(n) {\n            return be(xr(be(Ga(this), [\n                oe(\"_appliedParent\", ()=>this._appliedParent._createItxClient(n)),\n                oe(\"_createPrismaPromise\", ()=>To(n)),\n                oe(af, ()=>n.id)\n            ])), [\n                Nt(Ya)\n            ]);\n        }\n        $transaction(n, i) {\n            let o;\n            typeof n == \"function\" ? this._engineConfig.adapter?.adapterName === \"@prisma/adapter-d1\" ? o = ()=>{\n                throw new Error(\"Cloudflare D1 does not support interactive transactions. We recommend you to refactor your queries with that limitation in mind, and use batch transactions with `prisma.$transactions([])` where applicable.\");\n            } : o = ()=>this._transactionWithCallback({\n                    callback: n,\n                    options: i\n                }) : o = ()=>this._transactionWithArray({\n                    promises: n,\n                    options: i\n                });\n            let s = {\n                name: \"transaction\",\n                attributes: {\n                    method: \"$transaction\"\n                }\n            };\n            return this._tracingHelper.runInChildSpan(s, o);\n        }\n        _request(n) {\n            n.otelParentCtx = this._tracingHelper.getActiveContext();\n            let i = n.middlewareArgsMapper ?? sf, o = {\n                args: i.requestArgsToMiddlewareArgs(n.args),\n                dataPath: n.dataPath,\n                runInTransaction: !!n.transaction,\n                action: n.action,\n                model: n.model\n            }, s = {\n                middleware: {\n                    name: \"middleware\",\n                    middleware: !0,\n                    attributes: {\n                        method: \"$use\"\n                    },\n                    active: !1\n                },\n                operation: {\n                    name: \"operation\",\n                    attributes: {\n                        method: o.action,\n                        model: o.model,\n                        name: o.model ? `${o.model}.${o.action}` : o.action\n                    }\n                }\n            }, a = -1, l = async (u)=>{\n                let c = this._middlewares.get(++a);\n                if (c) return this._tracingHelper.runInChildSpan(s.middleware, (O)=>c(u, (T)=>(O?.end(), l(T))));\n                let { runInTransaction: p, args: m, ...g } = u, h = {\n                    ...n,\n                    ...g\n                };\n                m && (h.args = i.middlewareArgsToRequestArgs(m)), n.transaction !== void 0 && p === !1 && delete h.transaction;\n                let y = await el(this, h);\n                return h.model ? Ka({\n                    result: y,\n                    modelName: h.model,\n                    args: h.args,\n                    extensions: this._extensions,\n                    runtimeDataModel: this._runtimeDataModel,\n                    globalOmit: this._globalOmit\n                }) : y;\n            };\n            return this._tracingHelper.runInChildSpan(s.operation, ()=>new au.AsyncResource(\"prisma-client-request\").runInAsyncScope(()=>l(o)));\n        }\n        async _executeRequest({ args: n, clientMethod: i, dataPath: o, callsite: s, action: a, model: l, argsMapper: u, transaction: c, unpacker: p, otelParentCtx: m, customDataProxyFetch: g }) {\n            try {\n                n = u ? u(n) : n;\n                let h = {\n                    name: \"serialize\"\n                }, y = this._tracingHelper.runInChildSpan(h, ()=>In({\n                        modelName: l,\n                        runtimeDataModel: this._runtimeDataModel,\n                        action: a,\n                        args: n,\n                        clientMethod: i,\n                        callsite: s,\n                        extensions: this._extensions,\n                        errorFormat: this._errorFormat,\n                        clientVersion: this._clientVersion,\n                        previewFeatures: this._previewFeatures,\n                        globalOmit: this._globalOmit\n                    }));\n                return M.enabled(\"prisma:client\") && (rt(\"Prisma Client call:\"), rt(`prisma.${i}(${Na(n)})`), rt(\"Generated request:\"), rt(JSON.stringify(y, null, 2) + `\n`)), c?.kind === \"batch\" && await c.lock, this._requestHandler.request({\n                    protocolQuery: y,\n                    modelName: l,\n                    action: a,\n                    clientMethod: i,\n                    dataPath: o,\n                    callsite: s,\n                    args: n,\n                    extensions: this._extensions,\n                    transaction: c,\n                    unpacker: p,\n                    otelParentCtx: m,\n                    otelChildCtx: this._tracingHelper.getActiveContext(),\n                    globalOmit: this._globalOmit,\n                    customDataProxyFetch: g\n                });\n            } catch (h) {\n                throw h.clientVersion = this._clientVersion, h;\n            }\n        }\n        _hasPreviewFlag(n) {\n            return !!this._engineConfig.previewFeatures?.includes(n);\n        }\n        $applyPendingMigrations() {\n            return this._engine.applyPendingMigrations();\n        }\n    }\n    return t;\n}\nfunction ou(e, t) {\n    return uf(e) ? [\n        new le(e, t),\n        Vl\n    ] : [\n        e,\n        jl\n    ];\n}\nfunction uf(e) {\n    return Array.isArray(e) && Array.isArray(e.raw);\n}\nvar cf = new Set([\n    \"toJSON\",\n    \"$$typeof\",\n    \"asymmetricMatch\",\n    Symbol.iterator,\n    Symbol.toStringTag,\n    Symbol.isConcatSpreadable,\n    Symbol.toPrimitive\n]);\nfunction pu(e) {\n    return new Proxy(e, {\n        get (t, r) {\n            if (r in t) return t[r];\n            if (!cf.has(r)) throw new TypeError(`Invalid enum value: ${String(r)}`);\n        }\n    });\n}\nfunction du(e) {\n    er(e, {\n        conflictCheck: \"warn\"\n    });\n}\n0 && (0); /*! Bundled license information:\n\ndecimal.js/decimal.mjs:\n  (*!\n   *  decimal.js v10.5.0\n   *  An arbitrary-precision Decimal type for JavaScript.\n   *  https://github.com/MikeMcl/decimal.js\n   *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\n   *  MIT Licence\n   *)\n*/  //# sourceMappingURL=library.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@prisma+client@6.5.0_prisma@6.5.0_typescript@5.8.2__typescript@5.8.2/node_modules/@prisma/client/runtime/library.js\n");

/***/ })

};
;