"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/bot-test/[id]/page",{

/***/ "(app-pages-browser)/./src/components/chat/hooks/useChat.ts":
/*!**********************************************!*\
  !*** ./src/components/chat/hooks/useChat.ts ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChat: function() { return /* binding */ useChat; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_lunary_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/lunary-client */ \"(app-pages-browser)/./src/lib/lunary-client.ts\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js\");\n/* __next_internal_client_entry_do_not_use__ useChat auto */ \n\n\n// VERSION-MARKER: Eindeutiger Debug-Code - Version 007\nconsole.log(\"useChat.ts geladen - Debug-Version 007\");\n// VERSION-MARKER: Eindeutiger Debug-Code - Version 008\nconsole.log(\"useChat.ts geladen - Debug-Version 008\");\n// VERSION-MARKER: Eindeutiger Debug-Code - Version 009\nconsole.log(\"useChat.ts geladen - Debug-Version 009\");\n// VERSION-MARKER: Chat-Hook Debug-Code - Version 010\nconsole.log(\"useChat.ts geladen - Debug-Version 010\");\n// Globaler Tracking-Mechanismus für Willkommensnachrichten\nconst processedWelcomeMessages = new Set();\n// VERSION-MARKER: Chat-Hook Debug-Code - Version 011\nconsole.log(\"useChat.ts geladen - Debug-Version 011\");\n// Globaler Tracking-Mechanismus für Willkommensnachrichten\n// Dies ist nun eine Kombination aus sessionStorage und einem in-memory Set\nconst getProcessedWelcomeMessages = ()=>{\n    try {\n        // Versuche, bereits verarbeitete Willkommensnachrichten aus dem sessionStorage zu laden\n        const stored = sessionStorage.getItem(\"processedWelcomeMessages\");\n        if (stored) {\n            return new Set(JSON.parse(stored));\n        }\n    } catch (e) {\n        console.error(\"Fehler beim Laden der verarbeiteten Willkommensnachrichten:\", e);\n    }\n    return new Set();\n};\n// Speichere verarbeitete Willkommensnachrichten im sessionStorage\nconst addProcessedWelcomeMessage = (key)=>{\n    try {\n        const current = getProcessedWelcomeMessages();\n        current.add(key);\n        sessionStorage.setItem(\"processedWelcomeMessages\", JSON.stringify([\n            ...current\n        ]));\n        console.log(\"CHAT-DEBUG-011: Willkommensnachricht \".concat(key, \" als verarbeitet markiert und in sessionStorage gespeichert\"));\n    } catch (e) {\n        console.error(\"Fehler beim Speichern der verarbeiteten Willkommensnachrichten:\", e);\n    }\n};\nconst hasProcessedWelcomeMessage = (key)=>{\n    try {\n        // Prüfe sowohl lokales Set als auch sessionStorage\n        if (processedWelcomeMessages.has(key)) {\n            return true;\n        }\n        const stored = getProcessedWelcomeMessages();\n        return stored.has(key);\n    } catch (e) {\n        console.error(\"Fehler beim \\xdcberpr\\xfcfen der verarbeiteten Willkommensnachrichten:\", e);\n        return false;\n    }\n};\n// Hilfsfunktion für Debounce\nfunction debounce(func, wait) {\n    let timeout = null;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (timeout) clearTimeout(timeout);\n        timeout = setTimeout(()=>func(...args), wait);\n    };\n}\nfunction useChat() {\n    let { initialMessages = [], initialMode = \"bubble\", initialOpen = false, botId, onError, initialSettings } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialMessages);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialOpen);\n    const [mode, setMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialMode);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [welcomeMessage, setWelcomeMessage] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const messagesEndRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const abortControllerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const sessionIdRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)((0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])()) // Eindeutige Sitzungs-ID für Tracking\n    ;\n    const [botSettings, setBotSettings] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const lastMessageTimestampRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0) // Zeitstempel der letzten gesendeten Nachricht\n    ;\n    const chatInitializedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false) // Tracking für die Chat-Initialisierung\n    ;\n    const cancelRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false) // Ref zum Abbrechen von Operationen\n    ;\n    const cancelFetchRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false) // Ref zum Abbrechen von Fetch-Operationen\n    ;\n    // Toggle Chat öffnen/schließen\n    const toggleChat = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setIsOpen((prev)=>!prev);\n        // Tracking für Chat-Öffnen/Schließen\n        _lib_lunary_client__WEBPACK_IMPORTED_MODULE_1__.LunaryClient.track({\n            eventName: isOpen ? \"chat_closed\" : \"chat_opened\",\n            properties: {\n                botId\n            },\n            metadata: {\n                sessionId: sessionIdRef.current\n            }\n        });\n    }, [\n        isOpen,\n        botId\n    ]);\n    // Wechselt zwischen den Modi (bubble -> inline -> fullscreen -> bubble)\n    const cycleMode = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setMode((currentMode)=>{\n            const nextMode = currentMode === \"bubble\" ? \"inline\" : currentMode === \"inline\" ? \"fullscreen\" : \"bubble\";\n            // Tracking für Modusänderung\n            _lib_lunary_client__WEBPACK_IMPORTED_MODULE_1__.LunaryClient.track({\n                eventName: \"chat_mode_changed\",\n                properties: {\n                    mode: nextMode,\n                    botId\n                },\n                metadata: {\n                    sessionId: sessionIdRef.current\n                }\n            });\n            return nextMode;\n        });\n    }, [\n        botId\n    ]);\n    // Direkt zu einem bestimmten Modus wechseln\n    const setCurrentMode = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((newMode)=>{\n        setMode(newMode);\n    }, []);\n    // Nachrichtenliste aktualisieren mit neuer Nachricht\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (messagesEndRef.current) {\n            // Das Element mit einem Offset ins Sichtfeld scrollen, \n            // damit der Anfang der Nachricht sichtbar ist\n            const parentElement = messagesEndRef.current.parentElement;\n            if (parentElement) {\n                // Statt zum Ende scrollen, scrollen wir zum ersten Kind-Element der letzten Nachricht\n                const lastMessage = parentElement.querySelector(\".group:last-of-type\");\n                if (lastMessage) {\n                    lastMessage.scrollIntoView({\n                        behavior: \"smooth\",\n                        block: \"start\"\n                    });\n                } else {\n                    // Fallback zum alten Verhalten\n                    messagesEndRef.current.scrollIntoView({\n                        behavior: \"smooth\"\n                    });\n                }\n            }\n        }\n    }, [\n        messages\n    ]);\n    // Nachricht zur Liste hinzufügen\n    const addMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((message)=>{\n        console.log(\"DEBUG-007: addMessage aufgerufen\", message);\n        // Überprüfen, ob die Nachricht bereits existiert (um Duplikate zu vermeiden)\n        setMessages((prevMessages)=>{\n            // Prüfe auf identische Nachricht in den letzten 3 Elementen\n            // (Für den Fall mehrerer Nachrichten in kurzer Zeit)\n            const recentMessages = prevMessages.slice(-3);\n            const isDuplicate = recentMessages.some((m)=>m.role === message.role && m.content === message.content);\n            if (isDuplicate) {\n                console.log(\"DEBUG-007: Duplikat gefunden, Nachricht wird nicht hinzugef\\xfcgt\");\n                return prevMessages;\n            }\n            return [\n                ...prevMessages,\n                message\n            ];\n        });\n    }, []);\n    // Bei Unmount Ressourcen freigeben\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>{\n            // Abbrechen laufender Anfragen\n            if (abortControllerRef.current) {\n                abortControllerRef.current.abort();\n            }\n            // Refs für Abbruch setzen\n            cancelRef.current = true;\n            cancelFetchRef.current = true;\n            // Chat-Initialisierungsstatus zurücksetzen\n            chatInitializedRef.current = false;\n        };\n    }, []);\n    // Debounced sendMessage Funktion, verhindert mehrfache Aufrufe innerhalb von 500ms\n    const debouncedSendMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (content)=>{\n        // Die normale sendMessage-Logik hier\n        if (!content || content.trim() === \"\") {\n            return;\n        }\n        // Verhindere erneutes Senden, wenn gerade geladen wird\n        if (isLoading) {\n            console.log(\"DEBUG-007: Sendeprozess l\\xe4uft bereits, ignoriere erneuten Aufruf\");\n            return;\n        }\n        // Prüfe, ob die letzte Nachricht erst kürzlich gesendet wurde (doppelte Absicherung)\n        const now = Date.now();\n        if (now - lastMessageTimestampRef.current < 1000) {\n            console.log(\"DEBUG-007: Letzte Nachricht wurde vor weniger als 1 Sekunde gesendet, ignoriere\");\n            return;\n        }\n        lastMessageTimestampRef.current = now;\n        try {\n            // Anfang des Ladevorgangs\n            setIsLoading(true);\n            setError(null);\n            // Benutzer-Nachricht hinzufügen\n            const userMessage = {\n                role: \"user\",\n                content\n            };\n            addMessage(userMessage);\n            // Abbrechen wenn schon eine Anfrage läuft\n            if (abortControllerRef.current) {\n                abortControllerRef.current.abort();\n            }\n            // Neue AbortController-Instanz erstellen\n            abortControllerRef.current = new AbortController();\n            const signal = abortControllerRef.current.signal;\n            // Tracking für gesendete Nachricht\n            _lib_lunary_client__WEBPACK_IMPORTED_MODULE_1__.LunaryClient.track({\n                eventName: \"message_sent\",\n                properties: {\n                    content: content.slice(0, 100),\n                    botId\n                },\n                metadata: {\n                    sessionId: sessionIdRef.current\n                }\n            });\n            // Sende Anfrage an API\n            console.log(\"DEBUG-007: Sende API-Anfrage\", content);\n            const response = await fetch(\"/api/chat\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    message: content,\n                    history: messages,\n                    botId: botId\n                }),\n                signal\n            });\n            if (!response.ok) {\n                throw new Error(\"Fehler beim Senden der Nachricht: \".concat(response.status, \" \").concat(response.statusText));\n            }\n            const data = await response.json();\n            // Füge Bot-Antwort hinzu\n            let botContent = \"\";\n            if (data.text) {\n                botContent = data.text;\n            } else if (data.response) {\n                botContent = data.response;\n            } else if (data.content) {\n                botContent = data.content;\n            } else if (data.assistant) {\n                botContent = data.assistant;\n            } else if (data.message) {\n                botContent = data.message;\n            } else {\n                botContent = \"Entschuldigung, ich konnte keine Antwort generieren.\";\n            }\n            const botMessage = {\n                role: \"assistant\",\n                content: botContent\n            };\n            addMessage(botMessage);\n            // Tracking für empfangene Antwort\n            _lib_lunary_client__WEBPACK_IMPORTED_MODULE_1__.LunaryClient.track({\n                eventName: \"message_received\",\n                properties: {\n                    content: botContent.slice(0, 100),\n                    botId,\n                    responseTime: Date.now() - performance.now() // Ungefähre Antwortzeit\n                },\n                metadata: {\n                    sessionId: sessionIdRef.current\n                }\n            });\n        } catch (err) {\n            // Prüfe, ob es sich um einen Abbruch handelt\n            if (err.name === \"AbortError\") {\n                console.log(\"DEBUG-007: Anfrage wurde abgebrochen\");\n                return;\n            }\n            console.error(\"Fehler beim Senden der Nachricht:\", err);\n            setError(\"Beim Senden der Nachricht ist ein Fehler aufgetreten. Bitte versuchen Sie es erneut.\");\n            // Tracking für Fehler\n            _lib_lunary_client__WEBPACK_IMPORTED_MODULE_1__.LunaryClient.track({\n                eventName: \"message_error\",\n                properties: {\n                    error: err instanceof Error ? err.message : \"Unbekannter Fehler\",\n                    botId\n                },\n                metadata: {\n                    sessionId: sessionIdRef.current\n                }\n            });\n        } finally{\n            setIsLoading(false);\n            abortControllerRef.current = null;\n            setInput(\"\");\n        }\n    }, [\n        isLoading,\n        messages,\n        addMessage,\n        botId\n    ]);\n    // Wrapper-Funktion für sendMessage, die den debounced-Aufruf triggert\n    const sendMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((content)=>{\n        console.log(\"DEBUG-007: sendMessage aufgerufen mit:\", content);\n        debouncedSendMessage(content);\n    }, [\n        debouncedSendMessage\n    ]);\n    // Laufende Anfrage abbrechen\n    const cancelMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (abortControllerRef.current) {\n            abortControllerRef.current.abort();\n            abortControllerRef.current = null;\n            setIsLoading(false);\n        }\n    }, []);\n    // Bot-Einstellungen beim ersten Laden abrufen\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!botId) {\n            return;\n        }\n        // Wenn initialSettings vorhanden sind, verwende diese direkt\n        if (initialSettings) {\n            console.log(\"CHAT-DEBUG-011: Verwende \\xfcbergebene Bot-Einstellungen\", initialSettings);\n            // Bot-Einstellungen im state speichern\n            setBotSettings(initialSettings);\n            // RGB-Werte für Primärfarbe berechnen für Schatten etc.\n            const primaryColor = initialSettings.primaryColor || \"#3b82f6\";\n            const r = parseInt(primaryColor.slice(1, 3), 16);\n            const g = parseInt(primaryColor.slice(3, 5), 16);\n            const b = parseInt(primaryColor.slice(5, 7), 16);\n            document.documentElement.style.setProperty(\"--primary-rgb\", \"\".concat(r, \", \").concat(g, \", \").concat(b));\n            // Primärfarbe als CSS-Variable setzen\n            document.documentElement.style.setProperty(\"--primary\", primaryColor);\n            // CSS-Variablen im :root setzen für Chat-Styling\n            document.documentElement.style.setProperty(\"--bot-bg-color\", initialSettings.botBgColor || \"rgba(248, 250, 252, 0.8)\");\n            document.documentElement.style.setProperty(\"--bot-text-color\", initialSettings.botTextColor || \"#000000\");\n            document.documentElement.style.setProperty(\"--bot-accent-color\", initialSettings.botAccentColor || initialSettings.primaryColor || \"#3b82f6\");\n            // User-Nachrichtenfarben\n            if (initialSettings.userBgColor) {\n                document.documentElement.style.setProperty(\"--user-bg-color\", initialSettings.userBgColor);\n            } else {\n                // Fallback: Primärfarbe mit Gradient\n                document.documentElement.style.setProperty(\"--user-bg-color\", \"linear-gradient(135deg, \".concat(initialSettings.primaryColor || \"#3b82f6\", \", \").concat(initialSettings.primaryColor || \"#3b82f6\", \"cc)\"));\n            }\n            // Benutzertextfarbe festlegen - mit höherer Spezifität\n            const userTextColor = initialSettings.userTextColor || \"#ffffff\";\n            document.documentElement.style.setProperty(\"--user-text-color\", \"\".concat(userTextColor, \" !important\"));\n            // Explizit eine extra-Stile hinzufügen für höhere Spezifität\n            const style = document.createElement(\"style\");\n            style.innerHTML = \"\\n        .glassmorphism-user { color: \".concat(userTextColor, \" !important; }\\n        .glassmorphism-user * { color: \").concat(userTextColor, \" !important; }\\n      \");\n            document.head.appendChild(style);\n            console.log(\"CHAT-DEBUG-011: Setze Benutzer-Textfarbe auf \".concat(userTextColor, \" mit !important\"));\n            // Wenn Willkommensnachricht vorhanden ist und noch keine Nachrichten angezeigt werden\n            if (messages.length === 0 && initialSettings.welcomeMessage) {\n            // Willkommensnachricht nicht mehr zu messages hinzufügen, sondern nur als separate Variable\n            // setMessages([{\n            //   role: \"assistant\",\n            //   content: initialSettings.welcomeMessage\n            // }]);\n            }\n            // Markiere diese Willkommensnachricht als verarbeitet\n            const welcomeKey = \"welcome-\".concat(botId);\n            processedWelcomeMessages.add(welcomeKey);\n            addProcessedWelcomeMessage(welcomeKey);\n            // Chat als initialisiert markieren\n            chatInitializedRef.current = true;\n            // Wenn Willkommensnachricht vorhanden ist\n            if (initialSettings.welcomeMessage) {\n                // Willkommensnachricht als separate Variable speichern\n                setWelcomeMessage(initialSettings.welcomeMessage);\n            }\n            return;\n        }\n        console.log(\"CHAT-DEBUG-011: Chat-Hook f\\xfcr Bot \".concat(botId, \" - Willkommensnachricht wird gepr\\xfcft\"), {\n            messagesLength: messages.length,\n            chatInitialized: chatInitializedRef.current\n        });\n        // Markiere diese Willkommensnachricht als verarbeitet\n        const welcomeKey = \"welcome-\".concat(botId);\n        processedWelcomeMessages.add(welcomeKey);\n        addProcessedWelcomeMessage(welcomeKey);\n        // Chat als initialisiert markieren\n        chatInitializedRef.current = true;\n        // Eine Verzögerung hinzufügen, um sicherzustellen, dass die Komponente vollständig gemounted ist\n        const timeoutId = setTimeout(()=>{\n            const fetchBotSettings = async ()=>{\n                try {\n                    if (cancelFetchRef.current) {\n                        console.log(\"CHAT-DEBUG-011: Fetching abgebrochen, da der Chat entfernt wurde\");\n                        return;\n                    }\n                    const res = await fetch(\"/api/bots/\".concat(botId));\n                    if (res.ok) {\n                        const botData = await res.json();\n                        console.log(\"CHAT-DEBUG-011: Geladene Bot-Daten:\", {\n                            id: botData.id,\n                            name: botData.name,\n                            welcomeMessage: botData.welcomeMessage ? \"vorhanden\" : \"nicht vorhanden\"\n                        });\n                        if (botData && botData.settings) {\n                            // Bot-Einstellungen im state speichern\n                            setBotSettings(botData.settings);\n                            // RGB-Werte für Primärfarbe berechnen für Schatten etc.\n                            const primaryColor = botData.settings.primaryColor || \"#3b82f6\";\n                            const r = parseInt(primaryColor.slice(1, 3), 16);\n                            const g = parseInt(primaryColor.slice(3, 5), 16);\n                            const b = parseInt(primaryColor.slice(5, 7), 16);\n                            document.documentElement.style.setProperty(\"--primary-rgb\", \"\".concat(r, \", \").concat(g, \", \").concat(b));\n                            // Primärfarbe als CSS-Variable setzen\n                            document.documentElement.style.setProperty(\"--primary\", primaryColor);\n                            // CSS-Variablen im :root setzen für Chat-Styling\n                            document.documentElement.style.setProperty(\"--bot-bg-color\", botData.settings.botBgColor || \"rgba(248, 250, 252, 0.8)\");\n                            document.documentElement.style.setProperty(\"--bot-text-color\", botData.settings.botTextColor || \"#000000\");\n                            document.documentElement.style.setProperty(\"--bot-accent-color\", botData.settings.botAccentColor || botData.settings.primaryColor || \"#3b82f6\");\n                            // User-Nachrichtenfarben\n                            if (botData.settings.userBgColor) {\n                                document.documentElement.style.setProperty(\"--user-bg-color\", botData.settings.userBgColor);\n                            } else {\n                                // Fallback: Primärfarbe mit Gradient\n                                document.documentElement.style.setProperty(\"--user-bg-color\", \"linear-gradient(135deg, \".concat(botData.settings.primaryColor || \"#3b82f6\", \", \").concat(botData.settings.primaryColor || \"#3b82f6\", \"cc)\"));\n                            }\n                            // Benutzertextfarbe festlegen - mit höherer Spezifität\n                            const userTextColor = botData.settings.userTextColor || \"#ffffff\";\n                            document.documentElement.style.setProperty(\"--user-text-color\", \"\".concat(userTextColor, \" !important\"));\n                            // Explizit eine extra-Stile hinzufügen für höhere Spezifität\n                            const style = document.createElement(\"style\");\n                            style.innerHTML = \"\\n                .glassmorphism-user { color: \".concat(userTextColor, \" !important; }\\n                .glassmorphism-user * { color: \").concat(userTextColor, \" !important; }\\n              \");\n                            document.head.appendChild(style);\n                            console.log(\"CHAT-DEBUG-011: Setze Benutzer-Textfarbe auf \".concat(userTextColor, \" mit !important\"));\n                            // Willkommensnachricht nur setzen, wenn noch keine Nachrichten vorhanden sind\n                            if (messages.length === 0 && botData.welcomeMessage) {\n                                console.log(\"CHAT-DEBUG-011: Setze Willkommensnachricht f\\xfcr Bot:\", botData.welcomeMessage.substring(0, 50) + \"...\");\n                                // Sicherstellen, dass der State nicht bereits andere Nachrichten enthält\n                                if (cancelRef.current) {\n                                    console.log(\"CHAT-DEBUG-011: Abbruch beim Setzen der Willkommensnachricht - Chat wurde entfernt\");\n                                    return;\n                                }\n                            // Willkommensnachricht nicht mehr zu messages hinzufügen, sondern nur als separate Variable\n                            // setMessages([{\n                            //   role: \"assistant\",\n                            //   content: botData.welcomeMessage\n                            // }]);\n                            }\n                            // Willkommensnachricht als separate Variable speichern\n                            if (botData.welcomeMessage) {\n                                console.log(\"CHAT-DEBUG-011: Setze Willkommensnachricht f\\xfcr Bot:\", botData.welcomeMessage.substring(0, 50) + \"...\");\n                                // Sicherstellen, dass der State nicht bereits andere Nachrichten enthält\n                                if (cancelRef.current) {\n                                    console.log(\"CHAT-DEBUG-011: Abbruch beim Setzen der Willkommensnachricht - Chat wurde entfernt\");\n                                    return;\n                                }\n                                // Willkommensnachricht als separate Variable speichern\n                                setWelcomeMessage(botData.welcomeMessage);\n                            }\n                        }\n                    } else {\n                        console.error(\"CHAT-DEBUG-011: Fehler beim Laden der Bot-Daten:\", res.status);\n                    }\n                } catch (error) {\n                    console.error(\"CHAT-DEBUG-011: Fehler beim Laden der Bot-Einstellungen:\", error);\n                    // Fallback für die Farben\n                    document.documentElement.style.setProperty(\"--bot-bg-color\", \"rgba(248, 250, 252, 0.8)\");\n                    document.documentElement.style.setProperty(\"--bot-text-color\", \"#000000\");\n                    document.documentElement.style.setProperty(\"--bot-accent-color\", \"#3b82f6\");\n                    document.documentElement.style.setProperty(\"--user-bg-color\", \"linear-gradient(135deg, #3b82f6, #3b82f6cc)\");\n                    document.documentElement.style.setProperty(\"--user-text-color\", \"#ffffff\");\n                }\n            };\n            fetchBotSettings();\n        }, 100); // Kurze Verzögerung, um Race Conditions zu vermeiden\n        return ()=>{\n            clearTimeout(timeoutId); // Timeout löschen beim Unmount\n        };\n    }, [\n        botId\n    ]); // Nur von botId abhängig machen, messages entfernt\n    return {\n        messages,\n        input,\n        setInput,\n        isLoading,\n        error,\n        isOpen,\n        mode,\n        sendMessage,\n        cancelMessage,\n        toggleChat,\n        cycleMode,\n        setMode: setCurrentMode,\n        messagesEndRef,\n        botSettings,\n        welcomeMessage\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL2NoYXQvaG9va3MvdXNlQ2hhdC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs2REFFMkU7QUFFekI7QUFDZjtBQUVuQyx1REFBdUQ7QUFDdkRPLFFBQVFDLEdBQUcsQ0FBQztBQUVaLHVEQUF1RDtBQUN2REQsUUFBUUMsR0FBRyxDQUFDO0FBRVosdURBQXVEO0FBQ3ZERCxRQUFRQyxHQUFHLENBQUM7QUFFWixxREFBcUQ7QUFDckRELFFBQVFDLEdBQUcsQ0FBQztBQUVaLDJEQUEyRDtBQUMzRCxNQUFNQywyQkFBMkIsSUFBSUM7QUFFckMscURBQXFEO0FBQ3JESCxRQUFRQyxHQUFHLENBQUM7QUFFWiwyREFBMkQ7QUFDM0QsMkVBQTJFO0FBQzNFLE1BQU1HLDhCQUE4QjtJQUNsQyxJQUFJO1FBQ0Ysd0ZBQXdGO1FBQ3hGLE1BQU1DLFNBQVNDLGVBQWVDLE9BQU8sQ0FBQztRQUN0QyxJQUFJRixRQUFRO1lBQ1YsT0FBTyxJQUFJRixJQUFZSyxLQUFLQyxLQUFLLENBQUNKO1FBQ3BDO0lBQ0YsRUFBRSxPQUFPSyxHQUFHO1FBQ1ZWLFFBQVFXLEtBQUssQ0FBQywrREFBK0REO0lBQy9FO0lBQ0EsT0FBTyxJQUFJUDtBQUNiO0FBRUEsa0VBQWtFO0FBQ2xFLE1BQU1TLDZCQUE2QixDQUFDQztJQUNsQyxJQUFJO1FBQ0YsTUFBTUMsVUFBVVY7UUFDaEJVLFFBQVFDLEdBQUcsQ0FBQ0Y7UUFDWlAsZUFBZVUsT0FBTyxDQUFDLDRCQUE0QlIsS0FBS1MsU0FBUyxDQUFDO2VBQUlIO1NBQVE7UUFDOUVkLFFBQVFDLEdBQUcsQ0FBQyx3Q0FBNEMsT0FBSlksS0FBSTtJQUMxRCxFQUFFLE9BQU9ILEdBQUc7UUFDVlYsUUFBUVcsS0FBSyxDQUFDLG1FQUFtRUQ7SUFDbkY7QUFDRjtBQUVBLE1BQU1RLDZCQUE2QixDQUFDTDtJQUNsQyxJQUFJO1FBQ0YsbURBQW1EO1FBQ25ELElBQUlYLHlCQUF5QmlCLEdBQUcsQ0FB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QUFDLHNCQUFzQjtvQkFDakVILFNBQVNDLGVBQWUsQ0FBQ0MsS0FBSyxDQUFDQyxXQUFXLENBQUMsbUJBQW1CO29CQUM5REgsU0FBU0MsZUFBZSxDQUFDQyxLQUFLLENBQUNDLFdBQVcsQ0FBQyxxQkFBcUI7Z0JBQ2xFO1lBQ0Y7WUFFQWU7UUFDRixHQUFHLE1BQU0scURBQXFEO1FBRTlELE9BQU87WUFDTGhILGFBQWErRyxZQUFZLCtCQUErQjtRQUMxRDtJQUNGLEdBQUc7UUFBQ3pHO0tBQU0sR0FBRyxtREFBbUQ7SUFFaEUsT0FBTztRQUNMRztRQUNBUztRQUNBQztRQUNBUjtRQUNBekI7UUFDQTRCO1FBQ0FFO1FBQ0F1RTtRQUNBQztRQUNBekQ7UUFDQU87UUFDQXJCLFNBQVN3QjtRQUNUbkI7UUFDQUc7UUFDQUw7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb21wb25lbnRzL2NoYXQvaG9va3MvdXNlQ2hhdC50cz9kODM2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xuXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VDYWxsYmFjaywgUmVmT2JqZWN0LCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IE1lc3NhZ2UsIENoYXRNb2RlIH0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgeyBMdW5hcnlDbGllbnQgfSBmcm9tICdAL2xpYi9sdW5hcnktY2xpZW50J1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCdcblxuLy8gVkVSU0lPTi1NQVJLRVI6IEVpbmRldXRpZ2VyIERlYnVnLUNvZGUgLSBWZXJzaW9uIDAwN1xuY29uc29sZS5sb2coXCJ1c2VDaGF0LnRzIGdlbGFkZW4gLSBEZWJ1Zy1WZXJzaW9uIDAwN1wiKTtcblxuLy8gVkVSU0lPTi1NQVJLRVI6IEVpbmRldXRpZ2VyIERlYnVnLUNvZGUgLSBWZXJzaW9uIDAwOFxuY29uc29sZS5sb2coXCJ1c2VDaGF0LnRzIGdlbGFkZW4gLSBEZWJ1Zy1WZXJzaW9uIDAwOFwiKTtcblxuLy8gVkVSU0lPTi1NQVJLRVI6IEVpbmRldXRpZ2VyIERlYnVnLUNvZGUgLSBWZXJzaW9uIDAwOVxuY29uc29sZS5sb2coXCJ1c2VDaGF0LnRzIGdlbGFkZW4gLSBEZWJ1Zy1WZXJzaW9uIDAwOVwiKTtcblxuLy8gVkVSU0lPTi1NQVJLRVI6IENoYXQtSG9vayBEZWJ1Zy1Db2RlIC0gVmVyc2lvbiAwMTBcbmNvbnNvbGUubG9nKFwidXNlQ2hhdC50cyBnZWxhZGVuIC0gRGVidWctVmVyc2lvbiAwMTBcIik7XG5cbi8vIEdsb2JhbGVyIFRyYWNraW5nLU1lY2hhbmlzbXVzIGbDvHIgV2lsbGtvbW1lbnNuYWNocmljaHRlblxuY29uc3QgcHJvY2Vzc2VkV2VsY29tZU1lc3NhZ2VzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbi8vIFZFUlNJT04tTUFSS0VSOiBDaGF0LUhvb2sgRGVidWctQ29kZSAtIFZlcnNpb24gMDExXG5jb25zb2xlLmxvZyhcInVzZUNoYXQudHMgZ2VsYWRlbiAtIERlYnVnLVZlcnNpb24gMDExXCIpO1xuXG4vLyBHbG9iYWxlciBUcmFja2luZy1NZWNoYW5pc211cyBmw7xyIFdpbGxrb21tZW5zbmFjaHJpY2h0ZW5cbi8vIERpZXMgaXN0IG51biBlaW5lIEtvbWJpbmF0aW9uIGF1cyBzZXNzaW9uU3RvcmFnZSB1bmQgZWluZW0gaW4tbWVtb3J5IFNldFxuY29uc3QgZ2V0UHJvY2Vzc2VkV2VsY29tZU1lc3NhZ2VzID0gKCk6IFNldDxzdHJpbmc+ID0+IHtcbiAgdHJ5IHtcbiAgICAvLyBWZXJzdWNoZSwgYmVyZWl0cyB2ZXJhcmJlaXRldGUgV2lsbGtvbW1lbnNuYWNocmljaHRlbiBhdXMgZGVtIHNlc3Npb25TdG9yYWdlIHp1IGxhZGVuXG4gICAgY29uc3Qgc3RvcmVkID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgncHJvY2Vzc2VkV2VsY29tZU1lc3NhZ2VzJyk7XG4gICAgaWYgKHN0b3JlZCkge1xuICAgICAgcmV0dXJuIG5ldyBTZXQ8c3RyaW5nPihKU09OLnBhcnNlKHN0b3JlZCkpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJGZWhsZXIgYmVpbSBMYWRlbiBkZXIgdmVyYXJiZWl0ZXRlbiBXaWxsa29tbWVuc25hY2hyaWNodGVuOlwiLCBlKTtcbiAgfVxuICByZXR1cm4gbmV3IFNldDxzdHJpbmc+KCk7XG59O1xuXG4vLyBTcGVpY2hlcmUgdmVyYXJiZWl0ZXRlIFdpbGxrb21tZW5zbmFjaHJpY2h0ZW4gaW0gc2Vzc2lvblN0b3JhZ2VcbmNvbnN0IGFkZFByb2Nlc3NlZFdlbGNvbWVNZXNzYWdlID0gKGtleTogc3RyaW5nKTogdm9pZCA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgY3VycmVudCA9IGdldFByb2Nlc3NlZFdlbGNvbWVNZXNzYWdlcygpO1xuICAgIGN1cnJlbnQuYWRkKGtleSk7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgncHJvY2Vzc2VkV2VsY29tZU1lc3NhZ2VzJywgSlNPTi5zdHJpbmdpZnkoWy4uLmN1cnJlbnRdKSk7XG4gICAgY29uc29sZS5sb2coYENIQVQtREVCVUctMDExOiBXaWxsa29tbWVuc25hY2hyaWNodCAke2tleX0gYWxzIHZlcmFyYmVpdGV0IG1hcmtpZXJ0IHVuZCBpbiBzZXNzaW9uU3RvcmFnZSBnZXNwZWljaGVydGApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkZlaGxlciBiZWltIFNwZWljaGVybiBkZXIgdmVyYXJiZWl0ZXRlbiBXaWxsa29tbWVuc25hY2hyaWNodGVuOlwiLCBlKTtcbiAgfVxufTtcblxuY29uc3QgaGFzUHJvY2Vzc2VkV2VsY29tZU1lc3NhZ2UgPSAoa2V5OiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgdHJ5IHtcbiAgICAvLyBQcsO8ZmUgc293b2hsIGxva2FsZXMgU2V0IGFscyBhdWNoIHNlc3Npb25TdG9yYWdlXG4gICAgaWYgKHByb2Nlc3NlZFdlbGNvbWVNZXNzYWdlcy5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHN0b3JlZCA9IGdldFByb2Nlc3NlZFdlbGNvbWVNZXNzYWdlcygpO1xuICAgIHJldHVybiBzdG9yZWQuaGFzKGtleSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRmVobGVyIGJlaW0gw5xiZXJwcsO8ZmVuIGRlciB2ZXJhcmJlaXRldGVuIFdpbGxrb21tZW5zbmFjaHJpY2h0ZW46XCIsIGUpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gSGlsZnNmdW5rdGlvbiBmw7xyIERlYm91bmNlXG5mdW5jdGlvbiBkZWJvdW5jZTxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KGZ1bmM6IFQsIHdhaXQ6IG51bWJlcik6ICguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KSA9PiB2b2lkIHtcbiAgbGV0IHRpbWVvdXQ6IE5vZGVKUy5UaW1lb3V0IHwgbnVsbCA9IG51bGw7XG4gIFxuICByZXR1cm4gZnVuY3Rpb24oLi4uYXJnczogUGFyYW1ldGVyczxUPik6IHZvaWQge1xuICAgIGlmICh0aW1lb3V0KSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gZnVuYyguLi5hcmdzKSwgd2FpdCk7XG4gIH07XG59XG5cbmludGVyZmFjZSBVc2VDaGF0UHJvcHMge1xuICBpbml0aWFsTWVzc2FnZXM/OiBNZXNzYWdlW11cbiAgaW5pdGlhbE1vZGU/OiBDaGF0TW9kZVxuICBpbml0aWFsT3Blbj86IGJvb2xlYW5cbiAgYm90SWQ/OiBzdHJpbmdcbiAgb25FcnJvcj86IChlcnJvcjogRXJyb3IpID0+IHZvaWRcbiAgaW5pdGlhbFNldHRpbmdzPzogYW55IC8vIEJvdC1FaW5zdGVsbHVuZ2VuIGRpcmVrdCDDvGJlcmdlYmVuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlQ2hhdE9wdGlvbnMge1xuICBhdXRvRm9jdXM/OiBib29sZWFuO1xuICBpc09wZW4/OiBib29sZWFuO1xuICBib3RJZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNoYXQoeyBcbiAgaW5pdGlhbE1lc3NhZ2VzID0gW10sIFxuICBpbml0aWFsTW9kZSA9ICdidWJibGUnLCBcbiAgaW5pdGlhbE9wZW4gPSBmYWxzZSxcbiAgYm90SWQsXG4gIG9uRXJyb3IsXG4gIGluaXRpYWxTZXR0aW5nc1xufTogVXNlQ2hhdFByb3BzID0ge30pIHtcbiAgY29uc3QgW21lc3NhZ2VzLCBzZXRNZXNzYWdlc10gPSB1c2VTdGF0ZTxNZXNzYWdlW10+KGluaXRpYWxNZXNzYWdlcylcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpXG4gIGNvbnN0IFtpc09wZW4sIHNldElzT3Blbl0gPSB1c2VTdGF0ZShpbml0aWFsT3BlbilcbiAgY29uc3QgW21vZGUsIHNldE1vZGVdID0gdXNlU3RhdGU8Q2hhdE1vZGU+KGluaXRpYWxNb2RlKVxuICBjb25zdCBbaW5wdXQsIHNldElucHV0XSA9IHVzZVN0YXRlKCcnKVxuICBjb25zdCBbd2VsY29tZU1lc3NhZ2UsIHNldFdlbGNvbWVNZXNzYWdlXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpXG4gIGNvbnN0IG1lc3NhZ2VzRW5kUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKVxuICBjb25zdCBhYm9ydENvbnRyb2xsZXJSZWYgPSB1c2VSZWY8QWJvcnRDb250cm9sbGVyIHwgbnVsbD4obnVsbClcbiAgY29uc3Qgc2Vzc2lvbklkUmVmID0gdXNlUmVmPHN0cmluZz4odXVpZHY0KCkpIC8vIEVpbmRldXRpZ2UgU2l0enVuZ3MtSUQgZsO8ciBUcmFja2luZ1xuICBjb25zdCBbYm90U2V0dGluZ3MsIHNldEJvdFNldHRpbmdzXSA9IHVzZVN0YXRlPGFueT4obnVsbClcbiAgY29uc3QgbGFzdE1lc3NhZ2VUaW1lc3RhbXBSZWYgPSB1c2VSZWY8bnVtYmVyPigwKSAvLyBaZWl0c3RlbXBlbCBkZXIgbGV0enRlbiBnZXNlbmRldGVuIE5hY2hyaWNodFxuICBjb25zdCBjaGF0SW5pdGlhbGl6ZWRSZWYgPSB1c2VSZWY8Ym9vbGVhbj4oZmFsc2UpIC8vIFRyYWNraW5nIGbDvHIgZGllIENoYXQtSW5pdGlhbGlzaWVydW5nXG4gIGNvbnN0IGNhbmNlbFJlZiA9IHVzZVJlZjxib29sZWFuPihmYWxzZSkgLy8gUmVmIHp1bSBBYmJyZWNoZW4gdm9uIE9wZXJhdGlvbmVuXG4gIGNvbnN0IGNhbmNlbEZldGNoUmVmID0gdXNlUmVmPGJvb2xlYW4+KGZhbHNlKSAvLyBSZWYgenVtIEFiYnJlY2hlbiB2b24gRmV0Y2gtT3BlcmF0aW9uZW5cblxuICAvLyBUb2dnbGUgQ2hhdCDDtmZmbmVuL3NjaGxpZcOfZW5cbiAgY29uc3QgdG9nZ2xlQ2hhdCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRJc09wZW4oKHByZXYpID0+ICFwcmV2KVxuICAgIFxuICAgIC8vIFRyYWNraW5nIGbDvHIgQ2hhdC3DlmZmbmVuL1NjaGxpZcOfZW5cbiAgICBMdW5hcnlDbGllbnQudHJhY2soe1xuICAgICAgZXZlbnROYW1lOiBpc09wZW4gPyAnY2hhdF9jbG9zZWQnIDogJ2NoYXRfb3BlbmVkJyxcbiAgICAgIHByb3BlcnRpZXM6IHsgYm90SWQgfSxcbiAgICAgIG1ldGFkYXRhOiB7IHNlc3Npb25JZDogc2Vzc2lvbklkUmVmLmN1cnJlbnQgfVxuICAgIH0pXG4gIH0sIFtpc09wZW4sIGJvdElkXSlcblxuICAvLyBXZWNoc2VsdCB6d2lzY2hlbiBkZW4gTW9kaSAoYnViYmxlIC0+IGlubGluZSAtPiBmdWxsc2NyZWVuIC0+IGJ1YmJsZSlcbiAgY29uc3QgY3ljbGVNb2RlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldE1vZGUoKGN1cnJlbnRNb2RlKSA9PiB7XG4gICAgICBjb25zdCBuZXh0TW9kZSA9IGN1cnJlbnRNb2RlID09PSAnYnViYmxlJyA/ICdpbmxpbmUnIDogY3VycmVudE1vZGUgPT09ICdpbmxpbmUnID8gJ2Z1bGxzY3JlZW4nIDogJ2J1YmJsZSdcbiAgICAgIFxuICAgICAgLy8gVHJhY2tpbmcgZsO8ciBNb2R1c8OkbmRlcnVuZ1xuICAgICAgTHVuYXJ5Q2xpZW50LnRyYWNrKHtcbiAgICAgICAgZXZlbnROYW1lOiAnY2hhdF9tb2RlX2NoYW5nZWQnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7IG1vZGU6IG5leHRNb2RlLCBib3RJZCB9LFxuICAgICAgICBtZXRhZGF0YTogeyBzZXNzaW9uSWQ6IHNlc3Npb25JZFJlZi5jdXJyZW50IH1cbiAgICAgIH0pXG4gICAgICBcbiAgICAgIHJldHVybiBuZXh0TW9kZVxuICAgIH0pXG4gIH0sIFtib3RJZF0pXG5cbiAgLy8gRGlyZWt0IHp1IGVpbmVtIGJlc3RpbW10ZW4gTW9kdXMgd2VjaHNlbG5cbiAgY29uc3Qgc2V0Q3VycmVudE1vZGUgPSB1c2VDYWxsYmFjaygobmV3TW9kZTogQ2hhdE1vZGUpID0+IHtcbiAgICBzZXRNb2RlKG5ld01vZGUpXG4gIH0sIFtdKVxuXG4gIC8vIE5hY2hyaWNodGVubGlzdGUgYWt0dWFsaXNpZXJlbiBtaXQgbmV1ZXIgTmFjaHJpY2h0XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG1lc3NhZ2VzRW5kUmVmLmN1cnJlbnQpIHtcbiAgICAgIC8vIERhcyBFbGVtZW50IG1pdCBlaW5lbSBPZmZzZXQgaW5zIFNpY2h0ZmVsZCBzY3JvbGxlbiwgXG4gICAgICAvLyBkYW1pdCBkZXIgQW5mYW5nIGRlciBOYWNocmljaHQgc2ljaHRiYXIgaXN0XG4gICAgICBjb25zdCBwYXJlbnRFbGVtZW50ID0gbWVzc2FnZXNFbmRSZWYuY3VycmVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgaWYgKHBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgLy8gU3RhdHQgenVtIEVuZGUgc2Nyb2xsZW4sIHNjcm9sbGVuIHdpciB6dW0gZXJzdGVuIEtpbmQtRWxlbWVudCBkZXIgbGV0enRlbiBOYWNocmljaHRcbiAgICAgICAgY29uc3QgbGFzdE1lc3NhZ2UgPSBwYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ncm91cDpsYXN0LW9mLXR5cGUnKTtcbiAgICAgICAgaWYgKGxhc3RNZXNzYWdlKSB7XG4gICAgICAgICAgbGFzdE1lc3NhZ2Uuc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnc3RhcnQnIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEZhbGxiYWNrIHp1bSBhbHRlbiBWZXJoYWx0ZW5cbiAgICAgICAgICBtZXNzYWdlc0VuZFJlZi5jdXJyZW50LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCBbbWVzc2FnZXNdKTtcblxuICAvLyBOYWNocmljaHQgenVyIExpc3RlIGhpbnp1ZsO8Z2VuXG4gIGNvbnN0IGFkZE1lc3NhZ2UgPSB1c2VDYWxsYmFjaygobWVzc2FnZTogTWVzc2FnZSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiREVCVUctMDA3OiBhZGRNZXNzYWdlIGF1ZmdlcnVmZW5cIiwgbWVzc2FnZSk7XG4gICAgXG4gICAgLy8gw5xiZXJwcsO8ZmVuLCBvYiBkaWUgTmFjaHJpY2h0IGJlcmVpdHMgZXhpc3RpZXJ0ICh1bSBEdXBsaWthdGUgenUgdmVybWVpZGVuKVxuICAgIHNldE1lc3NhZ2VzKChwcmV2TWVzc2FnZXMpID0+IHtcbiAgICAgIC8vIFByw7xmZSBhdWYgaWRlbnRpc2NoZSBOYWNocmljaHQgaW4gZGVuIGxldHp0ZW4gMyBFbGVtZW50ZW5cbiAgICAgIC8vIChGw7xyIGRlbiBGYWxsIG1laHJlcmVyIE5hY2hyaWNodGVuIGluIGt1cnplciBaZWl0KVxuICAgICAgY29uc3QgcmVjZW50TWVzc2FnZXMgPSBwcmV2TWVzc2FnZXMuc2xpY2UoLTMpO1xuICAgICAgY29uc3QgaXNEdXBsaWNhdGUgPSByZWNlbnRNZXNzYWdlcy5zb21lKFxuICAgICAgICAobSkgPT4gbS5yb2xlID09PSBtZXNzYWdlLnJvbGUgJiYgbS5jb250ZW50ID09PSBtZXNzYWdlLmNvbnRlbnRcbiAgICAgICk7XG4gICAgICBcbiAgICAgIGlmIChpc0R1cGxpY2F0ZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkRFQlVHLTAwNzogRHVwbGlrYXQgZ2VmdW5kZW4sIE5hY2hyaWNodCB3aXJkIG5pY2h0IGhpbnp1Z2Vmw7xndFwiKTtcbiAgICAgICAgcmV0dXJuIHByZXZNZXNzYWdlcztcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIFsuLi5wcmV2TWVzc2FnZXMsIG1lc3NhZ2VdO1xuICAgIH0pO1xuICB9LCBbXSk7XG5cbiAgLy8gQmVpIFVubW91bnQgUmVzc291cmNlbiBmcmVpZ2ViZW5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgLy8gQWJicmVjaGVuIGxhdWZlbmRlciBBbmZyYWdlblxuICAgICAgaWYgKGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50KSB7XG4gICAgICAgIGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50LmFib3J0KCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFJlZnMgZsO8ciBBYmJydWNoIHNldHplblxuICAgICAgY2FuY2VsUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgY2FuY2VsRmV0Y2hSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICBcbiAgICAgIC8vIENoYXQtSW5pdGlhbGlzaWVydW5nc3N0YXR1cyB6dXLDvGNrc2V0emVuXG4gICAgICBjaGF0SW5pdGlhbGl6ZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIH07XG4gIH0sIFtdKTtcblxuICAvLyBEZWJvdW5jZWQgc2VuZE1lc3NhZ2UgRnVua3Rpb24sIHZlcmhpbmRlcnQgbWVocmZhY2hlIEF1ZnJ1ZmUgaW5uZXJoYWxiIHZvbiA1MDBtc1xuICBjb25zdCBkZWJvdW5jZWRTZW5kTWVzc2FnZSA9IHVzZUNhbGxiYWNrKGFzeW5jIChjb250ZW50OiBzdHJpbmcpID0+IHtcbiAgICAvLyBEaWUgbm9ybWFsZSBzZW5kTWVzc2FnZS1Mb2dpayBoaWVyXG4gICAgaWYgKCFjb250ZW50IHx8IGNvbnRlbnQudHJpbSgpID09PSAnJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvLyBWZXJoaW5kZXJlIGVybmV1dGVzIFNlbmRlbiwgd2VubiBnZXJhZGUgZ2VsYWRlbiB3aXJkXG4gICAgaWYgKGlzTG9hZGluZykge1xuICAgICAgY29uc29sZS5sb2coJ0RFQlVHLTAwNzogU2VuZGVwcm96ZXNzIGzDpHVmdCBiZXJlaXRzLCBpZ25vcmllcmUgZXJuZXV0ZW4gQXVmcnVmJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vIFByw7xmZSwgb2IgZGllIGxldHp0ZSBOYWNocmljaHQgZXJzdCBrw7xyemxpY2ggZ2VzZW5kZXQgd3VyZGUgKGRvcHBlbHRlIEFic2ljaGVydW5nKVxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgaWYgKG5vdyAtIGxhc3RNZXNzYWdlVGltZXN0YW1wUmVmLmN1cnJlbnQgPCAxMDAwKSB7XG4gICAgICBjb25zb2xlLmxvZygnREVCVUctMDA3OiBMZXR6dGUgTmFjaHJpY2h0IHd1cmRlIHZvciB3ZW5pZ2VyIGFscyAxIFNla3VuZGUgZ2VzZW5kZXQsIGlnbm9yaWVyZScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsYXN0TWVzc2FnZVRpbWVzdGFtcFJlZi5jdXJyZW50ID0gbm93O1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyBBbmZhbmcgZGVzIExhZGV2b3JnYW5nc1xuICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgICAgc2V0RXJyb3IobnVsbCk7XG4gICAgICBcbiAgICAgIC8vIEJlbnV0emVyLU5hY2hyaWNodCBoaW56dWbDvGdlblxuICAgICAgY29uc3QgdXNlck1lc3NhZ2U6IE1lc3NhZ2UgPSB7IHJvbGU6ICd1c2VyJywgY29udGVudCB9O1xuICAgICAgYWRkTWVzc2FnZSh1c2VyTWVzc2FnZSk7XG4gICAgICBcbiAgICAgIC8vIEFiYnJlY2hlbiB3ZW5uIHNjaG9uIGVpbmUgQW5mcmFnZSBsw6R1ZnRcbiAgICAgIGlmIChhYm9ydENvbnRyb2xsZXJSZWYuY3VycmVudCkge1xuICAgICAgICBhYm9ydENvbnRyb2xsZXJSZWYuY3VycmVudC5hYm9ydCgpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBOZXVlIEFib3J0Q29udHJvbGxlci1JbnN0YW56IGVyc3RlbGxlblxuICAgICAgYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgICBjb25zdCBzaWduYWwgPSBhYm9ydENvbnRyb2xsZXJSZWYuY3VycmVudC5zaWduYWw7XG4gICAgICBcbiAgICAgIC8vIFRyYWNraW5nIGbDvHIgZ2VzZW5kZXRlIE5hY2hyaWNodFxuICAgICAgTHVuYXJ5Q2xpZW50LnRyYWNrKHtcbiAgICAgICAgZXZlbnROYW1lOiAnbWVzc2FnZV9zZW50JyxcbiAgICAgICAgcHJvcGVydGllczogeyBcbiAgICAgICAgICBjb250ZW50OiBjb250ZW50LnNsaWNlKDAsIDEwMCksIC8vIEVyc3RlbiAxMDAgWmVpY2hlbiBkZXIgTmFjaHJpY2h0XG4gICAgICAgICAgYm90SWQgXG4gICAgICAgIH0sXG4gICAgICAgIG1ldGFkYXRhOiB7IHNlc3Npb25JZDogc2Vzc2lvbklkUmVmLmN1cnJlbnQgfVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIFNlbmRlIEFuZnJhZ2UgYW4gQVBJXG4gICAgICBjb25zb2xlLmxvZygnREVCVUctMDA3OiBTZW5kZSBBUEktQW5mcmFnZScsIGNvbnRlbnQpO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9jaGF0Jywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBtZXNzYWdlOiBjb250ZW50LFxuICAgICAgICAgIGhpc3Rvcnk6IG1lc3NhZ2VzLFxuICAgICAgICAgIGJvdElkOiBib3RJZCxcbiAgICAgICAgfSksXG4gICAgICAgIHNpZ25hbCxcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgRmVobGVyIGJlaW0gU2VuZGVuIGRlciBOYWNocmljaHQ6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgXG4gICAgICAvLyBGw7xnZSBCb3QtQW50d29ydCBoaW56dVxuICAgICAgbGV0IGJvdENvbnRlbnQgPSAnJztcbiAgICAgIFxuICAgICAgaWYgKGRhdGEudGV4dCkge1xuICAgICAgICBib3RDb250ZW50ID0gZGF0YS50ZXh0O1xuICAgICAgfSBlbHNlIGlmIChkYXRhLnJlc3BvbnNlKSB7XG4gICAgICAgIGJvdENvbnRlbnQgPSBkYXRhLnJlc3BvbnNlO1xuICAgICAgfSBlbHNlIGlmIChkYXRhLmNvbnRlbnQpIHtcbiAgICAgICAgYm90Q29udGVudCA9IGRhdGEuY29udGVudDtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YS5hc3Npc3RhbnQpIHtcbiAgICAgICAgYm90Q29udGVudCA9IGRhdGEuYXNzaXN0YW50O1xuICAgICAgfSBlbHNlIGlmIChkYXRhLm1lc3NhZ2UpIHtcbiAgICAgICAgYm90Q29udGVudCA9IGRhdGEubWVzc2FnZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJvdENvbnRlbnQgPSAnRW50c2NodWxkaWd1bmcsIGljaCBrb25udGUga2VpbmUgQW50d29ydCBnZW5lcmllcmVuLic7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IGJvdE1lc3NhZ2U6IE1lc3NhZ2UgPSB7IHJvbGU6ICdhc3Npc3RhbnQnLCBjb250ZW50OiBib3RDb250ZW50IH07XG4gICAgICBhZGRNZXNzYWdlKGJvdE1lc3NhZ2UpO1xuXG4gICAgICAvLyBUcmFja2luZyBmw7xyIGVtcGZhbmdlbmUgQW50d29ydFxuICAgICAgTHVuYXJ5Q2xpZW50LnRyYWNrKHtcbiAgICAgICAgZXZlbnROYW1lOiAnbWVzc2FnZV9yZWNlaXZlZCcsXG4gICAgICAgIHByb3BlcnRpZXM6IHsgXG4gICAgICAgICAgY29udGVudDogYm90Q29udGVudC5zbGljZSgwLCAxMDApLCAvLyBFcnN0ZW4gMTAwIFplaWNoZW4gZGVyIEFudHdvcnRcbiAgICAgICAgICBib3RJZCxcbiAgICAgICAgICByZXNwb25zZVRpbWU6IERhdGUubm93KCkgLSBwZXJmb3JtYW5jZS5ub3coKSAvLyBVbmdlZsOkaHJlIEFudHdvcnR6ZWl0XG4gICAgICAgIH0sXG4gICAgICAgIG1ldGFkYXRhOiB7IHNlc3Npb25JZDogc2Vzc2lvbklkUmVmLmN1cnJlbnQgfVxuICAgICAgfSk7XG5cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIFByw7xmZSwgb2IgZXMgc2ljaCB1bSBlaW5lbiBBYmJydWNoIGhhbmRlbHRcbiAgICAgIGlmICgoZXJyIGFzIEVycm9yKS5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0RFQlVHLTAwNzogQW5mcmFnZSB3dXJkZSBhYmdlYnJvY2hlbicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZlaGxlciBiZWltIFNlbmRlbiBkZXIgTmFjaHJpY2h0OicsIGVycik7XG4gICAgICBzZXRFcnJvcignQmVpbSBTZW5kZW4gZGVyIE5hY2hyaWNodCBpc3QgZWluIEZlaGxlciBhdWZnZXRyZXRlbi4gQml0dGUgdmVyc3VjaGVuIFNpZSBlcyBlcm5ldXQuJyk7XG4gICAgICBcbiAgICAgIC8vIFRyYWNraW5nIGbDvHIgRmVobGVyXG4gICAgICBMdW5hcnlDbGllbnQudHJhY2soe1xuICAgICAgICBldmVudE5hbWU6ICdtZXNzYWdlX2Vycm9yJyxcbiAgICAgICAgcHJvcGVydGllczogeyBcbiAgICAgICAgICBlcnJvcjogZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6ICdVbmJla2FubnRlciBGZWhsZXInLFxuICAgICAgICAgIGJvdElkIFxuICAgICAgICB9LFxuICAgICAgICBtZXRhZGF0YTogeyBzZXNzaW9uSWQ6IHNlc3Npb25JZFJlZi5jdXJyZW50IH1cbiAgICAgIH0pO1xuICAgICAgXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgICBhYm9ydENvbnRyb2xsZXJSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICBzZXRJbnB1dCgnJyk7XG4gICAgfVxuICB9LCBbaXNMb2FkaW5nLCBtZXNzYWdlcywgYWRkTWVzc2FnZSwgYm90SWRdKTtcblxuICAvLyBXcmFwcGVyLUZ1bmt0aW9uIGbDvHIgc2VuZE1lc3NhZ2UsIGRpZSBkZW4gZGVib3VuY2VkLUF1ZnJ1ZiB0cmlnZ2VydFxuICBjb25zdCBzZW5kTWVzc2FnZSA9IHVzZUNhbGxiYWNrKChjb250ZW50OiBzdHJpbmcpID0+IHtcbiAgICBjb25zb2xlLmxvZygnREVCVUctMDA3OiBzZW5kTWVzc2FnZSBhdWZnZXJ1ZmVuIG1pdDonLCBjb250ZW50KTtcbiAgICBkZWJvdW5jZWRTZW5kTWVzc2FnZShjb250ZW50KTtcbiAgfSwgW2RlYm91bmNlZFNlbmRNZXNzYWdlXSk7XG5cbiAgLy8gTGF1ZmVuZGUgQW5mcmFnZSBhYmJyZWNoZW5cbiAgY29uc3QgY2FuY2VsTWVzc2FnZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50LmFib3J0KCk7XG4gICAgICBhYm9ydENvbnRyb2xsZXJSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIC8vIEJvdC1FaW5zdGVsbHVuZ2VuIGJlaW0gZXJzdGVuIExhZGVuIGFicnVmZW5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWJvdElkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vIFdlbm4gaW5pdGlhbFNldHRpbmdzIHZvcmhhbmRlbiBzaW5kLCB2ZXJ3ZW5kZSBkaWVzZSBkaXJla3RcbiAgICBpZiAoaW5pdGlhbFNldHRpbmdzKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkNIQVQtREVCVUctMDExOiBWZXJ3ZW5kZSDDvGJlcmdlYmVuZSBCb3QtRWluc3RlbGx1bmdlblwiLCBpbml0aWFsU2V0dGluZ3MpO1xuICAgICAgXG4gICAgICAvLyBCb3QtRWluc3RlbGx1bmdlbiBpbSBzdGF0ZSBzcGVpY2hlcm5cbiAgICAgIHNldEJvdFNldHRpbmdzKGluaXRpYWxTZXR0aW5ncyk7XG4gICAgICBcbiAgICAgIC8vIFJHQi1XZXJ0ZSBmw7xyIFByaW3DpHJmYXJiZSBiZXJlY2huZW4gZsO8ciBTY2hhdHRlbiBldGMuXG4gICAgICBjb25zdCBwcmltYXJ5Q29sb3IgPSBpbml0aWFsU2V0dGluZ3MucHJpbWFyeUNvbG9yIHx8ICcjM2I4MmY2JztcbiAgICAgIGNvbnN0IHIgPSBwYXJzZUludChwcmltYXJ5Q29sb3Iuc2xpY2UoMSwgMyksIDE2KTtcbiAgICAgIGNvbnN0IGcgPSBwYXJzZUludChwcmltYXJ5Q29sb3Iuc2xpY2UoMywgNSksIDE2KTtcbiAgICAgIGNvbnN0IGIgPSBwYXJzZUludChwcmltYXJ5Q29sb3Iuc2xpY2UoNSwgNyksIDE2KTtcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1wcmltYXJ5LXJnYicsIGAke3J9LCAke2d9LCAke2J9YCk7XG4gICAgICBcbiAgICAgIC8vIFByaW3DpHJmYXJiZSBhbHMgQ1NTLVZhcmlhYmxlIHNldHplblxuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLXByaW1hcnknLCBwcmltYXJ5Q29sb3IpO1xuICAgICAgXG4gICAgICAvLyBDU1MtVmFyaWFibGVuIGltIDpyb290IHNldHplbiBmw7xyIENoYXQtU3R5bGluZ1xuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLWJvdC1iZy1jb2xvcicsIGluaXRpYWxTZXR0aW5ncy5ib3RCZ0NvbG9yIHx8ICdyZ2JhKDI0OCwgMjUwLCAyNTIsIDAuOCknKTtcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1ib3QtdGV4dC1jb2xvcicsIGluaXRpYWxTZXR0aW5ncy5ib3RUZXh0Q29sb3IgfHwgJyMwMDAwMDAnKTtcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1ib3QtYWNjZW50LWNvbG9yJywgaW5pdGlhbFNldHRpbmdzLmJvdEFjY2VudENvbG9yIHx8IGluaXRpYWxTZXR0aW5ncy5wcmltYXJ5Q29sb3IgfHwgJyMzYjgyZjYnKTtcbiAgICAgIFxuICAgICAgLy8gVXNlci1OYWNocmljaHRlbmZhcmJlblxuICAgICAgaWYgKGluaXRpYWxTZXR0aW5ncy51c2VyQmdDb2xvcikge1xuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tdXNlci1iZy1jb2xvcicsIGluaXRpYWxTZXR0aW5ncy51c2VyQmdDb2xvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGYWxsYmFjazogUHJpbcOkcmZhcmJlIG1pdCBHcmFkaWVudFxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXG4gICAgICAgICAgJy0tdXNlci1iZy1jb2xvcicsIFxuICAgICAgICAgIGBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCAke2luaXRpYWxTZXR0aW5ncy5wcmltYXJ5Q29sb3IgfHwgJyMzYjgyZjYnfSwgJHtpbml0aWFsU2V0dGluZ3MucHJpbWFyeUNvbG9yIHx8ICcjM2I4MmY2J31jYylgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEJlbnV0emVydGV4dGZhcmJlIGZlc3RsZWdlbiAtIG1pdCBow7ZoZXJlciBTcGV6aWZpdMOkdFxuICAgICAgY29uc3QgdXNlclRleHRDb2xvciA9IGluaXRpYWxTZXR0aW5ncy51c2VyVGV4dENvbG9yIHx8ICcjZmZmZmZmJztcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS11c2VyLXRleHQtY29sb3InLCBgJHt1c2VyVGV4dENvbG9yfSAhaW1wb3J0YW50YCk7XG4gICAgICBcbiAgICAgIC8vIEV4cGxpeml0IGVpbmUgZXh0cmEtU3RpbGUgaGluenVmw7xnZW4gZsO8ciBow7ZoZXJlIFNwZXppZml0w6R0XG4gICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICBzdHlsZS5pbm5lckhUTUwgPSBgXG4gICAgICAgIC5nbGFzc21vcnBoaXNtLXVzZXIgeyBjb2xvcjogJHt1c2VyVGV4dENvbG9yfSAhaW1wb3J0YW50OyB9XG4gICAgICAgIC5nbGFzc21vcnBoaXNtLXVzZXIgKiB7IGNvbG9yOiAke3VzZXJUZXh0Q29sb3J9ICFpbXBvcnRhbnQ7IH1cbiAgICAgIGA7XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYENIQVQtREVCVUctMDExOiBTZXR6ZSBCZW51dHplci1UZXh0ZmFyYmUgYXVmICR7dXNlclRleHRDb2xvcn0gbWl0ICFpbXBvcnRhbnRgKTtcbiAgICAgIFxuICAgICAgLy8gV2VubiBXaWxsa29tbWVuc25hY2hyaWNodCB2b3JoYW5kZW4gaXN0IHVuZCBub2NoIGtlaW5lIE5hY2hyaWNodGVuIGFuZ2V6ZWlndCB3ZXJkZW5cbiAgICAgIGlmIChtZXNzYWdlcy5sZW5ndGggPT09IDAgJiYgaW5pdGlhbFNldHRpbmdzLndlbGNvbWVNZXNzYWdlKSB7XG4gICAgICAgIC8vIFdpbGxrb21tZW5zbmFjaHJpY2h0IG5pY2h0IG1laHIgenUgbWVzc2FnZXMgaGluenVmw7xnZW4sIHNvbmRlcm4gbnVyIGFscyBzZXBhcmF0ZSBWYXJpYWJsZVxuICAgICAgICAvLyBzZXRNZXNzYWdlcyhbe1xuICAgICAgICAvLyAgIHJvbGU6IFwiYXNzaXN0YW50XCIsXG4gICAgICAgIC8vICAgY29udGVudDogaW5pdGlhbFNldHRpbmdzLndlbGNvbWVNZXNzYWdlXG4gICAgICAgIC8vIH1dKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gTWFya2llcmUgZGllc2UgV2lsbGtvbW1lbnNuYWNocmljaHQgYWxzIHZlcmFyYmVpdGV0XG4gICAgICBjb25zdCB3ZWxjb21lS2V5ID0gYHdlbGNvbWUtJHtib3RJZH1gO1xuICAgICAgcHJvY2Vzc2VkV2VsY29tZU1lc3NhZ2VzLmFkZCh3ZWxjb21lS2V5KTtcbiAgICAgIGFkZFByb2Nlc3NlZFdlbGNvbWVNZXNzYWdlKHdlbGNvbWVLZXkpO1xuICAgICAgXG4gICAgICAvLyBDaGF0IGFscyBpbml0aWFsaXNpZXJ0IG1hcmtpZXJlblxuICAgICAgY2hhdEluaXRpYWxpemVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgXG4gICAgICAvLyBXZW5uIFdpbGxrb21tZW5zbmFjaHJpY2h0IHZvcmhhbmRlbiBpc3RcbiAgICAgIGlmIChpbml0aWFsU2V0dGluZ3Mud2VsY29tZU1lc3NhZ2UpIHtcbiAgICAgICAgLy8gV2lsbGtvbW1lbnNuYWNocmljaHQgYWxzIHNlcGFyYXRlIFZhcmlhYmxlIHNwZWljaGVyblxuICAgICAgICBzZXRXZWxjb21lTWVzc2FnZShpbml0aWFsU2V0dGluZ3Mud2VsY29tZU1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGNvbnNvbGUubG9nKGBDSEFULURFQlVHLTAxMTogQ2hhdC1Ib29rIGbDvHIgQm90ICR7Ym90SWR9IC0gV2lsbGtvbW1lbnNuYWNocmljaHQgd2lyZCBnZXByw7xmdGAsIHsgXG4gICAgICBtZXNzYWdlc0xlbmd0aDogbWVzc2FnZXMubGVuZ3RoLFxuICAgICAgY2hhdEluaXRpYWxpemVkOiBjaGF0SW5pdGlhbGl6ZWRSZWYuY3VycmVudFxuICAgIH0pO1xuICAgIFxuICAgIC8vIE1hcmtpZXJlIGRpZXNlIFdpbGxrb21tZW5zbmFjaHJpY2h0IGFscyB2ZXJhcmJlaXRldFxuICAgIGNvbnN0IHdlbGNvbWVLZXkgPSBgd2VsY29tZS0ke2JvdElkfWA7XG4gICAgcHJvY2Vzc2VkV2VsY29tZU1lc3NhZ2VzLmFkZCh3ZWxjb21lS2V5KTtcbiAgICBhZGRQcm9jZXNzZWRXZWxjb21lTWVzc2FnZSh3ZWxjb21lS2V5KTtcbiAgICBcbiAgICAvLyBDaGF0IGFscyBpbml0aWFsaXNpZXJ0IG1hcmtpZXJlblxuICAgIGNoYXRJbml0aWFsaXplZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICBcbiAgICAvLyBFaW5lIFZlcnrDtmdlcnVuZyBoaW56dWbDvGdlbiwgdW0gc2ljaGVyenVzdGVsbGVuLCBkYXNzIGRpZSBLb21wb25lbnRlIHZvbGxzdMOkbmRpZyBnZW1vdW50ZWQgaXN0XG4gICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBmZXRjaEJvdFNldHRpbmdzID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChjYW5jZWxGZXRjaFJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNIQVQtREVCVUctMDExOiBGZXRjaGluZyBhYmdlYnJvY2hlbiwgZGEgZGVyIENoYXQgZW50ZmVybnQgd3VyZGVcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAvYXBpL2JvdHMvJHtib3RJZH1gKTtcbiAgICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgICBjb25zdCBib3REYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ0hBVC1ERUJVRy0wMTE6IEdlbGFkZW5lIEJvdC1EYXRlbjpcIiwge1xuICAgICAgICAgICAgICBpZDogYm90RGF0YS5pZCxcbiAgICAgICAgICAgICAgbmFtZTogYm90RGF0YS5uYW1lLFxuICAgICAgICAgICAgICB3ZWxjb21lTWVzc2FnZTogYm90RGF0YS53ZWxjb21lTWVzc2FnZSA/ICd2b3JoYW5kZW4nIDogJ25pY2h0IHZvcmhhbmRlbidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoYm90RGF0YSAmJiBib3REYXRhLnNldHRpbmdzKSB7XG4gICAgICAgICAgICAgIC8vIEJvdC1FaW5zdGVsbHVuZ2VuIGltIHN0YXRlIHNwZWljaGVyblxuICAgICAgICAgICAgICBzZXRCb3RTZXR0aW5ncyhib3REYXRhLnNldHRpbmdzKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIFJHQi1XZXJ0ZSBmw7xyIFByaW3DpHJmYXJiZSBiZXJlY2huZW4gZsO8ciBTY2hhdHRlbiBldGMuXG4gICAgICAgICAgICAgIGNvbnN0IHByaW1hcnlDb2xvciA9IGJvdERhdGEuc2V0dGluZ3MucHJpbWFyeUNvbG9yIHx8ICcjM2I4MmY2JztcbiAgICAgICAgICAgICAgY29uc3QgciA9IHBhcnNlSW50KHByaW1hcnlDb2xvci5zbGljZSgxLCAzKSwgMTYpO1xuICAgICAgICAgICAgICBjb25zdCBnID0gcGFyc2VJbnQocHJpbWFyeUNvbG9yLnNsaWNlKDMsIDUpLCAxNik7XG4gICAgICAgICAgICAgIGNvbnN0IGIgPSBwYXJzZUludChwcmltYXJ5Q29sb3Iuc2xpY2UoNSwgNyksIDE2KTtcbiAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLXByaW1hcnktcmdiJywgYCR7cn0sICR7Z30sICR7Yn1gKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIFByaW3DpHJmYXJiZSBhbHMgQ1NTLVZhcmlhYmxlIHNldHplblxuICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tcHJpbWFyeScsIHByaW1hcnlDb2xvcik7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBDU1MtVmFyaWFibGVuIGltIDpyb290IHNldHplbiBmw7xyIENoYXQtU3R5bGluZ1xuICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tYm90LWJnLWNvbG9yJywgYm90RGF0YS5zZXR0aW5ncy5ib3RCZ0NvbG9yIHx8ICdyZ2JhKDI0OCwgMjUwLCAyNTIsIDAuOCknKTtcbiAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLWJvdC10ZXh0LWNvbG9yJywgYm90RGF0YS5zZXR0aW5ncy5ib3RUZXh0Q29sb3IgfHwgJyMwMDAwMDAnKTtcbiAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLWJvdC1hY2NlbnQtY29sb3InLCBib3REYXRhLnNldHRpbmdzLmJvdEFjY2VudENvbG9yIHx8IGJvdERhdGEuc2V0dGluZ3MucHJpbWFyeUNvbG9yIHx8ICcjM2I4MmY2Jyk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBVc2VyLU5hY2hyaWNodGVuZmFyYmVuXG4gICAgICAgICAgICAgIGlmIChib3REYXRhLnNldHRpbmdzLnVzZXJCZ0NvbG9yKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLXVzZXItYmctY29sb3InLCBib3REYXRhLnNldHRpbmdzLnVzZXJCZ0NvbG9yKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBGYWxsYmFjazogUHJpbcOkcmZhcmJlIG1pdCBHcmFkaWVudFxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgICctLXVzZXItYmctY29sb3InLCBcbiAgICAgICAgICAgICAgICAgIGBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCAke2JvdERhdGEuc2V0dGluZ3MucHJpbWFyeUNvbG9yIHx8ICcjM2I4MmY2J30sICR7Ym90RGF0YS5zZXR0aW5ncy5wcmltYXJ5Q29sb3IgfHwgJyMzYjgyZjYnfWNjKWBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBCZW51dHplcnRleHRmYXJiZSBmZXN0bGVnZW4gLSBtaXQgaMO2aGVyZXIgU3BlemlmaXTDpHRcbiAgICAgICAgICAgICAgY29uc3QgdXNlclRleHRDb2xvciA9IGJvdERhdGEuc2V0dGluZ3MudXNlclRleHRDb2xvciB8fCAnI2ZmZmZmZic7XG4gICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS11c2VyLXRleHQtY29sb3InLCBgJHt1c2VyVGV4dENvbG9yfSAhaW1wb3J0YW50YCk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBFeHBsaXppdCBlaW5lIGV4dHJhLVN0aWxlIGhpbnp1ZsO8Z2VuIGbDvHIgaMO2aGVyZSBTcGV6aWZpdMOkdFxuICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgICAgIHN0eWxlLmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgICAgICAuZ2xhc3Ntb3JwaGlzbS11c2VyIHsgY29sb3I6ICR7dXNlclRleHRDb2xvcn0gIWltcG9ydGFudDsgfVxuICAgICAgICAgICAgICAgIC5nbGFzc21vcnBoaXNtLXVzZXIgKiB7IGNvbG9yOiAke3VzZXJUZXh0Q29sb3J9ICFpbXBvcnRhbnQ7IH1cbiAgICAgICAgICAgICAgYDtcbiAgICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQ0hBVC1ERUJVRy0wMTE6IFNldHplIEJlbnV0emVyLVRleHRmYXJiZSBhdWYgJHt1c2VyVGV4dENvbG9yfSBtaXQgIWltcG9ydGFudGApO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gV2lsbGtvbW1lbnNuYWNocmljaHQgbnVyIHNldHplbiwgd2VubiBub2NoIGtlaW5lIE5hY2hyaWNodGVuIHZvcmhhbmRlbiBzaW5kXG4gICAgICAgICAgICAgIGlmIChtZXNzYWdlcy5sZW5ndGggPT09IDAgJiYgYm90RGF0YS53ZWxjb21lTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ0hBVC1ERUJVRy0wMTE6IFNldHplIFdpbGxrb21tZW5zbmFjaHJpY2h0IGbDvHIgQm90OlwiLCBcbiAgICAgICAgICAgICAgICAgIGJvdERhdGEud2VsY29tZU1lc3NhZ2Uuc3Vic3RyaW5nKDAsIDUwKSArIFwiLi4uXCIpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFNpY2hlcnN0ZWxsZW4sIGRhc3MgZGVyIFN0YXRlIG5pY2h0IGJlcmVpdHMgYW5kZXJlIE5hY2hyaWNodGVuIGVudGjDpGx0XG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbFJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNIQVQtREVCVUctMDExOiBBYmJydWNoIGJlaW0gU2V0emVuIGRlciBXaWxsa29tbWVuc25hY2hyaWNodCAtIENoYXQgd3VyZGUgZW50ZmVybnRcIik7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFdpbGxrb21tZW5zbmFjaHJpY2h0IG5pY2h0IG1laHIgenUgbWVzc2FnZXMgaGluenVmw7xnZW4sIHNvbmRlcm4gbnVyIGFscyBzZXBhcmF0ZSBWYXJpYWJsZVxuICAgICAgICAgICAgICAgIC8vIHNldE1lc3NhZ2VzKFt7XG4gICAgICAgICAgICAgICAgLy8gICByb2xlOiBcImFzc2lzdGFudFwiLFxuICAgICAgICAgICAgICAgIC8vICAgY29udGVudDogYm90RGF0YS53ZWxjb21lTWVzc2FnZVxuICAgICAgICAgICAgICAgIC8vIH1dKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIFdpbGxrb21tZW5zbmFjaHJpY2h0IGFscyBzZXBhcmF0ZSBWYXJpYWJsZSBzcGVpY2hlcm5cbiAgICAgICAgICAgICAgaWYgKGJvdERhdGEud2VsY29tZU1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNIQVQtREVCVUctMDExOiBTZXR6ZSBXaWxsa29tbWVuc25hY2hyaWNodCBmw7xyIEJvdDpcIiwgXG4gICAgICAgICAgICAgICAgICBib3REYXRhLndlbGNvbWVNZXNzYWdlLnN1YnN0cmluZygwLCA1MCkgKyBcIi4uLlwiKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBTaWNoZXJzdGVsbGVuLCBkYXNzIGRlciBTdGF0ZSBuaWNodCBiZXJlaXRzIGFuZGVyZSBOYWNocmljaHRlbiBlbnRow6RsdFxuICAgICAgICAgICAgICAgIGlmIChjYW5jZWxSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDSEFULURFQlVHLTAxMTogQWJicnVjaCBiZWltIFNldHplbiBkZXIgV2lsbGtvbW1lbnNuYWNocmljaHQgLSBDaGF0IHd1cmRlIGVudGZlcm50XCIpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBXaWxsa29tbWVuc25hY2hyaWNodCBhbHMgc2VwYXJhdGUgVmFyaWFibGUgc3BlaWNoZXJuXG4gICAgICAgICAgICAgICAgc2V0V2VsY29tZU1lc3NhZ2UoYm90RGF0YS53ZWxjb21lTWVzc2FnZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNIQVQtREVCVUctMDExOiBGZWhsZXIgYmVpbSBMYWRlbiBkZXIgQm90LURhdGVuOlwiLCByZXMuc3RhdHVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIkNIQVQtREVCVUctMDExOiBGZWhsZXIgYmVpbSBMYWRlbiBkZXIgQm90LUVpbnN0ZWxsdW5nZW46XCIsIGVycm9yKTtcbiAgICAgICAgICAvLyBGYWxsYmFjayBmw7xyIGRpZSBGYXJiZW5cbiAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tYm90LWJnLWNvbG9yJywgJ3JnYmEoMjQ4LCAyNTAsIDI1MiwgMC44KScpO1xuICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1ib3QtdGV4dC1jb2xvcicsICcjMDAwMDAwJyk7XG4gICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLWJvdC1hY2NlbnQtY29sb3InLCAnIzNiODJmNicpO1xuICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS11c2VyLWJnLWNvbG9yJywgJ2xpbmVhci1ncmFkaWVudCgxMzVkZWcsICMzYjgyZjYsICMzYjgyZjZjYyknKTtcbiAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tdXNlci10ZXh0LWNvbG9yJywgJyNmZmZmZmYnKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgZmV0Y2hCb3RTZXR0aW5ncygpO1xuICAgIH0sIDEwMCk7IC8vIEt1cnplIFZlcnrDtmdlcnVuZywgdW0gUmFjZSBDb25kaXRpb25zIHp1IHZlcm1laWRlblxuICAgIFxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTsgLy8gVGltZW91dCBsw7ZzY2hlbiBiZWltIFVubW91bnRcbiAgICB9O1xuICB9LCBbYm90SWRdKTsgLy8gTnVyIHZvbiBib3RJZCBhYmjDpG5naWcgbWFjaGVuLCBtZXNzYWdlcyBlbnRmZXJudFxuXG4gIHJldHVybiB7XG4gICAgbWVzc2FnZXMsXG4gICAgaW5wdXQsXG4gICAgc2V0SW5wdXQsXG4gICAgaXNMb2FkaW5nLFxuICAgIGVycm9yLFxuICAgIGlzT3BlbixcbiAgICBtb2RlLFxuICAgIHNlbmRNZXNzYWdlLFxuICAgIGNhbmNlbE1lc3NhZ2UsXG4gICAgdG9nZ2xlQ2hhdCxcbiAgICBjeWNsZU1vZGUsXG4gICAgc2V0TW9kZTogc2V0Q3VycmVudE1vZGUsXG4gICAgbWVzc2FnZXNFbmRSZWYsXG4gICAgYm90U2V0dGluZ3MsXG4gICAgd2VsY29tZU1lc3NhZ2UsXG4gIH1cbn0gIl0sIm5hbWVzIjpbInVzZVN0YXRlIiwidXNlUmVmIiwidXNlQ2FsbGJhY2siLCJ1c2VFZmZlY3QiLCJMdW5hcnlDbGllbnQiLCJ2NCIsInV1aWR2NCIsImNvbnNvbGUiLCJsb2ciLCJwcm9jZXNzZWRXZWxjb21lTWVzc2FnZXMiLCJTZXQiLCJnZXRQcm9jZXNzZWRXZWxjb21lTWVzc2FnZXMiLCJzdG9yZWQiLCJzZXNzaW9uU3RvcmFnZSIsImdldEl0ZW0iLCJKU09OIiwicGFyc2UiLCJlIiwiZXJyb3IiLCJhZGRQcm9jZXNzZWRXZWxjb21lTWVzc2FnZSIsImtleSIsImN1cnJlbnQiLCJhZGQiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiaGFzUHJvY2Vzc2VkV2VsY29tZU1lc3NhZ2UiLCJoYXMiLCJkZWJvdW5jZSIsImZ1bmMiLCJ3YWl0IiwidGltZW91dCIsImFyZ3MiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwidXNlQ2hhdCIsImluaXRpYWxNZXNzYWdlcyIsImluaXRpYWxNb2RlIiwiaW5pdGlhbE9wZW4iLCJib3RJZCIsIm9uRXJyb3IiLCJpbml0aWFsU2V0dGluZ3MiLCJtZXNzYWdlcyIsInNldE1lc3NhZ2VzIiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwic2V0RXJyb3IiLCJpc09wZW4iLCJzZXRJc09wZW4iLCJtb2RlIiwic2V0TW9kZSIsImlucHV0Iiwic2V0SW5wdXQiLCJ3ZWxjb21lTWVzc2FnZSIsInNldFdlbGNvbWVNZXNzYWdlIiwibWVzc2FnZXNFbmRSZWYiLCJhYm9ydENvbnRyb2xsZXJSZWYiLCJzZXNzaW9uSWRSZWYiLCJib3RTZXR0aW5ncyIsInNldEJvdFNldHRpbmdzIiwibGFzdE1lc3NhZ2VUaW1lc3RhbXBSZWYiLCJjaGF0SW5pdGlhbGl6ZWRSZWYiLCJjYW5jZWxSZWYiLCJjYW5jZWxGZXRjaFJlZiIsInRvZ2dsZUNoYXQiLCJwcmV2IiwidHJhY2siLCJldmVudE5hbWUiLCJwcm9wZXJ0aWVzIiwibWV0YWRhdGEiLCJzZXNzaW9uSWQiLCJjeWNsZU1vZGUiLCJjdXJyZW50TW9kZSIsIm5leHRNb2RlIiwic2V0Q3VycmVudE1vZGUiLCJuZXdNb2RlIiwicGFyZW50RWxlbWVudCIsImxhc3RNZXNzYWdlIiwicXVlcnlTZWxlY3RvciIsInNjcm9sbEludG9WaWV3IiwiYmVoYXZpb3IiLCJibG9jayIsImFkZE1lc3NhZ2UiLCJtZXNzYWdlIiwicHJldk1lc3NhZ2VzIiwicmVjZW50TWVzc2FnZXMiLCJzbGljZSIsImlzRHVwbGljYXRlIiwic29tZSIsIm0iLCJyb2xlIiwiY29udGVudCIsImFib3J0IiwiZGVib3VuY2VkU2VuZE1lc3NhZ2UiLCJ0cmltIiwibm93IiwiRGF0ZSIsInVzZXJNZXNzYWdlIiwiQWJvcnRDb250cm9sbGVyIiwic2lnbmFsIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwiaGlzdG9yeSIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZGF0YSIsImpzb24iLCJib3RDb250ZW50IiwidGV4dCIsImFzc2lzdGFudCIsImJvdE1lc3NhZ2UiLCJyZXNwb25zZVRpbWUiLCJwZXJmb3JtYW5jZSIsImVyciIsIm5hbWUiLCJzZW5kTWVzc2FnZSIsImNhbmNlbE1lc3NhZ2UiLCJwcmltYXJ5Q29sb3IiLCJyIiwicGFyc2VJbnQiLCJnIiwiYiIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsImJvdEJnQ29sb3IiLCJib3RUZXh0Q29sb3IiLCJib3RBY2NlbnRDb2xvciIsInVzZXJCZ0NvbG9yIiwidXNlclRleHRDb2xvciIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJsZW5ndGgiLCJ3ZWxjb21lS2V5IiwibWVzc2FnZXNMZW5ndGgiLCJjaGF0SW5pdGlhbGl6ZWQiLCJ0aW1lb3V0SWQiLCJmZXRjaEJvdFNldHRpbmdzIiwicmVzIiwiYm90RGF0YSIsImlkIiwic2V0dGluZ3MiLCJzdWJzdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/chat/hooks/useChat.ts\n"));

/***/ })

});