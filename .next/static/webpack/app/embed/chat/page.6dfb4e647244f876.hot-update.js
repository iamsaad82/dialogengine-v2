"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/embed/chat/page",{

/***/ "(app-pages-browser)/./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js":
/*!**************************************************************************!*\
  !*** ./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js ***!
  \**************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/../../../node_modules/process/browser.js\");\n/* eslint-env browser */ /**\n * This is the web browser implementation of `debug()`.\n */ \nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (()=>{\n    let warned = false;\n    return ()=>{\n        if (!warned) {\n            warned = true;\n            console.warn(\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\");\n        }\n    };\n})();\n/**\n * Colors.\n */ exports.colors = [\n    \"#0000CC\",\n    \"#0000FF\",\n    \"#0033CC\",\n    \"#0033FF\",\n    \"#0066CC\",\n    \"#0066FF\",\n    \"#0099CC\",\n    \"#0099FF\",\n    \"#00CC00\",\n    \"#00CC33\",\n    \"#00CC66\",\n    \"#00CC99\",\n    \"#00CCCC\",\n    \"#00CCFF\",\n    \"#3300CC\",\n    \"#3300FF\",\n    \"#3333CC\",\n    \"#3333FF\",\n    \"#3366CC\",\n    \"#3366FF\",\n    \"#3399CC\",\n    \"#3399FF\",\n    \"#33CC00\",\n    \"#33CC33\",\n    \"#33CC66\",\n    \"#33CC99\",\n    \"#33CCCC\",\n    \"#33CCFF\",\n    \"#6600CC\",\n    \"#6600FF\",\n    \"#6633CC\",\n    \"#6633FF\",\n    \"#66CC00\",\n    \"#66CC33\",\n    \"#9900CC\",\n    \"#9900FF\",\n    \"#9933CC\",\n    \"#9933FF\",\n    \"#99CC00\",\n    \"#99CC33\",\n    \"#CC0000\",\n    \"#CC0033\",\n    \"#CC0066\",\n    \"#CC0099\",\n    \"#CC00CC\",\n    \"#CC00FF\",\n    \"#CC3300\",\n    \"#CC3333\",\n    \"#CC3366\",\n    \"#CC3399\",\n    \"#CC33CC\",\n    \"#CC33FF\",\n    \"#CC6600\",\n    \"#CC6633\",\n    \"#CC9900\",\n    \"#CC9933\",\n    \"#CCCC00\",\n    \"#CCCC33\",\n    \"#FF0000\",\n    \"#FF0033\",\n    \"#FF0066\",\n    \"#FF0099\",\n    \"#FF00CC\",\n    \"#FF00FF\",\n    \"#FF3300\",\n    \"#FF3333\",\n    \"#FF3366\",\n    \"#FF3399\",\n    \"#FF33CC\",\n    \"#FF33FF\",\n    \"#FF6600\",\n    \"#FF6633\",\n    \"#FF9900\",\n    \"#FF9933\",\n    \"#FFCC00\",\n    \"#FFCC33\"\n];\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */ // eslint-disable-next-line complexity\nfunction useColors() {\n    // NB: In an Electron preload script, document will be defined but not fully\n    // initialized. Since we know we're in Chrome, we'll just detect this case\n    // explicitly\n    if ( true && window.process && (window.process.type === \"renderer\" || window.process.__nwjs)) {\n        return true;\n    }\n    // Internet Explorer and Edge do not support colors.\n    if (typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n        return false;\n    }\n    let m;\n    // Is webkit? http://stackoverflow.com/a/16459606/376773\n    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n    // eslint-disable-next-line no-return-assign\n    return typeof document !== \"undefined\" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773\n     true && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    typeof navigator !== \"undefined\" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker\n    typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n}\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */ function formatArgs(args) {\n    args[0] = (this.useColors ? \"%c\" : \"\") + this.namespace + (this.useColors ? \" %c\" : \" \") + args[0] + (this.useColors ? \"%c \" : \" \") + \"+\" + module.exports.humanize(this.diff);\n    if (!this.useColors) {\n        return;\n    }\n    const c = \"color: \" + this.color;\n    args.splice(1, 0, c, \"color: inherit\");\n    // The final \"%c\" is somewhat tricky, because there could be other\n    // arguments passed either before or after the %c, so we need to\n    // figure out the correct index to insert the CSS into\n    let index = 0;\n    let lastC = 0;\n    args[0].replace(/%[a-zA-Z%]/g, (match)=>{\n        if (match === \"%%\") {\n            return;\n        }\n        index++;\n        if (match === \"%c\") {\n            // We only are interested in the *last* %c\n            // (the user may have provided their own)\n            lastC = index;\n        }\n    });\n    args.splice(lastC, 0, c);\n}\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */ exports.log = console.debug || console.log || (()=>{});\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */ function save(namespaces) {\n    try {\n        if (namespaces) {\n            exports.storage.setItem(\"debug\", namespaces);\n        } else {\n            exports.storage.removeItem(\"debug\");\n        }\n    } catch (error) {\n    // Swallow\n    // XXX (@Qix-) should we be logging these?\n    }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */ function load() {\n    let r;\n    try {\n        r = exports.storage.getItem(\"debug\");\n    } catch (error) {\n    // Swallow\n    // XXX (@Qix-) should we be logging these?\n    }\n    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n    if (!r && typeof process !== \"undefined\" && \"env\" in process) {\n        r = process.env.DEBUG;\n    }\n    return r;\n}\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */ function localstorage() {\n    try {\n        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n        // The Browser also has localStorage in the global context.\n        return localStorage;\n    } catch (error) {\n    // Swallow\n    // XXX (@Qix-) should we be logging these?\n    }\n}\nmodule.exports = __webpack_require__(/*! ./common */ \"(app-pages-browser)/./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js\")(exports);\nconst { formatters } = module.exports;\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */ formatters.j = function(v) {\n    try {\n        return JSON.stringify(v);\n    } catch (error) {\n        return \"[UnexpectedJSONParseError]: \" + error.message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js":
/*!*************************************************************************!*\
  !*** ./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js ***!
  \*************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */ \nfunction setup(env) {\n    var _s = $RefreshSig$();\n    createDebug.debug = createDebug;\n    createDebug.default = createDebug;\n    createDebug.coerce = coerce;\n    createDebug.disable = disable;\n    createDebug.enable = enable;\n    createDebug.enabled = enabled;\n    createDebug.humanize = __webpack_require__(/*! ms */ \"(app-pages-browser)/./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js\");\n    createDebug.destroy = destroy;\n    Object.keys(env).forEach((key)=>{\n        createDebug[key] = env[key];\n    });\n    /**\n\t* The currently active debug mode names, and names to skip.\n\t*/ createDebug.names = [];\n    createDebug.skips = [];\n    /**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/ createDebug.formatters = {};\n    /**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/ function selectColor(namespace) {\n        let hash = 0;\n        for(let i = 0; i < namespace.length; i++){\n            hash = (hash << 5) - hash + namespace.charCodeAt(i);\n            hash |= 0; // Convert to 32bit integer\n        }\n        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n    }\n    createDebug.selectColor = selectColor;\n    /**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/ function createDebug(namespace) {\n        _s();\n        let prevTime;\n        let enableOverride = null;\n        let namespacesCache;\n        let enabledCache;\n        function debug() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            // Disabled?\n            if (!debug.enabled) {\n                return;\n            }\n            const self = debug;\n            // Set `diff` timestamp\n            const curr = Number(new Date());\n            const ms = curr - (prevTime || curr);\n            self.diff = ms;\n            self.prev = prevTime;\n            self.curr = curr;\n            prevTime = curr;\n            args[0] = createDebug.coerce(args[0]);\n            if (typeof args[0] !== \"string\") {\n                // Anything else let's inspect with %O\n                args.unshift(\"%O\");\n            }\n            // Apply any `formatters` transformations\n            let index = 0;\n            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format)=>{\n                // If we encounter an escaped % then don't increase the array index\n                if (match === \"%%\") {\n                    return \"%\";\n                }\n                index++;\n                const formatter = createDebug.formatters[format];\n                if (typeof formatter === \"function\") {\n                    const val = args[index];\n                    match = formatter.call(self, val);\n                    // Now we need to remove `args[index]` since it's inlined in the `format`\n                    args.splice(index, 1);\n                    index--;\n                }\n                return match;\n            });\n            // Apply env-specific formatting (colors, etc.)\n            createDebug.formatArgs.call(self, args);\n            const logFn = self.log || createDebug.log;\n            logFn.apply(self, args);\n        }\n        debug.namespace = namespace;\n        debug.useColors = createDebug.useColors();\n        debug.color = createDebug.selectColor(namespace);\n        debug.extend = extend;\n        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n        Object.defineProperty(debug, \"enabled\", {\n            enumerable: true,\n            configurable: false,\n            get: ()=>{\n                if (enableOverride !== null) {\n                    return enableOverride;\n                }\n                if (namespacesCache !== createDebug.namespaces) {\n                    namespacesCache = createDebug.namespaces;\n                    enabledCache = createDebug.enabled(namespace);\n                }\n                return enabledCache;\n            },\n            set: (v)=>{\n                enableOverride = v;\n            }\n        });\n        // Env-specific initialization logic for debug instances\n        if (typeof createDebug.init === \"function\") {\n            createDebug.init(debug);\n        }\n        return debug;\n    }\n    _s(createDebug, \"TNTxU29/W+VV3aq8ipnhK5Nx0g0=\", false, function() {\n        return [\n            createDebug.useColors\n        ];\n    });\n    function extend(namespace, delimiter) {\n        const newDebug = createDebug(this.namespace + (typeof delimiter === \"undefined\" ? \":\" : delimiter) + namespace);\n        newDebug.log = this.log;\n        return newDebug;\n    }\n    /**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/ function enable(namespaces) {\n        createDebug.save(namespaces);\n        createDebug.namespaces = namespaces;\n        createDebug.names = [];\n        createDebug.skips = [];\n        const split = (typeof namespaces === \"string\" ? namespaces : \"\").trim().replace(\" \", \",\").split(\",\").filter(Boolean);\n        for (const ns of split){\n            if (ns[0] === \"-\") {\n                createDebug.skips.push(ns.slice(1));\n            } else {\n                createDebug.names.push(ns);\n            }\n        }\n    }\n    /**\n\t * Checks if the given string matches a namespace template, honoring\n\t * asterisks as wildcards.\n\t *\n\t * @param {String} search\n\t * @param {String} template\n\t * @return {Boolean}\n\t */ function matchesTemplate(search, template) {\n        let searchIndex = 0;\n        let templateIndex = 0;\n        let starIndex = -1;\n        let matchIndex = 0;\n        while(searchIndex < search.length){\n            if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === \"*\")) {\n                // Match character or proceed with wildcard\n                if (template[templateIndex] === \"*\") {\n                    starIndex = templateIndex;\n                    matchIndex = searchIndex;\n                    templateIndex++; // Skip the '*'\n                } else {\n                    searchIndex++;\n                    templateIndex++;\n                }\n            } else if (starIndex !== -1) {\n                // Backtrack to the last '*' and try to match more characters\n                templateIndex = starIndex + 1;\n                matchIndex++;\n                searchIndex = matchIndex;\n            } else {\n                return false; // No match\n            }\n        }\n        // Handle trailing '*' in template\n        while(templateIndex < template.length && template[templateIndex] === \"*\"){\n            templateIndex++;\n        }\n        return templateIndex === template.length;\n    }\n    /**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/ function disable() {\n        const namespaces = [\n            ...createDebug.names,\n            ...createDebug.skips.map((namespace)=>\"-\" + namespace)\n        ].join(\",\");\n        createDebug.enable(\"\");\n        return namespaces;\n    }\n    /**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/ function enabled(name) {\n        for (const skip of createDebug.skips){\n            if (matchesTemplate(name, skip)) {\n                return false;\n            }\n        }\n        for (const ns of createDebug.names){\n            if (matchesTemplate(name, ns)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/ function coerce(val) {\n        if (val instanceof Error) {\n            return val.stack || val.message;\n        }\n        return val;\n    }\n    /**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/ function destroy() {\n        console.warn(\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\");\n    }\n    createDebug.enable(createDebug.load());\n    return createDebug;\n}\nmodule.exports = setup;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js ***!
  \**********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\nvar isArray = function isArray(arr) {\n    if (typeof Array.isArray === \"function\") {\n        return Array.isArray(arr);\n    }\n    return toStr.call(arr) === \"[object Array]\";\n};\nvar isPlainObject = function isPlainObject(obj) {\n    if (!obj || toStr.call(obj) !== \"[object Object]\") {\n        return false;\n    }\n    var hasOwnConstructor = hasOwn.call(obj, \"constructor\");\n    var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\");\n    // Not own constructor property must be Object\n    if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n        return false;\n    }\n    // Own properties are enumerated firstly, so to speed up,\n    // if last one is own, then all properties are own.\n    var key;\n    for(key in obj){}\n    return typeof key === \"undefined\" || hasOwn.call(obj, key);\n};\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n    if (defineProperty && options.name === \"__proto__\") {\n        defineProperty(target, options.name, {\n            enumerable: true,\n            configurable: true,\n            value: options.newValue,\n            writable: true\n        });\n    } else {\n        target[options.name] = options.newValue;\n    }\n};\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n    if (name === \"__proto__\") {\n        if (!hasOwn.call(obj, name)) {\n            return void 0;\n        } else if (gOPD) {\n            // In early versions of node, obj['__proto__'] is buggy when obj has\n            // __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n            return gOPD(obj, name).value;\n        }\n    }\n    return obj[name];\n};\nmodule.exports = function extend() {\n    var options, name, src, copy, copyIsArray, clone;\n    var target = arguments[0];\n    var i = 1;\n    var length = arguments.length;\n    var deep = false;\n    // Handle a deep copy situation\n    if (typeof target === \"boolean\") {\n        deep = target;\n        target = arguments[1] || {};\n        // skip the boolean and the target\n        i = 2;\n    }\n    if (target == null || typeof target !== \"object\" && typeof target !== \"function\") {\n        target = {};\n    }\n    for(; i < length; ++i){\n        options = arguments[i];\n        // Only deal with non-null/undefined values\n        if (options != null) {\n            // Extend the base object\n            for(name in options){\n                src = getProperty(target, name);\n                copy = getProperty(options, name);\n                // Prevent never-ending loop\n                if (target !== copy) {\n                    // Recurse if we're merging plain objects or arrays\n                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n                        if (copyIsArray) {\n                            copyIsArray = false;\n                            clone = src && isArray(src) ? src : [];\n                        } else {\n                            clone = src && isPlainObject(src) ? src : {};\n                        }\n                        // Never move original objects, clone them\n                        setProperty(target, {\n                            name: name,\n                            newValue: extend(deep, clone, copy)\n                        });\n                    // Don't bring in undefined values\n                    } else if (typeof copy !== \"undefined\") {\n                        setProperty(target, {\n                            name: name,\n                            newValue: copy\n                        });\n                    }\n                }\n            }\n        }\n    }\n    // Return the modified object\n    return target;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/inline-style-parser@0.2.4/node_modules/inline-style-parser/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/inline-style-parser@0.2.4/node_modules/inline-style-parser/index.js ***!
  \************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\n\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n// strings\nvar NEWLINE = \"\\n\";\nvar FORWARD_SLASH = \"/\";\nvar ASTERISK = \"*\";\nvar EMPTY_STRING = \"\";\n// types\nvar TYPE_COMMENT = \"comment\";\nvar TYPE_DECLARATION = \"declaration\";\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */ module.exports = function(style, options) {\n    if (typeof style !== \"string\") {\n        throw new TypeError(\"First argument must be a string\");\n    }\n    if (!style) return [];\n    options = options || {};\n    /**\n   * Positional.\n   */ var lineno = 1;\n    var column = 1;\n    /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */ function updatePosition(str) {\n        var lines = str.match(NEWLINE_REGEX);\n        if (lines) lineno += lines.length;\n        var i = str.lastIndexOf(NEWLINE);\n        column = ~i ? str.length - i : column + str.length;\n    }\n    /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */ function position() {\n        var start = {\n            line: lineno,\n            column: column\n        };\n        return function(node) {\n            node.position = new Position(start);\n            whitespace();\n            return node;\n        };\n    }\n    /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */ function Position(start) {\n        this.start = start;\n        this.end = {\n            line: lineno,\n            column: column\n        };\n        this.source = options.source;\n    }\n    /**\n   * Non-enumerable source string.\n   */ Position.prototype.content = style;\n    var errorsList = [];\n    /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */ function error(msg) {\n        var err = new Error(options.source + \":\" + lineno + \":\" + column + \": \" + msg);\n        err.reason = msg;\n        err.filename = options.source;\n        err.line = lineno;\n        err.column = column;\n        err.source = style;\n        if (options.silent) {\n            errorsList.push(err);\n        } else {\n            throw err;\n        }\n    }\n    /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */ function match(re) {\n        var m = re.exec(style);\n        if (!m) return;\n        var str = m[0];\n        updatePosition(str);\n        style = style.slice(str.length);\n        return m;\n    }\n    /**\n   * Parse whitespace.\n   */ function whitespace() {\n        match(WHITESPACE_REGEX);\n    }\n    /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */ function comments(rules) {\n        var c;\n        rules = rules || [];\n        while(c = comment()){\n            if (c !== false) {\n                rules.push(c);\n            }\n        }\n        return rules;\n    }\n    /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */ function comment() {\n        var pos = position();\n        if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n        var i = 2;\n        while(EMPTY_STRING != style.charAt(i) && (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))){\n            ++i;\n        }\n        i += 2;\n        if (EMPTY_STRING === style.charAt(i - 1)) {\n            return error(\"End of comment missing\");\n        }\n        var str = style.slice(2, i - 2);\n        column += 2;\n        updatePosition(str);\n        style = style.slice(i);\n        column += 2;\n        return pos({\n            type: TYPE_COMMENT,\n            comment: str\n        });\n    }\n    /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */ function declaration() {\n        var pos = position();\n        // prop\n        var prop = match(PROPERTY_REGEX);\n        if (!prop) return;\n        comment();\n        // :\n        if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n        // val\n        var val = match(VALUE_REGEX);\n        var ret = pos({\n            type: TYPE_DECLARATION,\n            property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n            value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING\n        });\n        // ;\n        match(SEMICOLON_REGEX);\n        return ret;\n    }\n    /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */ function declarations() {\n        var decls = [];\n        comments(decls);\n        // declarations\n        var decl;\n        while(decl = declaration()){\n            if (decl !== false) {\n                decls.push(decl);\n                comments(decls);\n            }\n        }\n        return decls;\n    }\n    whitespace();\n    return declarations();\n};\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */ function trim(str) {\n    return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/inline-style-parser@0.2.4/node_modules/inline-style-parser/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Helpers.\n */ \nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */ module.exports = function(val, options) {\n    options = options || {};\n    var type = typeof val;\n    if (type === \"string\" && val.length > 0) {\n        return parse(val);\n    } else if (type === \"number\" && isFinite(val)) {\n        return options.long ? fmtLong(val) : fmtShort(val);\n    }\n    throw new Error(\"val is not a non-empty string or a valid number. val=\" + JSON.stringify(val));\n};\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */ function parse(str) {\n    str = String(str);\n    if (str.length > 100) {\n        return;\n    }\n    var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);\n    if (!match) {\n        return;\n    }\n    var n = parseFloat(match[1]);\n    var type = (match[2] || \"ms\").toLowerCase();\n    switch(type){\n        case \"years\":\n        case \"year\":\n        case \"yrs\":\n        case \"yr\":\n        case \"y\":\n            return n * y;\n        case \"weeks\":\n        case \"week\":\n        case \"w\":\n            return n * w;\n        case \"days\":\n        case \"day\":\n        case \"d\":\n            return n * d;\n        case \"hours\":\n        case \"hour\":\n        case \"hrs\":\n        case \"hr\":\n        case \"h\":\n            return n * h;\n        case \"minutes\":\n        case \"minute\":\n        case \"mins\":\n        case \"min\":\n        case \"m\":\n            return n * m;\n        case \"seconds\":\n        case \"second\":\n        case \"secs\":\n        case \"sec\":\n        case \"s\":\n            return n * s;\n        case \"milliseconds\":\n        case \"millisecond\":\n        case \"msecs\":\n        case \"msec\":\n        case \"ms\":\n            return n;\n        default:\n            return undefined;\n    }\n}\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */ function fmtShort(ms) {\n    var msAbs = Math.abs(ms);\n    if (msAbs >= d) {\n        return Math.round(ms / d) + \"d\";\n    }\n    if (msAbs >= h) {\n        return Math.round(ms / h) + \"h\";\n    }\n    if (msAbs >= m) {\n        return Math.round(ms / m) + \"m\";\n    }\n    if (msAbs >= s) {\n        return Math.round(ms / s) + \"s\";\n    }\n    return ms + \"ms\";\n}\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */ function fmtLong(ms) {\n    var msAbs = Math.abs(ms);\n    if (msAbs >= d) {\n        return plural(ms, msAbs, d, \"day\");\n    }\n    if (msAbs >= h) {\n        return plural(ms, msAbs, h, \"hour\");\n    }\n    if (msAbs >= m) {\n        return plural(ms, msAbs, m, \"minute\");\n    }\n    if (msAbs >= s) {\n        return plural(ms, msAbs, s, \"second\");\n    }\n    return ms + \" ms\";\n}\n/**\n * Pluralization helper.\n */ function plural(ms, msAbs, n, name) {\n    var isPlural = msAbs >= n * 1.5;\n    return Math.round(ms / n) + \" \" + name + (isPlural ? \"s\" : \"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tc0AyLjEuMy9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7O0NBRUM7QUFFRCxJQUFJQSxJQUFJO0FBQ1IsSUFBSUMsSUFBSUQsSUFBSTtBQUNaLElBQUlFLElBQUlELElBQUk7QUFDWixJQUFJRSxJQUFJRCxJQUFJO0FBQ1osSUFBSUUsSUFBSUQsSUFBSTtBQUNaLElBQUlFLElBQUlGLElBQUk7QUFFWjs7Ozs7Ozs7Ozs7O0NBWUMsR0FFREcsT0FBT0MsT0FBTyxHQUFHLFNBQVVDLEdBQUcsRUFBRUMsT0FBTztJQUNyQ0EsVUFBVUEsV0FBVyxDQUFDO0lBQ3RCLElBQUlDLE9BQU8sT0FBT0Y7SUFDbEIsSUFBSUUsU0FBUyxZQUFZRixJQUFJRyxNQUFNLEdBQUcsR0FBRztRQUN2QyxPQUFPQyxNQUFNSjtJQUNmLE9BQU8sSUFBSUUsU0FBUyxZQUFZRyxTQUFTTCxNQUFNO1FBQzdDLE9BQU9DLFFBQVFLLElBQUksR0FBR0MsUUFBUVAsT0FBT1EsU0FBU1I7SUFDaEQ7SUFDQSxNQUFNLElBQUlTLE1BQ1IsMERBQ0VDLEtBQUtDLFNBQVMsQ0FBQ1g7QUFFckI7QUFFQTs7Ozs7O0NBTUMsR0FFRCxTQUFTSSxNQUFNUSxHQUFHO0lBQ2hCQSxNQUFNQyxPQUFPRDtJQUNiLElBQUlBLElBQUlULE1BQU0sR0FBRyxLQUFLO1FBQ3BCO0lBQ0Y7SUFDQSxJQUFJVyxRQUFRLG1JQUFtSUMsSUFBSSxDQUNqSkg7SUFFRixJQUFJLENBQUNFLE9BQU87UUFDVjtJQUNGO0lBQ0EsSUFBSUUsSUFBSUMsV0FBV0gsS0FBSyxDQUFDLEVBQUU7SUFDM0IsSUFBSVosT0FBTyxDQUFDWSxLQUFLLENBQUMsRUFBRSxJQUFJLElBQUcsRUFBR0ksV0FBVztJQUN6QyxPQUFRaEI7UUFDTixLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUNILE9BQU9jLElBQUluQjtRQUNiLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUNILE9BQU9tQixJQUFJcEI7UUFDYixLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPb0IsSUFBSXJCO1FBQ2IsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPcUIsSUFBSXRCO1FBQ2IsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPc0IsSUFBSXZCO1FBQ2IsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPdUIsSUFBSXhCO1FBQ2IsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPd0I7UUFDVDtZQUNFLE9BQU9HO0lBQ1g7QUFDRjtBQUVBOzs7Ozs7Q0FNQyxHQUVELFNBQVNYLFNBQVNZLEVBQUU7SUFDbEIsSUFBSUMsUUFBUUMsS0FBS0MsR0FBRyxDQUFDSDtJQUNyQixJQUFJQyxTQUFTMUIsR0FBRztRQUNkLE9BQU8yQixLQUFLRSxLQUFLLENBQUNKLEtBQUt6QixLQUFLO0lBQzlCO0lBQ0EsSUFBSTBCLFNBQVMzQixHQUFHO1FBQ2QsT0FBTzRCLEtBQUtFLEtBQUssQ0FBQ0osS0FBSzFCLEtBQUs7SUFDOUI7SUFDQSxJQUFJMkIsU0FBUzVCLEdBQUc7UUFDZCxPQUFPNkIsS0FBS0UsS0FBSyxDQUFDSixLQUFLM0IsS0FBSztJQUM5QjtJQUNBLElBQUk0QixTQUFTN0IsR0FBRztRQUNkLE9BQU84QixLQUFLRSxLQUFLLENBQUNKLEtBQUs1QixLQUFLO0lBQzlCO0lBQ0EsT0FBTzRCLEtBQUs7QUFDZDtBQUVBOzs7Ozs7Q0FNQyxHQUVELFNBQVNiLFFBQVFhLEVBQUU7SUFDakIsSUFBSUMsUUFBUUMsS0FBS0MsR0FBRyxDQUFDSDtJQUNyQixJQUFJQyxTQUFTMUIsR0FBRztRQUNkLE9BQU84QixPQUFPTCxJQUFJQyxPQUFPMUIsR0FBRztJQUM5QjtJQUNBLElBQUkwQixTQUFTM0IsR0FBRztRQUNkLE9BQU8rQixPQUFPTCxJQUFJQyxPQUFPM0IsR0FBRztJQUM5QjtJQUNBLElBQUkyQixTQUFTNUIsR0FBRztRQUNkLE9BQU9nQyxPQUFPTCxJQUFJQyxPQUFPNUIsR0FBRztJQUM5QjtJQUNBLElBQUk0QixTQUFTN0IsR0FBRztRQUNkLE9BQU9pQyxPQUFPTCxJQUFJQyxPQUFPN0IsR0FBRztJQUM5QjtJQUNBLE9BQU80QixLQUFLO0FBQ2Q7QUFFQTs7Q0FFQyxHQUVELFNBQVNLLE9BQU9MLEVBQUUsRUFBRUMsS0FBSyxFQUFFTCxDQUFDLEVBQUVVLElBQUk7SUFDaEMsSUFBSUMsV0FBV04sU0FBU0wsSUFBSTtJQUM1QixPQUFPTSxLQUFLRSxLQUFLLENBQUNKLEtBQUtKLEtBQUssTUFBTVUsT0FBUUMsQ0FBQUEsV0FBVyxNQUFNLEVBQUM7QUFDOUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21zQDIuMS4zL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcz85ODYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsKSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiJdLCJuYW1lcyI6WyJzIiwibSIsImgiLCJkIiwidyIsInkiLCJtb2R1bGUiLCJleHBvcnRzIiwidmFsIiwib3B0aW9ucyIsInR5cGUiLCJsZW5ndGgiLCJwYXJzZSIsImlzRmluaXRlIiwibG9uZyIsImZtdExvbmciLCJmbXRTaG9ydCIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsInN0ciIsIlN0cmluZyIsIm1hdGNoIiwiZXhlYyIsIm4iLCJwYXJzZUZsb2F0IiwidG9Mb3dlckNhc2UiLCJ1bmRlZmluZWQiLCJtcyIsIm1zQWJzIiwiTWF0aCIsImFicyIsInJvdW5kIiwicGx1cmFsIiwibmFtZSIsImlzUGx1cmFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/style-to-js@1.1.16/node_modules/style-to-js/cjs/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/style-to-js@1.1.16/node_modules/style-to-js/cjs/index.js ***!
  \*************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar style_to_object_1 = __importDefault(__webpack_require__(/*! style-to-object */ \"(app-pages-browser)/./node_modules/.pnpm/style-to-object@1.0.8/node_modules/style-to-object/cjs/index.js\"));\nvar utilities_1 = __webpack_require__(/*! ./utilities */ \"(app-pages-browser)/./node_modules/.pnpm/style-to-js@1.1.16/node_modules/style-to-js/cjs/utilities.js\");\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */ function StyleToJS(style, options) {\n    var output = {};\n    if (!style || typeof style !== \"string\") {\n        return output;\n    }\n    (0, style_to_object_1.default)(style, function(property, value) {\n        // skip CSS comment\n        if (property && value) {\n            output[(0, utilities_1.camelCase)(property, options)] = value;\n        }\n    });\n    return output;\n}\n_c = StyleToJS;\nStyleToJS.default = StyleToJS;\nmodule.exports = StyleToJS; //# sourceMappingURL=index.js.map\nvar _c;\n$RefreshReg$(_c, \"StyleToJS\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHlsZS10by1qc0AxLjEuMTYvbm9kZV9tb2R1bGVzL3N0eWxlLXRvLWpzL2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBLElBQUlFLG9CQUFvQkgsZ0JBQWdCSSxtQkFBT0EsQ0FBQyxpSUFBaUI7QUFDakUsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUMsMEhBQWE7QUFDdkM7O0NBRUMsR0FDRCxTQUFTRSxVQUFVQyxLQUFLLEVBQUVDLE9BQU87SUFDN0IsSUFBSUMsU0FBUyxDQUFDO0lBQ2QsSUFBSSxDQUFDRixTQUFTLE9BQU9BLFVBQVUsVUFBVTtRQUNyQyxPQUFPRTtJQUNYO0lBQ0MsSUFBR04sa0JBQWtCTyxPQUFPLEVBQUVILE9BQU8sU0FBVUksUUFBUSxFQUFFQyxLQUFLO1FBQzNELG1CQUFtQjtRQUNuQixJQUFJRCxZQUFZQyxPQUFPO1lBQ25CSCxNQUFNLENBQUMsQ0FBQyxHQUFHSixZQUFZUSxTQUFTLEVBQUVGLFVBQVVILFNBQVMsR0FBR0k7UUFDNUQ7SUFDSjtJQUNBLE9BQU9IO0FBQ1g7S0FaU0g7QUFhVEEsVUFBVUksT0FBTyxHQUFHSjtBQUNwQlEsT0FBT0MsT0FBTyxHQUFHVCxXQUNqQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3N0eWxlLXRvLWpzQDEuMS4xNi9ub2RlX21vZHVsZXMvc3R5bGUtdG8tanMvY2pzL2luZGV4LmpzPzYyNjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG52YXIgc3R5bGVfdG9fb2JqZWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInN0eWxlLXRvLW9iamVjdFwiKSk7XG52YXIgdXRpbGl0aWVzXzEgPSByZXF1aXJlKFwiLi91dGlsaXRpZXNcIik7XG4vKipcbiAqIFBhcnNlcyBDU1MgaW5saW5lIHN0eWxlIHRvIEphdmFTY3JpcHQgb2JqZWN0IChjYW1lbENhc2VkKS5cbiAqL1xuZnVuY3Rpb24gU3R5bGVUb0pTKHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdmFyIG91dHB1dCA9IHt9O1xuICAgIGlmICghc3R5bGUgfHwgdHlwZW9mIHN0eWxlICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbiAgICAoMCwgc3R5bGVfdG9fb2JqZWN0XzEuZGVmYXVsdCkoc3R5bGUsIGZ1bmN0aW9uIChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgICAgLy8gc2tpcCBDU1MgY29tbWVudFxuICAgICAgICBpZiAocHJvcGVydHkgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIG91dHB1dFsoMCwgdXRpbGl0aWVzXzEuY2FtZWxDYXNlKShwcm9wZXJ0eSwgb3B0aW9ucyldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gb3V0cHV0O1xufVxuU3R5bGVUb0pTLmRlZmF1bHQgPSBTdHlsZVRvSlM7XG5tb2R1bGUuZXhwb3J0cyA9IFN0eWxlVG9KUztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwic3R5bGVfdG9fb2JqZWN0XzEiLCJyZXF1aXJlIiwidXRpbGl0aWVzXzEiLCJTdHlsZVRvSlMiLCJzdHlsZSIsIm9wdGlvbnMiLCJvdXRwdXQiLCJkZWZhdWx0IiwicHJvcGVydHkiLCJ2YWx1ZSIsImNhbWVsQ2FzZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/style-to-js@1.1.16/node_modules/style-to-js/cjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/style-to-js@1.1.16/node_modules/style-to-js/cjs/utilities.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/style-to-js@1.1.16/node_modules/style-to-js/cjs/utilities.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.camelCase = void 0;\nvar CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nvar HYPHEN_REGEX = /-([a-z])/g;\nvar NO_HYPHEN_REGEX = /^[^-]+$/;\nvar VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nvar MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n/**\n * Checks whether to skip camelCase.\n */ var skipCamelCase = function(property) {\n    return !property || NO_HYPHEN_REGEX.test(property) || CUSTOM_PROPERTY_REGEX.test(property);\n};\n/**\n * Replacer that capitalizes first character.\n */ var capitalize = function(match, character) {\n    return character.toUpperCase();\n};\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */ var trimHyphen = function(match, prefix) {\n    return \"\".concat(prefix, \"-\");\n};\n/**\n * CamelCases a CSS property.\n */ var camelCase = function(property, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    if (skipCamelCase(property)) {\n        return property;\n    }\n    property = property.toLowerCase();\n    if (options.reactCompat) {\n        // `-ms` vendor prefix should not be capitalized\n        property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n    } else {\n        // for non-React, remove first hyphen so vendor prefix is not capitalized\n        property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    return property.replace(HYPHEN_REGEX, capitalize);\n};\nexports.camelCase = camelCase; //# sourceMappingURL=utilities.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHlsZS10by1qc0AxLjEuMTYvbm9kZV9tb2R1bGVzL3N0eWxlLXRvLWpzL2Nqcy91dGlsaXRpZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUs7QUFDekIsSUFBSUcsd0JBQXdCO0FBQzVCLElBQUlDLGVBQWU7QUFDbkIsSUFBSUMsa0JBQWtCO0FBQ3RCLElBQUlDLHNCQUFzQjtBQUMxQixJQUFJQyx5QkFBeUI7QUFDN0I7O0NBRUMsR0FDRCxJQUFJQyxnQkFBZ0IsU0FBVUMsUUFBUTtJQUNsQyxPQUFPLENBQUNBLFlBQ0pKLGdCQUFnQkssSUFBSSxDQUFDRCxhQUNyQk4sc0JBQXNCTyxJQUFJLENBQUNEO0FBQ25DO0FBQ0E7O0NBRUMsR0FDRCxJQUFJRSxhQUFhLFNBQVVDLEtBQUssRUFBRUMsU0FBUztJQUN2QyxPQUFPQSxVQUFVQyxXQUFXO0FBQ2hDO0FBQ0E7O0NBRUMsR0FDRCxJQUFJQyxhQUFhLFNBQVVILEtBQUssRUFBRUksTUFBTTtJQUFJLE9BQU8sR0FBR0MsTUFBTSxDQUFDRCxRQUFRO0FBQU07QUFDM0U7O0NBRUMsR0FDRCxJQUFJZCxZQUFZLFNBQVVPLFFBQVEsRUFBRVMsT0FBTztJQUN2QyxJQUFJQSxZQUFZLEtBQUssR0FBRztRQUFFQSxVQUFVLENBQUM7SUFBRztJQUN4QyxJQUFJVixjQUFjQyxXQUFXO1FBQ3pCLE9BQU9BO0lBQ1g7SUFDQUEsV0FBV0EsU0FBU1UsV0FBVztJQUMvQixJQUFJRCxRQUFRRSxXQUFXLEVBQUU7UUFDckIsZ0RBQWdEO1FBQ2hEWCxXQUFXQSxTQUFTWSxPQUFPLENBQUNkLHdCQUF3QlE7SUFDeEQsT0FDSztRQUNELHlFQUF5RTtRQUN6RU4sV0FBV0EsU0FBU1ksT0FBTyxDQUFDZixxQkFBcUJTO0lBQ3JEO0lBQ0EsT0FBT04sU0FBU1ksT0FBTyxDQUFDakIsY0FBY087QUFDMUM7QUFDQVgsaUJBQWlCLEdBQUdFLFdBQ3BCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vc3R5bGUtdG8tanNAMS4xLjE2L25vZGVfbW9kdWxlcy9zdHlsZS10by1qcy9janMvdXRpbGl0aWVzLmpzPzNiMjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNhbWVsQ2FzZSA9IHZvaWQgMDtcbnZhciBDVVNUT01fUFJPUEVSVFlfUkVHRVggPSAvXi0tW2EtekEtWjAtOV8tXSskLztcbnZhciBIWVBIRU5fUkVHRVggPSAvLShbYS16XSkvZztcbnZhciBOT19IWVBIRU5fUkVHRVggPSAvXlteLV0rJC87XG52YXIgVkVORE9SX1BSRUZJWF9SRUdFWCA9IC9eLSh3ZWJraXR8bW96fG1zfG98a2h0bWwpLS87XG52YXIgTVNfVkVORE9SX1BSRUZJWF9SRUdFWCA9IC9eLShtcyktLztcbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdG8gc2tpcCBjYW1lbENhc2UuXG4gKi9cbnZhciBza2lwQ2FtZWxDYXNlID0gZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgcmV0dXJuICFwcm9wZXJ0eSB8fFxuICAgICAgICBOT19IWVBIRU5fUkVHRVgudGVzdChwcm9wZXJ0eSkgfHxcbiAgICAgICAgQ1VTVE9NX1BST1BFUlRZX1JFR0VYLnRlc3QocHJvcGVydHkpO1xufTtcbi8qKlxuICogUmVwbGFjZXIgdGhhdCBjYXBpdGFsaXplcyBmaXJzdCBjaGFyYWN0ZXIuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gZnVuY3Rpb24gKG1hdGNoLCBjaGFyYWN0ZXIpIHtcbiAgICByZXR1cm4gY2hhcmFjdGVyLnRvVXBwZXJDYXNlKCk7XG59O1xuLyoqXG4gKiBSZXBsYWNlciB0aGF0IHJlbW92ZXMgYmVnaW5uaW5nIGh5cGhlbiBvZiB2ZW5kb3IgcHJlZml4IHByb3BlcnR5LlxuICovXG52YXIgdHJpbUh5cGhlbiA9IGZ1bmN0aW9uIChtYXRjaCwgcHJlZml4KSB7IHJldHVybiBcIlwiLmNvbmNhdChwcmVmaXgsIFwiLVwiKTsgfTtcbi8qKlxuICogQ2FtZWxDYXNlcyBhIENTUyBwcm9wZXJ0eS5cbiAqL1xudmFyIGNhbWVsQ2FzZSA9IGZ1bmN0aW9uIChwcm9wZXJ0eSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgaWYgKHNraXBDYW1lbENhc2UocHJvcGVydHkpKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgICB9XG4gICAgcHJvcGVydHkgPSBwcm9wZXJ0eS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChvcHRpb25zLnJlYWN0Q29tcGF0KSB7XG4gICAgICAgIC8vIGAtbXNgIHZlbmRvciBwcmVmaXggc2hvdWxkIG5vdCBiZSBjYXBpdGFsaXplZFxuICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnR5LnJlcGxhY2UoTVNfVkVORE9SX1BSRUZJWF9SRUdFWCwgdHJpbUh5cGhlbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBmb3Igbm9uLVJlYWN0LCByZW1vdmUgZmlyc3QgaHlwaGVuIHNvIHZlbmRvciBwcmVmaXggaXMgbm90IGNhcGl0YWxpemVkXG4gICAgICAgIHByb3BlcnR5ID0gcHJvcGVydHkucmVwbGFjZShWRU5ET1JfUFJFRklYX1JFR0VYLCB0cmltSHlwaGVuKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BlcnR5LnJlcGxhY2UoSFlQSEVOX1JFR0VYLCBjYXBpdGFsaXplKTtcbn07XG5leHBvcnRzLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxpdGllcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjYW1lbENhc2UiLCJDVVNUT01fUFJPUEVSVFlfUkVHRVgiLCJIWVBIRU5fUkVHRVgiLCJOT19IWVBIRU5fUkVHRVgiLCJWRU5ET1JfUFJFRklYX1JFR0VYIiwiTVNfVkVORE9SX1BSRUZJWF9SRUdFWCIsInNraXBDYW1lbENhc2UiLCJwcm9wZXJ0eSIsInRlc3QiLCJjYXBpdGFsaXplIiwibWF0Y2giLCJjaGFyYWN0ZXIiLCJ0b1VwcGVyQ2FzZSIsInRyaW1IeXBoZW4iLCJwcmVmaXgiLCJjb25jYXQiLCJvcHRpb25zIiwidG9Mb3dlckNhc2UiLCJyZWFjdENvbXBhdCIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/style-to-js@1.1.16/node_modules/style-to-js/cjs/utilities.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/style-to-object@1.0.8/node_modules/style-to-object/cjs/index.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/style-to-object@1.0.8/node_modules/style-to-object/cjs/index.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = StyleToObject;\nvar inline_style_parser_1 = __importDefault(__webpack_require__(/*! inline-style-parser */ \"(app-pages-browser)/./node_modules/.pnpm/inline-style-parser@0.2.4/node_modules/inline-style-parser/index.js\"));\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */ function StyleToObject(style, iterator) {\n    var styleObject = null;\n    if (!style || typeof style !== \"string\") {\n        return styleObject;\n    }\n    var declarations = (0, inline_style_parser_1.default)(style);\n    var hasIterator = typeof iterator === \"function\";\n    declarations.forEach(function(declaration) {\n        if (declaration.type !== \"declaration\") {\n            return;\n        }\n        var property = declaration.property, value = declaration.value;\n        if (hasIterator) {\n            iterator(property, value, declaration);\n        } else if (value) {\n            styleObject = styleObject || {};\n            styleObject[property] = value;\n        }\n    });\n    return styleObject;\n} //# sourceMappingURL=index.js.map\n_c = StyleToObject;\nvar _c;\n$RefreshReg$(_c, \"StyleToObject\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHlsZS10by1vYmplY3RAMS4wLjgvbm9kZV9tb2R1bGVzL3N0eWxlLXRvLW9iamVjdC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFlLEdBQUdHO0FBQ2xCLElBQUlDLHdCQUF3QlQsZ0JBQWdCVSxtQkFBT0EsQ0FBQyx5SUFBcUI7QUFDekU7Ozs7Ozs7Ozs7Ozs7Q0FhQyxHQUNELFNBQVNGLGNBQWNHLEtBQUssRUFBRUMsUUFBUTtJQUNsQyxJQUFJQyxjQUFjO0lBQ2xCLElBQUksQ0FBQ0YsU0FBUyxPQUFPQSxVQUFVLFVBQVU7UUFDckMsT0FBT0U7SUFDWDtJQUNBLElBQUlDLGVBQWUsQ0FBQyxHQUFHTCxzQkFBc0JGLE9BQU8sRUFBRUk7SUFDdEQsSUFBSUksY0FBYyxPQUFPSCxhQUFhO0lBQ3RDRSxhQUFhRSxPQUFPLENBQUMsU0FBVUMsV0FBVztRQUN0QyxJQUFJQSxZQUFZQyxJQUFJLEtBQUssZUFBZTtZQUNwQztRQUNKO1FBQ0EsSUFBSUMsV0FBV0YsWUFBWUUsUUFBUSxFQUFFYixRQUFRVyxZQUFZWCxLQUFLO1FBQzlELElBQUlTLGFBQWE7WUFDYkgsU0FBU08sVUFBVWIsT0FBT1c7UUFDOUIsT0FDSyxJQUFJWCxPQUFPO1lBQ1pPLGNBQWNBLGVBQWUsQ0FBQztZQUM5QkEsV0FBVyxDQUFDTSxTQUFTLEdBQUdiO1FBQzVCO0lBQ0o7SUFDQSxPQUFPTztBQUNYLEVBQ0EsaUNBQWlDO0tBdEJ4QkwiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3N0eWxlLXRvLW9iamVjdEAxLjAuOC9ub2RlX21vZHVsZXMvc3R5bGUtdG8tb2JqZWN0L2Nqcy9pbmRleC5qcz9hNTk5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gU3R5bGVUb09iamVjdDtcbnZhciBpbmxpbmVfc3R5bGVfcGFyc2VyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImlubGluZS1zdHlsZS1wYXJzZXJcIikpO1xuLyoqXG4gKiBQYXJzZXMgaW5saW5lIHN0eWxlIHRvIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gc3R5bGUgLSBJbmxpbmUgc3R5bGUuXG4gKiBAcGFyYW0gaXRlcmF0b3IgLSBJdGVyYXRvci5cbiAqIEByZXR1cm5zIC0gU3R5bGUgb2JqZWN0IG9yIG51bGwuXG4gKlxuICogQGV4YW1wbGUgUGFyc2luZyBpbmxpbmUgc3R5bGUgdG8gb2JqZWN0OlxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgcGFyc2UgZnJvbSAnc3R5bGUtdG8tb2JqZWN0JztcbiAqIHBhcnNlKCdsaW5lLWhlaWdodDogNDI7Jyk7IC8vIHsgJ2xpbmUtaGVpZ2h0JzogJzQyJyB9XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gU3R5bGVUb09iamVjdChzdHlsZSwgaXRlcmF0b3IpIHtcbiAgICB2YXIgc3R5bGVPYmplY3QgPSBudWxsO1xuICAgIGlmICghc3R5bGUgfHwgdHlwZW9mIHN0eWxlICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gICAgfVxuICAgIHZhciBkZWNsYXJhdGlvbnMgPSAoMCwgaW5saW5lX3N0eWxlX3BhcnNlcl8xLmRlZmF1bHQpKHN0eWxlKTtcbiAgICB2YXIgaGFzSXRlcmF0b3IgPSB0eXBlb2YgaXRlcmF0b3IgPT09ICdmdW5jdGlvbic7XG4gICAgZGVjbGFyYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGRlY2xhcmF0aW9uKSB7XG4gICAgICAgIGlmIChkZWNsYXJhdGlvbi50eXBlICE9PSAnZGVjbGFyYXRpb24nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByb3BlcnR5ID0gZGVjbGFyYXRpb24ucHJvcGVydHksIHZhbHVlID0gZGVjbGFyYXRpb24udmFsdWU7XG4gICAgICAgIGlmIChoYXNJdGVyYXRvcikge1xuICAgICAgICAgICAgaXRlcmF0b3IocHJvcGVydHksIHZhbHVlLCBkZWNsYXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHN0eWxlT2JqZWN0ID0gc3R5bGVPYmplY3QgfHwge307XG4gICAgICAgICAgICBzdHlsZU9iamVjdFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzdHlsZU9iamVjdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiU3R5bGVUb09iamVjdCIsImlubGluZV9zdHlsZV9wYXJzZXJfMSIsInJlcXVpcmUiLCJzdHlsZSIsIml0ZXJhdG9yIiwic3R5bGVPYmplY3QiLCJkZWNsYXJhdGlvbnMiLCJoYXNJdGVyYXRvciIsImZvckVhY2giLCJkZWNsYXJhdGlvbiIsInR5cGUiLCJwcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/style-to-object@1.0.8/node_modules/style-to-object/cjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../../node_modules/process/browser.js":
/*!************************************************!*\
  !*** ../../../node_modules/process/browser.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// shim for using process in browser\n\nvar process = module.exports = {};\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\nvar cachedSetTimeout;\nvar cachedClearTimeout;\nfunction defaultSetTimout() {\n    throw new Error(\"setTimeout has not been defined\");\n}\nfunction defaultClearTimeout() {\n    throw new Error(\"clearTimeout has not been defined\");\n}\n(function() {\n    try {\n        if (typeof setTimeout === \"function\") {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === \"function\") {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n})();\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n    var len = queue.length;\n    while(len){\n        currentQueue = queue;\n        queue = [];\n        while(++queueIndex < len){\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\nprocess.nextTick = function(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for(var i = 1; i < arguments.length; i++){\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\n_c = Item;\nItem.prototype.run = function() {\n    this.fun.apply(null, this.array);\n};\nprocess.title = \"browser\";\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = \"\"; // empty string to avoid regexp issues\nprocess.versions = {};\nfunction noop() {}\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\nprocess.listeners = function(name) {\n    return [];\n};\nprocess.binding = function(name) {\n    throw new Error(\"process.binding is not supported\");\n};\nprocess.cwd = function() {\n    return \"/\";\n};\nprocess.chdir = function(dir) {\n    throw new Error(\"process.chdir is not supported\");\n};\nprocess.umask = function() {\n    return 0;\n};\nvar _c;\n$RefreshReg$(_c, \"Item\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBLG9DQUFvQzs7QUFDcEMsSUFBSUEsVUFBVUMsT0FBT0MsT0FBTyxHQUFHLENBQUM7QUFFaEMsMkVBQTJFO0FBQzNFLDJFQUEyRTtBQUMzRSwrRUFBK0U7QUFDL0UsOERBQThEO0FBRTlELElBQUlDO0FBQ0osSUFBSUM7QUFFSixTQUFTQztJQUNMLE1BQU0sSUFBSUMsTUFBTTtBQUNwQjtBQUNBLFNBQVNDO0lBQ0wsTUFBTSxJQUFJRCxNQUFNO0FBQ3BCO0FBQ0M7SUFDRyxJQUFJO1FBQ0EsSUFBSSxPQUFPRSxlQUFlLFlBQVk7WUFDbENMLG1CQUFtQks7UUFDdkIsT0FBTztZQUNITCxtQkFBbUJFO1FBQ3ZCO0lBQ0osRUFBRSxPQUFPSSxHQUFHO1FBQ1JOLG1CQUFtQkU7SUFDdkI7SUFDQSxJQUFJO1FBQ0EsSUFBSSxPQUFPSyxpQkFBaUIsWUFBWTtZQUNwQ04scUJBQXFCTTtRQUN6QixPQUFPO1lBQ0hOLHFCQUFxQkc7UUFDekI7SUFDSixFQUFFLE9BQU9FLEdBQUc7UUFDUkwscUJBQXFCRztJQUN6QjtBQUNKO0FBQ0EsU0FBU0ksV0FBV0MsR0FBRztJQUNuQixJQUFJVCxxQkFBcUJLLFlBQVk7UUFDakMsdUNBQXVDO1FBQ3ZDLE9BQU9BLFdBQVdJLEtBQUs7SUFDM0I7SUFDQSx3REFBd0Q7SUFDeEQsSUFBSSxDQUFDVCxxQkFBcUJFLG9CQUFvQixDQUFDRixnQkFBZSxLQUFNSyxZQUFZO1FBQzVFTCxtQkFBbUJLO1FBQ25CLE9BQU9BLFdBQVdJLEtBQUs7SUFDM0I7SUFDQSxJQUFJO1FBQ0Esc0VBQXNFO1FBQ3RFLE9BQU9ULGlCQUFpQlMsS0FBSztJQUNqQyxFQUFFLE9BQU1ILEdBQUU7UUFDTixJQUFJO1lBQ0Esa0hBQWtIO1lBQ2xILE9BQU9OLGlCQUFpQlUsSUFBSSxDQUFDLE1BQU1ELEtBQUs7UUFDNUMsRUFBRSxPQUFNSCxHQUFFO1lBQ04saUtBQWlLO1lBQ2pLLE9BQU9OLGlCQUFpQlUsSUFBSSxDQUFDLElBQUksRUFBRUQsS0FBSztRQUM1QztJQUNKO0FBR0o7QUFDQSxTQUFTRSxnQkFBZ0JDLE1BQU07SUFDM0IsSUFBSVgsdUJBQXVCTSxjQUFjO1FBQ3JDLHVDQUF1QztRQUN2QyxPQUFPQSxhQUFhSztJQUN4QjtJQUNBLDBEQUEwRDtJQUMxRCxJQUFJLENBQUNYLHVCQUF1QkcsdUJBQXVCLENBQUNILGtCQUFpQixLQUFNTSxjQUFjO1FBQ3JGTixxQkFBcUJNO1FBQ3JCLE9BQU9BLGFBQWFLO0lBQ3hCO0lBQ0EsSUFBSTtRQUNBLHNFQUFzRTtRQUN0RSxPQUFPWCxtQkFBbUJXO0lBQzlCLEVBQUUsT0FBT04sR0FBRTtRQUNQLElBQUk7WUFDQSxtSEFBbUg7WUFDbkgsT0FBT0wsbUJBQW1CUyxJQUFJLENBQUMsTUFBTUU7UUFDekMsRUFBRSxPQUFPTixHQUFFO1lBQ1Asa0tBQWtLO1lBQ2xLLDRFQUE0RTtZQUM1RSxPQUFPTCxtQkFBbUJTLElBQUksQ0FBQyxJQUFJLEVBQUVFO1FBQ3pDO0lBQ0o7QUFJSjtBQUNBLElBQUlDLFFBQVEsRUFBRTtBQUNkLElBQUlDLFdBQVc7QUFDZixJQUFJQztBQUNKLElBQUlDLGFBQWEsQ0FBQztBQUVsQixTQUFTQztJQUNMLElBQUksQ0FBQ0gsWUFBWSxDQUFDQyxjQUFjO1FBQzVCO0lBQ0o7SUFDQUQsV0FBVztJQUNYLElBQUlDLGFBQWFHLE1BQU0sRUFBRTtRQUNyQkwsUUFBUUUsYUFBYUksTUFBTSxDQUFDTjtJQUNoQyxPQUFPO1FBQ0hHLGFBQWEsQ0FBQztJQUNsQjtJQUNBLElBQUlILE1BQU1LLE1BQU0sRUFBRTtRQUNkRTtJQUNKO0FBQ0o7QUFFQSxTQUFTQTtJQUNMLElBQUlOLFVBQVU7UUFDVjtJQUNKO0lBQ0EsSUFBSU8sVUFBVWIsV0FBV1M7SUFDekJILFdBQVc7SUFFWCxJQUFJUSxNQUFNVCxNQUFNSyxNQUFNO0lBQ3RCLE1BQU1JLElBQUs7UUFDUFAsZUFBZUY7UUFDZkEsUUFBUSxFQUFFO1FBQ1YsTUFBTyxFQUFFRyxhQUFhTSxJQUFLO1lBQ3ZCLElBQUlQLGNBQWM7Z0JBQ2RBLFlBQVksQ0FBQ0MsV0FBVyxDQUFDTyxHQUFHO1lBQ2hDO1FBQ0o7UUFDQVAsYUFBYSxDQUFDO1FBQ2RNLE1BQU1ULE1BQU1LLE1BQU07SUFDdEI7SUFDQUgsZUFBZTtJQUNmRCxXQUFXO0lBQ1hILGdCQUFnQlU7QUFDcEI7QUFFQXhCLFFBQVEyQixRQUFRLEdBQUcsU0FBVWYsR0FBRztJQUM1QixJQUFJZ0IsT0FBTyxJQUFJQyxNQUFNQyxVQUFVVCxNQUFNLEdBQUc7SUFDeEMsSUFBSVMsVUFBVVQsTUFBTSxHQUFHLEdBQUc7UUFDdEIsSUFBSyxJQUFJVSxJQUFJLEdBQUdBLElBQUlELFVBQVVULE1BQU0sRUFBRVUsSUFBSztZQUN2Q0gsSUFBSSxDQUFDRyxJQUFJLEVBQUUsR0FBR0QsU0FBUyxDQUFDQyxFQUFFO1FBQzlCO0lBQ0o7SUFDQWYsTUFBTWdCLElBQUksQ0FBQyxJQUFJQyxLQUFLckIsS0FBS2dCO0lBQ3pCLElBQUlaLE1BQU1LLE1BQU0sS0FBSyxLQUFLLENBQUNKLFVBQVU7UUFDakNOLFdBQVdZO0lBQ2Y7QUFDSjtBQUVBLCtCQUErQjtBQUMvQixTQUFTVSxLQUFLckIsR0FBRyxFQUFFc0IsS0FBSztJQUNwQixJQUFJLENBQUN0QixHQUFHLEdBQUdBO0lBQ1gsSUFBSSxDQUFDc0IsS0FBSyxHQUFHQTtBQUNqQjtLQUhTRDtBQUlUQSxLQUFLRSxTQUFTLENBQUNULEdBQUcsR0FBRztJQUNqQixJQUFJLENBQUNkLEdBQUcsQ0FBQ3dCLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQ0YsS0FBSztBQUNuQztBQUNBbEMsUUFBUXFDLEtBQUssR0FBRztBQUNoQnJDLFFBQVFzQyxPQUFPLEdBQUc7QUFDbEJ0QyxRQUFRdUMsR0FBRyxHQUFHLENBQUM7QUFDZnZDLFFBQVF3QyxJQUFJLEdBQUcsRUFBRTtBQUNqQnhDLFFBQVF5QyxPQUFPLEdBQUcsSUFBSSxzQ0FBc0M7QUFDNUR6QyxRQUFRMEMsUUFBUSxHQUFHLENBQUM7QUFFcEIsU0FBU0MsUUFBUTtBQUVqQjNDLFFBQVE0QyxFQUFFLEdBQUdEO0FBQ2IzQyxRQUFRNkMsV0FBVyxHQUFHRjtBQUN0QjNDLFFBQVE4QyxJQUFJLEdBQUdIO0FBQ2YzQyxRQUFRK0MsR0FBRyxHQUFHSjtBQUNkM0MsUUFBUWdELGNBQWMsR0FBR0w7QUFDekIzQyxRQUFRaUQsa0JBQWtCLEdBQUdOO0FBQzdCM0MsUUFBUWtELElBQUksR0FBR1A7QUFDZjNDLFFBQVFtRCxlQUFlLEdBQUdSO0FBQzFCM0MsUUFBUW9ELG1CQUFtQixHQUFHVDtBQUU5QjNDLFFBQVFxRCxTQUFTLEdBQUcsU0FBVUMsSUFBSTtJQUFJLE9BQU8sRUFBRTtBQUFDO0FBRWhEdEQsUUFBUXVELE9BQU8sR0FBRyxTQUFVRCxJQUFJO0lBQzVCLE1BQU0sSUFBSWhELE1BQU07QUFDcEI7QUFFQU4sUUFBUXdELEdBQUcsR0FBRztJQUFjLE9BQU87QUFBSTtBQUN2Q3hELFFBQVF5RCxLQUFLLEdBQUcsU0FBVUMsR0FBRztJQUN6QixNQUFNLElBQUlwRCxNQUFNO0FBQ3BCO0FBQ0FOLFFBQVEyRCxLQUFLLEdBQUc7SUFBYSxPQUFPO0FBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanM/MzI3YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJFcnJvciIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiZSIsImNsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjYWxsIiwicnVuQ2xlYXJUaW1lb3V0IiwibWFya2VyIiwicXVldWUiLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJsZW5ndGgiLCJjb25jYXQiLCJkcmFpblF1ZXVlIiwidGltZW91dCIsImxlbiIsInJ1biIsIm5leHRUaWNrIiwiYXJncyIsIkFycmF5IiwiYXJndW1lbnRzIiwiaSIsInB1c2giLCJJdGVtIiwiYXJyYXkiLCJwcm90b3R5cGUiLCJhcHBseSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJub29wIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwibmFtZSIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../../node_modules/process/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/chat/components/Message.tsx":
/*!****************************************************!*\
  !*** ./src/components/chat/components/Message.tsx ***!
  \****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Message: function() { return /* binding */ Message; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ui_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui/icons */ \"(app-pages-browser)/./src/components/chat/components/ui/icons.tsx\");\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/.pnpm/framer-motion@12.5.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs\");\n/* harmony import */ var react_markdown__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-markdown */ \"(app-pages-browser)/./node_modules/.pnpm/react-markdown@9.1.0_@types+react@18.3.20_react@18.3.1/node_modules/react-markdown/lib/index.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! classnames */ \"(app-pages-browser)/./node_modules/.pnpm/classnames@2.5.1/node_modules/classnames/index.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _lib_lunary_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/lunary-client */ \"(app-pages-browser)/./src/lib/lunary-client.ts\");\n/* __next_internal_client_entry_do_not_use__ Message auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n// VERSION-MARKER: Message-Debug-Code - Version 009\nconsole.log(\"Message.tsx geladen - Debug-Version 009\");\nfunction Message(param) {\n    let { message, isLastMessage = false, botName = \"SMG Dialog Engine\", showCopyButton = true, enableFeedback = false, botId = \"default\" } = param;\n    _s();\n    const [copySuccess, setCopySuccess] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [currentTime, setCurrentTime] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [feedbackGiven, setFeedbackGiven] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const isBot = message.role === \"assistant\";\n    // Zeit nur client-seitig festlegen, um Hydration-Fehler zu vermeiden\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setCurrentTime(new Date().toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\"\n        }));\n    }, []);\n    // Debug-Ausgabe beim Rendern einer Nachricht\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        var _message_content;\n        console.log(\"MESSAGE-DEBUG-009: Nachricht gerendert:\", {\n            role: message.role,\n            contentLength: ((_message_content = message.content) === null || _message_content === void 0 ? void 0 : _message_content.length) || 0,\n            isLastMessage,\n            showCopyButton,\n            enableFeedback\n        });\n    }, [\n        message,\n        isLastMessage,\n        showCopyButton,\n        enableFeedback\n    ]);\n    // Funktion zum Kopieren der Nachricht\n    const copyToClipboard = ()=>{\n        // Erstellt einen temporären DOM-Knoten um HTML-Tags aus dem Text zu entfernen\n        const tempDiv = document.createElement(\"div\");\n        tempDiv.innerHTML = message.content || \"\";\n        const plainText = tempDiv.textContent || tempDiv.innerText || \"\";\n        // Versuche erst navigator.clipboard.writeText zu verwenden\n        const copyWithAPI = ()=>{\n            navigator.clipboard.writeText(plainText).then(()=>{\n                setCopySuccess(true);\n                setTimeout(()=>setCopySuccess(false), 2000);\n                // Tracking für Kopieren\n                _lib_lunary_client__WEBPACK_IMPORTED_MODULE_4__.LunaryClient.track({\n                    eventName: \"message_copied\",\n                    properties: {\n                        botId\n                    },\n                    metadata: {\n                        messageContent: plainText.slice(0, 100)\n                    }\n                });\n            }, (err)=>{\n                console.error(\"Fehler beim Kopieren mit Clipboard API:\", err);\n                // Fallback zu document.execCommand\n                copyWithExecCommand();\n            });\n        };\n        // Fallback mit document.execCommand\n        const copyWithExecCommand = ()=>{\n            try {\n                // Erstelle temporäres Textarea-Element\n                const textArea = document.createElement(\"textarea\");\n                textArea.value = plainText;\n                textArea.style.position = \"fixed\";\n                textArea.style.left = \"-999999px\";\n                textArea.style.top = \"-999999px\";\n                document.body.appendChild(textArea);\n                textArea.focus();\n                textArea.select();\n                // Führe Kopier-Befehl aus\n                const successful = document.execCommand(\"copy\");\n                if (successful) {\n                    setCopySuccess(true);\n                    setTimeout(()=>setCopySuccess(false), 2000);\n                    // Tracking für Kopieren\n                    _lib_lunary_client__WEBPACK_IMPORTED_MODULE_4__.LunaryClient.track({\n                        eventName: \"message_copied\",\n                        properties: {\n                            botId\n                        },\n                        metadata: {\n                            messageContent: plainText.slice(0, 100)\n                        }\n                    });\n                } else {\n                    console.error(\"Fehler beim Kopieren mit execCommand\");\n                }\n                // Entferne temporäres Element\n                document.body.removeChild(textArea);\n            } catch (err) {\n                console.error(\"Fehler beim Kopieren mit Fallback-Methode:\", err);\n            }\n        };\n        // Versuche erst die moderne API, dann den Fallback\n        try {\n            copyWithAPI();\n        } catch (err) {\n            console.error(\"Clipboard API nicht verf\\xfcgbar, verwende Fallback:\", err);\n            copyWithExecCommand();\n        }\n    };\n    // Funktion zum Senden von Feedback\n    const sendFeedback = (isPositive)=>{\n        setFeedbackGiven(isPositive ? \"positive\" : \"negative\");\n        // Tracking für Feedback\n        _lib_lunary_client__WEBPACK_IMPORTED_MODULE_4__.LunaryClient.trackFeedback({\n            rating: isPositive,\n            userId: \"anonymous\",\n            metadata: {\n                botId,\n                messageContent: message.content.slice(0, 100) // Ersten 100 Zeichen\n            }\n        });\n        console.log(\"Feedback gesendet: \".concat(isPositive ? \"positiv\" : \"negativ\", \" f\\xfcr Bot \").concat(botId));\n    };\n    // Festlegen von Klassen und Stilen basierend auf der Rolle\n    const isUser = message.role === \"user\";\n    const containerClasses = classnames__WEBPACK_IMPORTED_MODULE_3___default()(\"px-4 py-3 rounded-lg transition-all\", isUser ? \"glassmorphism-user ml-auto max-w-[85%] md:max-w-[75%] mb-3\" : \"glassmorphism-bot mr-auto max-w-[85%] md:max-w-[75%] mb-3\");\n    // Avatar für den Bot\n    const BotAvatar = ()=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"bot-avatar flex items-center justify-center w-8 h-8 text-sm font-medium mr-2 rounded-md bg-white/60 border border-primary/20 text-primary shadow-sm\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                width: \"16\",\n                height: \"16\",\n                fill: \"none\",\n                viewBox: \"0 0 24 24\",\n                stroke: \"currentColor\",\n                strokeWidth: \"2\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                    strokeLinecap: \"round\",\n                    strokeLinejoin: \"round\",\n                    d: \"M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z\"\n                }, void 0, false, {\n                    fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                    lineNumber: 159,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                lineNumber: 158,\n                columnNumber: 7\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n            lineNumber: 157,\n            columnNumber: 5\n        }, this);\n    // Avatar für den User\n    const UserAvatar = ()=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"user-avatar flex items-center justify-center w-8 h-8 text-xs font-medium ml-2 rounded-md border border-primary/20 bg-primary/90 text-white shadow-sm\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                width: \"14\",\n                height: \"14\",\n                fill: \"none\",\n                viewBox: \"0 0 24 24\",\n                stroke: \"currentColor\",\n                strokeWidth: \"2\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                    strokeLinecap: \"round\",\n                    strokeLinejoin: \"round\",\n                    d: \"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n                }, void 0, false, {\n                    fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                    lineNumber: 168,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                lineNumber: 167,\n                columnNumber: 7\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n            lineNumber: 166,\n            columnNumber: 5\n        }, this);\n    // VERBESSERTE FORMATIERUNGSFUNKTION mit Markdown\n    const renderContent = ()=>{\n        console.log(\"MESSAGE-DEBUG-009: renderContent aufgerufen\");\n        // Sicherheitsprüfung für leeren Inhalt\n        if (!message.content || typeof message.content !== \"string\") {\n            console.log(\"MESSAGE-DEBUG-009: Ung\\xfcltiger Inhalt:\", message.content);\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-red-500\",\n                children: \"Ung\\xfcltige Nachricht\"\n            }, void 0, false, {\n                fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                lineNumber: 180,\n                columnNumber: 14\n            }, this);\n        }\n        // Verwende react-markdown für die Formatierung\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"prose prose-sm break-words pointer-events-auto\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_markdown__WEBPACK_IMPORTED_MODULE_5__.Markdown, {\n                components: {\n                    a: (param)=>{\n                        let { node, ...props } = param;\n                        var _props_href, _props_href1, _props_href2, _props_href3;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                            ...props,\n                            className: ((_props_href = props.href) === null || _props_href === void 0 ? void 0 : _props_href.startsWith(\"tel:\")) ? \"phone-number\" : ((_props_href1 = props.href) === null || _props_href1 === void 0 ? void 0 : _props_href1.startsWith(\"mailto:\")) ? \"email-address\" : \"url-address\",\n                            target: ((_props_href2 = props.href) === null || _props_href2 === void 0 ? void 0 : _props_href2.startsWith(\"http\")) ? \"_blank\" : undefined,\n                            rel: ((_props_href3 = props.href) === null || _props_href3 === void 0 ? void 0 : _props_href3.startsWith(\"http\")) ? \"noopener noreferrer\" : undefined\n                        }, void 0, false, {\n                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                            lineNumber: 189,\n                            columnNumber: 15\n                        }, void 0);\n                    },\n                    ul: (param)=>{\n                        let { node, ...props } = param;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                            className: \"list-vertical\",\n                            ...props\n                        }, void 0, false, {\n                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                            lineNumber: 202,\n                            columnNumber: 39\n                        }, void 0);\n                    },\n                    ol: (param)=>{\n                        let { node, ...props } = param;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ol\", {\n                            className: \"list-vertical\",\n                            ...props\n                        }, void 0, false, {\n                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                            lineNumber: 203,\n                            columnNumber: 39\n                        }, void 0);\n                    },\n                    li: (param)=>{\n                        let { node, ...props } = param;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                            className: \"list-item\",\n                            ...props\n                        }, void 0, false, {\n                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                            lineNumber: 204,\n                            columnNumber: 39\n                        }, void 0);\n                    },\n                    h1: (param)=>{\n                        let { node, ...props } = param;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                            className: \"text-xl font-bold mt-2 mb-0.5\",\n                            ...props\n                        }, void 0, false, {\n                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                            lineNumber: 205,\n                            columnNumber: 39\n                        }, void 0);\n                    },\n                    h2: (param)=>{\n                        let { node, ...props } = param;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                            className: \"text-lg font-bold mt-2 mb-0.5\",\n                            ...props\n                        }, void 0, false, {\n                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                            lineNumber: 206,\n                            columnNumber: 39\n                        }, void 0);\n                    },\n                    h3: (param)=>{\n                        let { node, ...props } = param;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                            className: \"text-lg font-bold mt-2 mb-0.5\",\n                            ...props\n                        }, void 0, false, {\n                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                            lineNumber: 207,\n                            columnNumber: 39\n                        }, void 0);\n                    },\n                    h4: (param)=>{\n                        let { node, ...props } = param;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                            className: \"text-md font-semibold mt-1.5 mb-0.5\",\n                            ...props\n                        }, void 0, false, {\n                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                            lineNumber: 208,\n                            columnNumber: 39\n                        }, void 0);\n                    }\n                },\n                children: message.content\n            }, void 0, false, {\n                fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                lineNumber: 186,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n            lineNumber: 185,\n            columnNumber: 7\n        }, this);\n    };\n    // Animation für die Nachrichtenbubble\n    const variants = {\n        hidden: {\n            opacity: 0,\n            y: 20,\n            x: isBot ? -20 : 20,\n            scale: 0.95\n        },\n        visible: {\n            opacity: 1,\n            y: 0,\n            x: 0,\n            scale: 1,\n            transition: {\n                type: \"spring\",\n                stiffness: 400,\n                damping: 25,\n                mass: 0.8,\n                duration: 0.3\n            }\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_6__.motion.div, {\n        className: \"group relative mb-4 flex items-start \".concat(isBot ? \"justify-start\" : \"justify-end\", \" max-w-full\"),\n        initial: \"hidden\",\n        animate: \"visible\",\n        variants: variants,\n        role: isBot ? \"region\" : \"none\",\n        \"aria-label\": isBot ? \"Antwort des Assistenten\" : \"Deine Nachricht\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex max-w-[85%] items-start gap-3 rounded-lg p-3 shadow-lg \".concat(isBot ? \"glassmorphism-bot text-foreground\" : \"glassmorphism-user text-white\"),\n            style: {\n                backgroundColor: isBot ? \"var(--bot-bg-color, rgba(248, 250, 252, 0.8))\" : \"var(--user-bg-color, linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary)/0.85)))\",\n                color: isBot ? \"var(--bot-text-color, currentColor)\" : \"var(--user-text-color, #ffffff)\",\n                boxShadow: isBot ? \"0 8px 32px rgba(0, 0, 0, 0.08), 0 1px 2px rgba(255, 255, 255, 0.1) inset\" : \"0 8px 32px rgba(var(--primary-rgb), 0.25)\"\n            },\n            children: [\n                isBot && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex h-8 w-8 shrink-0 select-none items-center justify-center rounded-md border bg-background/90 backdrop-blur-sm shadow-inner\",\n                    style: {\n                        backgroundColor: \"var(--bot-avatar-bg, hsla(var(--background), 0.9))\",\n                        borderColor: \"var(--bot-accent-color, hsla(var(--border), 0.5))\"\n                    },\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_icons__WEBPACK_IMPORTED_MODULE_2__.BotIcon, {\n                        \"aria-hidden\": \"true\",\n                        className: \"h-5 w-5\",\n                        style: {\n                            color: \"var(--bot-accent-color, currentColor)\"\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                        lineNumber: 275,\n                        columnNumber: 13\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                    lineNumber: 268,\n                    columnNumber: 11\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex-1 space-y-2 overflow-hidden\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"text-sm font-medium\",\n                            style: {\n                                color: isBot ? \"var(--bot-text-color, currentColor)\" : \"var(--user-text-color, #ffffff)\"\n                            },\n                            children: isBot ? botName : \"Du\"\n                        }, void 0, false, {\n                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                            lineNumber: 284,\n                            columnNumber: 11\n                        }, this),\n                        renderContent(),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"mt-1 flex items-center justify-end gap-2 text-xs text-muted-foreground/70\",\n                            children: [\n                                isBot && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex items-center gap-2\",\n                                    children: [\n                                        showCopyButton && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                            onClick: copyToClipboard,\n                                            className: \"flex items-center gap-1 rounded px-1.5 py-0.5 opacity-0 hover:bg-muted/50 group-hover:opacity-100 focus:opacity-100\",\n                                            \"aria-label\": \"Nachricht kopieren\",\n                                            title: \"Nachricht kopieren\",\n                                            children: copySuccess ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_icons__WEBPACK_IMPORTED_MODULE_2__.CheckIcon, {\n                                                        className: \"h-3.5 w-3.5\"\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                                        lineNumber: 304,\n                                                        columnNumber: 25\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                        children: \"Kopiert\"\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                                        lineNumber: 305,\n                                                        columnNumber: 25\n                                                    }, this)\n                                                ]\n                                            }, void 0, true) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_icons__WEBPACK_IMPORTED_MODULE_2__.CopyIcon, {\n                                                        className: \"h-3.5 w-3.5\"\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                                        lineNumber: 309,\n                                                        columnNumber: 25\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                        children: \"Kopieren\"\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                                        lineNumber: 310,\n                                                        columnNumber: 25\n                                                    }, this)\n                                                ]\n                                            }, void 0, true)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                            lineNumber: 296,\n                                            columnNumber: 19\n                                        }, this),\n                                        enableFeedback && feedbackGiven === null && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"flex items-center gap-1 ml-2\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                    onClick: ()=>sendFeedback(true),\n                                                    className: \"rounded p-1 opacity-0 hover:bg-emerald-100 hover:text-emerald-700 dark:hover:bg-emerald-900/30 dark:hover:text-emerald-400 group-hover:opacity-100 focus:opacity-100\",\n                                                    \"aria-label\": \"Positive Bewertung\",\n                                                    title: \"Diese Nachricht war hilfreich\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_icons__WEBPACK_IMPORTED_MODULE_2__.ThumbsUpIcon, {\n                                                        className: \"h-3.5 w-3.5\"\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                                        lineNumber: 324,\n                                                        columnNumber: 23\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                                    lineNumber: 318,\n                                                    columnNumber: 21\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                    onClick: ()=>sendFeedback(false),\n                                                    className: \"rounded p-1 opacity-0 hover:bg-rose-100 hover:text-rose-700 dark:hover:bg-rose-900/30 dark:hover:text-rose-400 group-hover:opacity-100 focus:opacity-100\",\n                                                    \"aria-label\": \"Negative Bewertung\",\n                                                    title: \"Diese Nachricht war nicht hilfreich\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_icons__WEBPACK_IMPORTED_MODULE_2__.ThumbsDownIcon, {\n                                                        className: \"h-3.5 w-3.5\"\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                                        lineNumber: 332,\n                                                        columnNumber: 23\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                                    lineNumber: 326,\n                                                    columnNumber: 21\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                            lineNumber: 317,\n                                            columnNumber: 19\n                                        }, this),\n                                        enableFeedback && feedbackGiven === \"positive\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            className: \"ml-2 text-xs text-emerald-600 dark:text-emerald-400\",\n                                            children: \"Danke f\\xfcr Ihr positives Feedback!\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                            lineNumber: 338,\n                                            columnNumber: 19\n                                        }, this),\n                                        enableFeedback && feedbackGiven === \"negative\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            className: \"ml-2 text-xs text-rose-600 dark:text-rose-400\",\n                                            children: \"Danke f\\xfcr Ihr Feedback. Wir verbessern uns stetig.\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                            lineNumber: 344,\n                                            columnNumber: 19\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                    lineNumber: 294,\n                                    columnNumber: 15\n                                }, this),\n                                isUser && isLastMessage && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex items-center gap-1\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_icons__WEBPACK_IMPORTED_MODULE_2__.CheckIcon, {\n                                            className: \"h-3.5 w-3.5\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                            lineNumber: 353,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            children: \"Gesendet\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                            lineNumber: 354,\n                                            columnNumber: 17\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                    lineNumber: 352,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    suppressHydrationWarning: true,\n                                    children: currentTime\n                                }, void 0, false, {\n                                    fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                                    lineNumber: 358,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                            lineNumber: 292,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                    lineNumber: 283,\n                    columnNumber: 9\n                }, this),\n                isUser && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(UserAvatar, {}, void 0, false, {\n                    fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n                    lineNumber: 365,\n                    columnNumber: 11\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n            lineNumber: 251,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/saadbadr/Documents/Web/brandenburg-dialog-web/src/components/chat/components/Message.tsx\",\n        lineNumber: 241,\n        columnNumber: 5\n    }, this);\n}\n_s(Message, \"Y0Sq+0gZ7E0pzZHHvAeIoht/PB4=\");\n_c = Message;\nvar _c;\n$RefreshReg$(_c, \"Message\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/chat/components/Message.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/deserialize.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/deserialize.js ***!
  \******************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deserialize: function() { return /* binding */ deserialize; }\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"(app-pages-browser)/./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/types.js\");\n\nconst env = typeof self === \"object\" ? self : globalThis;\nconst deserializer = ($, _)=>{\n    const as = (out, index)=>{\n        $.set(index, out);\n        return out;\n    };\n    const unpair = (index)=>{\n        if ($.has(index)) return $.get(index);\n        const [type, value] = _[index];\n        switch(type){\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.PRIMITIVE:\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.VOID:\n                return as(value, index);\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY:\n                {\n                    const arr = as([], index);\n                    for (const index of value)arr.push(unpair(index));\n                    return arr;\n                }\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.OBJECT:\n                {\n                    const object = as({}, index);\n                    for (const [key, index] of value)object[unpair(key)] = unpair(index);\n                    return object;\n                }\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.DATE:\n                return as(new Date(value), index);\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.REGEXP:\n                {\n                    const { source, flags } = value;\n                    return as(new RegExp(source, flags), index);\n                }\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.MAP:\n                {\n                    const map = as(new Map, index);\n                    for (const [key, index] of value)map.set(unpair(key), unpair(index));\n                    return map;\n                }\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.SET:\n                {\n                    const set = as(new Set, index);\n                    for (const index of value)set.add(unpair(index));\n                    return set;\n                }\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.ERROR:\n                {\n                    const { name, message } = value;\n                    return as(new env[name](message), index);\n                }\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT:\n                return as(BigInt(value), index);\n            case \"BigInt\":\n                return as(Object(BigInt(value)), index);\n            case \"ArrayBuffer\":\n                return as(new Uint8Array(value).buffer, value);\n            case \"DataView\":\n                {\n                    const { buffer } = new Uint8Array(value);\n                    return as(new DataView(buffer), value);\n                }\n        }\n        return as(new env[type](value), index);\n    };\n    return unpair;\n};\n/**\n * @typedef {Array<string,any>} Record a type representation\n */ /**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */ const deserialize = (serialized)=>deserializer(new Map, serialized)(0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdW5nYXArc3RydWN0dXJlZC1jbG9uZUAxLjMuMC9ub2RlX21vZHVsZXMvQHVuZ2FwL3N0cnVjdHVyZWQtY2xvbmUvZXNtL2Rlc2VyaWFsaXplLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBS29CO0FBRXBCLE1BQU1VLE1BQU0sT0FBT0MsU0FBUyxXQUFXQSxPQUFPQztBQUU5QyxNQUFNQyxlQUFlLENBQUNDLEdBQUdDO0lBQ3ZCLE1BQU1DLEtBQUssQ0FBQ0MsS0FBS0M7UUFDZkosRUFBRUssR0FBRyxDQUFDRCxPQUFPRDtRQUNiLE9BQU9BO0lBQ1Q7SUFFQSxNQUFNRyxTQUFTRixDQUFBQTtRQUNiLElBQUlKLEVBQUVPLEdBQUcsQ0FBQ0gsUUFDUixPQUFPSixFQUFFUSxHQUFHLENBQUNKO1FBRWYsTUFBTSxDQUFDSyxNQUFNQyxNQUFNLEdBQUdULENBQUMsQ0FBQ0csTUFBTTtRQUM5QixPQUFRSztZQUNOLEtBQUt0QixnREFBU0E7WUFDZCxLQUFLRCwyQ0FBSUE7Z0JBQ1AsT0FBT2dCLEdBQUdRLE9BQU9OO1lBQ25CLEtBQUtoQiw0Q0FBS0E7Z0JBQUU7b0JBQ1YsTUFBTXVCLE1BQU1ULEdBQUcsRUFBRSxFQUFFRTtvQkFDbkIsS0FBSyxNQUFNQSxTQUFTTSxNQUNsQkMsSUFBSUMsSUFBSSxDQUFDTixPQUFPRjtvQkFDbEIsT0FBT087Z0JBQ1Q7WUFDQSxLQUFLdEIsNkNBQU1BO2dCQUFFO29CQUNYLE1BQU13QixTQUFTWCxHQUFHLENBQUMsR0FBR0U7b0JBQ3RCLEtBQUssTUFBTSxDQUFDVSxLQUFLVixNQUFNLElBQUlNLE1BQ3pCRyxNQUFNLENBQUNQLE9BQU9RLEtBQUssR0FBR1IsT0FBT0Y7b0JBQy9CLE9BQU9TO2dCQUNUO1lBQ0EsS0FBS3ZCLDJDQUFJQTtnQkFDUCxPQUFPWSxHQUFHLElBQUlhLEtBQUtMLFFBQVFOO1lBQzdCLEtBQUtiLDZDQUFNQTtnQkFBRTtvQkFDWCxNQUFNLEVBQUN5QixNQUFNLEVBQUVDLEtBQUssRUFBQyxHQUFHUDtvQkFDeEIsT0FBT1IsR0FBRyxJQUFJZ0IsT0FBT0YsUUFBUUMsUUFBUWI7Z0JBQ3ZDO1lBQ0EsS0FBS1osMENBQUdBO2dCQUFFO29CQUNSLE1BQU0yQixNQUFNakIsR0FBRyxJQUFJa0IsS0FBS2hCO29CQUN4QixLQUFLLE1BQU0sQ0FBQ1UsS0FBS1YsTUFBTSxJQUFJTSxNQUN6QlMsSUFBSWQsR0FBRyxDQUFDQyxPQUFPUSxNQUFNUixPQUFPRjtvQkFDOUIsT0FBT2U7Z0JBQ1Q7WUFDQSxLQUFLMUIsMENBQUdBO2dCQUFFO29CQUNSLE1BQU1ZLE1BQU1ILEdBQUcsSUFBSW1CLEtBQUtqQjtvQkFDeEIsS0FBSyxNQUFNQSxTQUFTTSxNQUNsQkwsSUFBSWlCLEdBQUcsQ0FBQ2hCLE9BQU9GO29CQUNqQixPQUFPQztnQkFDVDtZQUNBLEtBQUtYLDRDQUFLQTtnQkFBRTtvQkFDVixNQUFNLEVBQUM2QixJQUFJLEVBQUVDLE9BQU8sRUFBQyxHQUFHZDtvQkFDeEIsT0FBT1IsR0FBRyxJQUFJTixHQUFHLENBQUMyQixLQUFLLENBQUNDLFVBQVVwQjtnQkFDcEM7WUFDQSxLQUFLVCw2Q0FBTUE7Z0JBQ1QsT0FBT08sR0FBR3VCLE9BQU9mLFFBQVFOO1lBQzNCLEtBQUs7Z0JBQ0gsT0FBT0YsR0FBR3dCLE9BQU9ELE9BQU9mLFNBQVNOO1lBQ25DLEtBQUs7Z0JBQ0gsT0FBT0YsR0FBRyxJQUFJeUIsV0FBV2pCLE9BQU9rQixNQUFNLEVBQUVsQjtZQUMxQyxLQUFLO2dCQUFZO29CQUNmLE1BQU0sRUFBRWtCLE1BQU0sRUFBRSxHQUFHLElBQUlELFdBQVdqQjtvQkFDbEMsT0FBT1IsR0FBRyxJQUFJMkIsU0FBU0QsU0FBU2xCO2dCQUNsQztRQUNGO1FBQ0EsT0FBT1IsR0FBRyxJQUFJTixHQUFHLENBQUNhLEtBQUssQ0FBQ0MsUUFBUU47SUFDbEM7SUFFQSxPQUFPRTtBQUNUO0FBRUE7O0NBRUMsR0FFRDs7OztDQUlDLEdBQ00sTUFBTXdCLGNBQWNDLENBQUFBLGFBQWNoQyxhQUFhLElBQUlxQixLQUFLVyxZQUFZLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B1bmdhcCtzdHJ1Y3R1cmVkLWNsb25lQDEuMy4wL25vZGVfbW9kdWxlcy9AdW5nYXAvc3RydWN0dXJlZC1jbG9uZS9lc20vZGVzZXJpYWxpemUuanM/OGUyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBWT0lELCBQUklNSVRJVkUsXG4gIEFSUkFZLCBPQkpFQ1QsXG4gIERBVEUsIFJFR0VYUCwgTUFQLCBTRVQsXG4gIEVSUk9SLCBCSUdJTlRcbn0gZnJvbSAnLi90eXBlcy5qcyc7XG5cbmNvbnN0IGVudiA9IHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JyA/IHNlbGYgOiBnbG9iYWxUaGlzO1xuXG5jb25zdCBkZXNlcmlhbGl6ZXIgPSAoJCwgXykgPT4ge1xuICBjb25zdCBhcyA9IChvdXQsIGluZGV4KSA9PiB7XG4gICAgJC5zZXQoaW5kZXgsIG91dCk7XG4gICAgcmV0dXJuIG91dDtcbiAgfTtcblxuICBjb25zdCB1bnBhaXIgPSBpbmRleCA9PiB7XG4gICAgaWYgKCQuaGFzKGluZGV4KSlcbiAgICAgIHJldHVybiAkLmdldChpbmRleCk7XG5cbiAgICBjb25zdCBbdHlwZSwgdmFsdWVdID0gX1tpbmRleF07XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFBSSU1JVElWRTpcbiAgICAgIGNhc2UgVk9JRDpcbiAgICAgICAgcmV0dXJuIGFzKHZhbHVlLCBpbmRleCk7XG4gICAgICBjYXNlIEFSUkFZOiB7XG4gICAgICAgIGNvbnN0IGFyciA9IGFzKFtdLCBpbmRleCk7XG4gICAgICAgIGZvciAoY29uc3QgaW5kZXggb2YgdmFsdWUpXG4gICAgICAgICAgYXJyLnB1c2godW5wYWlyKGluZGV4KSk7XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9XG4gICAgICBjYXNlIE9CSkVDVDoge1xuICAgICAgICBjb25zdCBvYmplY3QgPSBhcyh7fSwgaW5kZXgpO1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIGluZGV4XSBvZiB2YWx1ZSlcbiAgICAgICAgICBvYmplY3RbdW5wYWlyKGtleSldID0gdW5wYWlyKGluZGV4KTtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIGNhc2UgREFURTpcbiAgICAgICAgcmV0dXJuIGFzKG5ldyBEYXRlKHZhbHVlKSwgaW5kZXgpO1xuICAgICAgY2FzZSBSRUdFWFA6IHtcbiAgICAgICAgY29uc3Qge3NvdXJjZSwgZmxhZ3N9ID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBhcyhuZXcgUmVnRXhwKHNvdXJjZSwgZmxhZ3MpLCBpbmRleCk7XG4gICAgICB9XG4gICAgICBjYXNlIE1BUDoge1xuICAgICAgICBjb25zdCBtYXAgPSBhcyhuZXcgTWFwLCBpbmRleCk7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgaW5kZXhdIG9mIHZhbHVlKVxuICAgICAgICAgIG1hcC5zZXQodW5wYWlyKGtleSksIHVucGFpcihpbmRleCkpO1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgfVxuICAgICAgY2FzZSBTRVQ6IHtcbiAgICAgICAgY29uc3Qgc2V0ID0gYXMobmV3IFNldCwgaW5kZXgpO1xuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIHZhbHVlKVxuICAgICAgICAgIHNldC5hZGQodW5wYWlyKGluZGV4KSk7XG4gICAgICAgIHJldHVybiBzZXQ7XG4gICAgICB9XG4gICAgICBjYXNlIEVSUk9SOiB7XG4gICAgICAgIGNvbnN0IHtuYW1lLCBtZXNzYWdlfSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gYXMobmV3IGVudltuYW1lXShtZXNzYWdlKSwgaW5kZXgpO1xuICAgICAgfVxuICAgICAgY2FzZSBCSUdJTlQ6XG4gICAgICAgIHJldHVybiBhcyhCaWdJbnQodmFsdWUpLCBpbmRleCk7XG4gICAgICBjYXNlICdCaWdJbnQnOlxuICAgICAgICByZXR1cm4gYXMoT2JqZWN0KEJpZ0ludCh2YWx1ZSkpLCBpbmRleCk7XG4gICAgICBjYXNlICdBcnJheUJ1ZmZlcic6XG4gICAgICAgIHJldHVybiBhcyhuZXcgVWludDhBcnJheSh2YWx1ZSkuYnVmZmVyLCB2YWx1ZSk7XG4gICAgICBjYXNlICdEYXRhVmlldyc6IHtcbiAgICAgICAgY29uc3QgeyBidWZmZXIgfSA9IG5ldyBVaW50OEFycmF5KHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGFzKG5ldyBEYXRhVmlldyhidWZmZXIpLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcyhuZXcgZW52W3R5cGVdKHZhbHVlKSwgaW5kZXgpO1xuICB9O1xuXG4gIHJldHVybiB1bnBhaXI7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtBcnJheTxzdHJpbmcsYW55Pn0gUmVjb3JkIGEgdHlwZSByZXByZXNlbnRhdGlvblxuICovXG5cbi8qKlxuICogUmV0dXJucyBhIGRlc2VyaWFsaXplZCB2YWx1ZSBmcm9tIGEgc2VyaWFsaXplZCBhcnJheSBvZiBSZWNvcmRzLlxuICogQHBhcmFtIHtSZWNvcmRbXX0gc2VyaWFsaXplZCBhIHByZXZpb3VzbHkgc2VyaWFsaXplZCB2YWx1ZS5cbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmV4cG9ydCBjb25zdCBkZXNlcmlhbGl6ZSA9IHNlcmlhbGl6ZWQgPT4gZGVzZXJpYWxpemVyKG5ldyBNYXAsIHNlcmlhbGl6ZWQpKDApO1xuIl0sIm5hbWVzIjpbIlZPSUQiLCJQUklNSVRJVkUiLCJBUlJBWSIsIk9CSkVDVCIsIkRBVEUiLCJSRUdFWFAiLCJNQVAiLCJTRVQiLCJFUlJPUiIsIkJJR0lOVCIsImVudiIsInNlbGYiLCJnbG9iYWxUaGlzIiwiZGVzZXJpYWxpemVyIiwiJCIsIl8iLCJhcyIsIm91dCIsImluZGV4Iiwic2V0IiwidW5wYWlyIiwiaGFzIiwiZ2V0IiwidHlwZSIsInZhbHVlIiwiYXJyIiwicHVzaCIsIm9iamVjdCIsImtleSIsIkRhdGUiLCJzb3VyY2UiLCJmbGFncyIsIlJlZ0V4cCIsIm1hcCIsIk1hcCIsIlNldCIsImFkZCIsIm5hbWUiLCJtZXNzYWdlIiwiQmlnSW50IiwiT2JqZWN0IiwiVWludDhBcnJheSIsImJ1ZmZlciIsIkRhdGFWaWV3IiwiZGVzZXJpYWxpemUiLCJzZXJpYWxpemVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/deserialize.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/index.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/index.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deserialize: function() { return /* reexport safe */ _deserialize_js__WEBPACK_IMPORTED_MODULE_0__.deserialize; },\n/* harmony export */   serialize: function() { return /* reexport safe */ _serialize_js__WEBPACK_IMPORTED_MODULE_1__.serialize; }\n/* harmony export */ });\n/* harmony import */ var _deserialize_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deserialize.js */ \"(app-pages-browser)/./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/deserialize.js\");\n/* harmony import */ var _serialize_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serialize.js */ \"(app-pages-browser)/./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/serialize.js\");\n\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */ /**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */ /* harmony default export */ __webpack_exports__[\"default\"] = (typeof structuredClone === \"function\" ? /* c8 ignore start */ (any, options)=>options && (\"json\" in options || \"lossy\" in options) ? (0,_deserialize_js__WEBPACK_IMPORTED_MODULE_0__.deserialize)((0,_serialize_js__WEBPACK_IMPORTED_MODULE_1__.serialize)(any, options)) : structuredClone(any) : (any, options)=>(0,_deserialize_js__WEBPACK_IMPORTED_MODULE_0__.deserialize)((0,_serialize_js__WEBPACK_IMPORTED_MODULE_1__.serialize)(any, options)));\n/* c8 ignore stop */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdW5nYXArc3RydWN0dXJlZC1jbG9uZUAxLjMuMC9ub2RlX21vZHVsZXMvQHVuZ2FwL3N0cnVjdHVyZWQtY2xvbmUvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNkM7QUFDSjtBQUV6Qzs7Q0FFQyxHQUVEOzs7Ozs7O0NBT0MsR0FDRCwrREFBZSxPQUFPRSxvQkFBb0IsYUFDeEMsbUJBQW1CLEdBQ25CLENBQUNDLEtBQUtDLFVBQ0pBLFdBQVksV0FBVUEsV0FBVyxXQUFXQSxPQUFNLElBQ2hESiw0REFBV0EsQ0FBQ0Msd0RBQVNBLENBQUNFLEtBQUtDLFlBQVlGLGdCQUFnQkMsT0FFM0QsQ0FBQ0EsS0FBS0MsVUFBWUosNERBQVdBLENBQUNDLHdEQUFTQSxDQUFDRSxLQUFLQyxTQUFTQSxFQUFDO0FBQ3ZELGtCQUFrQixHQUVZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdW5nYXArc3RydWN0dXJlZC1jbG9uZUAxLjMuMC9ub2RlX21vZHVsZXMvQHVuZ2FwL3N0cnVjdHVyZWQtY2xvbmUvZXNtL2luZGV4LmpzPzZlZmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtkZXNlcmlhbGl6ZX0gZnJvbSAnLi9kZXNlcmlhbGl6ZS5qcyc7XG5pbXBvcnQge3NlcmlhbGl6ZX0gZnJvbSAnLi9zZXJpYWxpemUuanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtBcnJheTxzdHJpbmcsYW55Pn0gUmVjb3JkIGEgdHlwZSByZXByZXNlbnRhdGlvblxuICovXG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBzZXJpYWxpemVkIFJlY29yZHMuXG4gKiBAcGFyYW0ge2FueX0gYW55IGEgc2VyaWFsaXphYmxlIHZhbHVlLlxuICogQHBhcmFtIHt7dHJhbnNmZXI/OiBhbnlbXSwganNvbj86IGJvb2xlYW4sIGxvc3N5PzogYm9vbGVhbn0/fSBvcHRpb25zIGFuIG9iamVjdCB3aXRoXG4gKiBhIHRyYW5zZmVyIG9wdGlvbiAoaWdub3JlZCB3aGVuIHBvbHlmaWxsZWQpIGFuZC9vciBub24gc3RhbmRhcmQgZmllbGRzIHRoYXRcbiAqIGZhbGxiYWNrIHRvIHRoZSBwb2x5ZmlsbCBpZiBwcmVzZW50LlxuICogQHJldHVybnMge1JlY29yZFtdfVxuICovXG5leHBvcnQgZGVmYXVsdCB0eXBlb2Ygc3RydWN0dXJlZENsb25lID09PSBcImZ1bmN0aW9uXCIgP1xuICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgKGFueSwgb3B0aW9ucykgPT4gKFxuICAgIG9wdGlvbnMgJiYgKCdqc29uJyBpbiBvcHRpb25zIHx8ICdsb3NzeScgaW4gb3B0aW9ucykgP1xuICAgICAgZGVzZXJpYWxpemUoc2VyaWFsaXplKGFueSwgb3B0aW9ucykpIDogc3RydWN0dXJlZENsb25lKGFueSlcbiAgKSA6XG4gIChhbnksIG9wdGlvbnMpID0+IGRlc2VyaWFsaXplKHNlcmlhbGl6ZShhbnksIG9wdGlvbnMpKTtcbiAgLyogYzggaWdub3JlIHN0b3AgKi9cblxuZXhwb3J0IHtkZXNlcmlhbGl6ZSwgc2VyaWFsaXplfTtcbiJdLCJuYW1lcyI6WyJkZXNlcmlhbGl6ZSIsInNlcmlhbGl6ZSIsInN0cnVjdHVyZWRDbG9uZSIsImFueSIsIm9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/serialize.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/serialize.js ***!
  \****************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serialize: function() { return /* binding */ serialize; }\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"(app-pages-browser)/./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/types.js\");\n\nconst EMPTY = \"\";\nconst { toString } = {};\nconst { keys } = Object;\nconst typeOf = (value)=>{\n    const type = typeof value;\n    if (type !== \"object\" || !value) return [\n        _types_js__WEBPACK_IMPORTED_MODULE_0__.PRIMITIVE,\n        type\n    ];\n    const asString = toString.call(value).slice(8, -1);\n    switch(asString){\n        case \"Array\":\n            return [\n                _types_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY,\n                EMPTY\n            ];\n        case \"Object\":\n            return [\n                _types_js__WEBPACK_IMPORTED_MODULE_0__.OBJECT,\n                EMPTY\n            ];\n        case \"Date\":\n            return [\n                _types_js__WEBPACK_IMPORTED_MODULE_0__.DATE,\n                EMPTY\n            ];\n        case \"RegExp\":\n            return [\n                _types_js__WEBPACK_IMPORTED_MODULE_0__.REGEXP,\n                EMPTY\n            ];\n        case \"Map\":\n            return [\n                _types_js__WEBPACK_IMPORTED_MODULE_0__.MAP,\n                EMPTY\n            ];\n        case \"Set\":\n            return [\n                _types_js__WEBPACK_IMPORTED_MODULE_0__.SET,\n                EMPTY\n            ];\n        case \"DataView\":\n            return [\n                _types_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY,\n                asString\n            ];\n    }\n    if (asString.includes(\"Array\")) return [\n        _types_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY,\n        asString\n    ];\n    if (asString.includes(\"Error\")) return [\n        _types_js__WEBPACK_IMPORTED_MODULE_0__.ERROR,\n        asString\n    ];\n    return [\n        _types_js__WEBPACK_IMPORTED_MODULE_0__.OBJECT,\n        asString\n    ];\n};\nconst shouldSkip = (param)=>{\n    let [TYPE, type] = param;\n    return TYPE === _types_js__WEBPACK_IMPORTED_MODULE_0__.PRIMITIVE && (type === \"function\" || type === \"symbol\");\n};\nconst serializer = (strict, json, $, _)=>{\n    const as = (out, value)=>{\n        const index = _.push(out) - 1;\n        $.set(value, index);\n        return index;\n    };\n    const pair = (value)=>{\n        if ($.has(value)) return $.get(value);\n        let [TYPE, type] = typeOf(value);\n        switch(TYPE){\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.PRIMITIVE:\n                {\n                    let entry = value;\n                    switch(type){\n                        case \"bigint\":\n                            TYPE = _types_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT;\n                            entry = value.toString();\n                            break;\n                        case \"function\":\n                        case \"symbol\":\n                            if (strict) throw new TypeError(\"unable to serialize \" + type);\n                            entry = null;\n                            break;\n                        case \"undefined\":\n                            return as([\n                                _types_js__WEBPACK_IMPORTED_MODULE_0__.VOID\n                            ], value);\n                    }\n                    return as([\n                        TYPE,\n                        entry\n                    ], value);\n                }\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY:\n                {\n                    if (type) {\n                        let spread = value;\n                        if (type === \"DataView\") {\n                            spread = new Uint8Array(value.buffer);\n                        } else if (type === \"ArrayBuffer\") {\n                            spread = new Uint8Array(value);\n                        }\n                        return as([\n                            type,\n                            [\n                                ...spread\n                            ]\n                        ], value);\n                    }\n                    const arr = [];\n                    const index = as([\n                        TYPE,\n                        arr\n                    ], value);\n                    for (const entry of value)arr.push(pair(entry));\n                    return index;\n                }\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.OBJECT:\n                {\n                    if (type) {\n                        switch(type){\n                            case \"BigInt\":\n                                return as([\n                                    type,\n                                    value.toString()\n                                ], value);\n                            case \"Boolean\":\n                            case \"Number\":\n                            case \"String\":\n                                return as([\n                                    type,\n                                    value.valueOf()\n                                ], value);\n                        }\n                    }\n                    if (json && \"toJSON\" in value) return pair(value.toJSON());\n                    const entries = [];\n                    const index = as([\n                        TYPE,\n                        entries\n                    ], value);\n                    for (const key of keys(value)){\n                        if (strict || !shouldSkip(typeOf(value[key]))) entries.push([\n                            pair(key),\n                            pair(value[key])\n                        ]);\n                    }\n                    return index;\n                }\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.DATE:\n                return as([\n                    TYPE,\n                    value.toISOString()\n                ], value);\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.REGEXP:\n                {\n                    const { source, flags } = value;\n                    return as([\n                        TYPE,\n                        {\n                            source,\n                            flags\n                        }\n                    ], value);\n                }\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.MAP:\n                {\n                    const entries = [];\n                    const index = as([\n                        TYPE,\n                        entries\n                    ], value);\n                    for (const [key, entry] of value){\n                        if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry)))) entries.push([\n                            pair(key),\n                            pair(entry)\n                        ]);\n                    }\n                    return index;\n                }\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.SET:\n                {\n                    const entries = [];\n                    const index = as([\n                        TYPE,\n                        entries\n                    ], value);\n                    for (const entry of value){\n                        if (strict || !shouldSkip(typeOf(entry))) entries.push(pair(entry));\n                    }\n                    return index;\n                }\n        }\n        const { message } = value;\n        return as([\n            TYPE,\n            {\n                name: type,\n                message\n            }\n        ], value);\n    };\n    return pair;\n};\n/**\n * @typedef {Array<string,any>} Record a type representation\n */ /**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */ const serialize = function(value) {\n    let { json, lossy } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const _ = [];\n    return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/serialize.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/types.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/types.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARRAY: function() { return /* binding */ ARRAY; },\n/* harmony export */   BIGINT: function() { return /* binding */ BIGINT; },\n/* harmony export */   DATE: function() { return /* binding */ DATE; },\n/* harmony export */   ERROR: function() { return /* binding */ ERROR; },\n/* harmony export */   MAP: function() { return /* binding */ MAP; },\n/* harmony export */   OBJECT: function() { return /* binding */ OBJECT; },\n/* harmony export */   PRIMITIVE: function() { return /* binding */ PRIMITIVE; },\n/* harmony export */   REGEXP: function() { return /* binding */ REGEXP; },\n/* harmony export */   SET: function() { return /* binding */ SET; },\n/* harmony export */   VOID: function() { return /* binding */ VOID; }\n/* harmony export */ });\nconst VOID = -1;\nconst PRIMITIVE = 0;\nconst ARRAY = 1;\nconst OBJECT = 2;\nconst DATE = 3;\nconst REGEXP = 4;\nconst MAP = 5;\nconst SET = 6;\nconst ERROR = 7;\nconst BIGINT = 8; // export const SYMBOL = 9;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdW5nYXArc3RydWN0dXJlZC1jbG9uZUAxLjMuMC9ub2RlX21vZHVsZXMvQHVuZ2FwL3N0cnVjdHVyZWQtY2xvbmUvZXNtL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBTyxNQUFNQSxPQUFhLENBQUMsRUFBRTtBQUN0QixNQUFNQyxZQUFhLEVBQUU7QUFDckIsTUFBTUMsUUFBYSxFQUFFO0FBQ3JCLE1BQU1DLFNBQWEsRUFBRTtBQUNyQixNQUFNQyxPQUFhLEVBQUU7QUFDckIsTUFBTUMsU0FBYSxFQUFFO0FBQ3JCLE1BQU1DLE1BQWEsRUFBRTtBQUNyQixNQUFNQyxNQUFhLEVBQUU7QUFDckIsTUFBTUMsUUFBYSxFQUFFO0FBQ3JCLE1BQU1DLFNBQWEsRUFBRSxDQUM1QiwyQkFBMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B1bmdhcCtzdHJ1Y3R1cmVkLWNsb25lQDEuMy4wL25vZGVfbW9kdWxlcy9AdW5nYXAvc3RydWN0dXJlZC1jbG9uZS9lc20vdHlwZXMuanM/YzFiZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgVk9JRCAgICAgICA9IC0xO1xuZXhwb3J0IGNvbnN0IFBSSU1JVElWRSAgPSAwO1xuZXhwb3J0IGNvbnN0IEFSUkFZICAgICAgPSAxO1xuZXhwb3J0IGNvbnN0IE9CSkVDVCAgICAgPSAyO1xuZXhwb3J0IGNvbnN0IERBVEUgICAgICAgPSAzO1xuZXhwb3J0IGNvbnN0IFJFR0VYUCAgICAgPSA0O1xuZXhwb3J0IGNvbnN0IE1BUCAgICAgICAgPSA1O1xuZXhwb3J0IGNvbnN0IFNFVCAgICAgICAgPSA2O1xuZXhwb3J0IGNvbnN0IEVSUk9SICAgICAgPSA3O1xuZXhwb3J0IGNvbnN0IEJJR0lOVCAgICAgPSA4O1xuLy8gZXhwb3J0IGNvbnN0IFNZTUJPTCA9IDk7XG4iXSwibmFtZXMiOlsiVk9JRCIsIlBSSU1JVElWRSIsIkFSUkFZIiwiT0JKRUNUIiwiREFURSIsIlJFR0VYUCIsIk1BUCIsIlNFVCIsIkVSUk9SIiwiQklHSU5UIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/types.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/bail@2.0.2/node_modules/bail/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/.pnpm/bail@2.0.2/node_modules/bail/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bail: function() { return /* binding */ bail; }\n/* harmony export */ });\n/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */ function bail(error) {\n    if (error) {\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9iYWlsQDIuMC4yL25vZGVfbW9kdWxlcy9iYWlsL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7O0NBTUMsR0FDTSxTQUFTQSxLQUFLQyxLQUFLO0lBQ3hCLElBQUlBLE9BQU87UUFDVCxNQUFNQTtJQUNSO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2JhaWxAMi4wLjIvbm9kZV9tb2R1bGVzL2JhaWwvaW5kZXguanM/M2IxZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRocm93IGEgZ2l2ZW4gZXJyb3IuXG4gKlxuICogQHBhcmFtIHtFcnJvcnxudWxsfHVuZGVmaW5lZH0gW2Vycm9yXVxuICogICBNYXliZSBlcnJvci5cbiAqIEByZXR1cm5zIHthc3NlcnRzIGVycm9yIGlzIG51bGx8dW5kZWZpbmVkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYmFpbChlcnJvcikge1xuICBpZiAoZXJyb3IpIHtcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG4iXSwibmFtZXMiOlsiYmFpbCIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/bail@2.0.2/node_modules/bail/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/comma-separated-tokens@2.0.3/node_modules/comma-separated-tokens/index.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/comma-separated-tokens@2.0.3/node_modules/comma-separated-tokens/index.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parse: function() { return /* binding */ parse; },\n/* harmony export */   stringify: function() { return /* binding */ stringify; }\n/* harmony export */ });\n/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */ /**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */ /**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */ function parse(value) {\n    /** @type {Array<string>} */ const tokens = [];\n    const input = String(value || \"\");\n    let index = input.indexOf(\",\");\n    let start = 0;\n    /** @type {boolean} */ let end = false;\n    while(!end){\n        if (index === -1) {\n            index = input.length;\n            end = true;\n        }\n        const token = input.slice(start, index).trim();\n        if (token || !end) {\n            tokens.push(token);\n        }\n        start = index + 1;\n        index = input.indexOf(\",\", start);\n    }\n    return tokens;\n}\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */ function stringify(values, options) {\n    const settings = options || {};\n    // Ensure the last empty entry is seen.\n    const input = values[values.length - 1] === \"\" ? [\n        ...values,\n        \"\"\n    ] : values;\n    return input.join((settings.padRight ? \" \" : \"\") + \",\" + (settings.padLeft === false ? \"\" : \" \")).trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb21tYS1zZXBhcmF0ZWQtdG9rZW5zQDIuMC4zL25vZGVfbW9kdWxlcy9jb21tYS1zZXBhcmF0ZWQtdG9rZW5zL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Q0FPQyxHQUVEOzs7Q0FHQyxHQUVEOzs7Ozs7O0NBT0MsR0FDTSxTQUFTQSxNQUFNQyxLQUFLO0lBQ3pCLDBCQUEwQixHQUMxQixNQUFNQyxTQUFTLEVBQUU7SUFDakIsTUFBTUMsUUFBUUMsT0FBT0gsU0FBUztJQUM5QixJQUFJSSxRQUFRRixNQUFNRyxPQUFPLENBQUM7SUFDMUIsSUFBSUMsUUFBUTtJQUNaLG9CQUFvQixHQUNwQixJQUFJQyxNQUFNO0lBRVYsTUFBTyxDQUFDQSxJQUFLO1FBQ1gsSUFBSUgsVUFBVSxDQUFDLEdBQUc7WUFDaEJBLFFBQVFGLE1BQU1NLE1BQU07WUFDcEJELE1BQU07UUFDUjtRQUVBLE1BQU1FLFFBQVFQLE1BQU1RLEtBQUssQ0FBQ0osT0FBT0YsT0FBT08sSUFBSTtRQUU1QyxJQUFJRixTQUFTLENBQUNGLEtBQUs7WUFDakJOLE9BQU9XLElBQUksQ0FBQ0g7UUFDZDtRQUVBSCxRQUFRRixRQUFRO1FBQ2hCQSxRQUFRRixNQUFNRyxPQUFPLENBQUMsS0FBS0M7SUFDN0I7SUFFQSxPQUFPTDtBQUNUO0FBRUE7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU1ksVUFBVUMsTUFBTSxFQUFFQyxPQUFPO0lBQ3ZDLE1BQU1DLFdBQVdELFdBQVcsQ0FBQztJQUU3Qix1Q0FBdUM7SUFDdkMsTUFBTWIsUUFBUVksTUFBTSxDQUFDQSxPQUFPTixNQUFNLEdBQUcsRUFBRSxLQUFLLEtBQUs7V0FBSU07UUFBUTtLQUFHLEdBQUdBO0lBRW5FLE9BQU9aLE1BQ0plLElBQUksQ0FDSCxDQUFDRCxTQUFTRSxRQUFRLEdBQUcsTUFBTSxFQUFDLElBQzFCLE1BQ0NGLENBQUFBLFNBQVNHLE9BQU8sS0FBSyxRQUFRLEtBQUssR0FBRSxHQUV4Q1IsSUFBSTtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb21tYS1zZXBhcmF0ZWQtdG9rZW5zQDIuMC4zL25vZGVfbW9kdWxlcy9jb21tYS1zZXBhcmF0ZWQtdG9rZW5zL2luZGV4LmpzP2IxZWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiBPcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24gZm9yIGBzdHJpbmdpZnlgLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbcGFkTGVmdD10cnVlXVxuICogICBXaGV0aGVyIHRvIHBhZCBhIHNwYWNlIGJlZm9yZSBhIHRva2VuLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbcGFkUmlnaHQ9ZmFsc2VdXG4gKiAgIFdoZXRoZXIgdG8gcGFkIGEgc3BhY2UgYWZ0ZXIgYSB0b2tlbi5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPcHRpb25zfSBTdHJpbmdpZnlPcHRpb25zXG4gKiAgIFBsZWFzZSB1c2UgYFN0cmluZ2lmeU9wdGlvbnNgIGluc3RlYWQuXG4gKi9cblxuLyoqXG4gKiBQYXJzZSBjb21tYS1zZXBhcmF0ZWQgdG9rZW5zIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogICBDb21tYS1zZXBhcmF0ZWQgdG9rZW5zLlxuICogQHJldHVybnMge0FycmF5PHN0cmluZz59XG4gKiAgIExpc3Qgb2YgdG9rZW5zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UodmFsdWUpIHtcbiAgLyoqIEB0eXBlIHtBcnJheTxzdHJpbmc+fSAqL1xuICBjb25zdCB0b2tlbnMgPSBbXVxuICBjb25zdCBpbnB1dCA9IFN0cmluZyh2YWx1ZSB8fCAnJylcbiAgbGV0IGluZGV4ID0gaW5wdXQuaW5kZXhPZignLCcpXG4gIGxldCBzdGFydCA9IDBcbiAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICBsZXQgZW5kID0gZmFsc2VcblxuICB3aGlsZSAoIWVuZCkge1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIGluZGV4ID0gaW5wdXQubGVuZ3RoXG4gICAgICBlbmQgPSB0cnVlXG4gICAgfVxuXG4gICAgY29uc3QgdG9rZW4gPSBpbnB1dC5zbGljZShzdGFydCwgaW5kZXgpLnRyaW0oKVxuXG4gICAgaWYgKHRva2VuIHx8ICFlbmQpIHtcbiAgICAgIHRva2Vucy5wdXNoKHRva2VuKVxuICAgIH1cblxuICAgIHN0YXJ0ID0gaW5kZXggKyAxXG4gICAgaW5kZXggPSBpbnB1dC5pbmRleE9mKCcsJywgc3RhcnQpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogU2VyaWFsaXplIGFuIGFycmF5IG9mIHN0cmluZ3Mgb3IgbnVtYmVycyB0byBjb21tYS1zZXBhcmF0ZWQgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfG51bWJlcj59IHZhbHVlc1xuICogICBMaXN0IG9mIHRva2Vucy5cbiAqIEBwYXJhbSB7T3B0aW9uc30gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gZm9yIGBzdHJpbmdpZnlgIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBDb21tYS1zZXBhcmF0ZWQgdG9rZW5zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlcywgb3B0aW9ucykge1xuICBjb25zdCBzZXR0aW5ncyA9IG9wdGlvbnMgfHwge31cblxuICAvLyBFbnN1cmUgdGhlIGxhc3QgZW1wdHkgZW50cnkgaXMgc2Vlbi5cbiAgY29uc3QgaW5wdXQgPSB2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdID09PSAnJyA/IFsuLi52YWx1ZXMsICcnXSA6IHZhbHVlc1xuXG4gIHJldHVybiBpbnB1dFxuICAgIC5qb2luKFxuICAgICAgKHNldHRpbmdzLnBhZFJpZ2h0ID8gJyAnIDogJycpICtcbiAgICAgICAgJywnICtcbiAgICAgICAgKHNldHRpbmdzLnBhZExlZnQgPT09IGZhbHNlID8gJycgOiAnICcpXG4gICAgKVxuICAgIC50cmltKClcbn1cbiJdLCJuYW1lcyI6WyJwYXJzZSIsInZhbHVlIiwidG9rZW5zIiwiaW5wdXQiLCJTdHJpbmciLCJpbmRleCIsImluZGV4T2YiLCJzdGFydCIsImVuZCIsImxlbmd0aCIsInRva2VuIiwic2xpY2UiLCJ0cmltIiwicHVzaCIsInN0cmluZ2lmeSIsInZhbHVlcyIsIm9wdGlvbnMiLCJzZXR0aW5ncyIsImpvaW4iLCJwYWRSaWdodCIsInBhZExlZnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/comma-separated-tokens@2.0.3/node_modules/comma-separated-tokens/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/decode-named-character-reference@1.1.0/node_modules/decode-named-character-reference/index.dom.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/decode-named-character-reference@1.1.0/node_modules/decode-named-character-reference/index.dom.js ***!
  \******************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeNamedCharacterReference: function() { return /* binding */ decodeNamedCharacterReference; }\n/* harmony export */ });\n/// <reference lib=\"dom\" />\n/* eslint-env browser */ const element = document.createElement(\"i\");\n/**\n * @param {string} value\n * @returns {string | false}\n */ function decodeNamedCharacterReference(value) {\n    const characterReference = \"&\" + value + \";\";\n    element.innerHTML = characterReference;\n    const character = element.textContent;\n    // Some named character references do not require the closing semicolon\n    // (`&not`, for instance), which leads to situations where parsing the assumed\n    // named reference of `&notit;` will result in the string `¬it;`.\n    // When we encounter a trailing semicolon after parsing, and the character\n    // reference to decode was not a semicolon (`&semi;`), we can assume that the\n    // matching was not complete.\n    if (// @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */  && value !== \"semi\") {\n        return false;\n    }\n    // If the decoded string is equal to the input, the character reference was\n    // not valid.\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    return character === characterReference ? false : character;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9kZWNvZGUtbmFtZWQtY2hhcmFjdGVyLXJlZmVyZW5jZUAxLjEuMC9ub2RlX21vZHVsZXMvZGVjb2RlLW5hbWVkLWNoYXJhY3Rlci1yZWZlcmVuY2UvaW5kZXguZG9tLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQkFBMkI7QUFFM0Isc0JBQXNCLEdBRXRCLE1BQU1BLFVBQVVDLFNBQVNDLGFBQWEsQ0FBQztBQUV2Qzs7O0NBR0MsR0FDTSxTQUFTQyw4QkFBOEJDLEtBQUs7SUFDakQsTUFBTUMscUJBQXFCLE1BQU1ELFFBQVE7SUFDekNKLFFBQVFNLFNBQVMsR0FBR0Q7SUFDcEIsTUFBTUUsWUFBWVAsUUFBUVEsV0FBVztJQUVyQyx1RUFBdUU7SUFDdkUsOEVBQThFO0lBQzlFLGlFQUFpRTtJQUNqRSwwRUFBMEU7SUFDMUUsNkVBQTZFO0lBQzdFLDZCQUE2QjtJQUM3QixJQUNFLDJFQUEyRTtJQUMzRSxnQkFBZ0I7SUFDaEJELFVBQVVFLFVBQVUsQ0FBQ0YsVUFBVUcsTUFBTSxHQUFHLE9BQU8sR0FBRyxPQUFPLE9BQ3pETixVQUFVLFFBQ1Y7UUFDQSxPQUFPO0lBQ1Q7SUFFQSwyRUFBMkU7SUFDM0UsYUFBYTtJQUNiLDJFQUEyRTtJQUMzRSxnQkFBZ0I7SUFDaEIsT0FBT0csY0FBY0YscUJBQXFCLFFBQVFFO0FBQ3BEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9kZWNvZGUtbmFtZWQtY2hhcmFjdGVyLXJlZmVyZW5jZUAxLjEuMC9ub2RlX21vZHVsZXMvZGVjb2RlLW5hbWVkLWNoYXJhY3Rlci1yZWZlcmVuY2UvaW5kZXguZG9tLmpzPzllMmIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbmNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJylcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHtzdHJpbmcgfCBmYWxzZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZU5hbWVkQ2hhcmFjdGVyUmVmZXJlbmNlKHZhbHVlKSB7XG4gIGNvbnN0IGNoYXJhY3RlclJlZmVyZW5jZSA9ICcmJyArIHZhbHVlICsgJzsnXG4gIGVsZW1lbnQuaW5uZXJIVE1MID0gY2hhcmFjdGVyUmVmZXJlbmNlXG4gIGNvbnN0IGNoYXJhY3RlciA9IGVsZW1lbnQudGV4dENvbnRlbnRcblxuICAvLyBTb21lIG5hbWVkIGNoYXJhY3RlciByZWZlcmVuY2VzIGRvIG5vdCByZXF1aXJlIHRoZSBjbG9zaW5nIHNlbWljb2xvblxuICAvLyAoYCZub3RgLCBmb3IgaW5zdGFuY2UpLCB3aGljaCBsZWFkcyB0byBzaXR1YXRpb25zIHdoZXJlIHBhcnNpbmcgdGhlIGFzc3VtZWRcbiAgLy8gbmFtZWQgcmVmZXJlbmNlIG9mIGAmbm90aXQ7YCB3aWxsIHJlc3VsdCBpbiB0aGUgc3RyaW5nIGDCrGl0O2AuXG4gIC8vIFdoZW4gd2UgZW5jb3VudGVyIGEgdHJhaWxpbmcgc2VtaWNvbG9uIGFmdGVyIHBhcnNpbmcsIGFuZCB0aGUgY2hhcmFjdGVyXG4gIC8vIHJlZmVyZW5jZSB0byBkZWNvZGUgd2FzIG5vdCBhIHNlbWljb2xvbiAoYCZzZW1pO2ApLCB3ZSBjYW4gYXNzdW1lIHRoYXQgdGhlXG4gIC8vIG1hdGNoaW5nIHdhcyBub3QgY29tcGxldGUuXG4gIGlmIChcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBUeXBlU2NyaXB0IGlzIHdyb25nIHRoYXQgYHRleHRDb250ZW50YCBvbiBlbGVtZW50cyBjYW5cbiAgICAvLyB5aWVsZCBgbnVsbGAuXG4gICAgY2hhcmFjdGVyLmNoYXJDb2RlQXQoY2hhcmFjdGVyLmxlbmd0aCAtIDEpID09PSA1OSAvKiBgO2AgKi8gJiZcbiAgICB2YWx1ZSAhPT0gJ3NlbWknXG4gICkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gSWYgdGhlIGRlY29kZWQgc3RyaW5nIGlzIGVxdWFsIHRvIHRoZSBpbnB1dCwgdGhlIGNoYXJhY3RlciByZWZlcmVuY2Ugd2FzXG4gIC8vIG5vdCB2YWxpZC5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvcjogVHlwZVNjcmlwdCBpcyB3cm9uZyB0aGF0IGB0ZXh0Q29udGVudGAgb24gZWxlbWVudHMgY2FuXG4gIC8vIHlpZWxkIGBudWxsYC5cbiAgcmV0dXJuIGNoYXJhY3RlciA9PT0gY2hhcmFjdGVyUmVmZXJlbmNlID8gZmFsc2UgOiBjaGFyYWN0ZXJcbn1cbiJdLCJuYW1lcyI6WyJlbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZGVjb2RlTmFtZWRDaGFyYWN0ZXJSZWZlcmVuY2UiLCJ2YWx1ZSIsImNoYXJhY3RlclJlZmVyZW5jZSIsImlubmVySFRNTCIsImNoYXJhY3RlciIsInRleHRDb250ZW50IiwiY2hhckNvZGVBdCIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/decode-named-character-reference@1.1.0/node_modules/decode-named-character-reference/index.dom.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/dequal@2.0.3/node_modules/dequal/dist/index.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/dequal@2.0.3/node_modules/dequal/dist/index.mjs ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dequal: function() { return /* binding */ dequal; }\n/* harmony export */ });\nvar has = Object.prototype.hasOwnProperty;\nfunction find(iter, tar, key) {\n    for (key of iter.keys()){\n        if (dequal(key, tar)) return key;\n    }\n}\nfunction dequal(foo, bar) {\n    var ctor, len, tmp;\n    if (foo === bar) return true;\n    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {\n        if (ctor === Date) return foo.getTime() === bar.getTime();\n        if (ctor === RegExp) return foo.toString() === bar.toString();\n        if (ctor === Array) {\n            if ((len = foo.length) === bar.length) {\n                while(len-- && dequal(foo[len], bar[len]));\n            }\n            return len === -1;\n        }\n        if (ctor === Set) {\n            if (foo.size !== bar.size) {\n                return false;\n            }\n            for (len of foo){\n                tmp = len;\n                if (tmp && typeof tmp === \"object\") {\n                    tmp = find(bar, tmp);\n                    if (!tmp) return false;\n                }\n                if (!bar.has(tmp)) return false;\n            }\n            return true;\n        }\n        if (ctor === Map) {\n            if (foo.size !== bar.size) {\n                return false;\n            }\n            for (len of foo){\n                tmp = len[0];\n                if (tmp && typeof tmp === \"object\") {\n                    tmp = find(bar, tmp);\n                    if (!tmp) return false;\n                }\n                if (!dequal(len[1], bar.get(tmp))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        if (ctor === ArrayBuffer) {\n            foo = new Uint8Array(foo);\n            bar = new Uint8Array(bar);\n        } else if (ctor === DataView) {\n            if ((len = foo.byteLength) === bar.byteLength) {\n                while(len-- && foo.getInt8(len) === bar.getInt8(len));\n            }\n            return len === -1;\n        }\n        if (ArrayBuffer.isView(foo)) {\n            if ((len = foo.byteLength) === bar.byteLength) {\n                while(len-- && foo[len] === bar[len]);\n            }\n            return len === -1;\n        }\n        if (!ctor || typeof foo === \"object\") {\n            len = 0;\n            for(ctor in foo){\n                if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n                if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n            }\n            return Object.keys(bar).length === len;\n        }\n    }\n    return foo !== foo && bar !== bar;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9kZXF1YWxAMi4wLjMvbm9kZV9tb2R1bGVzL2RlcXVhbC9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsTUFBTUMsT0FBT0MsU0FBUyxDQUFDQyxjQUFjO0FBRXpDLFNBQVNDLEtBQUtDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxHQUFHO0lBQzNCLEtBQUtBLE9BQU9GLEtBQUtHLElBQUksR0FBSTtRQUN4QixJQUFJQyxPQUFPRixLQUFLRCxNQUFNLE9BQU9DO0lBQzlCO0FBQ0Q7QUFFTyxTQUFTRSxPQUFPQyxHQUFHLEVBQUVDLEdBQUc7SUFDOUIsSUFBSUMsTUFBTUMsS0FBS0M7SUFDZixJQUFJSixRQUFRQyxLQUFLLE9BQU87SUFFeEIsSUFBSUQsT0FBT0MsT0FBTyxDQUFDQyxPQUFLRixJQUFJSyxXQUFXLE1BQU1KLElBQUlJLFdBQVcsRUFBRTtRQUM3RCxJQUFJSCxTQUFTSSxNQUFNLE9BQU9OLElBQUlPLE9BQU8sT0FBT04sSUFBSU0sT0FBTztRQUN2RCxJQUFJTCxTQUFTTSxRQUFRLE9BQU9SLElBQUlTLFFBQVEsT0FBT1IsSUFBSVEsUUFBUTtRQUUzRCxJQUFJUCxTQUFTUSxPQUFPO1lBQ25CLElBQUksQ0FBQ1AsTUFBSUgsSUFBSVcsTUFBTSxNQUFNVixJQUFJVSxNQUFNLEVBQUU7Z0JBQ3BDLE1BQU9SLFNBQVNKLE9BQU9DLEdBQUcsQ0FBQ0csSUFBSSxFQUFFRixHQUFHLENBQUNFLElBQUk7WUFDMUM7WUFDQSxPQUFPQSxRQUFRLENBQUM7UUFDakI7UUFFQSxJQUFJRCxTQUFTVSxLQUFLO1lBQ2pCLElBQUlaLElBQUlhLElBQUksS0FBS1osSUFBSVksSUFBSSxFQUFFO2dCQUMxQixPQUFPO1lBQ1I7WUFDQSxLQUFLVixPQUFPSCxJQUFLO2dCQUNoQkksTUFBTUQ7Z0JBQ04sSUFBSUMsT0FBTyxPQUFPQSxRQUFRLFVBQVU7b0JBQ25DQSxNQUFNVixLQUFLTyxLQUFLRztvQkFDaEIsSUFBSSxDQUFDQSxLQUFLLE9BQU87Z0JBQ2xCO2dCQUNBLElBQUksQ0FBQ0gsSUFBSVgsR0FBRyxDQUFDYyxNQUFNLE9BQU87WUFDM0I7WUFDQSxPQUFPO1FBQ1I7UUFFQSxJQUFJRixTQUFTWSxLQUFLO1lBQ2pCLElBQUlkLElBQUlhLElBQUksS0FBS1osSUFBSVksSUFBSSxFQUFFO2dCQUMxQixPQUFPO1lBQ1I7WUFDQSxLQUFLVixPQUFPSCxJQUFLO2dCQUNoQkksTUFBTUQsR0FBRyxDQUFDLEVBQUU7Z0JBQ1osSUFBSUMsT0FBTyxPQUFPQSxRQUFRLFVBQVU7b0JBQ25DQSxNQUFNVixLQUFLTyxLQUFLRztvQkFDaEIsSUFBSSxDQUFDQSxLQUFLLE9BQU87Z0JBQ2xCO2dCQUNBLElBQUksQ0FBQ0wsT0FBT0ksR0FBRyxDQUFDLEVBQUUsRUFBRUYsSUFBSWMsR0FBRyxDQUFDWCxPQUFPO29CQUNsQyxPQUFPO2dCQUNSO1lBQ0Q7WUFDQSxPQUFPO1FBQ1I7UUFFQSxJQUFJRixTQUFTYyxhQUFhO1lBQ3pCaEIsTUFBTSxJQUFJaUIsV0FBV2pCO1lBQ3JCQyxNQUFNLElBQUlnQixXQUFXaEI7UUFDdEIsT0FBTyxJQUFJQyxTQUFTZ0IsVUFBVTtZQUM3QixJQUFJLENBQUNmLE1BQUlILElBQUltQixVQUFVLE1BQU1sQixJQUFJa0IsVUFBVSxFQUFFO2dCQUM1QyxNQUFPaEIsU0FBU0gsSUFBSW9CLE9BQU8sQ0FBQ2pCLFNBQVNGLElBQUltQixPQUFPLENBQUNqQjtZQUNsRDtZQUNBLE9BQU9BLFFBQVEsQ0FBQztRQUNqQjtRQUVBLElBQUlhLFlBQVlLLE1BQU0sQ0FBQ3JCLE1BQU07WUFDNUIsSUFBSSxDQUFDRyxNQUFJSCxJQUFJbUIsVUFBVSxNQUFNbEIsSUFBSWtCLFVBQVUsRUFBRTtnQkFDNUMsTUFBT2hCLFNBQVNILEdBQUcsQ0FBQ0csSUFBSSxLQUFLRixHQUFHLENBQUNFLElBQUk7WUFDdEM7WUFDQSxPQUFPQSxRQUFRLENBQUM7UUFDakI7UUFFQSxJQUFJLENBQUNELFFBQVEsT0FBT0YsUUFBUSxVQUFVO1lBQ3JDRyxNQUFNO1lBQ04sSUFBS0QsUUFBUUYsSUFBSztnQkFDakIsSUFBSVYsSUFBSWdDLElBQUksQ0FBQ3RCLEtBQUtFLFNBQVMsRUFBRUMsT0FBTyxDQUFDYixJQUFJZ0MsSUFBSSxDQUFDckIsS0FBS0MsT0FBTyxPQUFPO2dCQUNqRSxJQUFJLENBQUVBLENBQUFBLFFBQVFELEdBQUUsS0FBTSxDQUFDRixPQUFPQyxHQUFHLENBQUNFLEtBQUssRUFBRUQsR0FBRyxDQUFDQyxLQUFLLEdBQUcsT0FBTztZQUM3RDtZQUNBLE9BQU9YLE9BQU9PLElBQUksQ0FBQ0csS0FBS1UsTUFBTSxLQUFLUjtRQUNwQztJQUNEO0lBRUEsT0FBT0gsUUFBUUEsT0FBT0MsUUFBUUE7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2RlcXVhbEAyLjAuMy9ub2RlX21vZHVsZXMvZGVxdWFsL2Rpc3QvaW5kZXgubWpzPzQzMzIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGZpbmQoaXRlciwgdGFyLCBrZXkpIHtcblx0Zm9yIChrZXkgb2YgaXRlci5rZXlzKCkpIHtcblx0XHRpZiAoZGVxdWFsKGtleSwgdGFyKSkgcmV0dXJuIGtleTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVxdWFsKGZvbywgYmFyKSB7XG5cdHZhciBjdG9yLCBsZW4sIHRtcDtcblx0aWYgKGZvbyA9PT0gYmFyKSByZXR1cm4gdHJ1ZTtcblxuXHRpZiAoZm9vICYmIGJhciAmJiAoY3Rvcj1mb28uY29uc3RydWN0b3IpID09PSBiYXIuY29uc3RydWN0b3IpIHtcblx0XHRpZiAoY3RvciA9PT0gRGF0ZSkgcmV0dXJuIGZvby5nZXRUaW1lKCkgPT09IGJhci5nZXRUaW1lKCk7XG5cdFx0aWYgKGN0b3IgPT09IFJlZ0V4cCkgcmV0dXJuIGZvby50b1N0cmluZygpID09PSBiYXIudG9TdHJpbmcoKTtcblxuXHRcdGlmIChjdG9yID09PSBBcnJheSkge1xuXHRcdFx0aWYgKChsZW49Zm9vLmxlbmd0aCkgPT09IGJhci5sZW5ndGgpIHtcblx0XHRcdFx0d2hpbGUgKGxlbi0tICYmIGRlcXVhbChmb29bbGVuXSwgYmFyW2xlbl0pKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBsZW4gPT09IC0xO1xuXHRcdH1cblxuXHRcdGlmIChjdG9yID09PSBTZXQpIHtcblx0XHRcdGlmIChmb28uc2l6ZSAhPT0gYmFyLnNpemUpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yIChsZW4gb2YgZm9vKSB7XG5cdFx0XHRcdHRtcCA9IGxlbjtcblx0XHRcdFx0aWYgKHRtcCAmJiB0eXBlb2YgdG1wID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRcdHRtcCA9IGZpbmQoYmFyLCB0bXApO1xuXHRcdFx0XHRcdGlmICghdG1wKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFiYXIuaGFzKHRtcCkpIHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGlmIChjdG9yID09PSBNYXApIHtcblx0XHRcdGlmIChmb28uc2l6ZSAhPT0gYmFyLnNpemUpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yIChsZW4gb2YgZm9vKSB7XG5cdFx0XHRcdHRtcCA9IGxlblswXTtcblx0XHRcdFx0aWYgKHRtcCAmJiB0eXBlb2YgdG1wID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRcdHRtcCA9IGZpbmQoYmFyLCB0bXApO1xuXHRcdFx0XHRcdGlmICghdG1wKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFkZXF1YWwobGVuWzFdLCBiYXIuZ2V0KHRtcCkpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoY3RvciA9PT0gQXJyYXlCdWZmZXIpIHtcblx0XHRcdGZvbyA9IG5ldyBVaW50OEFycmF5KGZvbyk7XG5cdFx0XHRiYXIgPSBuZXcgVWludDhBcnJheShiYXIpO1xuXHRcdH0gZWxzZSBpZiAoY3RvciA9PT0gRGF0YVZpZXcpIHtcblx0XHRcdGlmICgobGVuPWZvby5ieXRlTGVuZ3RoKSA9PT0gYmFyLmJ5dGVMZW5ndGgpIHtcblx0XHRcdFx0d2hpbGUgKGxlbi0tICYmIGZvby5nZXRJbnQ4KGxlbikgPT09IGJhci5nZXRJbnQ4KGxlbikpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGxlbiA9PT0gLTE7XG5cdFx0fVxuXG5cdFx0aWYgKEFycmF5QnVmZmVyLmlzVmlldyhmb28pKSB7XG5cdFx0XHRpZiAoKGxlbj1mb28uYnl0ZUxlbmd0aCkgPT09IGJhci5ieXRlTGVuZ3RoKSB7XG5cdFx0XHRcdHdoaWxlIChsZW4tLSAmJiBmb29bbGVuXSA9PT0gYmFyW2xlbl0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGxlbiA9PT0gLTE7XG5cdFx0fVxuXG5cdFx0aWYgKCFjdG9yIHx8IHR5cGVvZiBmb28gPT09ICdvYmplY3QnKSB7XG5cdFx0XHRsZW4gPSAwO1xuXHRcdFx0Zm9yIChjdG9yIGluIGZvbykge1xuXHRcdFx0XHRpZiAoaGFzLmNhbGwoZm9vLCBjdG9yKSAmJiArK2xlbiAmJiAhaGFzLmNhbGwoYmFyLCBjdG9yKSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZiAoIShjdG9yIGluIGJhcikgfHwgIWRlcXVhbChmb29bY3Rvcl0sIGJhcltjdG9yXSkpIHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBPYmplY3Qua2V5cyhiYXIpLmxlbmd0aCA9PT0gbGVuO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmb28gIT09IGZvbyAmJiBiYXIgIT09IGJhcjtcbn1cbiJdLCJuYW1lcyI6WyJoYXMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImZpbmQiLCJpdGVyIiwidGFyIiwia2V5Iiwia2V5cyIsImRlcXVhbCIsImZvbyIsImJhciIsImN0b3IiLCJsZW4iLCJ0bXAiLCJjb25zdHJ1Y3RvciIsIkRhdGUiLCJnZXRUaW1lIiwiUmVnRXhwIiwidG9TdHJpbmciLCJBcnJheSIsImxlbmd0aCIsIlNldCIsInNpemUiLCJNYXAiLCJnZXQiLCJBcnJheUJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJEYXRhVmlldyIsImJ5dGVMZW5ndGgiLCJnZXRJbnQ4IiwiaXNWaWV3IiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/dequal@2.0.3/node_modules/dequal/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deprecate: function() { return /* binding */ deprecate; },\n/* harmony export */   equal: function() { return /* binding */ equal; },\n/* harmony export */   ok: function() { return /* binding */ ok; },\n/* harmony export */   unreachable: function() { return /* binding */ unreachable; }\n/* harmony export */ });\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dequal */ \"(app-pages-browser)/./node_modules/.pnpm/dequal@2.0.3/node_modules/dequal/dist/index.mjs\");\n\n/**\n * @type {Set<string>}\n */ const codesWarned = new Set();\nclass AssertionError extends Error {\n    /**\n   * Create an assertion error.\n   *\n   * @param {string} message\n   *   Message explaining error.\n   * @param {unknown} actual\n   *   Value.\n   * @param {unknown} expected\n   *   Baseline.\n   * @param {string} operator\n   *   Name of equality operation.\n   * @param {boolean} generated\n   *   Whether `message` is a custom message or not\n   * @returns\n   *   Instance.\n   */ // eslint-disable-next-line max-params\n    constructor(message, actual, expected, operator, generated){\n        super(message);\n        this.name = /** @type {const} */ \"Assertion\";\n        this.code = /** @type {const} */ \"ERR_ASSERTION\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        /**\n     * @type {unknown}\n     */ this.actual = actual;\n        /**\n     * @type {unknown}\n     */ this.expected = expected;\n        /**\n     * @type {boolean}\n     */ this.generated = generated;\n        /**\n     * @type {string}\n     */ this.operator = operator;\n    }\n}\nclass DeprecationError extends Error {\n    /**\n   * Create a deprecation message.\n   *\n   * @param {string} message\n   *   Message explaining deprecation.\n   * @param {string | undefined} code\n   *   Deprecation identifier; deprecation messages will be generated only once per code.\n   * @returns\n   *   Instance.\n   */ constructor(message, code){\n        super(message);\n        this.name = /** @type {const} */ \"DeprecationWarning\";\n        /**\n     * @type {string | undefined}\n     */ this.code = code;\n    }\n}\n/**\n * Wrap a function or class to show a deprecation message when first called.\n *\n * > 👉 **Important**: only shows a message when the `development` condition is\n * > used, does nothing in production.\n *\n * When the resulting wrapped `fn` is called, emits a warning once to\n * `console.error` (`stderr`).\n * If a code is given, one warning message will be emitted in total per code.\n *\n * @template {Function} T\n *   Function or class kind.\n * @param {T} fn\n *   Function or class.\n * @param {string} message\n *   Message explaining deprecation.\n * @param {string | null | undefined} [code]\n *   Deprecation identifier (optional); deprecation messages will be generated\n *   only once per code.\n * @returns {T}\n *   Wrapped `fn`.\n */ function deprecate(fn, message, code) {\n    let warned = false;\n    // The wrapper will keep the same prototype as fn to maintain prototype chain\n    Object.setPrototypeOf(deprecated, fn);\n    // @ts-expect-error: it’s perfect, typescript…\n    return deprecated;\n    /**\n   * @this {unknown}\n   * @param  {...Array<unknown>} args\n   * @returns {unknown}\n   */ function deprecated() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (!warned) {\n            warned = true;\n            if (typeof code === \"string\" && codesWarned.has(code)) {\n            // Empty.\n            } else {\n                console.error(new DeprecationError(message, code || undefined));\n                if (typeof code === \"string\") codesWarned.add(code);\n            }\n        }\n        return new.target ? Reflect.construct(fn, args, new.target) : Reflect.apply(fn, this, args);\n    }\n}\n/**\n * Assert deep strict equivalence.\n *\n * > 👉 **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @template {unknown} T\n *   Expected kind.\n * @param {unknown} actual\n *   Value.\n * @param {T} expected\n *   Baseline.\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Expected values to be deeply equal'`).\n * @returns {asserts actual is T}\n *   Nothing; throws when `actual` is not deep strict equal to `expected`.\n * @throws {AssertionError}\n *   Throws when `actual` is not deep strict equal to `expected`.\n */ function equal(actual, expected, message) {\n    assert((0,dequal__WEBPACK_IMPORTED_MODULE_0__.dequal)(actual, expected), actual, expected, \"equal\", \"Expected values to be deeply equal\", message);\n}\n/**\n * Assert if `value` is truthy.\n *\n * > 👉 **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @param {unknown} value\n *   Value to assert.\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Expected value to be truthy'`).\n * @returns {asserts value}\n *   Nothing; throws when `value` is falsey.\n * @throws {AssertionError}\n *   Throws when `value` is falsey.\n */ function ok(value, message) {\n    assert(Boolean(value), false, true, \"ok\", \"Expected value to be truthy\", message);\n}\n/**\n * Assert that a code path never happens.\n *\n * > 👉 **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Unreachable'`).\n * @returns {never}\n *   Nothing; always throws.\n * @throws {AssertionError}\n *   Throws when `value` is falsey.\n */ function unreachable(message) {\n    assert(false, false, true, \"ok\", \"Unreachable\", message);\n}\n/**\n * @param {boolean} bool\n *   Whether to skip this operation.\n * @param {unknown} actual\n *   Actual value.\n * @param {unknown} expected\n *   Expected value.\n * @param {string} operator\n *   Operator.\n * @param {string} defaultMessage\n *   Default message for operation.\n * @param {Error | string | null | undefined} userMessage\n *   User-provided message.\n * @returns {asserts bool}\n *   Nothing; throws when falsey.\n */ // eslint-disable-next-line max-params\nfunction assert(bool, actual, expected, operator, defaultMessage, userMessage) {\n    if (!bool) {\n        throw userMessage instanceof Error ? userMessage : new AssertionError(userMessage || defaultMessage, actual, expected, operator, !userMessage);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js ***!
  \**************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cont: function() { return /* binding */ cont; },\n/* harmony export */   name: function() { return /* binding */ name; },\n/* harmony export */   start: function() { return /* binding */ start; }\n/* harmony export */ });\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */ const startRe = RegExp(\"[$_\\\\p{ID_Start}]\", \"u\");\nconst contRe = RegExp(\"[$_\\\\u{200C}\\\\u{200D}\\\\p{ID_Continue}]\", \"u\");\nconst contReJsx = RegExp(\"[-$_\\\\u{200C}\\\\u{200D}\\\\p{ID_Continue}]\", \"u\");\nconst nameRe = RegExp(\"^[$_\\\\p{ID_Start}][$_\\\\u{200C}\\\\u{200D}\\\\p{ID_Continue}]*$\", \"u\");\nconst nameReJsx = RegExp(\"^[$_\\\\p{ID_Start}][-$_\\\\u{200C}\\\\u{200D}\\\\p{ID_Continue}]*$\", \"u\");\n/** @type {Options} */ const emptyOptions = {};\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */ // Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nfunction start(code) {\n    return code ? startRe.test(String.fromCodePoint(code)) : false;\n}\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */ // Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nfunction cont(code, options) {\n    const settings = options || emptyOptions;\n    const re = settings.jsx ? contReJsx : contRe;\n    return code ? re.test(String.fromCodePoint(code)) : false;\n}\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */ function name(name, options) {\n    const settings = options || emptyOptions;\n    const re = settings.jsx ? nameReJsx : nameRe;\n    return re.test(name);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9lc3RyZWUtdXRpbC1pcy1pZGVudGlmaWVyLW5hbWVAMy4wLjAvbm9kZV9tb2R1bGVzL2VzdHJlZS11dGlsLWlzLWlkZW50aWZpZXItbmFtZS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7O0NBS0MsR0FFRCxNQUFNQSxVQUFVO0FBQ2hCLE1BQU1DLFNBQVM7QUFDZixNQUFNQyxZQUFZO0FBQ2xCLE1BQU1DLFNBQVM7QUFDZixNQUFNQyxZQUFZO0FBRWxCLG9CQUFvQixHQUNwQixNQUFNQyxlQUFlLENBQUM7QUFFdEI7Ozs7Ozs7Q0FPQyxHQUNELG1GQUFtRjtBQUM1RSxTQUFTQyxNQUFNQyxJQUFJO0lBQ3hCLE9BQU9BLE9BQU9QLFFBQVFRLElBQUksQ0FBQ0MsT0FBT0MsYUFBYSxDQUFDSCxTQUFTO0FBQzNEO0FBRUE7Ozs7Ozs7OztDQVNDLEdBQ0QsbUZBQW1GO0FBQzVFLFNBQVNJLEtBQUtKLElBQUksRUFBRUssT0FBTztJQUNoQyxNQUFNQyxXQUFXRCxXQUFXUDtJQUM1QixNQUFNUyxLQUFLRCxTQUFTRSxHQUFHLEdBQUdiLFlBQVlEO0lBQ3RDLE9BQU9NLE9BQU9PLEdBQUdOLElBQUksQ0FBQ0MsT0FBT0MsYUFBYSxDQUFDSCxTQUFTO0FBQ3REO0FBRUE7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU1MsS0FBS0EsSUFBSSxFQUFFSixPQUFPO0lBQ2hDLE1BQU1DLFdBQVdELFdBQVdQO0lBQzVCLE1BQU1TLEtBQUtELFNBQVNFLEdBQUcsR0FBR1gsWUFBWUQ7SUFDdEMsT0FBT1csR0FBR04sSUFBSSxDQUFDUTtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vZXN0cmVlLXV0aWwtaXMtaWRlbnRpZmllci1uYW1lQDMuMC4wL25vZGVfbW9kdWxlcy9lc3RyZWUtdXRpbC1pcy1pZGVudGlmaWVyLW5hbWUvbGliL2luZGV4LmpzP2U1MjAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiBPcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24uXG4gKiBAcHJvcGVydHkge2Jvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkfSBbanN4PWZhbHNlXVxuICogICBTdXBwb3J0IEpTWCBpZGVudGlmaWVycyAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuY29uc3Qgc3RhcnRSZSA9IC9bJF9cXHB7SURfU3RhcnR9XS91XG5jb25zdCBjb250UmUgPSAvWyRfXFx1ezIwMEN9XFx1ezIwMER9XFxwe0lEX0NvbnRpbnVlfV0vdVxuY29uc3QgY29udFJlSnN4ID0gL1stJF9cXHV7MjAwQ31cXHV7MjAwRH1cXHB7SURfQ29udGludWV9XS91XG5jb25zdCBuYW1lUmUgPSAvXlskX1xccHtJRF9TdGFydH1dWyRfXFx1ezIwMEN9XFx1ezIwMER9XFxwe0lEX0NvbnRpbnVlfV0qJC91XG5jb25zdCBuYW1lUmVKc3ggPSAvXlskX1xccHtJRF9TdGFydH1dWy0kX1xcdXsyMDBDfVxcdXsyMDBEfVxccHtJRF9Db250aW51ZX1dKiQvdVxuXG4vKiogQHR5cGUge09wdGlvbnN9ICovXG5jb25zdCBlbXB0eU9wdGlvbnMgPSB7fVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gY29kZSBwb2ludCBjYW4gc3RhcnQgYW4gaWRlbnRpZmllci5cbiAqXG4gKiBAcGFyYW0ge251bWJlciB8IHVuZGVmaW5lZH0gY29kZVxuICogICBDb2RlIHBvaW50IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgYGNvZGVgIGNhbiBzdGFydCBhbiBpZGVudGlmaWVyLlxuICovXG4vLyBOb3RlOiBgdW5kZWZpbmVkYCBpcyBzdXBwb3J0ZWQgc28geW91IGNhbiBwYXNzIHRoZSByZXN1bHQgZnJvbSBgJycuY29kZVBvaW50QXRgLlxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUgPyBzdGFydFJlLnRlc3QoU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZSkpIDogZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGNvZGUgcG9pbnQgY2FuIGNvbnRpbnVlIGFuIGlkZW50aWZpZXIuXG4gKlxuICogQHBhcmFtIHtudW1iZXIgfCB1bmRlZmluZWR9IGNvZGVcbiAqICAgQ29kZSBwb2ludCB0byBjaGVjay5cbiAqIEBwYXJhbSB7T3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqICAgV2hldGhlciBgY29kZWAgY2FuIGNvbnRpbnVlIGFuIGlkZW50aWZpZXIuXG4gKi9cbi8vIE5vdGU6IGB1bmRlZmluZWRgIGlzIHN1cHBvcnRlZCBzbyB5b3UgY2FuIHBhc3MgdGhlIHJlc3VsdCBmcm9tIGAnJy5jb2RlUG9pbnRBdGAuXG5leHBvcnQgZnVuY3Rpb24gY29udChjb2RlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHNldHRpbmdzID0gb3B0aW9ucyB8fCBlbXB0eU9wdGlvbnNcbiAgY29uc3QgcmUgPSBzZXR0aW5ncy5qc3ggPyBjb250UmVKc3ggOiBjb250UmVcbiAgcmV0dXJuIGNvZGUgPyByZS50ZXN0KFN0cmluZy5mcm9tQ29kZVBvaW50KGNvZGUpKSA6IGZhbHNlXG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIHZhbGlkIGlkZW50aWZpZXIgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogICBJZGVudGlmaWVyIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogICBXaGV0aGVyIGBuYW1lYCBjYW4gYmUgYW4gaWRlbnRpZmllci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5hbWUobmFtZSwgb3B0aW9ucykge1xuICBjb25zdCBzZXR0aW5ncyA9IG9wdGlvbnMgfHwgZW1wdHlPcHRpb25zXG4gIGNvbnN0IHJlID0gc2V0dGluZ3MuanN4ID8gbmFtZVJlSnN4IDogbmFtZVJlXG4gIHJldHVybiByZS50ZXN0KG5hbWUpXG59XG4iXSwibmFtZXMiOlsic3RhcnRSZSIsImNvbnRSZSIsImNvbnRSZUpzeCIsIm5hbWVSZSIsIm5hbWVSZUpzeCIsImVtcHR5T3B0aW9ucyIsInN0YXJ0IiwiY29kZSIsInRlc3QiLCJTdHJpbmciLCJmcm9tQ29kZVBvaW50IiwiY29udCIsIm9wdGlvbnMiLCJzZXR0aW5ncyIsInJlIiwianN4IiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/hast-util-to-jsx-runtime@2.3.6/node_modules/hast-util-to-jsx-runtime/lib/index.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hast-util-to-jsx-runtime@2.3.6/node_modules/hast-util-to-jsx-runtime/lib/index.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toJsxRuntime: function() { return /* binding */ toJsxRuntime; }\n/* harmony export */ });\n/* harmony import */ var comma_separated_tokens__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! comma-separated-tokens */ \"(app-pages-browser)/./node_modules/.pnpm/comma-separated-tokens@2.0.3/node_modules/comma-separated-tokens/index.js\");\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(app-pages-browser)/./node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js\");\n/* harmony import */ var hast_util_whitespace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hast-util-whitespace */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/lib/index.js\");\n/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! property-information */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/index.js\");\n/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! property-information */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/find.js\");\n/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! property-information */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/hast-to-react.js\");\n/* harmony import */ var space_separated_tokens__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! space-separated-tokens */ \"(app-pages-browser)/./node_modules/.pnpm/space-separated-tokens@2.0.2/node_modules/space-separated-tokens/index.js\");\n/* harmony import */ var style_to_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! style-to-js */ \"(app-pages-browser)/./node_modules/.pnpm/style-to-js@1.1.16/node_modules/style-to-js/cjs/index.js\");\n/* harmony import */ var unist_util_position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! unist-util-position */ \"(app-pages-browser)/./node_modules/.pnpm/unist-util-position@5.0.0/node_modules/unist-util-position/lib/index.js\");\n/* harmony import */ var vfile_message__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! vfile-message */ \"(app-pages-browser)/./node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.js\");\n/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */ \n\n\n\n\n\n\n\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty;\n/** @type {Map<string, number>} */ const emptyMap = new Map();\nconst cap = /[A-Z]/g;\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set([\n    \"table\",\n    \"tbody\",\n    \"thead\",\n    \"tfoot\",\n    \"tr\"\n]);\nconst tableCellElement = new Set([\n    \"td\",\n    \"th\"\n]);\nconst docs = \"https://github.com/syntax-tree/hast-util-to-jsx-runtime\";\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */ function toJsxRuntime(tree, options) {\n    if (!options || options.Fragment === undefined) {\n        throw new TypeError(\"Expected `Fragment` in options\");\n    }\n    const filePath = options.filePath || undefined;\n    /** @type {Create} */ let create;\n    if (options.development) {\n        if (typeof options.jsxDEV !== \"function\") {\n            throw new TypeError(\"Expected `jsxDEV` in options when `development: true`\");\n        }\n        create = developmentCreate(filePath, options.jsxDEV);\n    } else {\n        if (typeof options.jsx !== \"function\") {\n            throw new TypeError(\"Expected `jsx` in production options\");\n        }\n        if (typeof options.jsxs !== \"function\") {\n            throw new TypeError(\"Expected `jsxs` in production options\");\n        }\n        create = productionCreate(filePath, options.jsx, options.jsxs);\n    }\n    /** @type {State} */ const state = {\n        Fragment: options.Fragment,\n        ancestors: [],\n        components: options.components || {},\n        create,\n        elementAttributeNameCase: options.elementAttributeNameCase || \"react\",\n        evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n        filePath,\n        ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n        passKeys: options.passKeys !== false,\n        passNode: options.passNode || false,\n        schema: options.space === \"svg\" ? property_information__WEBPACK_IMPORTED_MODULE_1__.svg : property_information__WEBPACK_IMPORTED_MODULE_1__.html,\n        stylePropertyNameCase: options.stylePropertyNameCase || \"dom\",\n        tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n    };\n    const result = one(state, tree, undefined);\n    // JSX element.\n    if (result && typeof result !== \"string\") {\n        return result;\n    }\n    // Text node or something that turned into nothing.\n    return state.create(tree, state.Fragment, {\n        children: result || undefined\n    }, undefined);\n}\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */ function one(state, node, key) {\n    if (node.type === \"element\") {\n        return element(state, node, key);\n    }\n    if (node.type === \"mdxFlowExpression\" || node.type === \"mdxTextExpression\") {\n        return mdxExpression(state, node);\n    }\n    if (node.type === \"mdxJsxFlowElement\" || node.type === \"mdxJsxTextElement\") {\n        return mdxJsxElement(state, node, key);\n    }\n    if (node.type === \"mdxjsEsm\") {\n        return mdxEsm(state, node);\n    }\n    if (node.type === \"root\") {\n        return root(state, node, key);\n    }\n    if (node.type === \"text\") {\n        return text(state, node);\n    }\n}\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */ function element(state, node, key) {\n    const parentSchema = state.schema;\n    let schema = parentSchema;\n    if (node.tagName.toLowerCase() === \"svg\" && parentSchema.space === \"html\") {\n        schema = property_information__WEBPACK_IMPORTED_MODULE_1__.svg;\n        state.schema = schema;\n    }\n    state.ancestors.push(node);\n    const type = findComponentFromName(state, node.tagName, false);\n    const props = createElementProps(state, node);\n    let children = createChildren(state, node);\n    if (tableElements.has(node.tagName)) {\n        children = children.filter(function(child) {\n            return typeof child === \"string\" ? !(0,hast_util_whitespace__WEBPACK_IMPORTED_MODULE_2__.whitespace)(child) : true;\n        });\n    }\n    addNode(state, props, type, node);\n    addChildren(props, children);\n    // Restore.\n    state.ancestors.pop();\n    state.schema = parentSchema;\n    return state.create(node, type, props, key);\n}\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */ function mdxExpression(state, node) {\n    if (node.data && node.data.estree && state.evaluater) {\n        const program = node.data.estree;\n        const expression = program.body[0];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(expression.type === \"ExpressionStatement\");\n        // Assume result is a child.\n        return /** @type {Child | undefined} */ state.evaluater.evaluateExpression(expression.expression);\n    }\n    crashEstree(state, node.position);\n}\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */ function mdxEsm(state, node) {\n    if (node.data && node.data.estree && state.evaluater) {\n        // Assume result is a child.\n        return /** @type {Child | undefined} */ state.evaluater.evaluateProgram(node.data.estree);\n    }\n    crashEstree(state, node.position);\n}\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */ function mdxJsxElement(state, node, key) {\n    const parentSchema = state.schema;\n    let schema = parentSchema;\n    if (node.name === \"svg\" && parentSchema.space === \"html\") {\n        schema = property_information__WEBPACK_IMPORTED_MODULE_1__.svg;\n        state.schema = schema;\n    }\n    state.ancestors.push(node);\n    const type = node.name === null ? state.Fragment : findComponentFromName(state, node.name, true);\n    const props = createJsxElementProps(state, node);\n    const children = createChildren(state, node);\n    addNode(state, props, type, node);\n    addChildren(props, children);\n    // Restore.\n    state.ancestors.pop();\n    state.schema = parentSchema;\n    return state.create(node, type, props, key);\n}\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */ function root(state, node, key) {\n    /** @type {Props} */ const props = {};\n    addChildren(props, createChildren(state, node));\n    return state.create(node, state.Fragment, props, key);\n}\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */ function text(_, node) {\n    return node.value;\n}\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */ function addNode(state, props, type, node) {\n    // If this is swapped out for a component:\n    if (typeof type !== \"string\" && type !== state.Fragment && state.passNode) {\n        props.node = node;\n    }\n}\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */ function addChildren(props, children) {\n    if (children.length > 0) {\n        const value = children.length > 1 ? children : children[0];\n        if (value) {\n            props.children = value;\n        }\n    }\n}\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */ function productionCreate(_, jsx, jsxs) {\n    return create;\n    /** @type {Create} */ function create(_, type, props, key) {\n        // Only an array when there are 2 or more children.\n        const isStaticChildren = Array.isArray(props.children);\n        const fn = isStaticChildren ? jsxs : jsx;\n        return key ? fn(type, props, key) : fn(type, props);\n    }\n}\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */ function developmentCreate(filePath, jsxDEV) {\n    return create;\n    /** @type {Create} */ function create(node, type, props, key) {\n        // Only an array when there are 2 or more children.\n        const isStaticChildren = Array.isArray(props.children);\n        const point = (0,unist_util_position__WEBPACK_IMPORTED_MODULE_4__.pointStart)(node);\n        return jsxDEV(type, props, key, isStaticChildren, {\n            columnNumber: point ? point.column - 1 : undefined,\n            fileName: filePath,\n            lineNumber: point ? point.line : undefined\n        }, undefined);\n    }\n}\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */ function createElementProps(state, node) {\n    /** @type {Props} */ const props = {};\n    /** @type {string | undefined} */ let alignValue;\n    /** @type {string} */ let prop;\n    for(prop in node.properties){\n        if (prop !== \"children\" && own.call(node.properties, prop)) {\n            const result = createProperty(state, prop, node.properties[prop]);\n            if (result) {\n                const [key, value] = result;\n                if (state.tableCellAlignToStyle && key === \"align\" && typeof value === \"string\" && tableCellElement.has(node.tagName)) {\n                    alignValue = value;\n                } else {\n                    props[key] = value;\n                }\n            }\n        }\n    }\n    if (alignValue) {\n        // Assume style is an object.\n        const style = /** @type {Style} */ props.style || (props.style = {});\n        style[state.stylePropertyNameCase === \"css\" ? \"text-align\" : \"textAlign\"] = alignValue;\n    }\n    return props;\n}\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */ function createJsxElementProps(state, node) {\n    /** @type {Props} */ const props = {};\n    for (const attribute of node.attributes){\n        if (attribute.type === \"mdxJsxExpressionAttribute\") {\n            if (attribute.data && attribute.data.estree && state.evaluater) {\n                const program = attribute.data.estree;\n                const expression = program.body[0];\n                (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(expression.type === \"ExpressionStatement\");\n                const objectExpression = expression.expression;\n                (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(objectExpression.type === \"ObjectExpression\");\n                const property = objectExpression.properties[0];\n                (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(property.type === \"SpreadElement\");\n                Object.assign(props, state.evaluater.evaluateExpression(property.argument));\n            } else {\n                crashEstree(state, node.position);\n            }\n        } else {\n            // For JSX, the author is responsible of passing in the correct values.\n            const name = attribute.name;\n            /** @type {unknown} */ let value;\n            if (attribute.value && typeof attribute.value === \"object\") {\n                if (attribute.value.data && attribute.value.data.estree && state.evaluater) {\n                    const program = attribute.value.data.estree;\n                    const expression = program.body[0];\n                    (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(expression.type === \"ExpressionStatement\");\n                    value = state.evaluater.evaluateExpression(expression.expression);\n                } else {\n                    crashEstree(state, node.position);\n                }\n            } else {\n                value = attribute.value === null ? true : attribute.value;\n            }\n            // Assume a prop.\n            props[name] = /** @type {Props[keyof Props]} */ value;\n        }\n    }\n    return props;\n}\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */ function createChildren(state, node) {\n    /** @type {Array<Child>} */ const children = [];\n    let index = -1;\n    /** @type {Map<string, number>} */ // Note: test this when Solid doesn’t want to merge my upcoming PR.\n    /* c8 ignore next */ const countsByName = state.passKeys ? new Map() : emptyMap;\n    while(++index < node.children.length){\n        const child = node.children[index];\n        /** @type {string | undefined} */ let key;\n        if (state.passKeys) {\n            const name = child.type === \"element\" ? child.tagName : child.type === \"mdxJsxFlowElement\" || child.type === \"mdxJsxTextElement\" ? child.name : undefined;\n            if (name) {\n                const count = countsByName.get(name) || 0;\n                key = name + \"-\" + count;\n                countsByName.set(name, count + 1);\n            }\n        }\n        const result = one(state, child, key);\n        if (result !== undefined) children.push(result);\n    }\n    return children;\n}\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */ function createProperty(state, prop, value) {\n    const info = (0,property_information__WEBPACK_IMPORTED_MODULE_5__.find)(state.schema, prop);\n    // Ignore nullish and `NaN` values.\n    if (value === null || value === undefined || typeof value === \"number\" && Number.isNaN(value)) {\n        return;\n    }\n    if (Array.isArray(value)) {\n        // Accept `array`.\n        // Most props are space-separated.\n        value = info.commaSeparated ? (0,comma_separated_tokens__WEBPACK_IMPORTED_MODULE_6__.stringify)(value) : (0,space_separated_tokens__WEBPACK_IMPORTED_MODULE_7__.stringify)(value);\n    }\n    // React only accepts `style` as object.\n    if (info.property === \"style\") {\n        let styleObject = typeof value === \"object\" ? value : parseStyle(state, String(value));\n        if (state.stylePropertyNameCase === \"css\") {\n            styleObject = transformStylesToCssCasing(styleObject);\n        }\n        return [\n            \"style\",\n            styleObject\n        ];\n    }\n    return [\n        state.elementAttributeNameCase === \"react\" && info.space ? property_information__WEBPACK_IMPORTED_MODULE_8__.hastToReact[info.property] || info.property : info.attribute,\n        value\n    ];\n}\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */ function parseStyle(state, value) {\n    try {\n        return style_to_js__WEBPACK_IMPORTED_MODULE_0__(value, {\n            reactCompat: true\n        });\n    } catch (error) {\n        if (state.ignoreInvalidStyle) {\n            return {};\n        }\n        const cause = /** @type {Error} */ error;\n        const message = new vfile_message__WEBPACK_IMPORTED_MODULE_9__.VFileMessage(\"Cannot parse `style` attribute\", {\n            ancestors: state.ancestors,\n            cause,\n            ruleId: \"style\",\n            source: \"hast-util-to-jsx-runtime\"\n        });\n        message.file = state.filePath || undefined;\n        message.url = docs + \"#cannot-parse-style-attribute\";\n        throw message;\n    }\n}\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */ function findComponentFromName(state, name, allowExpression) {\n    /** @type {Identifier | Literal | MemberExpression} */ let result;\n    if (!allowExpression) {\n        result = {\n            type: \"Literal\",\n            value: name\n        };\n    } else if (name.includes(\".\")) {\n        const identifiers = name.split(\".\");\n        let index = -1;\n        /** @type {Identifier | Literal | MemberExpression | undefined} */ let node;\n        while(++index < identifiers.length){\n            /** @type {Identifier | Literal} */ const prop = (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_10__.name)(identifiers[index]) ? {\n                type: \"Identifier\",\n                name: identifiers[index]\n            } : {\n                type: \"Literal\",\n                value: identifiers[index]\n            };\n            node = node ? {\n                type: \"MemberExpression\",\n                object: node,\n                property: prop,\n                computed: Boolean(index && prop.type === \"Literal\"),\n                optional: false\n            } : prop;\n        }\n        (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(node, \"always a result\");\n        result = node;\n    } else {\n        result = (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_10__.name)(name) && !/^[a-z]/.test(name) ? {\n            type: \"Identifier\",\n            name\n        } : {\n            type: \"Literal\",\n            value: name\n        };\n    }\n    // Only literals can be passed in `components` currently.\n    // No identifiers / member expressions.\n    if (result.type === \"Literal\") {\n        const name = /** @type {string | number} */ result.value;\n        return own.call(state.components, name) ? state.components[name] : name;\n    }\n    // Assume component.\n    if (state.evaluater) {\n        return state.evaluater.evaluateExpression(result);\n    }\n    crashEstree(state);\n}\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */ function crashEstree(state, place) {\n    const message = new vfile_message__WEBPACK_IMPORTED_MODULE_9__.VFileMessage(\"Cannot handle MDX estrees without `createEvaluater`\", {\n        ancestors: state.ancestors,\n        place,\n        ruleId: \"mdx-estree\",\n        source: \"hast-util-to-jsx-runtime\"\n    });\n    message.file = state.filePath || undefined;\n    message.url = docs + \"#cannot-handle-mdx-estrees-without-createevaluater\";\n    throw message;\n}\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */ function transformStylesToCssCasing(domCasing) {\n    /** @type {Style} */ const cssCasing = {};\n    /** @type {string} */ let from;\n    for(from in domCasing){\n        if (own.call(domCasing, from)) {\n            cssCasing[transformStyleToCssCasing(from)] = domCasing[from];\n        }\n    }\n    return cssCasing;\n}\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */ function transformStyleToCssCasing(from) {\n    let to = from.replace(cap, toDash);\n    // Handle `ms-xxx` -> `-ms-xxx`.\n    if (to.slice(0, 3) === \"ms-\") to = \"-\" + to;\n    return to;\n}\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */ function toDash($0) {\n    return \"-\" + $0.toLowerCase();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/hast-util-to-jsx-runtime@2.3.6/node_modules/hast-util-to-jsx-runtime/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/lib/index.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/lib/index.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   whitespace: function() { return /* binding */ whitespace; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Nodes} Nodes\n */ // HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g;\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */ function whitespace(thing) {\n    return typeof thing === \"object\" ? thing.type === \"text\" ? empty(thing.value) : false : empty(thing);\n}\n/**\n * @param {string} value\n * @returns {boolean}\n */ function empty(value) {\n    return value.replace(re, \"\") === \"\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9oYXN0LXV0aWwtd2hpdGVzcGFjZUAzLjAuMC9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXdoaXRlc3BhY2UvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUVELDhCQUE4QjtBQUM5Qix5REFBeUQ7QUFDekQsTUFBTUEsS0FBSztBQUVYOzs7Ozs7Ozs7O0NBVUMsR0FDTSxTQUFTQyxXQUFXQyxLQUFLO0lBQzlCLE9BQU8sT0FBT0EsVUFBVSxXQUNwQkEsTUFBTUMsSUFBSSxLQUFLLFNBQ2JDLE1BQU1GLE1BQU1HLEtBQUssSUFDakIsUUFDRkQsTUFBTUY7QUFDWjtBQUVBOzs7Q0FHQyxHQUNELFNBQVNFLE1BQU1DLEtBQUs7SUFDbEIsT0FBT0EsTUFBTUMsT0FBTyxDQUFDTixJQUFJLFFBQVE7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2hhc3QtdXRpbC13aGl0ZXNwYWNlQDMuMC4wL25vZGVfbW9kdWxlcy9oYXN0LXV0aWwtd2hpdGVzcGFjZS9saWIvaW5kZXguanM/Zjk5OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Ob2Rlc30gTm9kZXNcbiAqL1xuXG4vLyBIVE1MIHdoaXRlc3BhY2UgZXhwcmVzc2lvbi5cbi8vIFNlZSA8aHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI2FzY2lpLXdoaXRlc3BhY2U+LlxuY29uc3QgcmUgPSAvWyBcXHRcXG5cXGZcXHJdL2dcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgKmludGVyLWVsZW1lbnQgd2hpdGVzcGFjZSouXG4gKlxuICogQHBhcmFtIHtOb2RlcyB8IHN0cmluZ30gdGhpbmdcbiAqICAgVGhpbmcgdG8gY2hlY2sgKGBOb2RlYCBvciBgc3RyaW5nYCkuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqICAgV2hldGhlciB0aGUgYHZhbHVlYCBpcyBpbnRlci1lbGVtZW50IHdoaXRlc3BhY2UgKGBib29sZWFuYCk6IGNvbnNpc3Rpbmcgb2ZcbiAqICAgemVybyBvciBtb3JlIG9mIHNwYWNlLCB0YWIgKGBcXHRgKSwgbGluZSBmZWVkIChgXFxuYCksIGNhcnJpYWdlIHJldHVyblxuICogICAoYFxccmApLCBvciBmb3JtIGZlZWQgKGBcXGZgKTsgaWYgYSBub2RlIGlzIHBhc3NlZCBpdCBtdXN0IGJlIGEgYFRleHRgIG5vZGUsXG4gKiAgIHdob3NlIGB2YWx1ZWAgZmllbGQgaXMgY2hlY2tlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdoaXRlc3BhY2UodGhpbmcpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCdcbiAgICA/IHRoaW5nLnR5cGUgPT09ICd0ZXh0J1xuICAgICAgPyBlbXB0eSh0aGluZy52YWx1ZSlcbiAgICAgIDogZmFsc2VcbiAgICA6IGVtcHR5KHRoaW5nKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGVtcHR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKHJlLCAnJykgPT09ICcnXG59XG4iXSwibmFtZXMiOlsicmUiLCJ3aGl0ZXNwYWNlIiwidGhpbmciLCJ0eXBlIiwiZW1wdHkiLCJ2YWx1ZSIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/html-url-attributes@3.0.1/node_modules/html-url-attributes/lib/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/html-url-attributes@3.0.1/node_modules/html-url-attributes/lib/index.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   urlAttributes: function() { return /* binding */ urlAttributes; }\n/* harmony export */ });\n/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */ const urlAttributes = {\n    action: [\n        \"form\"\n    ],\n    cite: [\n        \"blockquote\",\n        \"del\",\n        \"ins\",\n        \"q\"\n    ],\n    data: [\n        \"object\"\n    ],\n    formAction: [\n        \"button\",\n        \"input\"\n    ],\n    href: [\n        \"a\",\n        \"area\",\n        \"base\",\n        \"link\"\n    ],\n    icon: [\n        \"menuitem\"\n    ],\n    itemId: null,\n    manifest: [\n        \"html\"\n    ],\n    ping: [\n        \"a\",\n        \"area\"\n    ],\n    poster: [\n        \"video\"\n    ],\n    src: [\n        \"audio\",\n        \"embed\",\n        \"iframe\",\n        \"img\",\n        \"input\",\n        \"script\",\n        \"source\",\n        \"track\",\n        \"video\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9odG1sLXVybC1hdHRyaWJ1dGVzQDMuMC4xL25vZGVfbW9kdWxlcy9odG1sLXVybC1hdHRyaWJ1dGVzL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Q0FPQyxHQUNNLE1BQU1BLGdCQUFnQjtJQUMzQkMsUUFBUTtRQUFDO0tBQU87SUFDaEJDLE1BQU07UUFBQztRQUFjO1FBQU87UUFBTztLQUFJO0lBQ3ZDQyxNQUFNO1FBQUM7S0FBUztJQUNoQkMsWUFBWTtRQUFDO1FBQVU7S0FBUTtJQUMvQkMsTUFBTTtRQUFDO1FBQUs7UUFBUTtRQUFRO0tBQU87SUFDbkNDLE1BQU07UUFBQztLQUFXO0lBQ2xCQyxRQUFRO0lBQ1JDLFVBQVU7UUFBQztLQUFPO0lBQ2xCQyxNQUFNO1FBQUM7UUFBSztLQUFPO0lBQ25CQyxRQUFRO1FBQUM7S0FBUTtJQUNqQkMsS0FBSztRQUNIO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNEO0FBQ0gsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vaHRtbC11cmwtYXR0cmlidXRlc0AzLjAuMS9ub2RlX21vZHVsZXMvaHRtbC11cmwtYXR0cmlidXRlcy9saWIvaW5kZXguanM/NTBhOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhUTUwgVVJMIHByb3BlcnRpZXMuXG4gKlxuICogRWFjaCBrZXkgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBlYWNoIHZhbHVlIGlzIGEgbGlzdCBvZiB0YWcgbmFtZXMgaXQgYXBwbGllc1xuICogdG8gb3IgYG51bGxgIGlmIGl0IGFwcGxpZXMgdG8gYWxsIGVsZW1lbnRzLlxuICpcbiAqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBBcnJheTxzdHJpbmc+IHwgbnVsbD59XG4gKi9cbmV4cG9ydCBjb25zdCB1cmxBdHRyaWJ1dGVzID0ge1xuICBhY3Rpb246IFsnZm9ybSddLFxuICBjaXRlOiBbJ2Jsb2NrcXVvdGUnLCAnZGVsJywgJ2lucycsICdxJ10sXG4gIGRhdGE6IFsnb2JqZWN0J10sXG4gIGZvcm1BY3Rpb246IFsnYnV0dG9uJywgJ2lucHV0J10sXG4gIGhyZWY6IFsnYScsICdhcmVhJywgJ2Jhc2UnLCAnbGluayddLFxuICBpY29uOiBbJ21lbnVpdGVtJ10sXG4gIGl0ZW1JZDogbnVsbCxcbiAgbWFuaWZlc3Q6IFsnaHRtbCddLFxuICBwaW5nOiBbJ2EnLCAnYXJlYSddLFxuICBwb3N0ZXI6IFsndmlkZW8nXSxcbiAgc3JjOiBbXG4gICAgJ2F1ZGlvJyxcbiAgICAnZW1iZWQnLFxuICAgICdpZnJhbWUnLFxuICAgICdpbWcnLFxuICAgICdpbnB1dCcsXG4gICAgJ3NjcmlwdCcsXG4gICAgJ3NvdXJjZScsXG4gICAgJ3RyYWNrJyxcbiAgICAndmlkZW8nXG4gIF1cbn1cbiJdLCJuYW1lcyI6WyJ1cmxBdHRyaWJ1dGVzIiwiYWN0aW9uIiwiY2l0ZSIsImRhdGEiLCJmb3JtQWN0aW9uIiwiaHJlZiIsImljb24iLCJpdGVtSWQiLCJtYW5pZmVzdCIsInBpbmciLCJwb3N0ZXIiLCJzcmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/html-url-attributes@3.0.1/node_modules/html-url-attributes/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ isPlainObject; }\n/* harmony export */ });\nfunction isPlainObject(value) {\n    if (typeof value !== \"object\" || value === null) {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(value);\n    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9pcy1wbGFpbi1vYmpANC4xLjAvbm9kZV9tb2R1bGVzL2lzLXBsYWluLW9iai9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWUsU0FBU0EsY0FBY0MsS0FBSztJQUMxQyxJQUFJLE9BQU9BLFVBQVUsWUFBWUEsVUFBVSxNQUFNO1FBQ2hELE9BQU87SUFDUjtJQUVBLE1BQU1DLFlBQVlDLE9BQU9DLGNBQWMsQ0FBQ0g7SUFDeEMsT0FBTyxDQUFDQyxjQUFjLFFBQVFBLGNBQWNDLE9BQU9ELFNBQVMsSUFBSUMsT0FBT0MsY0FBYyxDQUFDRixlQUFlLElBQUcsS0FBTSxDQUFFRyxDQUFBQSxPQUFPQyxXQUFXLElBQUlMLEtBQUksS0FBTSxDQUFFSSxDQUFBQSxPQUFPRSxRQUFRLElBQUlOLEtBQUk7QUFDMUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2lzLXBsYWluLW9iakA0LjEuMC9ub2RlX21vZHVsZXMvaXMtcGxhaW4tb2JqL2luZGV4LmpzPzllMDUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuXHRpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGNvbnN0IHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XG5cdHJldHVybiAocHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbCkgJiYgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIHZhbHVlKTtcbn1cbiJdLCJuYW1lcyI6WyJpc1BsYWluT2JqZWN0IiwidmFsdWUiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiaXRlcmF0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-from-markdown@2.0.2/node_modules/mdast-util-from-markdown/dev/lib/index.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-from-markdown@2.0.2/node_modules/mdast-util-from-markdown/dev/lib/index.js ***!
  \******************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromMarkdown: function() { return /* binding */ fromMarkdown; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var mdast_util_to_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! mdast-util-to-string */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-string@4.0.0/node_modules/mdast-util-to-string/lib/index.js\");\n/* harmony import */ var micromark__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/postprocess.js\");\n/* harmony import */ var micromark__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/parse.js\");\n/* harmony import */ var micromark__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/preprocess.js\");\n/* harmony import */ var micromark_util_decode_numeric_character_reference__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! micromark-util-decode-numeric-character-reference */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-decode-numeric-character-reference@2.0.2/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js\");\n/* harmony import */ var micromark_util_decode_string__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! micromark-util-decode-string */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-decode-string@2.0.1/node_modules/micromark-util-decode-string/dev/index.js\");\n/* harmony import */ var micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! micromark-util-normalize-identifier */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-normalize-identifier@2.0.1/node_modules/micromark-util-normalize-identifier/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var decode_named_character_reference__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! decode-named-character-reference */ \"(app-pages-browser)/./node_modules/.pnpm/decode-named-character-reference@1.1.0/node_modules/decode-named-character-reference/index.dom.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! unist-util-stringify-position */ \"(app-pages-browser)/./node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js\");\n/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */ \n\n\n\n\n\n\n\n\nconst own = {}.hasOwnProperty;\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */ function fromMarkdown(value, encoding, options) {\n    if (typeof encoding !== \"string\") {\n        options = encoding;\n        encoding = undefined;\n    }\n    return compiler(options)((0,micromark__WEBPACK_IMPORTED_MODULE_0__.postprocess)((0,micromark__WEBPACK_IMPORTED_MODULE_1__.parse)(options).document().write((0,micromark__WEBPACK_IMPORTED_MODULE_2__.preprocess)()(value, encoding, true))));\n}\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */ function compiler(options) {\n    /** @type {Config} */ const config = {\n        transforms: [],\n        canContainEols: [\n            \"emphasis\",\n            \"fragment\",\n            \"heading\",\n            \"paragraph\",\n            \"strong\"\n        ],\n        enter: {\n            autolink: opener(link),\n            autolinkProtocol: onenterdata,\n            autolinkEmail: onenterdata,\n            atxHeading: opener(heading),\n            blockQuote: opener(blockQuote),\n            characterEscape: onenterdata,\n            characterReference: onenterdata,\n            codeFenced: opener(codeFlow),\n            codeFencedFenceInfo: buffer,\n            codeFencedFenceMeta: buffer,\n            codeIndented: opener(codeFlow, buffer),\n            codeText: opener(codeText, buffer),\n            codeTextData: onenterdata,\n            data: onenterdata,\n            codeFlowValue: onenterdata,\n            definition: opener(definition),\n            definitionDestinationString: buffer,\n            definitionLabelString: buffer,\n            definitionTitleString: buffer,\n            emphasis: opener(emphasis),\n            hardBreakEscape: opener(hardBreak),\n            hardBreakTrailing: opener(hardBreak),\n            htmlFlow: opener(html, buffer),\n            htmlFlowData: onenterdata,\n            htmlText: opener(html, buffer),\n            htmlTextData: onenterdata,\n            image: opener(image),\n            label: buffer,\n            link: opener(link),\n            listItem: opener(listItem),\n            listItemValue: onenterlistitemvalue,\n            listOrdered: opener(list, onenterlistordered),\n            listUnordered: opener(list),\n            paragraph: opener(paragraph),\n            reference: onenterreference,\n            referenceString: buffer,\n            resourceDestinationString: buffer,\n            resourceTitleString: buffer,\n            setextHeading: opener(heading),\n            strong: opener(strong),\n            thematicBreak: opener(thematicBreak)\n        },\n        exit: {\n            atxHeading: closer(),\n            atxHeadingSequence: onexitatxheadingsequence,\n            autolink: closer(),\n            autolinkEmail: onexitautolinkemail,\n            autolinkProtocol: onexitautolinkprotocol,\n            blockQuote: closer(),\n            characterEscapeValue: onexitdata,\n            characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n            characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n            characterReferenceValue: onexitcharacterreferencevalue,\n            characterReference: onexitcharacterreference,\n            codeFenced: closer(onexitcodefenced),\n            codeFencedFence: onexitcodefencedfence,\n            codeFencedFenceInfo: onexitcodefencedfenceinfo,\n            codeFencedFenceMeta: onexitcodefencedfencemeta,\n            codeFlowValue: onexitdata,\n            codeIndented: closer(onexitcodeindented),\n            codeText: closer(onexitcodetext),\n            codeTextData: onexitdata,\n            data: onexitdata,\n            definition: closer(),\n            definitionDestinationString: onexitdefinitiondestinationstring,\n            definitionLabelString: onexitdefinitionlabelstring,\n            definitionTitleString: onexitdefinitiontitlestring,\n            emphasis: closer(),\n            hardBreakEscape: closer(onexithardbreak),\n            hardBreakTrailing: closer(onexithardbreak),\n            htmlFlow: closer(onexithtmlflow),\n            htmlFlowData: onexitdata,\n            htmlText: closer(onexithtmltext),\n            htmlTextData: onexitdata,\n            image: closer(onexitimage),\n            label: onexitlabel,\n            labelText: onexitlabeltext,\n            lineEnding: onexitlineending,\n            link: closer(onexitlink),\n            listItem: closer(),\n            listOrdered: closer(),\n            listUnordered: closer(),\n            paragraph: closer(),\n            referenceString: onexitreferencestring,\n            resourceDestinationString: onexitresourcedestinationstring,\n            resourceTitleString: onexitresourcetitlestring,\n            resource: onexitresource,\n            setextHeading: closer(onexitsetextheading),\n            setextHeadingLineSequence: onexitsetextheadinglinesequence,\n            setextHeadingText: onexitsetextheadingtext,\n            strong: closer(),\n            thematicBreak: closer()\n        }\n    };\n    configure(config, (options || {}).mdastExtensions || []);\n    /** @type {CompileData} */ const data = {};\n    return compile;\n    /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */ function compile(events) {\n        /** @type {Root} */ let tree = {\n            type: \"root\",\n            children: []\n        };\n        /** @type {Omit<CompileContext, 'sliceSerialize'>} */ const context = {\n            stack: [\n                tree\n            ],\n            tokenStack: [],\n            config,\n            enter,\n            exit,\n            buffer,\n            resume,\n            data\n        };\n        /** @type {Array<number>} */ const listStack = [];\n        let index = -1;\n        while(++index < events.length){\n            // We preprocess lists to add `listItem` tokens, and to infer whether\n            // items the list itself are spread out.\n            if (events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.listOrdered || events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.listUnordered) {\n                if (events[index][0] === \"enter\") {\n                    listStack.push(index);\n                } else {\n                    const tail = listStack.pop();\n                    (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(typeof tail === \"number\", \"expected list ot be open\");\n                    index = prepareList(events, tail, index);\n                }\n            }\n        }\n        index = -1;\n        while(++index < events.length){\n            const handler = config[events[index][0]];\n            if (own.call(handler, events[index][1].type)) {\n                handler[events[index][1].type].call(Object.assign({\n                    sliceSerialize: events[index][2].sliceSerialize\n                }, context), events[index][1]);\n            }\n        }\n        // Handle tokens still being open.\n        if (context.tokenStack.length > 0) {\n            const tail = context.tokenStack[context.tokenStack.length - 1];\n            const handler = tail[1] || defaultOnError;\n            handler.call(context, undefined, tail[0]);\n        }\n        // Figure out `root` position.\n        tree.position = {\n            start: point(events.length > 0 ? events[0][1].start : {\n                line: 1,\n                column: 1,\n                offset: 0\n            }),\n            end: point(events.length > 0 ? events[events.length - 2][1].end : {\n                line: 1,\n                column: 1,\n                offset: 0\n            })\n        };\n        // Call transforms.\n        index = -1;\n        while(++index < config.transforms.length){\n            tree = config.transforms[index](tree) || tree;\n        }\n        return tree;\n    }\n    /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */ function prepareList(events, start, length) {\n        let index = start - 1;\n        let containerBalance = -1;\n        let listSpread = false;\n        /** @type {Token | undefined} */ let listItem;\n        /** @type {number | undefined} */ let lineIndex;\n        /** @type {number | undefined} */ let firstBlankLineIndex;\n        /** @type {boolean | undefined} */ let atMarker;\n        while(++index <= length){\n            const event = events[index];\n            switch(event[1].type){\n                case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.listUnordered:\n                case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.listOrdered:\n                case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.blockQuote:\n                    {\n                        if (event[0] === \"enter\") {\n                            containerBalance++;\n                        } else {\n                            containerBalance--;\n                        }\n                        atMarker = undefined;\n                        break;\n                    }\n                case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.lineEndingBlank:\n                    {\n                        if (event[0] === \"enter\") {\n                            if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                                firstBlankLineIndex = index;\n                            }\n                            atMarker = undefined;\n                        }\n                        break;\n                    }\n                case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.linePrefix:\n                case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.listItemValue:\n                case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.listItemMarker:\n                case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.listItemPrefix:\n                case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.listItemPrefixWhitespace:\n                    {\n                        break;\n                    }\n                default:\n                    {\n                        atMarker = undefined;\n                    }\n            }\n            if (!containerBalance && event[0] === \"enter\" && event[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.listItemPrefix || containerBalance === -1 && event[0] === \"exit\" && (event[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.listUnordered || event[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.listOrdered)) {\n                if (listItem) {\n                    let tailIndex = index;\n                    lineIndex = undefined;\n                    while(tailIndex--){\n                        const tailEvent = events[tailIndex];\n                        if (tailEvent[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding || tailEvent[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.lineEndingBlank) {\n                            if (tailEvent[0] === \"exit\") continue;\n                            if (lineIndex) {\n                                events[lineIndex][1].type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.lineEndingBlank;\n                                listSpread = true;\n                            }\n                            tailEvent[1].type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding;\n                            lineIndex = tailIndex;\n                        } else if (tailEvent[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.linePrefix || tailEvent[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.blockQuotePrefix || tailEvent[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.blockQuotePrefixWhitespace || tailEvent[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.blockQuoteMarker || tailEvent[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.listItemIndent) {\n                        // Empty\n                        } else {\n                            break;\n                        }\n                    }\n                    if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n                        listItem._spread = true;\n                    }\n                    // Fix position.\n                    listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n                    events.splice(lineIndex || index, 0, [\n                        \"exit\",\n                        listItem,\n                        event[2]\n                    ]);\n                    index++;\n                    length++;\n                }\n                // Create a new list item.\n                if (event[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.listItemPrefix) {\n                    /** @type {Token} */ const item = {\n                        type: \"listItem\",\n                        _spread: false,\n                        start: Object.assign({}, event[1].start),\n                        // @ts-expect-error: we’ll add `end` in a second.\n                        end: undefined\n                    };\n                    listItem = item;\n                    events.splice(index, 0, [\n                        \"enter\",\n                        item,\n                        event[2]\n                    ]);\n                    index++;\n                    length++;\n                    firstBlankLineIndex = undefined;\n                    atMarker = true;\n                }\n            }\n        }\n        events[start][1]._spread = listSpread;\n        return length;\n    }\n    /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */ function opener(create, and) {\n        return open;\n        /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */ function open(token) {\n            enter.call(this, create(token), token);\n            if (and) and.call(this, token);\n        }\n    }\n    /**\n   * @type {CompileContext['buffer']}\n   */ function buffer() {\n        this.stack.push({\n            type: \"fragment\",\n            children: []\n        });\n    }\n    /**\n   * @type {CompileContext['enter']}\n   */ function enter(node, token, errorHandler) {\n        const parent = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(parent, \"expected `parent`\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(\"children\" in parent, \"expected `parent`\");\n        /** @type {Array<Nodes>} */ const siblings = parent.children;\n        siblings.push(node);\n        this.stack.push(node);\n        this.tokenStack.push([\n            token,\n            errorHandler || undefined\n        ]);\n        node.position = {\n            start: point(token.start),\n            // @ts-expect-error: `end` will be patched later.\n            end: undefined\n        };\n    }\n    /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */ function closer(and) {\n        return close;\n        /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */ function close(token) {\n            if (and) and.call(this, token);\n            exit.call(this, token);\n        }\n    }\n    /**\n   * @type {CompileContext['exit']}\n   */ function exit(token, onExitError) {\n        const node = this.stack.pop();\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected `node`\");\n        const open = this.tokenStack.pop();\n        if (!open) {\n            throw new Error(\"Cannot close `\" + token.type + \"` (\" + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_5__.stringifyPosition)({\n                start: token.start,\n                end: token.end\n            }) + \"): it’s not open\");\n        } else if (open[0].type !== token.type) {\n            if (onExitError) {\n                onExitError.call(this, token, open[0]);\n            } else {\n                const handler = open[1] || defaultOnError;\n                handler.call(this, token, open[0]);\n            }\n        }\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type !== \"fragment\", \"unexpected fragment `exit`ed\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.position, \"expected `position` to be defined\");\n        node.position.end = point(token.end);\n    }\n    /**\n   * @type {CompileContext['resume']}\n   */ function resume() {\n        return (0,mdast_util_to_string__WEBPACK_IMPORTED_MODULE_6__.toString)(this.stack.pop());\n    }\n    //\n    // Handlers.\n    //\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onenterlistordered() {\n        this.data.expectingFirstListItemValue = true;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onenterlistitemvalue(token) {\n        if (this.data.expectingFirstListItemValue) {\n            const ancestor = this.stack[this.stack.length - 2];\n            (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(ancestor, \"expected nodes on stack\");\n            (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(ancestor.type === \"list\", \"expected list on stack\");\n            ancestor.start = Number.parseInt(this.sliceSerialize(token), micromark_util_symbol__WEBPACK_IMPORTED_MODULE_7__.constants.numericBaseDecimal);\n            this.data.expectingFirstListItemValue = undefined;\n        }\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcodefencedfenceinfo() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"code\", \"expected code on stack\");\n        node.lang = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcodefencedfencemeta() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"code\", \"expected code on stack\");\n        node.meta = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcodefencedfence() {\n        // Exit if this is the closing fence.\n        if (this.data.flowCodeInside) return;\n        this.buffer();\n        this.data.flowCodeInside = true;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcodefenced() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"code\", \"expected code on stack\");\n        node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, \"\");\n        this.data.flowCodeInside = undefined;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcodeindented() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"code\", \"expected code on stack\");\n        node.value = data.replace(/(\\r?\\n|\\r)$/g, \"\");\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitdefinitionlabelstring(token) {\n        const label = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"definition\", \"expected definition on stack\");\n        node.label = label;\n        node.identifier = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_8__.normalizeIdentifier)(this.sliceSerialize(token)).toLowerCase();\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitdefinitiontitlestring() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"definition\", \"expected definition on stack\");\n        node.title = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitdefinitiondestinationstring() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"definition\", \"expected definition on stack\");\n        node.url = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitatxheadingsequence(token) {\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"heading\", \"expected heading on stack\");\n        if (!node.depth) {\n            const depth = this.sliceSerialize(token).length;\n            (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(depth === 1 || depth === 2 || depth === 3 || depth === 4 || depth === 5 || depth === 6, \"expected `depth` between `1` and `6`\");\n            node.depth = depth;\n        }\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitsetextheadingtext() {\n        this.data.setextHeadingSlurpLineEnding = true;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitsetextheadinglinesequence(token) {\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"heading\", \"expected heading on stack\");\n        node.depth = this.sliceSerialize(token).codePointAt(0) === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_9__.codes.equalsTo ? 1 : 2;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitsetextheading() {\n        this.data.setextHeadingSlurpLineEnding = undefined;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onenterdata(token) {\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(\"children\" in node, \"expected parent on stack\");\n        /** @type {Array<Nodes>} */ const siblings = node.children;\n        let tail = siblings[siblings.length - 1];\n        if (!tail || tail.type !== \"text\") {\n            // Add a new text node.\n            tail = text();\n            tail.position = {\n                start: point(token.start),\n                // @ts-expect-error: we’ll add `end` later.\n                end: undefined\n            };\n            siblings.push(tail);\n        }\n        this.stack.push(tail);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitdata(token) {\n        const tail = this.stack.pop();\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(tail, \"expected a `node` to be on the stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(\"value\" in tail, \"expected a `literal` to be on the stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(tail.position, \"expected `node` to have an open position\");\n        tail.value += this.sliceSerialize(token);\n        tail.position.end = point(token.end);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitlineending(token) {\n        const context = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(context, \"expected `node`\");\n        // If we’re at a hard break, include the line ending in there.\n        if (this.data.atHardBreak) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(\"children\" in context, \"expected `parent`\");\n            const tail = context.children[context.children.length - 1];\n            (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(tail.position, \"expected tail to have a starting position\");\n            tail.position.end = point(token.end);\n            this.data.atHardBreak = undefined;\n            return;\n        }\n        if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n            onenterdata.call(this, token);\n            onexitdata.call(this, token);\n        }\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexithardbreak() {\n        this.data.atHardBreak = true;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexithtmlflow() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"html\", \"expected html on stack\");\n        node.value = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexithtmltext() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"html\", \"expected html on stack\");\n        node.value = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcodetext() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"inlineCode\", \"expected inline code on stack\");\n        node.value = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitlink() {\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"link\", \"expected link on stack\");\n        // Note: there are also `identifier` and `label` fields on this link node!\n        // These are used / cleaned here.\n        // To do: clean.\n        if (this.data.inReference) {\n            /** @type {ReferenceType} */ const referenceType = this.data.referenceType || \"shortcut\";\n            node.type += \"Reference\";\n            // @ts-expect-error: mutate.\n            node.referenceType = referenceType;\n            // @ts-expect-error: mutate.\n            delete node.url;\n            delete node.title;\n        } else {\n            // @ts-expect-error: mutate.\n            delete node.identifier;\n            // @ts-expect-error: mutate.\n            delete node.label;\n        }\n        this.data.referenceType = undefined;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitimage() {\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"image\", \"expected image on stack\");\n        // Note: there are also `identifier` and `label` fields on this link node!\n        // These are used / cleaned here.\n        // To do: clean.\n        if (this.data.inReference) {\n            /** @type {ReferenceType} */ const referenceType = this.data.referenceType || \"shortcut\";\n            node.type += \"Reference\";\n            // @ts-expect-error: mutate.\n            node.referenceType = referenceType;\n            // @ts-expect-error: mutate.\n            delete node.url;\n            delete node.title;\n        } else {\n            // @ts-expect-error: mutate.\n            delete node.identifier;\n            // @ts-expect-error: mutate.\n            delete node.label;\n        }\n        this.data.referenceType = undefined;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitlabeltext(token) {\n        const string = this.sliceSerialize(token);\n        const ancestor = this.stack[this.stack.length - 2];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(ancestor, \"expected ancestor on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(ancestor.type === \"image\" || ancestor.type === \"link\", \"expected image or link on stack\");\n        // @ts-expect-error: stash this on the node, as it might become a reference\n        // later.\n        ancestor.label = (0,micromark_util_decode_string__WEBPACK_IMPORTED_MODULE_10__.decodeString)(string);\n        // @ts-expect-error: same as above.\n        ancestor.identifier = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_8__.normalizeIdentifier)(string).toLowerCase();\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitlabel() {\n        const fragment = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(fragment, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(fragment.type === \"fragment\", \"expected fragment on stack\");\n        const value = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"image\" || node.type === \"link\", \"expected image or link on stack\");\n        // Assume a reference.\n        this.data.inReference = true;\n        if (node.type === \"link\") {\n            /** @type {Array<PhrasingContent>} */ const children = fragment.children;\n            node.children = children;\n        } else {\n            node.alt = value;\n        }\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitresourcedestinationstring() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"image\" || node.type === \"link\", \"expected image or link on stack\");\n        node.url = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitresourcetitlestring() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"image\" || node.type === \"link\", \"expected image or link on stack\");\n        node.title = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitresource() {\n        this.data.inReference = undefined;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onenterreference() {\n        this.data.referenceType = \"collapsed\";\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitreferencestring(token) {\n        const label = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"image\" || node.type === \"link\", \"expected image reference or link reference on stack\");\n        // @ts-expect-error: stash this on the node, as it might become a reference\n        // later.\n        node.label = label;\n        // @ts-expect-error: same as above.\n        node.identifier = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_8__.normalizeIdentifier)(this.sliceSerialize(token)).toLowerCase();\n        this.data.referenceType = \"full\";\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcharacterreferencemarker(token) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(token.type === \"characterReferenceMarkerNumeric\" || token.type === \"characterReferenceMarkerHexadecimal\");\n        this.data.characterReferenceType = token.type;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcharacterreferencevalue(token) {\n        const data = this.sliceSerialize(token);\n        const type = this.data.characterReferenceType;\n        /** @type {string} */ let value;\n        if (type) {\n            value = (0,micromark_util_decode_numeric_character_reference__WEBPACK_IMPORTED_MODULE_11__.decodeNumericCharacterReference)(data, type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.characterReferenceMarkerNumeric ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_7__.constants.numericBaseDecimal : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_7__.constants.numericBaseHexadecimal);\n            this.data.characterReferenceType = undefined;\n        } else {\n            const result = (0,decode_named_character_reference__WEBPACK_IMPORTED_MODULE_12__.decodeNamedCharacterReference)(data);\n            (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(result !== false, \"expected reference to decode\");\n            value = result;\n        }\n        const tail = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(tail, \"expected `node`\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(\"value\" in tail, \"expected `node.value`\");\n        tail.value += value;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcharacterreference(token) {\n        const tail = this.stack.pop();\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(tail, \"expected `node`\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(tail.position, \"expected `node.position`\");\n        tail.position.end = point(token.end);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitautolinkprotocol(token) {\n        onexitdata.call(this, token);\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"link\", \"expected link on stack\");\n        node.url = this.sliceSerialize(token);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitautolinkemail(token) {\n        onexitdata.call(this, token);\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node, \"expected node on stack\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(node.type === \"link\", \"expected link on stack\");\n        node.url = \"mailto:\" + this.sliceSerialize(token);\n    }\n    //\n    // Creaters.\n    //\n    /** @returns {Blockquote} */ function blockQuote() {\n        return {\n            type: \"blockquote\",\n            children: []\n        };\n    }\n    /** @returns {Code} */ function codeFlow() {\n        return {\n            type: \"code\",\n            lang: null,\n            meta: null,\n            value: \"\"\n        };\n    }\n    /** @returns {InlineCode} */ function codeText() {\n        return {\n            type: \"inlineCode\",\n            value: \"\"\n        };\n    }\n    /** @returns {Definition} */ function definition() {\n        return {\n            type: \"definition\",\n            identifier: \"\",\n            label: null,\n            title: null,\n            url: \"\"\n        };\n    }\n    /** @returns {Emphasis} */ function emphasis() {\n        return {\n            type: \"emphasis\",\n            children: []\n        };\n    }\n    /** @returns {Heading} */ function heading() {\n        return {\n            type: \"heading\",\n            // @ts-expect-error `depth` will be set later.\n            depth: 0,\n            children: []\n        };\n    }\n    /** @returns {Break} */ function hardBreak() {\n        return {\n            type: \"break\"\n        };\n    }\n    /** @returns {Html} */ function html() {\n        return {\n            type: \"html\",\n            value: \"\"\n        };\n    }\n    /** @returns {Image} */ function image() {\n        return {\n            type: \"image\",\n            title: null,\n            url: \"\",\n            alt: null\n        };\n    }\n    /** @returns {Link} */ function link() {\n        return {\n            type: \"link\",\n            title: null,\n            url: \"\",\n            children: []\n        };\n    }\n    /**\n   * @param {Token} token\n   * @returns {List}\n   */ function list(token) {\n        return {\n            type: \"list\",\n            ordered: token.type === \"listOrdered\",\n            start: null,\n            spread: token._spread,\n            children: []\n        };\n    }\n    /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */ function listItem(token) {\n        return {\n            type: \"listItem\",\n            spread: token._spread,\n            checked: null,\n            children: []\n        };\n    }\n    /** @returns {Paragraph} */ function paragraph() {\n        return {\n            type: \"paragraph\",\n            children: []\n        };\n    }\n    /** @returns {Strong} */ function strong() {\n        return {\n            type: \"strong\",\n            children: []\n        };\n    }\n    /** @returns {Text} */ function text() {\n        return {\n            type: \"text\",\n            value: \"\"\n        };\n    }\n    /** @returns {ThematicBreak} */ function thematicBreak() {\n        return {\n            type: \"thematicBreak\"\n        };\n    }\n}\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */ function point(d) {\n    return {\n        line: d.line,\n        column: d.column,\n        offset: d.offset\n    };\n}\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */ function configure(combined, extensions) {\n    let index = -1;\n    while(++index < extensions.length){\n        const value = extensions[index];\n        if (Array.isArray(value)) {\n            configure(combined, value);\n        } else {\n            extension(combined, value);\n        }\n    }\n}\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */ function extension(combined, extension) {\n    /** @type {keyof Extension} */ let key;\n    for(key in extension){\n        if (own.call(extension, key)) {\n            switch(key){\n                case \"canContainEols\":\n                    {\n                        const right = extension[key];\n                        if (right) {\n                            combined[key].push(...right);\n                        }\n                        break;\n                    }\n                case \"transforms\":\n                    {\n                        const right = extension[key];\n                        if (right) {\n                            combined[key].push(...right);\n                        }\n                        break;\n                    }\n                case \"enter\":\n                case \"exit\":\n                    {\n                        const right = extension[key];\n                        if (right) {\n                            Object.assign(combined[key], right);\n                        }\n                        break;\n                    }\n            }\n        }\n    }\n}\n/** @type {OnEnterError} */ function defaultOnError(left, right) {\n    if (left) {\n        throw new Error(\"Cannot close `\" + left.type + \"` (\" + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_5__.stringifyPosition)({\n            start: left.start,\n            end: left.end\n        }) + \"): a different token (`\" + right.type + \"`, \" + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_5__.stringifyPosition)({\n            start: right.start,\n            end: right.end\n        }) + \") is open\");\n    } else {\n        throw new Error(\"Cannot close document, a token (`\" + right.type + \"`, \" + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_5__.stringifyPosition)({\n            start: right.start,\n            end: right.end\n        }) + \") is still open\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-from-markdown@2.0.2/node_modules/mdast-util-from-markdown/dev/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/footer.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/footer.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultFootnoteBackContent: function() { return /* binding */ defaultFootnoteBackContent; },\n/* harmony export */   defaultFootnoteBackLabel: function() { return /* binding */ defaultFootnoteBackLabel; },\n/* harmony export */   footer: function() { return /* binding */ footer; }\n/* harmony export */ });\n/* harmony import */ var _ungap_structured_clone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ungap/structured-clone */ \"(app-pages-browser)/./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/index.js\");\n/* harmony import */ var micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-sanitize-uri */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-sanitize-uri@2.0.1/node_modules/micromark-util-sanitize-uri/dev/index.js\");\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */ /**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */ \n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */ function defaultFootnoteBackContent(_, rereferenceIndex) {\n    /** @type {Array<ElementContent>} */ const result = [\n        {\n            type: \"text\",\n            value: \"↩\"\n        }\n    ];\n    if (rereferenceIndex > 1) {\n        result.push({\n            type: \"element\",\n            tagName: \"sup\",\n            properties: {},\n            children: [\n                {\n                    type: \"text\",\n                    value: String(rereferenceIndex)\n                }\n            ]\n        });\n    }\n    return result;\n}\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */ function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n    return \"Back to reference \" + (referenceIndex + 1) + (rereferenceIndex > 1 ? \"-\" + rereferenceIndex : \"\");\n}\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */ // eslint-disable-next-line complexity\nfunction footer(state) {\n    const clobberPrefix = typeof state.options.clobberPrefix === \"string\" ? state.options.clobberPrefix : \"user-content-\";\n    const footnoteBackContent = state.options.footnoteBackContent || defaultFootnoteBackContent;\n    const footnoteBackLabel = state.options.footnoteBackLabel || defaultFootnoteBackLabel;\n    const footnoteLabel = state.options.footnoteLabel || \"Footnotes\";\n    const footnoteLabelTagName = state.options.footnoteLabelTagName || \"h2\";\n    const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n        className: [\n            \"sr-only\"\n        ]\n    };\n    /** @type {Array<ElementContent>} */ const listItems = [];\n    let referenceIndex = -1;\n    while(++referenceIndex < state.footnoteOrder.length){\n        const definition = state.footnoteById.get(state.footnoteOrder[referenceIndex]);\n        if (!definition) {\n            continue;\n        }\n        const content = state.all(definition);\n        const id = String(definition.identifier).toUpperCase();\n        const safeId = (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__.normalizeUri)(id.toLowerCase());\n        let rereferenceIndex = 0;\n        /** @type {Array<ElementContent>} */ const backReferences = [];\n        const counts = state.footnoteCounts.get(id);\n        // eslint-disable-next-line no-unmodified-loop-condition\n        while(counts !== undefined && ++rereferenceIndex <= counts){\n            if (backReferences.length > 0) {\n                backReferences.push({\n                    type: \"text\",\n                    value: \" \"\n                });\n            }\n            let children = typeof footnoteBackContent === \"string\" ? footnoteBackContent : footnoteBackContent(referenceIndex, rereferenceIndex);\n            if (typeof children === \"string\") {\n                children = {\n                    type: \"text\",\n                    value: children\n                };\n            }\n            backReferences.push({\n                type: \"element\",\n                tagName: \"a\",\n                properties: {\n                    href: \"#\" + clobberPrefix + \"fnref-\" + safeId + (rereferenceIndex > 1 ? \"-\" + rereferenceIndex : \"\"),\n                    dataFootnoteBackref: \"\",\n                    ariaLabel: typeof footnoteBackLabel === \"string\" ? footnoteBackLabel : footnoteBackLabel(referenceIndex, rereferenceIndex),\n                    className: [\n                        \"data-footnote-backref\"\n                    ]\n                },\n                children: Array.isArray(children) ? children : [\n                    children\n                ]\n            });\n        }\n        const tail = content[content.length - 1];\n        if (tail && tail.type === \"element\" && tail.tagName === \"p\") {\n            const tailTail = tail.children[tail.children.length - 1];\n            if (tailTail && tailTail.type === \"text\") {\n                tailTail.value += \" \";\n            } else {\n                tail.children.push({\n                    type: \"text\",\n                    value: \" \"\n                });\n            }\n            tail.children.push(...backReferences);\n        } else {\n            content.push(...backReferences);\n        }\n        /** @type {Element} */ const listItem = {\n            type: \"element\",\n            tagName: \"li\",\n            properties: {\n                id: clobberPrefix + \"fn-\" + safeId\n            },\n            children: state.wrap(content, true)\n        };\n        state.patch(definition, listItem);\n        listItems.push(listItem);\n    }\n    if (listItems.length === 0) {\n        return;\n    }\n    return {\n        type: \"element\",\n        tagName: \"section\",\n        properties: {\n            dataFootnotes: true,\n            className: [\n                \"footnotes\"\n            ]\n        },\n        children: [\n            {\n                type: \"element\",\n                tagName: footnoteLabelTagName,\n                properties: {\n                    ...(0,_ungap_structured_clone__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(footnoteLabelProperties),\n                    id: \"footnote-label\"\n                },\n                children: [\n                    {\n                        type: \"text\",\n                        value: footnoteLabel\n                    }\n                ]\n            },\n            {\n                type: \"text\",\n                value: \"\\n\"\n            },\n            {\n                type: \"element\",\n                tagName: \"ol\",\n                properties: {},\n                children: state.wrap(listItems, true)\n            },\n            {\n                type: \"text\",\n                value: \"\\n\"\n            }\n        ]\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/footer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js ***!
  \*****************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockquote: function() { return /* binding */ blockquote; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */ function blockquote(state, node) {\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"blockquote\",\n        properties: {},\n        children: state.wrap(state.all(node), true)\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2Jsb2NrcXVvdGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FFRCxtREFBbUQ7QUFDbkQ7QUFFQTs7Ozs7Ozs7O0NBU0MsR0FDTSxTQUFTQSxXQUFXQyxLQUFLLEVBQUVDLElBQUk7SUFDcEMsb0JBQW9CLEdBQ3BCLE1BQU1DLFNBQVM7UUFDYkMsTUFBTTtRQUNOQyxTQUFTO1FBQ1RDLFlBQVksQ0FBQztRQUNiQyxVQUFVTixNQUFNTyxJQUFJLENBQUNQLE1BQU1RLEdBQUcsQ0FBQ1AsT0FBTztJQUN4QztJQUNBRCxNQUFNUyxLQUFLLENBQUNSLE1BQU1DO0lBQ2xCLE9BQU9GLE1BQU1VLFNBQVMsQ0FBQ1QsTUFBTUM7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8taGFzdEAxMy4yLjAvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvYmxvY2txdW90ZS5qcz81MWYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuQmxvY2txdW90ZX0gQmxvY2txdW90ZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG4vLyBNYWtlIFZTIENvZGUgc2hvdyByZWZlcmVuY2VzIHRvIHRoZSBhYm92ZSB0eXBlcy5cbicnXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgYmxvY2txdW90ZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtCbG9ja3F1b3RlfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYmxvY2txdW90ZShzdGF0ZSwgbm9kZSkge1xuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ2Jsb2NrcXVvdGUnLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKHN0YXRlLmFsbChub2RlKSwgdHJ1ZSlcbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIl0sIm5hbWVzIjpbImJsb2NrcXVvdGUiLCJzdGF0ZSIsIm5vZGUiLCJyZXN1bHQiLCJ0eXBlIiwidGFnTmFtZSIsInByb3BlcnRpZXMiLCJjaGlsZHJlbiIsIndyYXAiLCJhbGwiLCJwYXRjaCIsImFwcGx5RGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/break.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/break.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hardBreak: function() { return /* binding */ hardBreak; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */ function hardBreak(state, node) {\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"br\",\n        properties: {},\n        children: []\n    };\n    state.patch(node, result);\n    return [\n        state.applyData(node, result),\n        {\n            type: \"text\",\n            value: \"\\n\"\n        }\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2JyZWFrLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUVELG1EQUFtRDtBQUNuRDtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNNLFNBQVNBLFVBQVVDLEtBQUssRUFBRUMsSUFBSTtJQUNuQyxvQkFBb0IsR0FDcEIsTUFBTUMsU0FBUztRQUFDQyxNQUFNO1FBQVdDLFNBQVM7UUFBTUMsWUFBWSxDQUFDO1FBQUdDLFVBQVUsRUFBRTtJQUFBO0lBQzVFTixNQUFNTyxLQUFLLENBQUNOLE1BQU1DO0lBQ2xCLE9BQU87UUFBQ0YsTUFBTVEsU0FBUyxDQUFDUCxNQUFNQztRQUFTO1lBQUNDLE1BQU07WUFBUU0sT0FBTztRQUFJO0tBQUU7QUFDckUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8taGFzdEAxMy4yLjAvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvYnJlYWsuanM/ODhlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuVGV4dH0gVGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5CcmVha30gQnJlYWtcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLy8gTWFrZSBWUyBDb2RlIHNob3cgcmVmZXJlbmNlcyB0byB0aGUgYWJvdmUgdHlwZXMuXG4nJ1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGJyZWFrYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0JyZWFrfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7QXJyYXk8RWxlbWVudCB8IFRleHQ+fVxuICogICBoYXN0IGVsZW1lbnQgY29udGVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhcmRCcmVhayhzdGF0ZSwgbm9kZSkge1xuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHt0eXBlOiAnZWxlbWVudCcsIHRhZ05hbWU6ICdicicsIHByb3BlcnRpZXM6IHt9LCBjaGlsZHJlbjogW119XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIFtzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KSwge3R5cGU6ICd0ZXh0JywgdmFsdWU6ICdcXG4nfV1cbn1cbiJdLCJuYW1lcyI6WyJoYXJkQnJlYWsiLCJzdGF0ZSIsIm5vZGUiLCJyZXN1bHQiLCJ0eXBlIiwidGFnTmFtZSIsInByb3BlcnRpZXMiLCJjaGlsZHJlbiIsInBhdGNoIiwiYXBwbHlEYXRhIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/break.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/code.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/code.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   code: function() { return /* binding */ code; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */ function code(state, node) {\n    const value = node.value ? node.value + \"\\n\" : \"\";\n    /** @type {Properties} */ const properties = {};\n    if (node.lang) {\n        properties.className = [\n            \"language-\" + node.lang\n        ];\n    }\n    // Create `<code>`.\n    /** @type {Element} */ let result = {\n        type: \"element\",\n        tagName: \"code\",\n        properties,\n        children: [\n            {\n                type: \"text\",\n                value\n            }\n        ]\n    };\n    if (node.meta) {\n        result.data = {\n            meta: node.meta\n        };\n    }\n    state.patch(node, result);\n    result = state.applyData(node, result);\n    // Create `<pre>`.\n    result = {\n        type: \"element\",\n        tagName: \"pre\",\n        properties: {},\n        children: [\n            result\n        ]\n    };\n    state.patch(node, result);\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2NvZGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7OztDQUtDLEdBRUQsbURBQW1EO0FBQ25EO0FBRUE7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU0EsS0FBS0MsS0FBSyxFQUFFQyxJQUFJO0lBQzlCLE1BQU1DLFFBQVFELEtBQUtDLEtBQUssR0FBR0QsS0FBS0MsS0FBSyxHQUFHLE9BQU87SUFDL0MsdUJBQXVCLEdBQ3ZCLE1BQU1DLGFBQWEsQ0FBQztJQUVwQixJQUFJRixLQUFLRyxJQUFJLEVBQUU7UUFDYkQsV0FBV0UsU0FBUyxHQUFHO1lBQUMsY0FBY0osS0FBS0csSUFBSTtTQUFDO0lBQ2xEO0lBRUEsbUJBQW1CO0lBQ25CLG9CQUFvQixHQUNwQixJQUFJRSxTQUFTO1FBQ1hDLE1BQU07UUFDTkMsU0FBUztRQUNUTDtRQUNBTSxVQUFVO1lBQUM7Z0JBQUNGLE1BQU07Z0JBQVFMO1lBQUs7U0FBRTtJQUNuQztJQUVBLElBQUlELEtBQUtTLElBQUksRUFBRTtRQUNiSixPQUFPSyxJQUFJLEdBQUc7WUFBQ0QsTUFBTVQsS0FBS1MsSUFBSTtRQUFBO0lBQ2hDO0lBRUFWLE1BQU1ZLEtBQUssQ0FBQ1gsTUFBTUs7SUFDbEJBLFNBQVNOLE1BQU1hLFNBQVMsQ0FBQ1osTUFBTUs7SUFFL0Isa0JBQWtCO0lBQ2xCQSxTQUFTO1FBQUNDLE1BQU07UUFBV0MsU0FBUztRQUFPTCxZQUFZLENBQUM7UUFBR00sVUFBVTtZQUFDSDtTQUFPO0lBQUE7SUFDN0VOLE1BQU1ZLEtBQUssQ0FBQ1gsTUFBTUs7SUFDbEIsT0FBT0E7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC10by1oYXN0QDEzLjIuMC9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9oYW5kbGVycy9jb2RlLmpzPzE5NWMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLlByb3BlcnRpZXN9IFByb3BlcnRpZXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuQ29kZX0gQ29kZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG4vLyBNYWtlIFZTIENvZGUgc2hvdyByZWZlcmVuY2VzIHRvIHRoZSBhYm92ZSB0eXBlcy5cbicnXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgY29kZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtDb2RlfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29kZShzdGF0ZSwgbm9kZSkge1xuICBjb25zdCB2YWx1ZSA9IG5vZGUudmFsdWUgPyBub2RlLnZhbHVlICsgJ1xcbicgOiAnJ1xuICAvKiogQHR5cGUge1Byb3BlcnRpZXN9ICovXG4gIGNvbnN0IHByb3BlcnRpZXMgPSB7fVxuXG4gIGlmIChub2RlLmxhbmcpIHtcbiAgICBwcm9wZXJ0aWVzLmNsYXNzTmFtZSA9IFsnbGFuZ3VhZ2UtJyArIG5vZGUubGFuZ11cbiAgfVxuXG4gIC8vIENyZWF0ZSBgPGNvZGU+YC5cbiAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICBsZXQgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAnY29kZScsXG4gICAgcHJvcGVydGllcyxcbiAgICBjaGlsZHJlbjogW3t0eXBlOiAndGV4dCcsIHZhbHVlfV1cbiAgfVxuXG4gIGlmIChub2RlLm1ldGEpIHtcbiAgICByZXN1bHQuZGF0YSA9IHttZXRhOiBub2RlLm1ldGF9XG4gIH1cblxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJlc3VsdCA9IHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG5cbiAgLy8gQ3JlYXRlIGA8cHJlPmAuXG4gIHJlc3VsdCA9IHt0eXBlOiAnZWxlbWVudCcsIHRhZ05hbWU6ICdwcmUnLCBwcm9wZXJ0aWVzOiB7fSwgY2hpbGRyZW46IFtyZXN1bHRdfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiByZXN1bHRcbn1cbiJdLCJuYW1lcyI6WyJjb2RlIiwic3RhdGUiLCJub2RlIiwidmFsdWUiLCJwcm9wZXJ0aWVzIiwibGFuZyIsImNsYXNzTmFtZSIsInJlc3VsdCIsInR5cGUiLCJ0YWdOYW1lIiwiY2hpbGRyZW4iLCJtZXRhIiwiZGF0YSIsInBhdGNoIiwiYXBwbHlEYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/code.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/delete.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/delete.js ***!
  \*************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   strikethrough: function() { return /* binding */ strikethrough; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */ function strikethrough(state, node) {\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"del\",\n        properties: {},\n        children: state.all(node)\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2RlbGV0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUVELG1EQUFtRDtBQUNuRDtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNNLFNBQVNBLGNBQWNDLEtBQUssRUFBRUMsSUFBSTtJQUN2QyxvQkFBb0IsR0FDcEIsTUFBTUMsU0FBUztRQUNiQyxNQUFNO1FBQ05DLFNBQVM7UUFDVEMsWUFBWSxDQUFDO1FBQ2JDLFVBQVVOLE1BQU1PLEdBQUcsQ0FBQ047SUFDdEI7SUFDQUQsTUFBTVEsS0FBSyxDQUFDUCxNQUFNQztJQUNsQixPQUFPRixNQUFNUyxTQUFTLENBQUNSLE1BQU1DO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2RlbGV0ZS5qcz81YjQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuRGVsZXRlfSBEZWxldGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLy8gTWFrZSBWUyBDb2RlIHNob3cgcmVmZXJlbmNlcyB0byB0aGUgYWJvdmUgdHlwZXMuXG4nJ1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGRlbGV0ZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtEZWxldGV9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpa2V0aHJvdWdoKHN0YXRlLCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAnZGVsJyxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBjaGlsZHJlbjogc3RhdGUuYWxsKG5vZGUpXG4gIH1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiJdLCJuYW1lcyI6WyJzdHJpa2V0aHJvdWdoIiwic3RhdGUiLCJub2RlIiwicmVzdWx0IiwidHlwZSIsInRhZ05hbWUiLCJwcm9wZXJ0aWVzIiwiY2hpbGRyZW4iLCJhbGwiLCJwYXRjaCIsImFwcGx5RGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/delete.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js ***!
  \***************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   emphasis: function() { return /* binding */ emphasis; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */ function emphasis(state, node) {\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"em\",\n        properties: {},\n        children: state.all(node)\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2VtcGhhc2lzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztDQUlDLEdBRUQsbURBQW1EO0FBQ25EO0FBRUE7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU0EsU0FBU0MsS0FBSyxFQUFFQyxJQUFJO0lBQ2xDLG9CQUFvQixHQUNwQixNQUFNQyxTQUFTO1FBQ2JDLE1BQU07UUFDTkMsU0FBUztRQUNUQyxZQUFZLENBQUM7UUFDYkMsVUFBVU4sTUFBTU8sR0FBRyxDQUFDTjtJQUN0QjtJQUNBRCxNQUFNUSxLQUFLLENBQUNQLE1BQU1DO0lBQ2xCLE9BQU9GLE1BQU1TLFNBQVMsQ0FBQ1IsTUFBTUM7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8taGFzdEAxMy4yLjAvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvZW1waGFzaXMuanM/N2Q5MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkVtcGhhc2lzfSBFbXBoYXNpc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG4vLyBNYWtlIFZTIENvZGUgc2hvdyByZWZlcmVuY2VzIHRvIHRoZSBhYm92ZSB0eXBlcy5cbicnXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgZW1waGFzaXNgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7RW1waGFzaXN9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbXBoYXNpcyhzdGF0ZSwgbm9kZSkge1xuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ2VtJyxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBjaGlsZHJlbjogc3RhdGUuYWxsKG5vZGUpXG4gIH1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiJdLCJuYW1lcyI6WyJlbXBoYXNpcyIsInN0YXRlIiwibm9kZSIsInJlc3VsdCIsInR5cGUiLCJ0YWdOYW1lIiwicHJvcGVydGllcyIsImNoaWxkcmVuIiwiYWxsIiwicGF0Y2giLCJhcHBseURhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js ***!
  \*************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   footnoteReference: function() { return /* binding */ footnoteReference; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-sanitize-uri */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-sanitize-uri@2.0.1/node_modules/micromark-util-sanitize-uri/dev/index.js\");\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */ \n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */ function footnoteReference(state, node) {\n    const clobberPrefix = typeof state.options.clobberPrefix === \"string\" ? state.options.clobberPrefix : \"user-content-\";\n    const id = String(node.identifier).toUpperCase();\n    const safeId = (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__.normalizeUri)(id.toLowerCase());\n    const index = state.footnoteOrder.indexOf(id);\n    /** @type {number} */ let counter;\n    let reuseCounter = state.footnoteCounts.get(id);\n    if (reuseCounter === undefined) {\n        reuseCounter = 0;\n        state.footnoteOrder.push(id);\n        counter = state.footnoteOrder.length;\n    } else {\n        counter = index + 1;\n    }\n    reuseCounter += 1;\n    state.footnoteCounts.set(id, reuseCounter);\n    /** @type {Element} */ const link = {\n        type: \"element\",\n        tagName: \"a\",\n        properties: {\n            href: \"#\" + clobberPrefix + \"fn-\" + safeId,\n            id: clobberPrefix + \"fnref-\" + safeId + (reuseCounter > 1 ? \"-\" + reuseCounter : \"\"),\n            dataFootnoteRef: true,\n            ariaDescribedBy: [\n                \"footnote-label\"\n            ]\n        },\n        children: [\n            {\n                type: \"text\",\n                value: String(counter)\n            }\n        ]\n    };\n    state.patch(node, link);\n    /** @type {Element} */ const sup = {\n        type: \"element\",\n        tagName: \"sup\",\n        properties: {},\n        children: [\n            link\n        ]\n    };\n    state.patch(node, sup);\n    return state.applyData(node, sup);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2Zvb3Rub3RlLXJlZmVyZW5jZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7O0NBSUMsR0FFdUQ7QUFFeEQ7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU0Msa0JBQWtCQyxLQUFLLEVBQUVDLElBQUk7SUFDM0MsTUFBTUMsZ0JBQ0osT0FBT0YsTUFBTUcsT0FBTyxDQUFDRCxhQUFhLEtBQUssV0FDbkNGLE1BQU1HLE9BQU8sQ0FBQ0QsYUFBYSxHQUMzQjtJQUNOLE1BQU1FLEtBQUtDLE9BQU9KLEtBQUtLLFVBQVUsRUFBRUMsV0FBVztJQUM5QyxNQUFNQyxTQUFTVix5RUFBWUEsQ0FBQ00sR0FBR0ssV0FBVztJQUMxQyxNQUFNQyxRQUFRVixNQUFNVyxhQUFhLENBQUNDLE9BQU8sQ0FBQ1I7SUFDMUMsbUJBQW1CLEdBQ25CLElBQUlTO0lBRUosSUFBSUMsZUFBZWQsTUFBTWUsY0FBYyxDQUFDQyxHQUFHLENBQUNaO0lBRTVDLElBQUlVLGlCQUFpQkcsV0FBVztRQUM5QkgsZUFBZTtRQUNmZCxNQUFNVyxhQUFhLENBQUNPLElBQUksQ0FBQ2Q7UUFDekJTLFVBQVViLE1BQU1XLGFBQWEsQ0FBQ1EsTUFBTTtJQUN0QyxPQUFPO1FBQ0xOLFVBQVVILFFBQVE7SUFDcEI7SUFFQUksZ0JBQWdCO0lBQ2hCZCxNQUFNZSxjQUFjLENBQUNLLEdBQUcsQ0FBQ2hCLElBQUlVO0lBRTdCLG9CQUFvQixHQUNwQixNQUFNTyxPQUFPO1FBQ1hDLE1BQU07UUFDTkMsU0FBUztRQUNUQyxZQUFZO1lBQ1ZDLE1BQU0sTUFBTXZCLGdCQUFnQixRQUFRTTtZQUNwQ0osSUFDRUYsZ0JBQ0EsV0FDQU0sU0FDQ00sQ0FBQUEsZUFBZSxJQUFJLE1BQU1BLGVBQWUsRUFBQztZQUM1Q1ksaUJBQWlCO1lBQ2pCQyxpQkFBaUI7Z0JBQUM7YUFBaUI7UUFDckM7UUFDQUMsVUFBVTtZQUFDO2dCQUFDTixNQUFNO2dCQUFRTyxPQUFPeEIsT0FBT1E7WUFBUTtTQUFFO0lBQ3BEO0lBQ0FiLE1BQU04QixLQUFLLENBQUM3QixNQUFNb0I7SUFFbEIsb0JBQW9CLEdBQ3BCLE1BQU1VLE1BQU07UUFDVlQsTUFBTTtRQUNOQyxTQUFTO1FBQ1RDLFlBQVksQ0FBQztRQUNiSSxVQUFVO1lBQUNQO1NBQUs7SUFDbEI7SUFDQXJCLE1BQU04QixLQUFLLENBQUM3QixNQUFNOEI7SUFDbEIsT0FBTy9CLE1BQU1nQyxTQUFTLENBQUMvQixNQUFNOEI7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8taGFzdEAxMy4yLjAvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvZm9vdG5vdGUtcmVmZXJlbmNlLmpzPzUyNzAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Gb290bm90ZVJlZmVyZW5jZX0gRm9vdG5vdGVSZWZlcmVuY2VcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtub3JtYWxpemVVcml9IGZyb20gJ21pY3JvbWFyay11dGlsLXNhbml0aXplLXVyaSdcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBmb290bm90ZVJlZmVyZW5jZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtGb290bm90ZVJlZmVyZW5jZX0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvb3Rub3RlUmVmZXJlbmNlKHN0YXRlLCBub2RlKSB7XG4gIGNvbnN0IGNsb2JiZXJQcmVmaXggPVxuICAgIHR5cGVvZiBzdGF0ZS5vcHRpb25zLmNsb2JiZXJQcmVmaXggPT09ICdzdHJpbmcnXG4gICAgICA/IHN0YXRlLm9wdGlvbnMuY2xvYmJlclByZWZpeFxuICAgICAgOiAndXNlci1jb250ZW50LSdcbiAgY29uc3QgaWQgPSBTdHJpbmcobm9kZS5pZGVudGlmaWVyKS50b1VwcGVyQ2FzZSgpXG4gIGNvbnN0IHNhZmVJZCA9IG5vcm1hbGl6ZVVyaShpZC50b0xvd2VyQ2FzZSgpKVxuICBjb25zdCBpbmRleCA9IHN0YXRlLmZvb3Rub3RlT3JkZXIuaW5kZXhPZihpZClcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gIGxldCBjb3VudGVyXG5cbiAgbGV0IHJldXNlQ291bnRlciA9IHN0YXRlLmZvb3Rub3RlQ291bnRzLmdldChpZClcblxuICBpZiAocmV1c2VDb3VudGVyID09PSB1bmRlZmluZWQpIHtcbiAgICByZXVzZUNvdW50ZXIgPSAwXG4gICAgc3RhdGUuZm9vdG5vdGVPcmRlci5wdXNoKGlkKVxuICAgIGNvdW50ZXIgPSBzdGF0ZS5mb290bm90ZU9yZGVyLmxlbmd0aFxuICB9IGVsc2Uge1xuICAgIGNvdW50ZXIgPSBpbmRleCArIDFcbiAgfVxuXG4gIHJldXNlQ291bnRlciArPSAxXG4gIHN0YXRlLmZvb3Rub3RlQ291bnRzLnNldChpZCwgcmV1c2VDb3VudGVyKVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgbGluayA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ2EnLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIGhyZWY6ICcjJyArIGNsb2JiZXJQcmVmaXggKyAnZm4tJyArIHNhZmVJZCxcbiAgICAgIGlkOlxuICAgICAgICBjbG9iYmVyUHJlZml4ICtcbiAgICAgICAgJ2ZucmVmLScgK1xuICAgICAgICBzYWZlSWQgK1xuICAgICAgICAocmV1c2VDb3VudGVyID4gMSA/ICctJyArIHJldXNlQ291bnRlciA6ICcnKSxcbiAgICAgIGRhdGFGb290bm90ZVJlZjogdHJ1ZSxcbiAgICAgIGFyaWFEZXNjcmliZWRCeTogWydmb290bm90ZS1sYWJlbCddXG4gICAgfSxcbiAgICBjaGlsZHJlbjogW3t0eXBlOiAndGV4dCcsIHZhbHVlOiBTdHJpbmcoY291bnRlcil9XVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIGxpbmspXG5cbiAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICBjb25zdCBzdXAgPSB7XG4gICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgIHRhZ05hbWU6ICdzdXAnLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBbbGlua11cbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCBzdXApXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgc3VwKVxufVxuIl0sIm5hbWVzIjpbIm5vcm1hbGl6ZVVyaSIsImZvb3Rub3RlUmVmZXJlbmNlIiwic3RhdGUiLCJub2RlIiwiY2xvYmJlclByZWZpeCIsIm9wdGlvbnMiLCJpZCIsIlN0cmluZyIsImlkZW50aWZpZXIiLCJ0b1VwcGVyQ2FzZSIsInNhZmVJZCIsInRvTG93ZXJDYXNlIiwiaW5kZXgiLCJmb290bm90ZU9yZGVyIiwiaW5kZXhPZiIsImNvdW50ZXIiLCJyZXVzZUNvdW50ZXIiLCJmb290bm90ZUNvdW50cyIsImdldCIsInVuZGVmaW5lZCIsInB1c2giLCJsZW5ndGgiLCJzZXQiLCJsaW5rIiwidHlwZSIsInRhZ05hbWUiLCJwcm9wZXJ0aWVzIiwiaHJlZiIsImRhdGFGb290bm90ZVJlZiIsImFyaWFEZXNjcmliZWRCeSIsImNoaWxkcmVuIiwidmFsdWUiLCJwYXRjaCIsInN1cCIsImFwcGx5RGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/heading.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/heading.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   heading: function() { return /* binding */ heading; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */ function heading(state, node) {\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"h\" + node.depth,\n        properties: {},\n        children: state.all(node)\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2hlYWRpbmcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FFRCxtREFBbUQ7QUFDbkQ7QUFFQTs7Ozs7Ozs7O0NBU0MsR0FDTSxTQUFTQSxRQUFRQyxLQUFLLEVBQUVDLElBQUk7SUFDakMsb0JBQW9CLEdBQ3BCLE1BQU1DLFNBQVM7UUFDYkMsTUFBTTtRQUNOQyxTQUFTLE1BQU1ILEtBQUtJLEtBQUs7UUFDekJDLFlBQVksQ0FBQztRQUNiQyxVQUFVUCxNQUFNUSxHQUFHLENBQUNQO0lBQ3RCO0lBQ0FELE1BQU1TLEtBQUssQ0FBQ1IsTUFBTUM7SUFDbEIsT0FBT0YsTUFBTVUsU0FBUyxDQUFDVCxNQUFNQztBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC10by1oYXN0QDEzLjIuMC9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9oYW5kbGVycy9oZWFkaW5nLmpzP2VkNTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5IZWFkaW5nfSBIZWFkaW5nXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbi8vIE1ha2UgVlMgQ29kZSBzaG93IHJlZmVyZW5jZXMgdG8gdGhlIGFib3ZlIHR5cGVzLlxuJydcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBoZWFkaW5nYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0hlYWRpbmd9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZWFkaW5nKHN0YXRlLCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAnaCcgKyBub2RlLmRlcHRoLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS5hbGwobm9kZSlcbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIl0sIm5hbWVzIjpbImhlYWRpbmciLCJzdGF0ZSIsIm5vZGUiLCJyZXN1bHQiLCJ0eXBlIiwidGFnTmFtZSIsImRlcHRoIiwicHJvcGVydGllcyIsImNoaWxkcmVuIiwiYWxsIiwicGF0Y2giLCJhcHBseURhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/heading.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/html.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/html.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   html: function() { return /* binding */ html; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */ function html(state, node) {\n    if (state.options.allowDangerousHtml) {\n        /** @type {Raw} */ const result = {\n            type: \"raw\",\n            value: node.value\n        };\n        state.patch(node, result);\n        return state.applyData(node, result);\n    }\n    return undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2h0bWwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7OztDQUtDLEdBRUQsbURBQW1EO0FBQ25EO0FBRUE7Ozs7Ozs7Ozs7Q0FVQyxHQUNNLFNBQVNBLEtBQUtDLEtBQUssRUFBRUMsSUFBSTtJQUM5QixJQUFJRCxNQUFNRSxPQUFPLENBQUNDLGtCQUFrQixFQUFFO1FBQ3BDLGdCQUFnQixHQUNoQixNQUFNQyxTQUFTO1lBQUNDLE1BQU07WUFBT0MsT0FBT0wsS0FBS0ssS0FBSztRQUFBO1FBQzlDTixNQUFNTyxLQUFLLENBQUNOLE1BQU1HO1FBQ2xCLE9BQU9KLE1BQU1RLFNBQVMsQ0FBQ1AsTUFBTUc7SUFDL0I7SUFFQSxPQUFPSztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2h0bWwuanM/YjcxYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkh0bWx9IEh0bWxcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi9pbmRleC5qcycpLlJhd30gUmF3XG4gKi9cblxuLy8gTWFrZSBWUyBDb2RlIHNob3cgcmVmZXJlbmNlcyB0byB0aGUgYWJvdmUgdHlwZXMuXG4nJ1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGh0bWxgIG5vZGUgaW50byBoYXN0IChgcmF3YCBub2RlIGluIGRhbmdlcm91cyBtb2RlLCBvdGhlcndpc2VcbiAqIG5vdGhpbmcpLlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7SHRtbH0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnQgfCBSYXcgfCB1bmRlZmluZWR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGh0bWwoc3RhdGUsIG5vZGUpIHtcbiAgaWYgKHN0YXRlLm9wdGlvbnMuYWxsb3dEYW5nZXJvdXNIdG1sKSB7XG4gICAgLyoqIEB0eXBlIHtSYXd9ICovXG4gICAgY29uc3QgcmVzdWx0ID0ge3R5cGU6ICdyYXcnLCB2YWx1ZTogbm9kZS52YWx1ZX1cbiAgICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gICAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkXG59XG4iXSwibmFtZXMiOlsiaHRtbCIsInN0YXRlIiwibm9kZSIsIm9wdGlvbnMiLCJhbGxvd0Rhbmdlcm91c0h0bWwiLCJyZXN1bHQiLCJ0eXBlIiwidmFsdWUiLCJwYXRjaCIsImFwcGx5RGF0YSIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/html.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js ***!
  \**********************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   imageReference: function() { return /* binding */ imageReference; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-sanitize-uri */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-sanitize-uri@2.0.1/node_modules/micromark-util-sanitize-uri/dev/index.js\");\n/* harmony import */ var _revert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../revert.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/revert.js\");\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */ \n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */ function imageReference(state, node) {\n    const id = String(node.identifier).toUpperCase();\n    const definition = state.definitionById.get(id);\n    if (!definition) {\n        return (0,_revert_js__WEBPACK_IMPORTED_MODULE_0__.revert)(state, node);\n    }\n    /** @type {Properties} */ const properties = {\n        src: (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_1__.normalizeUri)(definition.url || \"\"),\n        alt: node.alt\n    };\n    if (definition.title !== null && definition.title !== undefined) {\n        properties.title = definition.title;\n    }\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"img\",\n        properties,\n        children: []\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2ltYWdlLXJlZmVyZW5jZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7O0NBTUMsR0FFdUQ7QUFDckI7QUFFbkM7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU0UsZUFBZUMsS0FBSyxFQUFFQyxJQUFJO0lBQ3hDLE1BQU1DLEtBQUtDLE9BQU9GLEtBQUtHLFVBQVUsRUFBRUMsV0FBVztJQUM5QyxNQUFNQyxhQUFhTixNQUFNTyxjQUFjLENBQUNDLEdBQUcsQ0FBQ047SUFFNUMsSUFBSSxDQUFDSSxZQUFZO1FBQ2YsT0FBT1Isa0RBQU1BLENBQUNFLE9BQU9DO0lBQ3ZCO0lBRUEsdUJBQXVCLEdBQ3ZCLE1BQU1RLGFBQWE7UUFBQ0MsS0FBS2IseUVBQVlBLENBQUNTLFdBQVdLLEdBQUcsSUFBSTtRQUFLQyxLQUFLWCxLQUFLVyxHQUFHO0lBQUE7SUFFMUUsSUFBSU4sV0FBV08sS0FBSyxLQUFLLFFBQVFQLFdBQVdPLEtBQUssS0FBS0MsV0FBVztRQUMvREwsV0FBV0ksS0FBSyxHQUFHUCxXQUFXTyxLQUFLO0lBQ3JDO0lBRUEsb0JBQW9CLEdBQ3BCLE1BQU1FLFNBQVM7UUFBQ0MsTUFBTTtRQUFXQyxTQUFTO1FBQU9SO1FBQVlTLFVBQVUsRUFBRTtJQUFBO0lBQ3pFbEIsTUFBTW1CLEtBQUssQ0FBQ2xCLE1BQU1jO0lBQ2xCLE9BQU9mLE1BQU1vQixTQUFTLENBQUNuQixNQUFNYztBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC10by1oYXN0QDEzLjIuMC9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9oYW5kbGVycy9pbWFnZS1yZWZlcmVuY2UuanM/NDE4NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudENvbnRlbnR9IEVsZW1lbnRDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUHJvcGVydGllc30gUHJvcGVydGllc1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5JbWFnZVJlZmVyZW5jZX0gSW1hZ2VSZWZlcmVuY2VcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtub3JtYWxpemVVcml9IGZyb20gJ21pY3JvbWFyay11dGlsLXNhbml0aXplLXVyaSdcbmltcG9ydCB7cmV2ZXJ0fSBmcm9tICcuLi9yZXZlcnQuanMnXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgaW1hZ2VSZWZlcmVuY2VgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7SW1hZ2VSZWZlcmVuY2V9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtBcnJheTxFbGVtZW50Q29udGVudD4gfCBFbGVtZW50Q29udGVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW1hZ2VSZWZlcmVuY2Uoc3RhdGUsIG5vZGUpIHtcbiAgY29uc3QgaWQgPSBTdHJpbmcobm9kZS5pZGVudGlmaWVyKS50b1VwcGVyQ2FzZSgpXG4gIGNvbnN0IGRlZmluaXRpb24gPSBzdGF0ZS5kZWZpbml0aW9uQnlJZC5nZXQoaWQpXG5cbiAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgcmV0dXJuIHJldmVydChzdGF0ZSwgbm9kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7UHJvcGVydGllc30gKi9cbiAgY29uc3QgcHJvcGVydGllcyA9IHtzcmM6IG5vcm1hbGl6ZVVyaShkZWZpbml0aW9uLnVybCB8fCAnJyksIGFsdDogbm9kZS5hbHR9XG5cbiAgaWYgKGRlZmluaXRpb24udGl0bGUgIT09IG51bGwgJiYgZGVmaW5pdGlvbi50aXRsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcHJvcGVydGllcy50aXRsZSA9IGRlZmluaXRpb24udGl0bGVcbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge3R5cGU6ICdlbGVtZW50JywgdGFnTmFtZTogJ2ltZycsIHByb3BlcnRpZXMsIGNoaWxkcmVuOiBbXX1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiJdLCJuYW1lcyI6WyJub3JtYWxpemVVcmkiLCJyZXZlcnQiLCJpbWFnZVJlZmVyZW5jZSIsInN0YXRlIiwibm9kZSIsImlkIiwiU3RyaW5nIiwiaWRlbnRpZmllciIsInRvVXBwZXJDYXNlIiwiZGVmaW5pdGlvbiIsImRlZmluaXRpb25CeUlkIiwiZ2V0IiwicHJvcGVydGllcyIsInNyYyIsInVybCIsImFsdCIsInRpdGxlIiwidW5kZWZpbmVkIiwicmVzdWx0IiwidHlwZSIsInRhZ05hbWUiLCJjaGlsZHJlbiIsInBhdGNoIiwiYXBwbHlEYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/image.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/image.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   image: function() { return /* binding */ image; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-sanitize-uri */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-sanitize-uri@2.0.1/node_modules/micromark-util-sanitize-uri/dev/index.js\");\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */ \n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */ function image(state, node) {\n    /** @type {Properties} */ const properties = {\n        src: (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__.normalizeUri)(node.url)\n    };\n    if (node.alt !== null && node.alt !== undefined) {\n        properties.alt = node.alt;\n    }\n    if (node.title !== null && node.title !== undefined) {\n        properties.title = node.title;\n    }\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"img\",\n        properties,\n        children: []\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2ltYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7O0NBS0MsR0FFdUQ7QUFFeEQ7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU0MsTUFBTUMsS0FBSyxFQUFFQyxJQUFJO0lBQy9CLHVCQUF1QixHQUN2QixNQUFNQyxhQUFhO1FBQUNDLEtBQUtMLHlFQUFZQSxDQUFDRyxLQUFLRyxHQUFHO0lBQUM7SUFFL0MsSUFBSUgsS0FBS0ksR0FBRyxLQUFLLFFBQVFKLEtBQUtJLEdBQUcsS0FBS0MsV0FBVztRQUMvQ0osV0FBV0csR0FBRyxHQUFHSixLQUFLSSxHQUFHO0lBQzNCO0lBRUEsSUFBSUosS0FBS00sS0FBSyxLQUFLLFFBQVFOLEtBQUtNLEtBQUssS0FBS0QsV0FBVztRQUNuREosV0FBV0ssS0FBSyxHQUFHTixLQUFLTSxLQUFLO0lBQy9CO0lBRUEsb0JBQW9CLEdBQ3BCLE1BQU1DLFNBQVM7UUFBQ0MsTUFBTTtRQUFXQyxTQUFTO1FBQU9SO1FBQVlTLFVBQVUsRUFBRTtJQUFBO0lBQ3pFWCxNQUFNWSxLQUFLLENBQUNYLE1BQU1PO0lBQ2xCLE9BQU9SLE1BQU1hLFNBQVMsQ0FBQ1osTUFBTU87QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8taGFzdEAxMy4yLjAvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvaW1hZ2UuanM/MDdlNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUHJvcGVydGllc30gUHJvcGVydGllc1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5JbWFnZX0gSW1hZ2VcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtub3JtYWxpemVVcml9IGZyb20gJ21pY3JvbWFyay11dGlsLXNhbml0aXplLXVyaSdcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBpbWFnZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtJbWFnZX0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGltYWdlKHN0YXRlLCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7UHJvcGVydGllc30gKi9cbiAgY29uc3QgcHJvcGVydGllcyA9IHtzcmM6IG5vcm1hbGl6ZVVyaShub2RlLnVybCl9XG5cbiAgaWYgKG5vZGUuYWx0ICE9PSBudWxsICYmIG5vZGUuYWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBwcm9wZXJ0aWVzLmFsdCA9IG5vZGUuYWx0XG4gIH1cblxuICBpZiAobm9kZS50aXRsZSAhPT0gbnVsbCAmJiBub2RlLnRpdGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBwcm9wZXJ0aWVzLnRpdGxlID0gbm9kZS50aXRsZVxuICB9XG5cbiAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICBjb25zdCByZXN1bHQgPSB7dHlwZTogJ2VsZW1lbnQnLCB0YWdOYW1lOiAnaW1nJywgcHJvcGVydGllcywgY2hpbGRyZW46IFtdfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIl0sIm5hbWVzIjpbIm5vcm1hbGl6ZVVyaSIsImltYWdlIiwic3RhdGUiLCJub2RlIiwicHJvcGVydGllcyIsInNyYyIsInVybCIsImFsdCIsInVuZGVmaW5lZCIsInRpdGxlIiwicmVzdWx0IiwidHlwZSIsInRhZ05hbWUiLCJjaGlsZHJlbiIsInBhdGNoIiwiYXBwbHlEYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/image.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/index.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/index.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handlers: function() { return /* binding */ handlers; }\n/* harmony export */ });\n/* harmony import */ var _blockquote_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blockquote.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js\");\n/* harmony import */ var _break_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./break.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/break.js\");\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./code.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/code.js\");\n/* harmony import */ var _delete_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./delete.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/delete.js\");\n/* harmony import */ var _emphasis_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./emphasis.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js\");\n/* harmony import */ var _footnote_reference_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./footnote-reference.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js\");\n/* harmony import */ var _heading_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./heading.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/heading.js\");\n/* harmony import */ var _html_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./html.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/html.js\");\n/* harmony import */ var _image_reference_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./image-reference.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js\");\n/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./image.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/image.js\");\n/* harmony import */ var _inline_code_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./inline-code.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js\");\n/* harmony import */ var _link_reference_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./link-reference.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js\");\n/* harmony import */ var _link_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./link.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/link.js\");\n/* harmony import */ var _list_item_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./list-item.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/list-item.js\");\n/* harmony import */ var _list_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./list.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/list.js\");\n/* harmony import */ var _paragraph_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./paragraph.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js\");\n/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./root.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/root.js\");\n/* harmony import */ var _strong_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./strong.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/strong.js\");\n/* harmony import */ var _table_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./table.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table.js\");\n/* harmony import */ var _table_row_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./table-row.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table-row.js\");\n/* harmony import */ var _table_cell_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./table-cell.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js\");\n/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./text.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/text.js\");\n/* harmony import */ var _thematic_break_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./thematic-break.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */ const handlers = {\n    blockquote: _blockquote_js__WEBPACK_IMPORTED_MODULE_0__.blockquote,\n    break: _break_js__WEBPACK_IMPORTED_MODULE_1__.hardBreak,\n    code: _code_js__WEBPACK_IMPORTED_MODULE_2__.code,\n    delete: _delete_js__WEBPACK_IMPORTED_MODULE_3__.strikethrough,\n    emphasis: _emphasis_js__WEBPACK_IMPORTED_MODULE_4__.emphasis,\n    footnoteReference: _footnote_reference_js__WEBPACK_IMPORTED_MODULE_5__.footnoteReference,\n    heading: _heading_js__WEBPACK_IMPORTED_MODULE_6__.heading,\n    html: _html_js__WEBPACK_IMPORTED_MODULE_7__.html,\n    imageReference: _image_reference_js__WEBPACK_IMPORTED_MODULE_8__.imageReference,\n    image: _image_js__WEBPACK_IMPORTED_MODULE_9__.image,\n    inlineCode: _inline_code_js__WEBPACK_IMPORTED_MODULE_10__.inlineCode,\n    linkReference: _link_reference_js__WEBPACK_IMPORTED_MODULE_11__.linkReference,\n    link: _link_js__WEBPACK_IMPORTED_MODULE_12__.link,\n    listItem: _list_item_js__WEBPACK_IMPORTED_MODULE_13__.listItem,\n    list: _list_js__WEBPACK_IMPORTED_MODULE_14__.list,\n    paragraph: _paragraph_js__WEBPACK_IMPORTED_MODULE_15__.paragraph,\n    // @ts-expect-error: root is different, but hard to type.\n    root: _root_js__WEBPACK_IMPORTED_MODULE_16__.root,\n    strong: _strong_js__WEBPACK_IMPORTED_MODULE_17__.strong,\n    table: _table_js__WEBPACK_IMPORTED_MODULE_18__.table,\n    tableCell: _table_cell_js__WEBPACK_IMPORTED_MODULE_19__.tableCell,\n    tableRow: _table_row_js__WEBPACK_IMPORTED_MODULE_20__.tableRow,\n    text: _text_js__WEBPACK_IMPORTED_MODULE_21__.text,\n    thematicBreak: _thematic_break_js__WEBPACK_IMPORTED_MODULE_22__.thematicBreak,\n    toml: ignore,\n    yaml: ignore,\n    definition: ignore,\n    footnoteDefinition: ignore\n};\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n    return undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEwQztBQUNOO0FBQ047QUFDVztBQUNIO0FBQ21CO0FBQ3JCO0FBQ047QUFDcUI7QUFDbkI7QUFDVztBQUNNO0FBQ25CO0FBQ1M7QUFDVDtBQUNVO0FBQ1Y7QUFDSTtBQUNGO0FBQ087QUFDRTtBQUNYO0FBQ21CO0FBRWpEOzs7O0NBSUMsR0FDTSxNQUFNdUIsV0FBVztJQUN0QnZCLFVBQVVBLHdEQUFBQTtJQUNWd0IsT0FBT3ZCLGdEQUFTQTtJQUNoQkMsSUFBSUEsNENBQUFBO0lBQ0p1QixRQUFRdEIscURBQWFBO0lBQ3JCQyxRQUFRQSxvREFBQUE7SUFDUkMsaUJBQWlCQSx1RUFBQUE7SUFDakJDLE9BQU9BLGtEQUFBQTtJQUNQQyxJQUFJQSw0Q0FBQUE7SUFDSkMsY0FBY0EsaUVBQUFBO0lBQ2RDLEtBQUtBLDhDQUFBQTtJQUNMQyxVQUFVQSwwREFBQUE7SUFDVkMsYUFBYUEsZ0VBQUFBO0lBQ2JDLElBQUlBLDZDQUFBQTtJQUNKQyxRQUFRQSxzREFBQUE7SUFDUkMsSUFBSUEsNkNBQUFBO0lBQ0pDLFNBQVNBLHVEQUFBQTtJQUNULHlEQUF5RDtJQUN6REMsSUFBSUEsNkNBQUFBO0lBQ0pDLE1BQU1BLGlEQUFBQTtJQUNOQyxLQUFLQSwrQ0FBQUE7SUFDTEUsU0FBU0Esd0RBQUFBO0lBQ1RELFFBQVFBLHNEQUFBQTtJQUNSRSxJQUFJQSw2Q0FBQUE7SUFDSkMsYUFBYUEsZ0VBQUFBO0lBQ2JJLE1BQU1DO0lBQ05DLE1BQU1EO0lBQ05FLFlBQVlGO0lBQ1pHLG9CQUFvQkg7QUFDdEIsRUFBQztBQUVELDZDQUE2QztBQUM3QyxTQUFTQTtJQUNQLE9BQU9JO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8taGFzdEAxMy4yLjAvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvaW5kZXguanM/MTQxOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2Jsb2NrcXVvdGV9IGZyb20gJy4vYmxvY2txdW90ZS5qcydcbmltcG9ydCB7aGFyZEJyZWFrfSBmcm9tICcuL2JyZWFrLmpzJ1xuaW1wb3J0IHtjb2RlfSBmcm9tICcuL2NvZGUuanMnXG5pbXBvcnQge3N0cmlrZXRocm91Z2h9IGZyb20gJy4vZGVsZXRlLmpzJ1xuaW1wb3J0IHtlbXBoYXNpc30gZnJvbSAnLi9lbXBoYXNpcy5qcydcbmltcG9ydCB7Zm9vdG5vdGVSZWZlcmVuY2V9IGZyb20gJy4vZm9vdG5vdGUtcmVmZXJlbmNlLmpzJ1xuaW1wb3J0IHtoZWFkaW5nfSBmcm9tICcuL2hlYWRpbmcuanMnXG5pbXBvcnQge2h0bWx9IGZyb20gJy4vaHRtbC5qcydcbmltcG9ydCB7aW1hZ2VSZWZlcmVuY2V9IGZyb20gJy4vaW1hZ2UtcmVmZXJlbmNlLmpzJ1xuaW1wb3J0IHtpbWFnZX0gZnJvbSAnLi9pbWFnZS5qcydcbmltcG9ydCB7aW5saW5lQ29kZX0gZnJvbSAnLi9pbmxpbmUtY29kZS5qcydcbmltcG9ydCB7bGlua1JlZmVyZW5jZX0gZnJvbSAnLi9saW5rLXJlZmVyZW5jZS5qcydcbmltcG9ydCB7bGlua30gZnJvbSAnLi9saW5rLmpzJ1xuaW1wb3J0IHtsaXN0SXRlbX0gZnJvbSAnLi9saXN0LWl0ZW0uanMnXG5pbXBvcnQge2xpc3R9IGZyb20gJy4vbGlzdC5qcydcbmltcG9ydCB7cGFyYWdyYXBofSBmcm9tICcuL3BhcmFncmFwaC5qcydcbmltcG9ydCB7cm9vdH0gZnJvbSAnLi9yb290LmpzJ1xuaW1wb3J0IHtzdHJvbmd9IGZyb20gJy4vc3Ryb25nLmpzJ1xuaW1wb3J0IHt0YWJsZX0gZnJvbSAnLi90YWJsZS5qcydcbmltcG9ydCB7dGFibGVSb3d9IGZyb20gJy4vdGFibGUtcm93LmpzJ1xuaW1wb3J0IHt0YWJsZUNlbGx9IGZyb20gJy4vdGFibGUtY2VsbC5qcydcbmltcG9ydCB7dGV4dH0gZnJvbSAnLi90ZXh0LmpzJ1xuaW1wb3J0IHt0aGVtYXRpY0JyZWFrfSBmcm9tICcuL3RoZW1hdGljLWJyZWFrLmpzJ1xuXG4vKipcbiAqIERlZmF1bHQgaGFuZGxlcnMgZm9yIG5vZGVzLlxuICpcbiAqIEBzYXRpc2ZpZXMge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5IYW5kbGVyc31cbiAqL1xuZXhwb3J0IGNvbnN0IGhhbmRsZXJzID0ge1xuICBibG9ja3F1b3RlLFxuICBicmVhazogaGFyZEJyZWFrLFxuICBjb2RlLFxuICBkZWxldGU6IHN0cmlrZXRocm91Z2gsXG4gIGVtcGhhc2lzLFxuICBmb290bm90ZVJlZmVyZW5jZSxcbiAgaGVhZGluZyxcbiAgaHRtbCxcbiAgaW1hZ2VSZWZlcmVuY2UsXG4gIGltYWdlLFxuICBpbmxpbmVDb2RlLFxuICBsaW5rUmVmZXJlbmNlLFxuICBsaW5rLFxuICBsaXN0SXRlbSxcbiAgbGlzdCxcbiAgcGFyYWdyYXBoLFxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiByb290IGlzIGRpZmZlcmVudCwgYnV0IGhhcmQgdG8gdHlwZS5cbiAgcm9vdCxcbiAgc3Ryb25nLFxuICB0YWJsZSxcbiAgdGFibGVDZWxsLFxuICB0YWJsZVJvdyxcbiAgdGV4dCxcbiAgdGhlbWF0aWNCcmVhayxcbiAgdG9tbDogaWdub3JlLFxuICB5YW1sOiBpZ25vcmUsXG4gIGRlZmluaXRpb246IGlnbm9yZSxcbiAgZm9vdG5vdGVEZWZpbml0aW9uOiBpZ25vcmVcbn1cblxuLy8gUmV0dXJuIG5vdGhpbmcgZm9yIG5vZGVzIHRoYXQgYXJlIGlnbm9yZWQuXG5mdW5jdGlvbiBpZ25vcmUoKSB7XG4gIHJldHVybiB1bmRlZmluZWRcbn1cbiJdLCJuYW1lcyI6WyJibG9ja3F1b3RlIiwiaGFyZEJyZWFrIiwiY29kZSIsInN0cmlrZXRocm91Z2giLCJlbXBoYXNpcyIsImZvb3Rub3RlUmVmZXJlbmNlIiwiaGVhZGluZyIsImh0bWwiLCJpbWFnZVJlZmVyZW5jZSIsImltYWdlIiwiaW5saW5lQ29kZSIsImxpbmtSZWZlcmVuY2UiLCJsaW5rIiwibGlzdEl0ZW0iLCJsaXN0IiwicGFyYWdyYXBoIiwicm9vdCIsInN0cm9uZyIsInRhYmxlIiwidGFibGVSb3ciLCJ0YWJsZUNlbGwiLCJ0ZXh0IiwidGhlbWF0aWNCcmVhayIsImhhbmRsZXJzIiwiYnJlYWsiLCJkZWxldGUiLCJ0b21sIiwiaWdub3JlIiwieWFtbCIsImRlZmluaXRpb24iLCJmb290bm90ZURlZmluaXRpb24iLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js ***!
  \******************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inlineCode: function() { return /* binding */ inlineCode; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */ function inlineCode(state, node) {\n    /** @type {Text} */ const text = {\n        type: \"text\",\n        value: node.value.replace(/\\r?\\n|\\r/g, \" \")\n    };\n    state.patch(node, text);\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"code\",\n        properties: {},\n        children: [\n            text\n        ]\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2lubGluZS1jb2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUVELG1EQUFtRDtBQUNuRDtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNNLFNBQVNBLFdBQVdDLEtBQUssRUFBRUMsSUFBSTtJQUNwQyxpQkFBaUIsR0FDakIsTUFBTUMsT0FBTztRQUFDQyxNQUFNO1FBQVFDLE9BQU9ILEtBQUtHLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLGFBQWE7SUFBSTtJQUN2RUwsTUFBTU0sS0FBSyxDQUFDTCxNQUFNQztJQUVsQixvQkFBb0IsR0FDcEIsTUFBTUssU0FBUztRQUNiSixNQUFNO1FBQ05LLFNBQVM7UUFDVEMsWUFBWSxDQUFDO1FBQ2JDLFVBQVU7WUFBQ1I7U0FBSztJQUNsQjtJQUNBRixNQUFNTSxLQUFLLENBQUNMLE1BQU1NO0lBQ2xCLE9BQU9QLE1BQU1XLFNBQVMsQ0FBQ1YsTUFBTU07QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8taGFzdEAxMy4yLjAvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvaW5saW5lLWNvZGUuanM/ZTU5MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuVGV4dH0gVGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5JbmxpbmVDb2RlfSBJbmxpbmVDb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbi8vIE1ha2UgVlMgQ29kZSBzaG93IHJlZmVyZW5jZXMgdG8gdGhlIGFib3ZlIHR5cGVzLlxuJydcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBpbmxpbmVDb2RlYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0lubGluZUNvZGV9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmxpbmVDb2RlKHN0YXRlLCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7VGV4dH0gKi9cbiAgY29uc3QgdGV4dCA9IHt0eXBlOiAndGV4dCcsIHZhbHVlOiBub2RlLnZhbHVlLnJlcGxhY2UoL1xccj9cXG58XFxyL2csICcgJyl9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHRleHQpXG5cbiAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgIHRhZ05hbWU6ICdjb2RlJyxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBjaGlsZHJlbjogW3RleHRdXG4gIH1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiJdLCJuYW1lcyI6WyJpbmxpbmVDb2RlIiwic3RhdGUiLCJub2RlIiwidGV4dCIsInR5cGUiLCJ2YWx1ZSIsInJlcGxhY2UiLCJwYXRjaCIsInJlc3VsdCIsInRhZ05hbWUiLCJwcm9wZXJ0aWVzIiwiY2hpbGRyZW4iLCJhcHBseURhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   linkReference: function() { return /* binding */ linkReference; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-sanitize-uri */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-sanitize-uri@2.0.1/node_modules/micromark-util-sanitize-uri/dev/index.js\");\n/* harmony import */ var _revert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../revert.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/revert.js\");\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */ \n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */ function linkReference(state, node) {\n    const id = String(node.identifier).toUpperCase();\n    const definition = state.definitionById.get(id);\n    if (!definition) {\n        return (0,_revert_js__WEBPACK_IMPORTED_MODULE_0__.revert)(state, node);\n    }\n    /** @type {Properties} */ const properties = {\n        href: (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_1__.normalizeUri)(definition.url || \"\")\n    };\n    if (definition.title !== null && definition.title !== undefined) {\n        properties.title = definition.title;\n    }\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"a\",\n        properties,\n        children: state.all(node)\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2xpbmstcmVmZXJlbmNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Ozs7Q0FNQyxHQUV1RDtBQUNyQjtBQUVuQzs7Ozs7Ozs7O0NBU0MsR0FDTSxTQUFTRSxjQUFjQyxLQUFLLEVBQUVDLElBQUk7SUFDdkMsTUFBTUMsS0FBS0MsT0FBT0YsS0FBS0csVUFBVSxFQUFFQyxXQUFXO0lBQzlDLE1BQU1DLGFBQWFOLE1BQU1PLGNBQWMsQ0FBQ0MsR0FBRyxDQUFDTjtJQUU1QyxJQUFJLENBQUNJLFlBQVk7UUFDZixPQUFPUixrREFBTUEsQ0FBQ0UsT0FBT0M7SUFDdkI7SUFFQSx1QkFBdUIsR0FDdkIsTUFBTVEsYUFBYTtRQUFDQyxNQUFNYix5RUFBWUEsQ0FBQ1MsV0FBV0ssR0FBRyxJQUFJO0lBQUc7SUFFNUQsSUFBSUwsV0FBV00sS0FBSyxLQUFLLFFBQVFOLFdBQVdNLEtBQUssS0FBS0MsV0FBVztRQUMvREosV0FBV0csS0FBSyxHQUFHTixXQUFXTSxLQUFLO0lBQ3JDO0lBRUEsb0JBQW9CLEdBQ3BCLE1BQU1FLFNBQVM7UUFDYkMsTUFBTTtRQUNOQyxTQUFTO1FBQ1RQO1FBQ0FRLFVBQVVqQixNQUFNa0IsR0FBRyxDQUFDakI7SUFDdEI7SUFDQUQsTUFBTW1CLEtBQUssQ0FBQ2xCLE1BQU1hO0lBQ2xCLE9BQU9kLE1BQU1vQixTQUFTLENBQUNuQixNQUFNYTtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC10by1oYXN0QDEzLjIuMC9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9oYW5kbGVycy9saW5rLXJlZmVyZW5jZS5qcz9kOTc0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50Q29udGVudH0gRWxlbWVudENvbnRlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Qcm9wZXJ0aWVzfSBQcm9wZXJ0aWVzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkxpbmtSZWZlcmVuY2V9IExpbmtSZWZlcmVuY2VcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtub3JtYWxpemVVcml9IGZyb20gJ21pY3JvbWFyay11dGlsLXNhbml0aXplLXVyaSdcbmltcG9ydCB7cmV2ZXJ0fSBmcm9tICcuLi9yZXZlcnQuanMnXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgbGlua1JlZmVyZW5jZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtMaW5rUmVmZXJlbmNlfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7QXJyYXk8RWxlbWVudENvbnRlbnQ+IHwgRWxlbWVudENvbnRlbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpbmtSZWZlcmVuY2Uoc3RhdGUsIG5vZGUpIHtcbiAgY29uc3QgaWQgPSBTdHJpbmcobm9kZS5pZGVudGlmaWVyKS50b1VwcGVyQ2FzZSgpXG4gIGNvbnN0IGRlZmluaXRpb24gPSBzdGF0ZS5kZWZpbml0aW9uQnlJZC5nZXQoaWQpXG5cbiAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgcmV0dXJuIHJldmVydChzdGF0ZSwgbm9kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7UHJvcGVydGllc30gKi9cbiAgY29uc3QgcHJvcGVydGllcyA9IHtocmVmOiBub3JtYWxpemVVcmkoZGVmaW5pdGlvbi51cmwgfHwgJycpfVxuXG4gIGlmIChkZWZpbml0aW9uLnRpdGxlICE9PSBudWxsICYmIGRlZmluaXRpb24udGl0bGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHByb3BlcnRpZXMudGl0bGUgPSBkZWZpbml0aW9uLnRpdGxlXG4gIH1cblxuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ2EnLFxuICAgIHByb3BlcnRpZXMsXG4gICAgY2hpbGRyZW46IHN0YXRlLmFsbChub2RlKVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iXSwibmFtZXMiOlsibm9ybWFsaXplVXJpIiwicmV2ZXJ0IiwibGlua1JlZmVyZW5jZSIsInN0YXRlIiwibm9kZSIsImlkIiwiU3RyaW5nIiwiaWRlbnRpZmllciIsInRvVXBwZXJDYXNlIiwiZGVmaW5pdGlvbiIsImRlZmluaXRpb25CeUlkIiwiZ2V0IiwicHJvcGVydGllcyIsImhyZWYiLCJ1cmwiLCJ0aXRsZSIsInVuZGVmaW5lZCIsInJlc3VsdCIsInR5cGUiLCJ0YWdOYW1lIiwiY2hpbGRyZW4iLCJhbGwiLCJwYXRjaCIsImFwcGx5RGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/link.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/link.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   link: function() { return /* binding */ link; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-sanitize-uri */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-sanitize-uri@2.0.1/node_modules/micromark-util-sanitize-uri/dev/index.js\");\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */ \n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */ function link(state, node) {\n    /** @type {Properties} */ const properties = {\n        href: (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__.normalizeUri)(node.url)\n    };\n    if (node.title !== null && node.title !== undefined) {\n        properties.title = node.title;\n    }\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"a\",\n        properties,\n        children: state.all(node)\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2xpbmsuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUV1RDtBQUV4RDs7Ozs7Ozs7O0NBU0MsR0FDTSxTQUFTQyxLQUFLQyxLQUFLLEVBQUVDLElBQUk7SUFDOUIsdUJBQXVCLEdBQ3ZCLE1BQU1DLGFBQWE7UUFBQ0MsTUFBTUwseUVBQVlBLENBQUNHLEtBQUtHLEdBQUc7SUFBQztJQUVoRCxJQUFJSCxLQUFLSSxLQUFLLEtBQUssUUFBUUosS0FBS0ksS0FBSyxLQUFLQyxXQUFXO1FBQ25ESixXQUFXRyxLQUFLLEdBQUdKLEtBQUtJLEtBQUs7SUFDL0I7SUFFQSxvQkFBb0IsR0FDcEIsTUFBTUUsU0FBUztRQUNiQyxNQUFNO1FBQ05DLFNBQVM7UUFDVFA7UUFDQVEsVUFBVVYsTUFBTVcsR0FBRyxDQUFDVjtJQUN0QjtJQUNBRCxNQUFNWSxLQUFLLENBQUNYLE1BQU1NO0lBQ2xCLE9BQU9QLE1BQU1hLFNBQVMsQ0FBQ1osTUFBTU07QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8taGFzdEAxMy4yLjAvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvbGluay5qcz8yODQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Qcm9wZXJ0aWVzfSBQcm9wZXJ0aWVzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkxpbmt9IExpbmtcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtub3JtYWxpemVVcml9IGZyb20gJ21pY3JvbWFyay11dGlsLXNhbml0aXplLXVyaSdcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBsaW5rYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0xpbmt9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaW5rKHN0YXRlLCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7UHJvcGVydGllc30gKi9cbiAgY29uc3QgcHJvcGVydGllcyA9IHtocmVmOiBub3JtYWxpemVVcmkobm9kZS51cmwpfVxuXG4gIGlmIChub2RlLnRpdGxlICE9PSBudWxsICYmIG5vZGUudGl0bGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHByb3BlcnRpZXMudGl0bGUgPSBub2RlLnRpdGxlXG4gIH1cblxuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ2EnLFxuICAgIHByb3BlcnRpZXMsXG4gICAgY2hpbGRyZW46IHN0YXRlLmFsbChub2RlKVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iXSwibmFtZXMiOlsibm9ybWFsaXplVXJpIiwibGluayIsInN0YXRlIiwibm9kZSIsInByb3BlcnRpZXMiLCJocmVmIiwidXJsIiwidGl0bGUiLCJ1bmRlZmluZWQiLCJyZXN1bHQiLCJ0eXBlIiwidGFnTmFtZSIsImNoaWxkcmVuIiwiYWxsIiwicGF0Y2giLCJhcHBseURhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/link.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/list-item.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/list-item.js ***!
  \****************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   listItem: function() { return /* binding */ listItem; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */ function listItem(state, node, parent) {\n    const results = state.all(node);\n    const loose = parent ? listLoose(parent) : listItemLoose(node);\n    /** @type {Properties} */ const properties = {};\n    /** @type {Array<ElementContent>} */ const children = [];\n    if (typeof node.checked === \"boolean\") {\n        const head = results[0];\n        /** @type {Element} */ let paragraph;\n        if (head && head.type === \"element\" && head.tagName === \"p\") {\n            paragraph = head;\n        } else {\n            paragraph = {\n                type: \"element\",\n                tagName: \"p\",\n                properties: {},\n                children: []\n            };\n            results.unshift(paragraph);\n        }\n        if (paragraph.children.length > 0) {\n            paragraph.children.unshift({\n                type: \"text\",\n                value: \" \"\n            });\n        }\n        paragraph.children.unshift({\n            type: \"element\",\n            tagName: \"input\",\n            properties: {\n                type: \"checkbox\",\n                checked: node.checked,\n                disabled: true\n            },\n            children: []\n        });\n        // According to github-markdown-css, this class hides bullet.\n        // See: <https://github.com/sindresorhus/github-markdown-css>.\n        properties.className = [\n            \"task-list-item\"\n        ];\n    }\n    let index = -1;\n    while(++index < results.length){\n        const child = results[index];\n        // Add eols before nodes, except if this is a loose, first paragraph.\n        if (loose || index !== 0 || child.type !== \"element\" || child.tagName !== \"p\") {\n            children.push({\n                type: \"text\",\n                value: \"\\n\"\n            });\n        }\n        if (child.type === \"element\" && child.tagName === \"p\" && !loose) {\n            children.push(...child.children);\n        } else {\n            children.push(child);\n        }\n    }\n    const tail = results[results.length - 1];\n    // Add a final eol.\n    if (tail && (loose || tail.type !== \"element\" || tail.tagName !== \"p\")) {\n        children.push({\n            type: \"text\",\n            value: \"\\n\"\n        });\n    }\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"li\",\n        properties,\n        children\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n/**\n * @param {Parents} node\n * @return {Boolean}\n */ function listLoose(node) {\n    let loose = false;\n    if (node.type === \"list\") {\n        loose = node.spread || false;\n        const children = node.children;\n        let index = -1;\n        while(!loose && ++index < children.length){\n            loose = listItemLoose(children[index]);\n        }\n    }\n    return loose;\n}\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */ function listItemLoose(node) {\n    const spread = node.spread;\n    return spread === null || spread === undefined ? node.children.length > 1 : spread;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2xpc3QtaXRlbS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Q0FPQyxHQUVELG1EQUFtRDtBQUNuRDtBQUVBOzs7Ozs7Ozs7OztDQVdDLEdBQ00sU0FBU0EsU0FBU0MsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLE1BQU07SUFDMUMsTUFBTUMsVUFBVUgsTUFBTUksR0FBRyxDQUFDSDtJQUMxQixNQUFNSSxRQUFRSCxTQUFTSSxVQUFVSixVQUFVSyxjQUFjTjtJQUN6RCx1QkFBdUIsR0FDdkIsTUFBTU8sYUFBYSxDQUFDO0lBQ3BCLGtDQUFrQyxHQUNsQyxNQUFNQyxXQUFXLEVBQUU7SUFFbkIsSUFBSSxPQUFPUixLQUFLUyxPQUFPLEtBQUssV0FBVztRQUNyQyxNQUFNQyxPQUFPUixPQUFPLENBQUMsRUFBRTtRQUN2QixvQkFBb0IsR0FDcEIsSUFBSVM7UUFFSixJQUFJRCxRQUFRQSxLQUFLRSxJQUFJLEtBQUssYUFBYUYsS0FBS0csT0FBTyxLQUFLLEtBQUs7WUFDM0RGLFlBQVlEO1FBQ2QsT0FBTztZQUNMQyxZQUFZO2dCQUFDQyxNQUFNO2dCQUFXQyxTQUFTO2dCQUFLTixZQUFZLENBQUM7Z0JBQUdDLFVBQVUsRUFBRTtZQUFBO1lBQ3hFTixRQUFRWSxPQUFPLENBQUNIO1FBQ2xCO1FBRUEsSUFBSUEsVUFBVUgsUUFBUSxDQUFDTyxNQUFNLEdBQUcsR0FBRztZQUNqQ0osVUFBVUgsUUFBUSxDQUFDTSxPQUFPLENBQUM7Z0JBQUNGLE1BQU07Z0JBQVFJLE9BQU87WUFBRztRQUN0RDtRQUVBTCxVQUFVSCxRQUFRLENBQUNNLE9BQU8sQ0FBQztZQUN6QkYsTUFBTTtZQUNOQyxTQUFTO1lBQ1ROLFlBQVk7Z0JBQUNLLE1BQU07Z0JBQVlILFNBQVNULEtBQUtTLE9BQU87Z0JBQUVRLFVBQVU7WUFBSTtZQUNwRVQsVUFBVSxFQUFFO1FBQ2Q7UUFFQSw2REFBNkQ7UUFDN0QsOERBQThEO1FBQzlERCxXQUFXVyxTQUFTLEdBQUc7WUFBQztTQUFpQjtJQUMzQztJQUVBLElBQUlDLFFBQVEsQ0FBQztJQUViLE1BQU8sRUFBRUEsUUFBUWpCLFFBQVFhLE1BQU0sQ0FBRTtRQUMvQixNQUFNSyxRQUFRbEIsT0FBTyxDQUFDaUIsTUFBTTtRQUU1QixxRUFBcUU7UUFDckUsSUFDRWYsU0FDQWUsVUFBVSxLQUNWQyxNQUFNUixJQUFJLEtBQUssYUFDZlEsTUFBTVAsT0FBTyxLQUFLLEtBQ2xCO1lBQ0FMLFNBQVNhLElBQUksQ0FBQztnQkFBQ1QsTUFBTTtnQkFBUUksT0FBTztZQUFJO1FBQzFDO1FBRUEsSUFBSUksTUFBTVIsSUFBSSxLQUFLLGFBQWFRLE1BQU1QLE9BQU8sS0FBSyxPQUFPLENBQUNULE9BQU87WUFDL0RJLFNBQVNhLElBQUksSUFBSUQsTUFBTVosUUFBUTtRQUNqQyxPQUFPO1lBQ0xBLFNBQVNhLElBQUksQ0FBQ0Q7UUFDaEI7SUFDRjtJQUVBLE1BQU1FLE9BQU9wQixPQUFPLENBQUNBLFFBQVFhLE1BQU0sR0FBRyxFQUFFO0lBRXhDLG1CQUFtQjtJQUNuQixJQUFJTyxRQUFTbEIsQ0FBQUEsU0FBU2tCLEtBQUtWLElBQUksS0FBSyxhQUFhVSxLQUFLVCxPQUFPLEtBQUssR0FBRSxHQUFJO1FBQ3RFTCxTQUFTYSxJQUFJLENBQUM7WUFBQ1QsTUFBTTtZQUFRSSxPQUFPO1FBQUk7SUFDMUM7SUFFQSxvQkFBb0IsR0FDcEIsTUFBTU8sU0FBUztRQUFDWCxNQUFNO1FBQVdDLFNBQVM7UUFBTU47UUFBWUM7SUFBUTtJQUNwRVQsTUFBTXlCLEtBQUssQ0FBQ3hCLE1BQU11QjtJQUNsQixPQUFPeEIsTUFBTTBCLFNBQVMsQ0FBQ3pCLE1BQU11QjtBQUMvQjtBQUVBOzs7Q0FHQyxHQUNELFNBQVNsQixVQUFVTCxJQUFJO0lBQ3JCLElBQUlJLFFBQVE7SUFDWixJQUFJSixLQUFLWSxJQUFJLEtBQUssUUFBUTtRQUN4QlIsUUFBUUosS0FBSzBCLE1BQU0sSUFBSTtRQUN2QixNQUFNbEIsV0FBV1IsS0FBS1EsUUFBUTtRQUM5QixJQUFJVyxRQUFRLENBQUM7UUFFYixNQUFPLENBQUNmLFNBQVMsRUFBRWUsUUFBUVgsU0FBU08sTUFBTSxDQUFFO1lBQzFDWCxRQUFRRSxjQUFjRSxRQUFRLENBQUNXLE1BQU07UUFDdkM7SUFDRjtJQUVBLE9BQU9mO0FBQ1Q7QUFFQTs7O0NBR0MsR0FDRCxTQUFTRSxjQUFjTixJQUFJO0lBQ3pCLE1BQU0wQixTQUFTMUIsS0FBSzBCLE1BQU07SUFFMUIsT0FBT0EsV0FBVyxRQUFRQSxXQUFXQyxZQUNqQzNCLEtBQUtRLFFBQVEsQ0FBQ08sTUFBTSxHQUFHLElBQ3ZCVztBQUNOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2xpc3QtaXRlbS5qcz9mZTE2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50Q29udGVudH0gRWxlbWVudENvbnRlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Qcm9wZXJ0aWVzfSBQcm9wZXJ0aWVzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkxpc3RJdGVtfSBMaXN0SXRlbVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5QYXJlbnRzfSBQYXJlbnRzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbi8vIE1ha2UgVlMgQ29kZSBzaG93IHJlZmVyZW5jZXMgdG8gdGhlIGFib3ZlIHR5cGVzLlxuJydcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBsaXN0SXRlbWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtMaXN0SXRlbX0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHBhcmFtIHtQYXJlbnRzIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqICAgUGFyZW50IG9mIGBub2RlYC5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaXN0SXRlbShzdGF0ZSwgbm9kZSwgcGFyZW50KSB7XG4gIGNvbnN0IHJlc3VsdHMgPSBzdGF0ZS5hbGwobm9kZSlcbiAgY29uc3QgbG9vc2UgPSBwYXJlbnQgPyBsaXN0TG9vc2UocGFyZW50KSA6IGxpc3RJdGVtTG9vc2Uobm9kZSlcbiAgLyoqIEB0eXBlIHtQcm9wZXJ0aWVzfSAqL1xuICBjb25zdCBwcm9wZXJ0aWVzID0ge31cbiAgLyoqIEB0eXBlIHtBcnJheTxFbGVtZW50Q29udGVudD59ICovXG4gIGNvbnN0IGNoaWxkcmVuID0gW11cblxuICBpZiAodHlwZW9mIG5vZGUuY2hlY2tlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgY29uc3QgaGVhZCA9IHJlc3VsdHNbMF1cbiAgICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gICAgbGV0IHBhcmFncmFwaFxuXG4gICAgaWYgKGhlYWQgJiYgaGVhZC50eXBlID09PSAnZWxlbWVudCcgJiYgaGVhZC50YWdOYW1lID09PSAncCcpIHtcbiAgICAgIHBhcmFncmFwaCA9IGhlYWRcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyYWdyYXBoID0ge3R5cGU6ICdlbGVtZW50JywgdGFnTmFtZTogJ3AnLCBwcm9wZXJ0aWVzOiB7fSwgY2hpbGRyZW46IFtdfVxuICAgICAgcmVzdWx0cy51bnNoaWZ0KHBhcmFncmFwaClcbiAgICB9XG5cbiAgICBpZiAocGFyYWdyYXBoLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIHBhcmFncmFwaC5jaGlsZHJlbi51bnNoaWZ0KHt0eXBlOiAndGV4dCcsIHZhbHVlOiAnICd9KVxuICAgIH1cblxuICAgIHBhcmFncmFwaC5jaGlsZHJlbi51bnNoaWZ0KHtcbiAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgIHRhZ05hbWU6ICdpbnB1dCcsXG4gICAgICBwcm9wZXJ0aWVzOiB7dHlwZTogJ2NoZWNrYm94JywgY2hlY2tlZDogbm9kZS5jaGVja2VkLCBkaXNhYmxlZDogdHJ1ZX0sXG4gICAgICBjaGlsZHJlbjogW11cbiAgICB9KVxuXG4gICAgLy8gQWNjb3JkaW5nIHRvIGdpdGh1Yi1tYXJrZG93bi1jc3MsIHRoaXMgY2xhc3MgaGlkZXMgYnVsbGV0LlxuICAgIC8vIFNlZTogPGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZ2l0aHViLW1hcmtkb3duLWNzcz4uXG4gICAgcHJvcGVydGllcy5jbGFzc05hbWUgPSBbJ3Rhc2stbGlzdC1pdGVtJ11cbiAgfVxuXG4gIGxldCBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCByZXN1bHRzLmxlbmd0aCkge1xuICAgIGNvbnN0IGNoaWxkID0gcmVzdWx0c1tpbmRleF1cblxuICAgIC8vIEFkZCBlb2xzIGJlZm9yZSBub2RlcywgZXhjZXB0IGlmIHRoaXMgaXMgYSBsb29zZSwgZmlyc3QgcGFyYWdyYXBoLlxuICAgIGlmIChcbiAgICAgIGxvb3NlIHx8XG4gICAgICBpbmRleCAhPT0gMCB8fFxuICAgICAgY2hpbGQudHlwZSAhPT0gJ2VsZW1lbnQnIHx8XG4gICAgICBjaGlsZC50YWdOYW1lICE9PSAncCdcbiAgICApIHtcbiAgICAgIGNoaWxkcmVuLnB1c2goe3R5cGU6ICd0ZXh0JywgdmFsdWU6ICdcXG4nfSlcbiAgICB9XG5cbiAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ2VsZW1lbnQnICYmIGNoaWxkLnRhZ05hbWUgPT09ICdwJyAmJiAhbG9vc2UpIHtcbiAgICAgIGNoaWxkcmVuLnB1c2goLi4uY2hpbGQuY2hpbGRyZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpXG4gICAgfVxuICB9XG5cbiAgY29uc3QgdGFpbCA9IHJlc3VsdHNbcmVzdWx0cy5sZW5ndGggLSAxXVxuXG4gIC8vIEFkZCBhIGZpbmFsIGVvbC5cbiAgaWYgKHRhaWwgJiYgKGxvb3NlIHx8IHRhaWwudHlwZSAhPT0gJ2VsZW1lbnQnIHx8IHRhaWwudGFnTmFtZSAhPT0gJ3AnKSkge1xuICAgIGNoaWxkcmVuLnB1c2goe3R5cGU6ICd0ZXh0JywgdmFsdWU6ICdcXG4nfSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge3R5cGU6ICdlbGVtZW50JywgdGFnTmFtZTogJ2xpJywgcHJvcGVydGllcywgY2hpbGRyZW59XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtQYXJlbnRzfSBub2RlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBsaXN0TG9vc2Uobm9kZSkge1xuICBsZXQgbG9vc2UgPSBmYWxzZVxuICBpZiAobm9kZS50eXBlID09PSAnbGlzdCcpIHtcbiAgICBsb29zZSA9IG5vZGUuc3ByZWFkIHx8IGZhbHNlXG4gICAgY29uc3QgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuXG4gICAgbGV0IGluZGV4ID0gLTFcblxuICAgIHdoaWxlICghbG9vc2UgJiYgKytpbmRleCA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgbG9vc2UgPSBsaXN0SXRlbUxvb3NlKGNoaWxkcmVuW2luZGV4XSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9vc2Vcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0xpc3RJdGVtfSBub2RlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBsaXN0SXRlbUxvb3NlKG5vZGUpIHtcbiAgY29uc3Qgc3ByZWFkID0gbm9kZS5zcHJlYWRcblxuICByZXR1cm4gc3ByZWFkID09PSBudWxsIHx8IHNwcmVhZCA9PT0gdW5kZWZpbmVkXG4gICAgPyBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDFcbiAgICA6IHNwcmVhZFxufVxuIl0sIm5hbWVzIjpbImxpc3RJdGVtIiwic3RhdGUiLCJub2RlIiwicGFyZW50IiwicmVzdWx0cyIsImFsbCIsImxvb3NlIiwibGlzdExvb3NlIiwibGlzdEl0ZW1Mb29zZSIsInByb3BlcnRpZXMiLCJjaGlsZHJlbiIsImNoZWNrZWQiLCJoZWFkIiwicGFyYWdyYXBoIiwidHlwZSIsInRhZ05hbWUiLCJ1bnNoaWZ0IiwibGVuZ3RoIiwidmFsdWUiLCJkaXNhYmxlZCIsImNsYXNzTmFtZSIsImluZGV4IiwiY2hpbGQiLCJwdXNoIiwidGFpbCIsInJlc3VsdCIsInBhdGNoIiwiYXBwbHlEYXRhIiwic3ByZWFkIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/list-item.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/list.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/list.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   list: function() { return /* binding */ list; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */ function list(state, node) {\n    /** @type {Properties} */ const properties = {};\n    const results = state.all(node);\n    let index = -1;\n    if (typeof node.start === \"number\" && node.start !== 1) {\n        properties.start = node.start;\n    }\n    // Like GitHub, add a class for custom styling.\n    while(++index < results.length){\n        const child = results[index];\n        if (child.type === \"element\" && child.tagName === \"li\" && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes(\"task-list-item\")) {\n            properties.className = [\n                \"contains-task-list\"\n            ];\n            break;\n        }\n    }\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: node.ordered ? \"ol\" : \"ul\",\n        properties,\n        children: state.wrap(results, true)\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2xpc3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7OztDQUtDLEdBRUQsbURBQW1EO0FBQ25EO0FBRUE7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU0EsS0FBS0MsS0FBSyxFQUFFQyxJQUFJO0lBQzlCLHVCQUF1QixHQUN2QixNQUFNQyxhQUFhLENBQUM7SUFDcEIsTUFBTUMsVUFBVUgsTUFBTUksR0FBRyxDQUFDSDtJQUMxQixJQUFJSSxRQUFRLENBQUM7SUFFYixJQUFJLE9BQU9KLEtBQUtLLEtBQUssS0FBSyxZQUFZTCxLQUFLSyxLQUFLLEtBQUssR0FBRztRQUN0REosV0FBV0ksS0FBSyxHQUFHTCxLQUFLSyxLQUFLO0lBQy9CO0lBRUEsK0NBQStDO0lBQy9DLE1BQU8sRUFBRUQsUUFBUUYsUUFBUUksTUFBTSxDQUFFO1FBQy9CLE1BQU1DLFFBQVFMLE9BQU8sQ0FBQ0UsTUFBTTtRQUU1QixJQUNFRyxNQUFNQyxJQUFJLEtBQUssYUFDZkQsTUFBTUUsT0FBTyxLQUFLLFFBQ2xCRixNQUFNTixVQUFVLElBQ2hCUyxNQUFNQyxPQUFPLENBQUNKLE1BQU1OLFVBQVUsQ0FBQ1csU0FBUyxLQUN4Q0wsTUFBTU4sVUFBVSxDQUFDVyxTQUFTLENBQUNDLFFBQVEsQ0FBQyxtQkFDcEM7WUFDQVosV0FBV1csU0FBUyxHQUFHO2dCQUFDO2FBQXFCO1lBQzdDO1FBQ0Y7SUFDRjtJQUVBLG9CQUFvQixHQUNwQixNQUFNRSxTQUFTO1FBQ2JOLE1BQU07UUFDTkMsU0FBU1QsS0FBS2UsT0FBTyxHQUFHLE9BQU87UUFDL0JkO1FBQ0FlLFVBQVVqQixNQUFNa0IsSUFBSSxDQUFDZixTQUFTO0lBQ2hDO0lBQ0FILE1BQU1tQixLQUFLLENBQUNsQixNQUFNYztJQUNsQixPQUFPZixNQUFNb0IsU0FBUyxDQUFDbkIsTUFBTWM7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8taGFzdEAxMy4yLjAvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvbGlzdC5qcz83NzBmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Qcm9wZXJ0aWVzfSBQcm9wZXJ0aWVzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkxpc3R9IExpc3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLy8gTWFrZSBWUyBDb2RlIHNob3cgcmVmZXJlbmNlcyB0byB0aGUgYWJvdmUgdHlwZXMuXG4nJ1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGxpc3RgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7TGlzdH0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpc3Qoc3RhdGUsIG5vZGUpIHtcbiAgLyoqIEB0eXBlIHtQcm9wZXJ0aWVzfSAqL1xuICBjb25zdCBwcm9wZXJ0aWVzID0ge31cbiAgY29uc3QgcmVzdWx0cyA9IHN0YXRlLmFsbChub2RlKVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIGlmICh0eXBlb2Ygbm9kZS5zdGFydCA9PT0gJ251bWJlcicgJiYgbm9kZS5zdGFydCAhPT0gMSkge1xuICAgIHByb3BlcnRpZXMuc3RhcnQgPSBub2RlLnN0YXJ0XG4gIH1cblxuICAvLyBMaWtlIEdpdEh1YiwgYWRkIGEgY2xhc3MgZm9yIGN1c3RvbSBzdHlsaW5nLlxuICB3aGlsZSAoKytpbmRleCA8IHJlc3VsdHMubGVuZ3RoKSB7XG4gICAgY29uc3QgY2hpbGQgPSByZXN1bHRzW2luZGV4XVxuXG4gICAgaWYgKFxuICAgICAgY2hpbGQudHlwZSA9PT0gJ2VsZW1lbnQnICYmXG4gICAgICBjaGlsZC50YWdOYW1lID09PSAnbGknICYmXG4gICAgICBjaGlsZC5wcm9wZXJ0aWVzICYmXG4gICAgICBBcnJheS5pc0FycmF5KGNoaWxkLnByb3BlcnRpZXMuY2xhc3NOYW1lKSAmJlxuICAgICAgY2hpbGQucHJvcGVydGllcy5jbGFzc05hbWUuaW5jbHVkZXMoJ3Rhc2stbGlzdC1pdGVtJylcbiAgICApIHtcbiAgICAgIHByb3BlcnRpZXMuY2xhc3NOYW1lID0gWydjb250YWlucy10YXNrLWxpc3QnXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogbm9kZS5vcmRlcmVkID8gJ29sJyA6ICd1bCcsXG4gICAgcHJvcGVydGllcyxcbiAgICBjaGlsZHJlbjogc3RhdGUud3JhcChyZXN1bHRzLCB0cnVlKVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iXSwibmFtZXMiOlsibGlzdCIsInN0YXRlIiwibm9kZSIsInByb3BlcnRpZXMiLCJyZXN1bHRzIiwiYWxsIiwiaW5kZXgiLCJzdGFydCIsImxlbmd0aCIsImNoaWxkIiwidHlwZSIsInRhZ05hbWUiLCJBcnJheSIsImlzQXJyYXkiLCJjbGFzc05hbWUiLCJpbmNsdWRlcyIsInJlc3VsdCIsIm9yZGVyZWQiLCJjaGlsZHJlbiIsIndyYXAiLCJwYXRjaCIsImFwcGx5RGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/list.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js ***!
  \****************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   paragraph: function() { return /* binding */ paragraph; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */ function paragraph(state, node) {\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"p\",\n        properties: {},\n        children: state.all(node)\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3BhcmFncmFwaC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUVELG1EQUFtRDtBQUNuRDtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNNLFNBQVNBLFVBQVVDLEtBQUssRUFBRUMsSUFBSTtJQUNuQyxvQkFBb0IsR0FDcEIsTUFBTUMsU0FBUztRQUNiQyxNQUFNO1FBQ05DLFNBQVM7UUFDVEMsWUFBWSxDQUFDO1FBQ2JDLFVBQVVOLE1BQU1PLEdBQUcsQ0FBQ047SUFDdEI7SUFDQUQsTUFBTVEsS0FBSyxDQUFDUCxNQUFNQztJQUNsQixPQUFPRixNQUFNUyxTQUFTLENBQUNSLE1BQU1DO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3BhcmFncmFwaC5qcz9hYTg0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUGFyYWdyYXBofSBQYXJhZ3JhcGhcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLy8gTWFrZSBWUyBDb2RlIHNob3cgcmVmZXJlbmNlcyB0byB0aGUgYWJvdmUgdHlwZXMuXG4nJ1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYHBhcmFncmFwaGAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtQYXJhZ3JhcGh9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJhZ3JhcGgoc3RhdGUsIG5vZGUpIHtcbiAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgIHRhZ05hbWU6ICdwJyxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBjaGlsZHJlbjogc3RhdGUuYWxsKG5vZGUpXG4gIH1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiJdLCJuYW1lcyI6WyJwYXJhZ3JhcGgiLCJzdGF0ZSIsIm5vZGUiLCJyZXN1bHQiLCJ0eXBlIiwidGFnTmFtZSIsInByb3BlcnRpZXMiLCJjaGlsZHJlbiIsImFsbCIsInBhdGNoIiwiYXBwbHlEYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/root.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/root.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   root: function() { return /* binding */ root; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */ function root(state, node) {\n    /** @type {HastRoot} */ const result = {\n        type: \"root\",\n        children: state.wrap(state.all(node))\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3Jvb3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7OztDQUtDLEdBRUQsbURBQW1EO0FBQ25EO0FBRUE7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU0EsS0FBS0MsS0FBSyxFQUFFQyxJQUFJO0lBQzlCLHFCQUFxQixHQUNyQixNQUFNQyxTQUFTO1FBQUNDLE1BQU07UUFBUUMsVUFBVUosTUFBTUssSUFBSSxDQUFDTCxNQUFNTSxHQUFHLENBQUNMO0lBQU07SUFDbkVELE1BQU1PLEtBQUssQ0FBQ04sTUFBTUM7SUFDbEIsT0FBT0YsTUFBTVEsU0FBUyxDQUFDUCxNQUFNQztBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC10by1oYXN0QDEzLjIuMC9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9oYW5kbGVycy9yb290LmpzP2Y0YjUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUGFyZW50c30gSGFzdFBhcmVudHNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Sb290fSBIYXN0Um9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Sb290fSBNZGFzdFJvb3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLy8gTWFrZSBWUyBDb2RlIHNob3cgcmVmZXJlbmNlcyB0byB0aGUgYWJvdmUgdHlwZXMuXG4nJ1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYHJvb3RgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7TWRhc3RSb290fSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7SGFzdFBhcmVudHN9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvb3Qoc3RhdGUsIG5vZGUpIHtcbiAgLyoqIEB0eXBlIHtIYXN0Um9vdH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge3R5cGU6ICdyb290JywgY2hpbGRyZW46IHN0YXRlLndyYXAoc3RhdGUuYWxsKG5vZGUpKX1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiJdLCJuYW1lcyI6WyJyb290Iiwic3RhdGUiLCJub2RlIiwicmVzdWx0IiwidHlwZSIsImNoaWxkcmVuIiwid3JhcCIsImFsbCIsInBhdGNoIiwiYXBwbHlEYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/root.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/strong.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/strong.js ***!
  \*************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   strong: function() { return /* binding */ strong; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */ function strong(state, node) {\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"strong\",\n        properties: {},\n        children: state.all(node)\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3N0cm9uZy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUVELG1EQUFtRDtBQUNuRDtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNNLFNBQVNBLE9BQU9DLEtBQUssRUFBRUMsSUFBSTtJQUNoQyxvQkFBb0IsR0FDcEIsTUFBTUMsU0FBUztRQUNiQyxNQUFNO1FBQ05DLFNBQVM7UUFDVEMsWUFBWSxDQUFDO1FBQ2JDLFVBQVVOLE1BQU1PLEdBQUcsQ0FBQ047SUFDdEI7SUFDQUQsTUFBTVEsS0FBSyxDQUFDUCxNQUFNQztJQUNsQixPQUFPRixNQUFNUyxTQUFTLENBQUNSLE1BQU1DO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3N0cm9uZy5qcz9kYjVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuU3Ryb25nfSBTdHJvbmdcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLy8gTWFrZSBWUyBDb2RlIHNob3cgcmVmZXJlbmNlcyB0byB0aGUgYWJvdmUgdHlwZXMuXG4nJ1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYHN0cm9uZ2Agbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtTdHJvbmd9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJvbmcoc3RhdGUsIG5vZGUpIHtcbiAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgIHRhZ05hbWU6ICdzdHJvbmcnLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS5hbGwobm9kZSlcbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIl0sIm5hbWVzIjpbInN0cm9uZyIsInN0YXRlIiwibm9kZSIsInJlc3VsdCIsInR5cGUiLCJ0YWdOYW1lIiwicHJvcGVydGllcyIsImNoaWxkcmVuIiwiYWxsIiwicGF0Y2giLCJhcHBseURhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/strong.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js ***!
  \*****************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tableCell: function() { return /* binding */ tableCell; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */ function tableCell(state, node) {\n    // Note: this function is normally not called: see `table-row` for how rows\n    // and their cells are compiled.\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"td\",\n        properties: {},\n        children: state.all(node)\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3RhYmxlLWNlbGwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FFRCxtREFBbUQ7QUFDbkQ7QUFFQTs7Ozs7Ozs7O0NBU0MsR0FDTSxTQUFTQSxVQUFVQyxLQUFLLEVBQUVDLElBQUk7SUFDbkMsMkVBQTJFO0lBQzNFLGdDQUFnQztJQUNoQyxvQkFBb0IsR0FDcEIsTUFBTUMsU0FBUztRQUNiQyxNQUFNO1FBQ05DLFNBQVM7UUFDVEMsWUFBWSxDQUFDO1FBQ2JDLFVBQVVOLE1BQU1PLEdBQUcsQ0FBQ047SUFDdEI7SUFDQUQsTUFBTVEsS0FBSyxDQUFDUCxNQUFNQztJQUNsQixPQUFPRixNQUFNUyxTQUFTLENBQUNSLE1BQU1DO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3RhYmxlLWNlbGwuanM/MmQzOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlRhYmxlQ2VsbH0gVGFibGVDZWxsXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbi8vIE1ha2UgVlMgQ29kZSBzaG93IHJlZmVyZW5jZXMgdG8gdGhlIGFib3ZlIHR5cGVzLlxuJydcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGB0YWJsZUNlbGxgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7VGFibGVDZWxsfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFibGVDZWxsKHN0YXRlLCBub2RlKSB7XG4gIC8vIE5vdGU6IHRoaXMgZnVuY3Rpb24gaXMgbm9ybWFsbHkgbm90IGNhbGxlZDogc2VlIGB0YWJsZS1yb3dgIGZvciBob3cgcm93c1xuICAvLyBhbmQgdGhlaXIgY2VsbHMgYXJlIGNvbXBpbGVkLlxuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ3RkJywgLy8gQXNzdW1lIGJvZHkgY2VsbC5cbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBjaGlsZHJlbjogc3RhdGUuYWxsKG5vZGUpXG4gIH1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiJdLCJuYW1lcyI6WyJ0YWJsZUNlbGwiLCJzdGF0ZSIsIm5vZGUiLCJyZXN1bHQiLCJ0eXBlIiwidGFnTmFtZSIsInByb3BlcnRpZXMiLCJjaGlsZHJlbiIsImFsbCIsInBhdGNoIiwiYXBwbHlEYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table-row.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table-row.js ***!
  \****************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tableRow: function() { return /* binding */ tableRow; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */ function tableRow(state, node, parent) {\n    const siblings = parent ? parent.children : undefined;\n    // Generate a body row when without parent.\n    const rowIndex = siblings ? siblings.indexOf(node) : 1;\n    const tagName = rowIndex === 0 ? \"th\" : \"td\";\n    // To do: option to use `style`?\n    const align = parent && parent.type === \"table\" ? parent.align : undefined;\n    const length = align ? align.length : node.children.length;\n    let cellIndex = -1;\n    /** @type {Array<ElementContent>} */ const cells = [];\n    while(++cellIndex < length){\n        // Note: can also be undefined.\n        const cell = node.children[cellIndex];\n        /** @type {Properties} */ const properties = {};\n        const alignValue = align ? align[cellIndex] : undefined;\n        if (alignValue) {\n            properties.align = alignValue;\n        }\n        /** @type {Element} */ let result = {\n            type: \"element\",\n            tagName,\n            properties,\n            children: []\n        };\n        if (cell) {\n            result.children = state.all(cell);\n            state.patch(cell, result);\n            result = state.applyData(cell, result);\n        }\n        cells.push(result);\n    }\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"tr\",\n        properties: {},\n        children: state.wrap(cells, true)\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3RhYmxlLXJvdy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Q0FPQyxHQUVELG1EQUFtRDtBQUNuRDtBQUVBOzs7Ozs7Ozs7OztDQVdDLEdBQ00sU0FBU0EsU0FBU0MsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLE1BQU07SUFDMUMsTUFBTUMsV0FBV0QsU0FBU0EsT0FBT0UsUUFBUSxHQUFHQztJQUM1QywyQ0FBMkM7SUFDM0MsTUFBTUMsV0FBV0gsV0FBV0EsU0FBU0ksT0FBTyxDQUFDTixRQUFRO0lBQ3JELE1BQU1PLFVBQVVGLGFBQWEsSUFBSSxPQUFPO0lBQ3hDLGdDQUFnQztJQUNoQyxNQUFNRyxRQUFRUCxVQUFVQSxPQUFPUSxJQUFJLEtBQUssVUFBVVIsT0FBT08sS0FBSyxHQUFHSjtJQUNqRSxNQUFNTSxTQUFTRixRQUFRQSxNQUFNRSxNQUFNLEdBQUdWLEtBQUtHLFFBQVEsQ0FBQ08sTUFBTTtJQUMxRCxJQUFJQyxZQUFZLENBQUM7SUFDakIsa0NBQWtDLEdBQ2xDLE1BQU1DLFFBQVEsRUFBRTtJQUVoQixNQUFPLEVBQUVELFlBQVlELE9BQVE7UUFDM0IsK0JBQStCO1FBQy9CLE1BQU1HLE9BQU9iLEtBQUtHLFFBQVEsQ0FBQ1EsVUFBVTtRQUNyQyx1QkFBdUIsR0FDdkIsTUFBTUcsYUFBYSxDQUFDO1FBQ3BCLE1BQU1DLGFBQWFQLFFBQVFBLEtBQUssQ0FBQ0csVUFBVSxHQUFHUDtRQUU5QyxJQUFJVyxZQUFZO1lBQ2RELFdBQVdOLEtBQUssR0FBR087UUFDckI7UUFFQSxvQkFBb0IsR0FDcEIsSUFBSUMsU0FBUztZQUFDUCxNQUFNO1lBQVdGO1lBQVNPO1lBQVlYLFVBQVUsRUFBRTtRQUFBO1FBRWhFLElBQUlVLE1BQU07WUFDUkcsT0FBT2IsUUFBUSxHQUFHSixNQUFNa0IsR0FBRyxDQUFDSjtZQUM1QmQsTUFBTW1CLEtBQUssQ0FBQ0wsTUFBTUc7WUFDbEJBLFNBQVNqQixNQUFNb0IsU0FBUyxDQUFDTixNQUFNRztRQUNqQztRQUVBSixNQUFNUSxJQUFJLENBQUNKO0lBQ2I7SUFFQSxvQkFBb0IsR0FDcEIsTUFBTUEsU0FBUztRQUNiUCxNQUFNO1FBQ05GLFNBQVM7UUFDVE8sWUFBWSxDQUFDO1FBQ2JYLFVBQVVKLE1BQU1zQixJQUFJLENBQUNULE9BQU87SUFDOUI7SUFDQWIsTUFBTW1CLEtBQUssQ0FBQ2xCLE1BQU1nQjtJQUNsQixPQUFPakIsTUFBTW9CLFNBQVMsQ0FBQ25CLE1BQU1nQjtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC10by1oYXN0QDEzLjIuMC9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9oYW5kbGVycy90YWJsZS1yb3cuanM/OGQ0YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudENvbnRlbnR9IEVsZW1lbnRDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUHJvcGVydGllc30gUHJvcGVydGllc1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5QYXJlbnRzfSBQYXJlbnRzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlRhYmxlUm93fSBUYWJsZVJvd1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG4vLyBNYWtlIFZTIENvZGUgc2hvdyByZWZlcmVuY2VzIHRvIHRoZSBhYm92ZSB0eXBlcy5cbicnXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgdGFibGVSb3dgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7VGFibGVSb3d9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEBwYXJhbSB7UGFyZW50cyB8IHVuZGVmaW5lZH0gcGFyZW50XG4gKiAgIFBhcmVudCBvZiBgbm9kZWAuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFibGVSb3coc3RhdGUsIG5vZGUsIHBhcmVudCkge1xuICBjb25zdCBzaWJsaW5ncyA9IHBhcmVudCA/IHBhcmVudC5jaGlsZHJlbiA6IHVuZGVmaW5lZFxuICAvLyBHZW5lcmF0ZSBhIGJvZHkgcm93IHdoZW4gd2l0aG91dCBwYXJlbnQuXG4gIGNvbnN0IHJvd0luZGV4ID0gc2libGluZ3MgPyBzaWJsaW5ncy5pbmRleE9mKG5vZGUpIDogMVxuICBjb25zdCB0YWdOYW1lID0gcm93SW5kZXggPT09IDAgPyAndGgnIDogJ3RkJ1xuICAvLyBUbyBkbzogb3B0aW9uIHRvIHVzZSBgc3R5bGVgP1xuICBjb25zdCBhbGlnbiA9IHBhcmVudCAmJiBwYXJlbnQudHlwZSA9PT0gJ3RhYmxlJyA/IHBhcmVudC5hbGlnbiA6IHVuZGVmaW5lZFxuICBjb25zdCBsZW5ndGggPSBhbGlnbiA/IGFsaWduLmxlbmd0aCA6IG5vZGUuY2hpbGRyZW4ubGVuZ3RoXG4gIGxldCBjZWxsSW5kZXggPSAtMVxuICAvKiogQHR5cGUge0FycmF5PEVsZW1lbnRDb250ZW50Pn0gKi9cbiAgY29uc3QgY2VsbHMgPSBbXVxuXG4gIHdoaWxlICgrK2NlbGxJbmRleCA8IGxlbmd0aCkge1xuICAgIC8vIE5vdGU6IGNhbiBhbHNvIGJlIHVuZGVmaW5lZC5cbiAgICBjb25zdCBjZWxsID0gbm9kZS5jaGlsZHJlbltjZWxsSW5kZXhdXG4gICAgLyoqIEB0eXBlIHtQcm9wZXJ0aWVzfSAqL1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7fVxuICAgIGNvbnN0IGFsaWduVmFsdWUgPSBhbGlnbiA/IGFsaWduW2NlbGxJbmRleF0gOiB1bmRlZmluZWRcblxuICAgIGlmIChhbGlnblZhbHVlKSB7XG4gICAgICBwcm9wZXJ0aWVzLmFsaWduID0gYWxpZ25WYWx1ZVxuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgICBsZXQgcmVzdWx0ID0ge3R5cGU6ICdlbGVtZW50JywgdGFnTmFtZSwgcHJvcGVydGllcywgY2hpbGRyZW46IFtdfVxuXG4gICAgaWYgKGNlbGwpIHtcbiAgICAgIHJlc3VsdC5jaGlsZHJlbiA9IHN0YXRlLmFsbChjZWxsKVxuICAgICAgc3RhdGUucGF0Y2goY2VsbCwgcmVzdWx0KVxuICAgICAgcmVzdWx0ID0gc3RhdGUuYXBwbHlEYXRhKGNlbGwsIHJlc3VsdClcbiAgICB9XG5cbiAgICBjZWxscy5wdXNoKHJlc3VsdClcbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAndHInLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKGNlbGxzLCB0cnVlKVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iXSwibmFtZXMiOlsidGFibGVSb3ciLCJzdGF0ZSIsIm5vZGUiLCJwYXJlbnQiLCJzaWJsaW5ncyIsImNoaWxkcmVuIiwidW5kZWZpbmVkIiwicm93SW5kZXgiLCJpbmRleE9mIiwidGFnTmFtZSIsImFsaWduIiwidHlwZSIsImxlbmd0aCIsImNlbGxJbmRleCIsImNlbGxzIiwiY2VsbCIsInByb3BlcnRpZXMiLCJhbGlnblZhbHVlIiwicmVzdWx0IiwiYWxsIiwicGF0Y2giLCJhcHBseURhdGEiLCJwdXNoIiwid3JhcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table-row.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   table: function() { return /* binding */ table; }\n/* harmony export */ });\n/* harmony import */ var unist_util_position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-position */ \"(app-pages-browser)/./node_modules/.pnpm/unist-util-position@5.0.0/node_modules/unist-util-position/lib/index.js\");\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */ \n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */ function table(state, node) {\n    const rows = state.all(node);\n    const firstRow = rows.shift();\n    /** @type {Array<Element>} */ const tableContent = [];\n    if (firstRow) {\n        /** @type {Element} */ const head = {\n            type: \"element\",\n            tagName: \"thead\",\n            properties: {},\n            children: state.wrap([\n                firstRow\n            ], true)\n        };\n        state.patch(node.children[0], head);\n        tableContent.push(head);\n    }\n    if (rows.length > 0) {\n        /** @type {Element} */ const body = {\n            type: \"element\",\n            tagName: \"tbody\",\n            properties: {},\n            children: state.wrap(rows, true)\n        };\n        const start = (0,unist_util_position__WEBPACK_IMPORTED_MODULE_0__.pointStart)(node.children[1]);\n        const end = (0,unist_util_position__WEBPACK_IMPORTED_MODULE_0__.pointEnd)(node.children[node.children.length - 1]);\n        if (start && end) body.position = {\n            start,\n            end\n        };\n        tableContent.push(body);\n    }\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"table\",\n        properties: {},\n        children: state.wrap(tableContent, true)\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3RhYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Q0FJQyxHQUV1RDtBQUV4RDs7Ozs7Ozs7O0NBU0MsR0FDTSxTQUFTRSxNQUFNQyxLQUFLLEVBQUVDLElBQUk7SUFDL0IsTUFBTUMsT0FBT0YsTUFBTUcsR0FBRyxDQUFDRjtJQUN2QixNQUFNRyxXQUFXRixLQUFLRyxLQUFLO0lBQzNCLDJCQUEyQixHQUMzQixNQUFNQyxlQUFlLEVBQUU7SUFFdkIsSUFBSUYsVUFBVTtRQUNaLG9CQUFvQixHQUNwQixNQUFNRyxPQUFPO1lBQ1hDLE1BQU07WUFDTkMsU0FBUztZQUNUQyxZQUFZLENBQUM7WUFDYkMsVUFBVVgsTUFBTVksSUFBSSxDQUFDO2dCQUFDUjthQUFTLEVBQUU7UUFDbkM7UUFDQUosTUFBTWEsS0FBSyxDQUFDWixLQUFLVSxRQUFRLENBQUMsRUFBRSxFQUFFSjtRQUM5QkQsYUFBYVEsSUFBSSxDQUFDUDtJQUNwQjtJQUVBLElBQUlMLEtBQUthLE1BQU0sR0FBRyxHQUFHO1FBQ25CLG9CQUFvQixHQUNwQixNQUFNQyxPQUFPO1lBQ1hSLE1BQU07WUFDTkMsU0FBUztZQUNUQyxZQUFZLENBQUM7WUFDYkMsVUFBVVgsTUFBTVksSUFBSSxDQUFDVixNQUFNO1FBQzdCO1FBRUEsTUFBTWUsUUFBUW5CLCtEQUFVQSxDQUFDRyxLQUFLVSxRQUFRLENBQUMsRUFBRTtRQUN6QyxNQUFNTyxNQUFNckIsNkRBQVFBLENBQUNJLEtBQUtVLFFBQVEsQ0FBQ1YsS0FBS1UsUUFBUSxDQUFDSSxNQUFNLEdBQUcsRUFBRTtRQUM1RCxJQUFJRSxTQUFTQyxLQUFLRixLQUFLRyxRQUFRLEdBQUc7WUFBQ0Y7WUFBT0M7UUFBRztRQUM3Q1osYUFBYVEsSUFBSSxDQUFDRTtJQUNwQjtJQUVBLG9CQUFvQixHQUNwQixNQUFNSSxTQUFTO1FBQ2JaLE1BQU07UUFDTkMsU0FBUztRQUNUQyxZQUFZLENBQUM7UUFDYkMsVUFBVVgsTUFBTVksSUFBSSxDQUFDTixjQUFjO0lBQ3JDO0lBQ0FOLE1BQU1hLEtBQUssQ0FBQ1osTUFBTW1CO0lBQ2xCLE9BQU9wQixNQUFNcUIsU0FBUyxDQUFDcEIsTUFBTW1CO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3RhYmxlLmpzPzc5N2MiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5UYWJsZX0gVGFibGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtwb2ludEVuZCwgcG9pbnRTdGFydH0gZnJvbSAndW5pc3QtdXRpbC1wb3NpdGlvbidcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGB0YWJsZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtUYWJsZX0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRhYmxlKHN0YXRlLCBub2RlKSB7XG4gIGNvbnN0IHJvd3MgPSBzdGF0ZS5hbGwobm9kZSlcbiAgY29uc3QgZmlyc3RSb3cgPSByb3dzLnNoaWZ0KClcbiAgLyoqIEB0eXBlIHtBcnJheTxFbGVtZW50Pn0gKi9cbiAgY29uc3QgdGFibGVDb250ZW50ID0gW11cblxuICBpZiAoZmlyc3RSb3cpIHtcbiAgICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gICAgY29uc3QgaGVhZCA9IHtcbiAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgIHRhZ05hbWU6ICd0aGVhZCcsXG4gICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKFtmaXJzdFJvd10sIHRydWUpXG4gICAgfVxuICAgIHN0YXRlLnBhdGNoKG5vZGUuY2hpbGRyZW5bMF0sIGhlYWQpXG4gICAgdGFibGVDb250ZW50LnB1c2goaGVhZClcbiAgfVxuXG4gIGlmIChyb3dzLmxlbmd0aCA+IDApIHtcbiAgICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gICAgY29uc3QgYm9keSA9IHtcbiAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgIHRhZ05hbWU6ICd0Ym9keScsXG4gICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKHJvd3MsIHRydWUpXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnQgPSBwb2ludFN0YXJ0KG5vZGUuY2hpbGRyZW5bMV0pXG4gICAgY29uc3QgZW5kID0gcG9pbnRFbmQobm9kZS5jaGlsZHJlbltub2RlLmNoaWxkcmVuLmxlbmd0aCAtIDFdKVxuICAgIGlmIChzdGFydCAmJiBlbmQpIGJvZHkucG9zaXRpb24gPSB7c3RhcnQsIGVuZH1cbiAgICB0YWJsZUNvbnRlbnQucHVzaChib2R5KVxuICB9XG5cbiAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgIHRhZ05hbWU6ICd0YWJsZScsXG4gICAgcHJvcGVydGllczoge30sXG4gICAgY2hpbGRyZW46IHN0YXRlLndyYXAodGFibGVDb250ZW50LCB0cnVlKVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iXSwibmFtZXMiOlsicG9pbnRFbmQiLCJwb2ludFN0YXJ0IiwidGFibGUiLCJzdGF0ZSIsIm5vZGUiLCJyb3dzIiwiYWxsIiwiZmlyc3RSb3ciLCJzaGlmdCIsInRhYmxlQ29udGVudCIsImhlYWQiLCJ0eXBlIiwidGFnTmFtZSIsInByb3BlcnRpZXMiLCJjaGlsZHJlbiIsIndyYXAiLCJwYXRjaCIsInB1c2giLCJsZW5ndGgiLCJib2R5Iiwic3RhcnQiLCJlbmQiLCJwb3NpdGlvbiIsInJlc3VsdCIsImFwcGx5RGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/text.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/text.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   text: function() { return /* binding */ text; }\n/* harmony export */ });\n/* harmony import */ var trim_lines__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! trim-lines */ \"(app-pages-browser)/./node_modules/.pnpm/trim-lines@3.0.1/node_modules/trim-lines/index.js\");\n/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */ \n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */ function text(state, node) {\n    /** @type {HastText} */ const result = {\n        type: \"text\",\n        value: (0,trim_lines__WEBPACK_IMPORTED_MODULE_0__.trimLines)(String(node.value))\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3RleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUVtQztBQUVwQzs7Ozs7Ozs7O0NBU0MsR0FDTSxTQUFTQyxLQUFLQyxLQUFLLEVBQUVDLElBQUk7SUFDOUIscUJBQXFCLEdBQ3JCLE1BQU1DLFNBQVM7UUFBQ0MsTUFBTTtRQUFRQyxPQUFPTixxREFBU0EsQ0FBQ08sT0FBT0osS0FBS0csS0FBSztJQUFFO0lBQ2xFSixNQUFNTSxLQUFLLENBQUNMLE1BQU1DO0lBQ2xCLE9BQU9GLE1BQU1PLFNBQVMsQ0FBQ04sTUFBTUM7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8taGFzdEAxMy4yLjAvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvdGV4dC5qcz9kMGViIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEhhc3RFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuVGV4dH0gSGFzdFRleHRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuVGV4dH0gTWRhc3RUZXh0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbmltcG9ydCB7dHJpbUxpbmVzfSBmcm9tICd0cmltLWxpbmVzJ1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYHRleHRgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7TWRhc3RUZXh0fSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7SGFzdEVsZW1lbnQgfCBIYXN0VGV4dH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGV4dChzdGF0ZSwgbm9kZSkge1xuICAvKiogQHR5cGUge0hhc3RUZXh0fSAqL1xuICBjb25zdCByZXN1bHQgPSB7dHlwZTogJ3RleHQnLCB2YWx1ZTogdHJpbUxpbmVzKFN0cmluZyhub2RlLnZhbHVlKSl9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iXSwibmFtZXMiOlsidHJpbUxpbmVzIiwidGV4dCIsInN0YXRlIiwibm9kZSIsInJlc3VsdCIsInR5cGUiLCJ2YWx1ZSIsIlN0cmluZyIsInBhdGNoIiwiYXBwbHlEYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/text.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   thematicBreak: function() { return /* binding */ thematicBreak; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */ function thematicBreak(state, node) {\n    /** @type {Element} */ const result = {\n        type: \"element\",\n        tagName: \"hr\",\n        properties: {},\n        children: []\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3RoZW1hdGljLWJyZWFrLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztDQUlDLEdBRUQsbURBQW1EO0FBQ25EO0FBRUE7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU0EsY0FBY0MsS0FBSyxFQUFFQyxJQUFJO0lBQ3ZDLG9CQUFvQixHQUNwQixNQUFNQyxTQUFTO1FBQ2JDLE1BQU07UUFDTkMsU0FBUztRQUNUQyxZQUFZLENBQUM7UUFDYkMsVUFBVSxFQUFFO0lBQ2Q7SUFDQU4sTUFBTU8sS0FBSyxDQUFDTixNQUFNQztJQUNsQixPQUFPRixNQUFNUSxTQUFTLENBQUNQLE1BQU1DO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3RoZW1hdGljLWJyZWFrLmpzPzkxODYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5UaGVtYXRpY0JyZWFrfSBUaGVtYXRpY0JyZWFrXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbi8vIE1ha2UgVlMgQ29kZSBzaG93IHJlZmVyZW5jZXMgdG8gdGhlIGFib3ZlIHR5cGVzLlxuJydcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGB0aGVtYXRpY0JyZWFrYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge1RoZW1hdGljQnJlYWt9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aGVtYXRpY0JyZWFrKHN0YXRlLCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAnaHInLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBbXVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iXSwibmFtZXMiOlsidGhlbWF0aWNCcmVhayIsInN0YXRlIiwibm9kZSIsInJlc3VsdCIsInR5cGUiLCJ0YWdOYW1lIiwicHJvcGVydGllcyIsImNoaWxkcmVuIiwicGF0Y2giLCJhcHBseURhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/index.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/index.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toHast: function() { return /* binding */ toHast; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var _footer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./footer.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/footer.js\");\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/state.js\");\n/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */ \n\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */ function toHast(tree, options) {\n    const state = (0,_state_js__WEBPACK_IMPORTED_MODULE_0__.createState)(tree, options);\n    const node = state.one(tree, undefined);\n    const foot = (0,_footer_js__WEBPACK_IMPORTED_MODULE_1__.footer)(state);\n    /** @type {HastNodes} */ const result = Array.isArray(node) ? {\n        type: \"root\",\n        children: node\n    } : node || {\n        type: \"root\",\n        children: []\n    };\n    if (foot) {\n        // If there’s a footer, there were definitions, meaning block\n        // content.\n        // So `result` is a parent node.\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(\"children\" in result);\n        result.children.push({\n            type: \"text\",\n            value: \"\\n\"\n        }, foot);\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztDQUlDLEdBRWtDO0FBQ0Q7QUFDSTtBQUV0Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTRFQyxHQUNNLFNBQVNJLE9BQU9DLElBQUksRUFBRUMsT0FBTztJQUNsQyxNQUFNQyxRQUFRSixzREFBV0EsQ0FBQ0UsTUFBTUM7SUFDaEMsTUFBTUUsT0FBT0QsTUFBTUUsR0FBRyxDQUFDSixNQUFNSztJQUM3QixNQUFNQyxPQUFPVCxrREFBTUEsQ0FBQ0s7SUFDcEIsc0JBQXNCLEdBQ3RCLE1BQU1LLFNBQVNDLE1BQU1DLE9BQU8sQ0FBQ04sUUFDekI7UUFBQ08sTUFBTTtRQUFRQyxVQUFVUjtJQUFJLElBQzdCQSxRQUFRO1FBQUNPLE1BQU07UUFBUUMsVUFBVSxFQUFFO0lBQUE7SUFFdkMsSUFBSUwsTUFBTTtRQUNSLDZEQUE2RDtRQUM3RCxXQUFXO1FBQ1gsZ0NBQWdDO1FBQ2hDViwwQ0FBTUEsQ0FBQyxjQUFjVztRQUNyQkEsT0FBT0ksUUFBUSxDQUFDQyxJQUFJLENBQUM7WUFBQ0YsTUFBTTtZQUFRRyxPQUFPO1FBQUksR0FBR1A7SUFDcEQ7SUFFQSxPQUFPQztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2luZGV4LmpzP2E1MDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuTm9kZXN9IEhhc3ROb2Rlc1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Ob2Rlc30gTWRhc3ROb2Rlc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi9zdGF0ZS5qcycpLk9wdGlvbnN9IE9wdGlvbnNcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuaW1wb3J0IHtmb290ZXJ9IGZyb20gJy4vZm9vdGVyLmpzJ1xuaW1wb3J0IHtjcmVhdGVTdGF0ZX0gZnJvbSAnLi9zdGF0ZS5qcydcblxuLyoqXG4gKiBUcmFuc2Zvcm0gbWRhc3QgdG8gaGFzdC5cbiAqXG4gKiAjIyMjIyBOb3Rlc1xuICpcbiAqICMjIyMjIyBIVE1MXG4gKlxuICogUmF3IEhUTUwgaXMgYXZhaWxhYmxlIGluIG1kYXN0IGFzIGBodG1sYCBub2RlcyBhbmQgY2FuIGJlIGVtYmVkZGVkIGluIGhhc3RcbiAqIGFzIHNlbWlzdGFuZGFyZCBgcmF3YCBub2Rlcy5cbiAqIE1vc3QgdXRpbGl0aWVzIGlnbm9yZSBgcmF3YCBub2RlcyBidXQgdHdvIG5vdGFibGUgb25lcyBkb27igJl0OlxuICpcbiAqICogICBgaGFzdC11dGlsLXRvLWh0bWxgIGFsc28gaGFzIGFuIG9wdGlvbiBgYWxsb3dEYW5nZXJvdXNIdG1sYCB3aGljaCB3aWxsXG4gKiAgICAgb3V0cHV0IHRoZSByYXcgSFRNTC5cbiAqICAgICBUaGlzIGlzIHR5cGljYWxseSBkaXNjb3VyYWdlZCBhcyBub3RlZCBieSB0aGUgb3B0aW9uIG5hbWUgYnV0IGlzIHVzZWZ1bFxuICogICAgIGlmIHlvdSBjb21wbGV0ZWx5IHRydXN0IGF1dGhvcnNcbiAqICogICBgaGFzdC11dGlsLXJhd2AgY2FuIGhhbmRsZSB0aGUgcmF3IGVtYmVkZGVkIEhUTUwgc3RyaW5ncyBieSBwYXJzaW5nIHRoZW1cbiAqICAgICBpbnRvIHN0YW5kYXJkIGhhc3Qgbm9kZXMgKGBlbGVtZW50YCwgYHRleHRgLCBldGMpLlxuICogICAgIFRoaXMgaXMgYSBoZWF2eSB0YXNrIGFzIGl0IG5lZWRzIGEgZnVsbCBIVE1MIHBhcnNlciwgYnV0IGl0IGlzIHRoZSBvbmx5XG4gKiAgICAgd2F5IHRvIHN1cHBvcnQgdW50cnVzdGVkIGNvbnRlbnRcbiAqXG4gKiAjIyMjIyMgRm9vdG5vdGVzXG4gKlxuICogTWFueSBvcHRpb25zIHN1cHBvcnRlZCBoZXJlIHJlbGF0ZSB0byBmb290bm90ZXMuXG4gKiBGb290bm90ZXMgYXJlIG5vdCBzcGVjaWZpZWQgYnkgQ29tbW9uTWFyaywgd2hpY2ggd2UgZm9sbG93IGJ5IGRlZmF1bHQuXG4gKiBUaGV5IGFyZSBzdXBwb3J0ZWQgYnkgR2l0SHViLCBzbyBmb290bm90ZXMgY2FuIGJlIGVuYWJsZWQgaW4gbWFya2Rvd24gd2l0aFxuICogYG1kYXN0LXV0aWwtZ2ZtYC5cbiAqXG4gKiBUaGUgb3B0aW9ucyBgZm9vdG5vdGVCYWNrTGFiZWxgIGFuZCBgZm9vdG5vdGVMYWJlbGAgZGVmaW5lIG5hdHVyYWwgbGFuZ3VhZ2VcbiAqIHRoYXQgZXhwbGFpbnMgZm9vdG5vdGVzLCB3aGljaCBpcyBoaWRkZW4gZm9yIHNpZ2h0ZWQgdXNlcnMgYnV0IHNob3duIHRvXG4gKiBhc3Npc3RpdmUgdGVjaG5vbG9neS5cbiAqIFdoZW4geW91ciBwYWdlIGlzIG5vdCBpbiBFbmdsaXNoLCB5b3UgbXVzdCBkZWZpbmUgdHJhbnNsYXRlZCB2YWx1ZXMuXG4gKlxuICogQmFjayByZWZlcmVuY2VzIHVzZSBBUklBIGF0dHJpYnV0ZXMsIGJ1dCB0aGUgc2VjdGlvbiBsYWJlbCBpdHNlbGYgdXNlcyBhXG4gKiBoZWFkaW5nIHRoYXQgaXMgaGlkZGVuIHdpdGggYW4gYHNyLW9ubHlgIGNsYXNzLlxuICogVG8gc2hvdyBpdCB0byBzaWdodGVkIHVzZXJzLCBkZWZpbmUgZGlmZmVyZW50IGF0dHJpYnV0ZXMgaW5cbiAqIGBmb290bm90ZUxhYmVsUHJvcGVydGllc2AuXG4gKlxuICogIyMjIyMjIENsb2JiZXJpbmdcbiAqXG4gKiBGb290bm90ZXMgaW50cm9kdWNlcyBhIHByb2JsZW0sIGFzIGl0IGxpbmtzIGZvb3Rub3RlIGNhbGxzIHRvIGZvb3Rub3RlXG4gKiBkZWZpbml0aW9ucyBvbiB0aGUgcGFnZSB0aHJvdWdoIGBpZGAgYXR0cmlidXRlcyBnZW5lcmF0ZWQgZnJvbSB1c2VyIGNvbnRlbnQsXG4gKiB3aGljaCByZXN1bHRzIGluIERPTSBjbG9iYmVyaW5nLlxuICpcbiAqIERPTSBjbG9iYmVyaW5nIGlzIHRoaXM6XG4gKlxuICogYGBgaHRtbFxuICogPHAgaWQ9eD48L3A+XG4gKiA8c2NyaXB0PmFsZXJ0KHgpIC8vIGB4YCBub3cgcmVmZXJzIHRvIHRoZSBET00gYHAjeGAgZWxlbWVudDwvc2NyaXB0PlxuICogYGBgXG4gKlxuICogRWxlbWVudHMgYnkgdGhlaXIgSUQgYXJlIG1hZGUgYXZhaWxhYmxlIGJ5IGJyb3dzZXJzIG9uIHRoZSBgd2luZG93YCBvYmplY3QsXG4gKiB3aGljaCBpcyBhIHNlY3VyaXR5IHJpc2suXG4gKiBVc2luZyBhIHByZWZpeCBzb2x2ZXMgdGhpcyBwcm9ibGVtLlxuICpcbiAqIE1vcmUgaW5mb3JtYXRpb24gb24gaG93IHRvIGhhbmRsZSBjbG9iYmVyaW5nIGFuZCB0aGUgcHJlZml4IGlzIGV4cGxhaW5lZCBpblxuICogRXhhbXBsZTogaGVhZGluZ3MgKERPTSBjbG9iYmVyaW5nKSBpbiBgcmVoeXBlLXNhbml0aXplYC5cbiAqXG4gKiAjIyMjIyMgVW5rbm93biBub2Rlc1xuICpcbiAqIFVua25vd24gbm9kZXMgYXJlIG5vZGVzIHdpdGggYSB0eXBlIHRoYXQgaXNu4oCZdCBpbiBgaGFuZGxlcnNgIG9yIGBwYXNzVGhyb3VnaGAuXG4gKiBUaGUgZGVmYXVsdCBiZWhhdmlvciBmb3IgdW5rbm93biBub2RlcyBpczpcbiAqXG4gKiAqICAgd2hlbiB0aGUgbm9kZSBoYXMgYSBgdmFsdWVgIChhbmQgZG9lc27igJl0IGhhdmUgYGRhdGEuaE5hbWVgLFxuICogICAgIGBkYXRhLmhQcm9wZXJ0aWVzYCwgb3IgYGRhdGEuaENoaWxkcmVuYCwgc2VlIGxhdGVyKSwgY3JlYXRlIGEgaGFzdCBgdGV4dGBcbiAqICAgICBub2RlXG4gKiAqICAgb3RoZXJ3aXNlLCBjcmVhdGUgYSBgPGRpdj5gIGVsZW1lbnQgKHdoaWNoIGNvdWxkIGJlIGNoYW5nZWQgd2l0aFxuICogICAgIGBkYXRhLmhOYW1lYCksIHdpdGggaXRzIGNoaWxkcmVuIG1hcHBlZCBmcm9tIG1kYXN0IHRvIGhhc3QgYXMgd2VsbFxuICpcbiAqIFRoaXMgYmVoYXZpb3IgY2FuIGJlIGNoYW5nZWQgYnkgcGFzc2luZyBhbiBgdW5rbm93bkhhbmRsZXJgLlxuICpcbiAqIEBwYXJhbSB7TWRhc3ROb2Rlc30gdHJlZVxuICogICBtZGFzdCB0cmVlLlxuICogQHBhcmFtIHtPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtIYXN0Tm9kZXN9XG4gKiAgIGhhc3QgdHJlZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvSGFzdCh0cmVlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHN0YXRlID0gY3JlYXRlU3RhdGUodHJlZSwgb3B0aW9ucylcbiAgY29uc3Qgbm9kZSA9IHN0YXRlLm9uZSh0cmVlLCB1bmRlZmluZWQpXG4gIGNvbnN0IGZvb3QgPSBmb290ZXIoc3RhdGUpXG4gIC8qKiBAdHlwZSB7SGFzdE5vZGVzfSAqL1xuICBjb25zdCByZXN1bHQgPSBBcnJheS5pc0FycmF5KG5vZGUpXG4gICAgPyB7dHlwZTogJ3Jvb3QnLCBjaGlsZHJlbjogbm9kZX1cbiAgICA6IG5vZGUgfHwge3R5cGU6ICdyb290JywgY2hpbGRyZW46IFtdfVxuXG4gIGlmIChmb290KSB7XG4gICAgLy8gSWYgdGhlcmXigJlzIGEgZm9vdGVyLCB0aGVyZSB3ZXJlIGRlZmluaXRpb25zLCBtZWFuaW5nIGJsb2NrXG4gICAgLy8gY29udGVudC5cbiAgICAvLyBTbyBgcmVzdWx0YCBpcyBhIHBhcmVudCBub2RlLlxuICAgIGFzc2VydCgnY2hpbGRyZW4nIGluIHJlc3VsdClcbiAgICByZXN1bHQuY2hpbGRyZW4ucHVzaCh7dHlwZTogJ3RleHQnLCB2YWx1ZTogJ1xcbid9LCBmb290KVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuIl0sIm5hbWVzIjpbIm9rIiwiYXNzZXJ0IiwiZm9vdGVyIiwiY3JlYXRlU3RhdGUiLCJ0b0hhc3QiLCJ0cmVlIiwib3B0aW9ucyIsInN0YXRlIiwibm9kZSIsIm9uZSIsInVuZGVmaW5lZCIsImZvb3QiLCJyZXN1bHQiLCJBcnJheSIsImlzQXJyYXkiLCJ0eXBlIiwiY2hpbGRyZW4iLCJwdXNoIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/revert.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/revert.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   revert: function() { return /* binding */ revert; }\n/* harmony export */ });\n/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */ // Make VS Code show references to the above types.\n\"\";\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */ function revert(state, node) {\n    const subtype = node.referenceType;\n    let suffix = \"]\";\n    if (subtype === \"collapsed\") {\n        suffix += \"[]\";\n    } else if (subtype === \"full\") {\n        suffix += \"[\" + (node.label || node.identifier) + \"]\";\n    }\n    if (node.type === \"imageReference\") {\n        return [\n            {\n                type: \"text\",\n                value: \"![\" + node.alt + suffix\n            }\n        ];\n    }\n    const contents = state.all(node);\n    const head = contents[0];\n    if (head && head.type === \"text\") {\n        head.value = \"[\" + head.value;\n    } else {\n        contents.unshift({\n            type: \"text\",\n            value: \"[\"\n        });\n    }\n    const tail = contents[contents.length - 1];\n    if (tail && tail.type === \"text\") {\n        tail.value += suffix;\n    } else {\n        contents.push({\n            type: \"text\",\n            value: suffix\n        });\n    }\n    return contents;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLWhhc3RAMTMuMi4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL3JldmVydC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Q0FPQyxHQUVELG1EQUFtRDtBQUNuRDtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNNLFNBQVNBLE9BQU9DLEtBQUssRUFBRUMsSUFBSTtJQUNoQyxNQUFNQyxVQUFVRCxLQUFLRSxhQUFhO0lBQ2xDLElBQUlDLFNBQVM7SUFFYixJQUFJRixZQUFZLGFBQWE7UUFDM0JFLFVBQVU7SUFDWixPQUFPLElBQUlGLFlBQVksUUFBUTtRQUM3QkUsVUFBVSxNQUFPSCxDQUFBQSxLQUFLSSxLQUFLLElBQUlKLEtBQUtLLFVBQVUsSUFBSTtJQUNwRDtJQUVBLElBQUlMLEtBQUtNLElBQUksS0FBSyxrQkFBa0I7UUFDbEMsT0FBTztZQUFDO2dCQUFDQSxNQUFNO2dCQUFRQyxPQUFPLE9BQU9QLEtBQUtRLEdBQUcsR0FBR0w7WUFBTTtTQUFFO0lBQzFEO0lBRUEsTUFBTU0sV0FBV1YsTUFBTVcsR0FBRyxDQUFDVjtJQUMzQixNQUFNVyxPQUFPRixRQUFRLENBQUMsRUFBRTtJQUV4QixJQUFJRSxRQUFRQSxLQUFLTCxJQUFJLEtBQUssUUFBUTtRQUNoQ0ssS0FBS0osS0FBSyxHQUFHLE1BQU1JLEtBQUtKLEtBQUs7SUFDL0IsT0FBTztRQUNMRSxTQUFTRyxPQUFPLENBQUM7WUFBQ04sTUFBTTtZQUFRQyxPQUFPO1FBQUc7SUFDNUM7SUFFQSxNQUFNTSxPQUFPSixRQUFRLENBQUNBLFNBQVNLLE1BQU0sR0FBRyxFQUFFO0lBRTFDLElBQUlELFFBQVFBLEtBQUtQLElBQUksS0FBSyxRQUFRO1FBQ2hDTyxLQUFLTixLQUFLLElBQUlKO0lBQ2hCLE9BQU87UUFDTE0sU0FBU00sSUFBSSxDQUFDO1lBQUNULE1BQU07WUFBUUMsT0FBT0o7UUFBTTtJQUM1QztJQUVBLE9BQU9NO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8taGFzdEAxMy4yLjAvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvcmV2ZXJ0LmpzPzM0NjYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudENvbnRlbnR9IEVsZW1lbnRDb250ZW50XG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Ob2Rlc30gTm9kZXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUmVmZXJlbmNlfSBSZWZlcmVuY2VcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLy8gTWFrZSBWUyBDb2RlIHNob3cgcmVmZXJlbmNlcyB0byB0aGUgYWJvdmUgdHlwZXMuXG4nJ1xuXG4vKipcbiAqIFJldHVybiB0aGUgY29udGVudCBvZiBhIHJlZmVyZW5jZSB3aXRob3V0IGRlZmluaXRpb24gYXMgcGxhaW4gdGV4dC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0V4dHJhY3Q8Tm9kZXMsIFJlZmVyZW5jZT59IG5vZGVcbiAqICAgUmVmZXJlbmNlIG5vZGUgKGltYWdlLCBsaW5rKS5cbiAqIEByZXR1cm5zIHtBcnJheTxFbGVtZW50Q29udGVudD59XG4gKiAgIGhhc3QgY29udGVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJldmVydChzdGF0ZSwgbm9kZSkge1xuICBjb25zdCBzdWJ0eXBlID0gbm9kZS5yZWZlcmVuY2VUeXBlXG4gIGxldCBzdWZmaXggPSAnXSdcblxuICBpZiAoc3VidHlwZSA9PT0gJ2NvbGxhcHNlZCcpIHtcbiAgICBzdWZmaXggKz0gJ1tdJ1xuICB9IGVsc2UgaWYgKHN1YnR5cGUgPT09ICdmdWxsJykge1xuICAgIHN1ZmZpeCArPSAnWycgKyAobm9kZS5sYWJlbCB8fCBub2RlLmlkZW50aWZpZXIpICsgJ10nXG4gIH1cblxuICBpZiAobm9kZS50eXBlID09PSAnaW1hZ2VSZWZlcmVuY2UnKSB7XG4gICAgcmV0dXJuIFt7dHlwZTogJ3RleHQnLCB2YWx1ZTogJyFbJyArIG5vZGUuYWx0ICsgc3VmZml4fV1cbiAgfVxuXG4gIGNvbnN0IGNvbnRlbnRzID0gc3RhdGUuYWxsKG5vZGUpXG4gIGNvbnN0IGhlYWQgPSBjb250ZW50c1swXVxuXG4gIGlmIChoZWFkICYmIGhlYWQudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgaGVhZC52YWx1ZSA9ICdbJyArIGhlYWQudmFsdWVcbiAgfSBlbHNlIHtcbiAgICBjb250ZW50cy51bnNoaWZ0KHt0eXBlOiAndGV4dCcsIHZhbHVlOiAnWyd9KVxuICB9XG5cbiAgY29uc3QgdGFpbCA9IGNvbnRlbnRzW2NvbnRlbnRzLmxlbmd0aCAtIDFdXG5cbiAgaWYgKHRhaWwgJiYgdGFpbC50eXBlID09PSAndGV4dCcpIHtcbiAgICB0YWlsLnZhbHVlICs9IHN1ZmZpeFxuICB9IGVsc2Uge1xuICAgIGNvbnRlbnRzLnB1c2goe3R5cGU6ICd0ZXh0JywgdmFsdWU6IHN1ZmZpeH0pXG4gIH1cblxuICByZXR1cm4gY29udGVudHNcbn1cbiJdLCJuYW1lcyI6WyJyZXZlcnQiLCJzdGF0ZSIsIm5vZGUiLCJzdWJ0eXBlIiwicmVmZXJlbmNlVHlwZSIsInN1ZmZpeCIsImxhYmVsIiwiaWRlbnRpZmllciIsInR5cGUiLCJ2YWx1ZSIsImFsdCIsImNvbnRlbnRzIiwiYWxsIiwiaGVhZCIsInVuc2hpZnQiLCJ0YWlsIiwibGVuZ3RoIiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/revert.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/state.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/state.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createState: function() { return /* binding */ createState; },\n/* harmony export */   wrap: function() { return /* binding */ wrap; }\n/* harmony export */ });\n/* harmony import */ var _ungap_structured_clone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ungap/structured-clone */ \"(app-pages-browser)/./node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unist-util-visit */ \"(app-pages-browser)/./node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js\");\n/* harmony import */ var unist_util_position__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! unist-util-position */ \"(app-pages-browser)/./node_modules/.pnpm/unist-util-position@5.0.0/node_modules/unist-util-position/lib/index.js\");\n/* harmony import */ var _handlers_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handlers/index.js */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/index.js\");\n/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */ /**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */ \n\n\n\nconst own = {}.hasOwnProperty;\n/** @type {Options} */ const emptyOptions = {};\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */ function createState(tree, options) {\n    const settings = options || emptyOptions;\n    /** @type {Map<string, MdastDefinition>} */ const definitionById = new Map();\n    /** @type {Map<string, MdastFootnoteDefinition>} */ const footnoteById = new Map();\n    /** @type {Map<string, number>} */ const footnoteCounts = new Map();\n    /** @type {Handlers} */ // @ts-expect-error: the root handler returns a root.\n    // Hard to type.\n    const handlers = {\n        ..._handlers_index_js__WEBPACK_IMPORTED_MODULE_0__.handlers,\n        ...settings.handlers\n    };\n    /** @type {State} */ const state = {\n        all,\n        applyData,\n        definitionById,\n        footnoteById,\n        footnoteCounts,\n        footnoteOrder: [],\n        handlers,\n        one,\n        options: settings,\n        patch,\n        wrap\n    };\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_1__.visit)(tree, function(node) {\n        if (node.type === \"definition\" || node.type === \"footnoteDefinition\") {\n            const map = node.type === \"definition\" ? definitionById : footnoteById;\n            const id = String(node.identifier).toUpperCase();\n            // Mimick CM behavior of link definitions.\n            // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n            if (!map.has(id)) {\n                // @ts-expect-error: node type matches map.\n                map.set(id, node);\n            }\n        }\n    });\n    return state;\n    /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */ function one(node, parent) {\n        const type = node.type;\n        const handle = state.handlers[type];\n        if (own.call(state.handlers, type) && handle) {\n            return handle(state, node, parent);\n        }\n        if (state.options.passThrough && state.options.passThrough.includes(type)) {\n            if (\"children\" in node) {\n                const { children, ...shallow } = node;\n                const result = (0,_ungap_structured_clone__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(shallow);\n                // @ts-expect-error: TS doesn’t understand…\n                result.children = state.all(node);\n                // @ts-expect-error: TS doesn’t understand…\n                return result;\n            }\n            // @ts-expect-error: it’s custom.\n            return (0,_ungap_structured_clone__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(node);\n        }\n        const unknown = state.options.unknownHandler || defaultUnknownHandler;\n        return unknown(state, node, parent);\n    }\n    /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */ function all(parent) {\n        /** @type {Array<HastElementContent>} */ const values = [];\n        if (\"children\" in parent) {\n            const nodes = parent.children;\n            let index = -1;\n            while(++index < nodes.length){\n                const result = state.one(nodes[index], parent);\n                // To do: see if we van clean this? Can we merge texts?\n                if (result) {\n                    if (index && nodes[index - 1].type === \"break\") {\n                        if (!Array.isArray(result) && result.type === \"text\") {\n                            result.value = trimMarkdownSpaceStart(result.value);\n                        }\n                        if (!Array.isArray(result) && result.type === \"element\") {\n                            const head = result.children[0];\n                            if (head && head.type === \"text\") {\n                                head.value = trimMarkdownSpaceStart(head.value);\n                            }\n                        }\n                    }\n                    if (Array.isArray(result)) {\n                        values.push(...result);\n                    } else {\n                        values.push(result);\n                    }\n                }\n            }\n        }\n        return values;\n    }\n}\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */ function patch(from, to) {\n    if (from.position) to.position = (0,unist_util_position__WEBPACK_IMPORTED_MODULE_3__.position)(from);\n}\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */ function applyData(from, to) {\n    /** @type {HastElement | Type} */ let result = to;\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (from && from.data) {\n        const hName = from.data.hName;\n        const hChildren = from.data.hChildren;\n        const hProperties = from.data.hProperties;\n        if (typeof hName === \"string\") {\n            // Transforming the node resulted in an element with a different name\n            // than wanted:\n            if (result.type === \"element\") {\n                result.tagName = hName;\n            } else {\n                /** @type {Array<HastElementContent>} */ // @ts-expect-error: assume no doctypes in `root`.\n                const children = \"children\" in result ? result.children : [\n                    result\n                ];\n                result = {\n                    type: \"element\",\n                    tagName: hName,\n                    properties: {},\n                    children\n                };\n            }\n        }\n        if (result.type === \"element\" && hProperties) {\n            Object.assign(result.properties, (0,_ungap_structured_clone__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(hProperties));\n        }\n        if (\"children\" in result && result.children && hChildren !== null && hChildren !== undefined) {\n            result.children = hChildren;\n        }\n    }\n    return result;\n}\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */ function defaultUnknownHandler(state, node) {\n    const data = node.data || {};\n    /** @type {HastElement | HastText} */ const result = \"value\" in node && !(own.call(data, \"hProperties\") || own.call(data, \"hChildren\")) ? {\n        type: \"text\",\n        value: node.value\n    } : {\n        type: \"element\",\n        tagName: \"div\",\n        properties: {},\n        children: state.all(node)\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n}\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */ function wrap(nodes, loose) {\n    /** @type {Array<HastText | Type>} */ const result = [];\n    let index = -1;\n    if (loose) {\n        result.push({\n            type: \"text\",\n            value: \"\\n\"\n        });\n    }\n    while(++index < nodes.length){\n        if (index) result.push({\n            type: \"text\",\n            value: \"\\n\"\n        });\n        result.push(nodes[index]);\n    }\n    if (loose && nodes.length > 0) {\n        result.push({\n            type: \"text\",\n            value: \"\\n\"\n        });\n    }\n    return result;\n}\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */ function trimMarkdownSpaceStart(value) {\n    let index = 0;\n    let code = value.charCodeAt(index);\n    while(code === 9 || code === 32){\n        index++;\n        code = value.charCodeAt(index);\n    }\n    return value.slice(index);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/state.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-string@4.0.0/node_modules/mdast-util-to-string/lib/index.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-to-string@4.0.0/node_modules/mdast-util-to-string/lib/index.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toString: function() { return /* binding */ toString; }\n/* harmony export */ });\n/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */ /** @type {Options} */ const emptyOptions = {};\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */ function toString(value, options) {\n    const settings = options || emptyOptions;\n    const includeImageAlt = typeof settings.includeImageAlt === \"boolean\" ? settings.includeImageAlt : true;\n    const includeHtml = typeof settings.includeHtml === \"boolean\" ? settings.includeHtml : true;\n    return one(value, includeImageAlt, includeHtml);\n}\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */ function one(value, includeImageAlt, includeHtml) {\n    if (node(value)) {\n        if (\"value\" in value) {\n            return value.type === \"html\" && !includeHtml ? \"\" : value.value;\n        }\n        if (includeImageAlt && \"alt\" in value && value.alt) {\n            return value.alt;\n        }\n        if (\"children\" in value) {\n            return all(value.children, includeImageAlt, includeHtml);\n        }\n    }\n    if (Array.isArray(value)) {\n        return all(value, includeImageAlt, includeHtml);\n    }\n    return \"\";\n}\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */ function all(values, includeImageAlt, includeHtml) {\n    /** @type {Array<string>} */ const result = [];\n    let index = -1;\n    while(++index < values.length){\n        result[index] = one(values[index], includeImageAlt, includeHtml);\n    }\n    return result.join(\"\");\n}\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */ function node(value) {\n    return Boolean(value && typeof value === \"object\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLXN0cmluZ0A0LjAuMC9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1zdHJpbmcvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7O0NBU0MsR0FFRCxvQkFBb0IsR0FDcEIsTUFBTUEsZUFBZSxDQUFDO0FBRXRCOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNNLFNBQVNDLFNBQVNDLEtBQUssRUFBRUMsT0FBTztJQUNyQyxNQUFNQyxXQUFXRCxXQUFXSDtJQUM1QixNQUFNSyxrQkFDSixPQUFPRCxTQUFTQyxlQUFlLEtBQUssWUFDaENELFNBQVNDLGVBQWUsR0FDeEI7SUFDTixNQUFNQyxjQUNKLE9BQU9GLFNBQVNFLFdBQVcsS0FBSyxZQUFZRixTQUFTRSxXQUFXLEdBQUc7SUFFckUsT0FBT0MsSUFBSUwsT0FBT0csaUJBQWlCQztBQUNyQztBQUVBOzs7Ozs7Ozs7OztDQVdDLEdBQ0QsU0FBU0MsSUFBSUwsS0FBSyxFQUFFRyxlQUFlLEVBQUVDLFdBQVc7SUFDOUMsSUFBSUUsS0FBS04sUUFBUTtRQUNmLElBQUksV0FBV0EsT0FBTztZQUNwQixPQUFPQSxNQUFNTyxJQUFJLEtBQUssVUFBVSxDQUFDSCxjQUFjLEtBQUtKLE1BQU1BLEtBQUs7UUFDakU7UUFFQSxJQUFJRyxtQkFBbUIsU0FBU0gsU0FBU0EsTUFBTVEsR0FBRyxFQUFFO1lBQ2xELE9BQU9SLE1BQU1RLEdBQUc7UUFDbEI7UUFFQSxJQUFJLGNBQWNSLE9BQU87WUFDdkIsT0FBT1MsSUFBSVQsTUFBTVUsUUFBUSxFQUFFUCxpQkFBaUJDO1FBQzlDO0lBQ0Y7SUFFQSxJQUFJTyxNQUFNQyxPQUFPLENBQUNaLFFBQVE7UUFDeEIsT0FBT1MsSUFBSVQsT0FBT0csaUJBQWlCQztJQUNyQztJQUVBLE9BQU87QUFDVDtBQUVBOzs7Ozs7Ozs7OztDQVdDLEdBQ0QsU0FBU0ssSUFBSUksTUFBTSxFQUFFVixlQUFlLEVBQUVDLFdBQVc7SUFDL0MsMEJBQTBCLEdBQzFCLE1BQU1VLFNBQVMsRUFBRTtJQUNqQixJQUFJQyxRQUFRLENBQUM7SUFFYixNQUFPLEVBQUVBLFFBQVFGLE9BQU9HLE1BQU0sQ0FBRTtRQUM5QkYsTUFBTSxDQUFDQyxNQUFNLEdBQUdWLElBQUlRLE1BQU0sQ0FBQ0UsTUFBTSxFQUFFWixpQkFBaUJDO0lBQ3REO0lBRUEsT0FBT1UsT0FBT0csSUFBSSxDQUFDO0FBQ3JCO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNYLEtBQUtOLEtBQUs7SUFDakIsT0FBT2tCLFFBQVFsQixTQUFTLE9BQU9BLFVBQVU7QUFDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8tc3RyaW5nQDQuMC4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLXN0cmluZy9saWIvaW5kZXguanM/NmIxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuTm9kZXN9IE5vZGVzXG4gKlxuICogQHR5cGVkZWYgT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkfSBbaW5jbHVkZUltYWdlQWx0PXRydWVdXG4gKiAgIFdoZXRoZXIgdG8gdXNlIGBhbHRgIGZvciBgaW1hZ2VgcyAoZGVmYXVsdDogYHRydWVgKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtpbmNsdWRlSHRtbD10cnVlXVxuICogICBXaGV0aGVyIHRvIHVzZSBgdmFsdWVgIG9mIEhUTUwgKGRlZmF1bHQ6IGB0cnVlYCkuXG4gKi9cblxuLyoqIEB0eXBlIHtPcHRpb25zfSAqL1xuY29uc3QgZW1wdHlPcHRpb25zID0ge31cblxuLyoqXG4gKiBHZXQgdGhlIHRleHQgY29udGVudCBvZiBhIG5vZGUgb3IgbGlzdCBvZiBub2Rlcy5cbiAqXG4gKiBQcmVmZXJzIHRoZSBub2Rl4oCZcyBwbGFpbi10ZXh0IGZpZWxkcywgb3RoZXJ3aXNlIHNlcmlhbGl6ZXMgaXRzIGNoaWxkcmVuLFxuICogYW5kIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBhcnJheSwgc2VyaWFsaXplIHRoZSBub2RlcyBpbiBpdC5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IFt2YWx1ZV1cbiAqICAgVGhpbmcgdG8gc2VyaWFsaXplLCB0eXBpY2FsbHkgYE5vZGVgLlxuICogQHBhcmFtIHtPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIFNlcmlhbGl6ZWQgYHZhbHVlYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHNldHRpbmdzID0gb3B0aW9ucyB8fCBlbXB0eU9wdGlvbnNcbiAgY29uc3QgaW5jbHVkZUltYWdlQWx0ID1cbiAgICB0eXBlb2Ygc2V0dGluZ3MuaW5jbHVkZUltYWdlQWx0ID09PSAnYm9vbGVhbidcbiAgICAgID8gc2V0dGluZ3MuaW5jbHVkZUltYWdlQWx0XG4gICAgICA6IHRydWVcbiAgY29uc3QgaW5jbHVkZUh0bWwgPVxuICAgIHR5cGVvZiBzZXR0aW5ncy5pbmNsdWRlSHRtbCA9PT0gJ2Jvb2xlYW4nID8gc2V0dGluZ3MuaW5jbHVkZUh0bWwgOiB0cnVlXG5cbiAgcmV0dXJuIG9uZSh2YWx1ZSwgaW5jbHVkZUltYWdlQWx0LCBpbmNsdWRlSHRtbClcbn1cblxuLyoqXG4gKiBPbmUgbm9kZSBvciBzZXZlcmFsIG5vZGVzLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gdmFsdWVcbiAqICAgVGhpbmcgdG8gc2VyaWFsaXplLlxuICogQHBhcmFtIHtib29sZWFufSBpbmNsdWRlSW1hZ2VBbHRcbiAqICAgSW5jbHVkZSBpbWFnZSBgYWx0YHMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVIdG1sXG4gKiAgIEluY2x1ZGUgSFRNTC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIFNlcmlhbGl6ZWQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gb25lKHZhbHVlLCBpbmNsdWRlSW1hZ2VBbHQsIGluY2x1ZGVIdG1sKSB7XG4gIGlmIChub2RlKHZhbHVlKSkge1xuICAgIGlmICgndmFsdWUnIGluIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUudHlwZSA9PT0gJ2h0bWwnICYmICFpbmNsdWRlSHRtbCA/ICcnIDogdmFsdWUudmFsdWVcbiAgICB9XG5cbiAgICBpZiAoaW5jbHVkZUltYWdlQWx0ICYmICdhbHQnIGluIHZhbHVlICYmIHZhbHVlLmFsdCkge1xuICAgICAgcmV0dXJuIHZhbHVlLmFsdFxuICAgIH1cblxuICAgIGlmICgnY2hpbGRyZW4nIGluIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYWxsKHZhbHVlLmNoaWxkcmVuLCBpbmNsdWRlSW1hZ2VBbHQsIGluY2x1ZGVIdG1sKVxuICAgIH1cbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBhbGwodmFsdWUsIGluY2x1ZGVJbWFnZUFsdCwgaW5jbHVkZUh0bWwpXG4gIH1cblxuICByZXR1cm4gJydcbn1cblxuLyoqXG4gKiBTZXJpYWxpemUgYSBsaXN0IG9mIG5vZGVzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8dW5rbm93bj59IHZhbHVlc1xuICogICBUaGluZyB0byBzZXJpYWxpemUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVJbWFnZUFsdFxuICogICBJbmNsdWRlIGltYWdlIGBhbHRgcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVkZUh0bWxcbiAqICAgSW5jbHVkZSBIVE1MLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgU2VyaWFsaXplZCBub2Rlcy5cbiAqL1xuZnVuY3Rpb24gYWxsKHZhbHVlcywgaW5jbHVkZUltYWdlQWx0LCBpbmNsdWRlSHRtbCkge1xuICAvKiogQHR5cGUge0FycmF5PHN0cmluZz59ICovXG4gIGNvbnN0IHJlc3VsdCA9IFtdXG4gIGxldCBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCB2YWx1ZXMubGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IG9uZSh2YWx1ZXNbaW5kZXhdLCBpbmNsdWRlSW1hZ2VBbHQsIGluY2x1ZGVIdG1sKVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGB2YWx1ZWAgbG9va3MgbGlrZSBhIG5vZGUuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSB2YWx1ZVxuICogICBUaGluZy5cbiAqIEByZXR1cm5zIHt2YWx1ZSBpcyBOb2Rlc31cbiAqICAgV2hldGhlciBgdmFsdWVgIGlzIGEgbm9kZS5cbiAqL1xuZnVuY3Rpb24gbm9kZSh2YWx1ZSkge1xuICByZXR1cm4gQm9vbGVhbih2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKVxufVxuIl0sIm5hbWVzIjpbImVtcHR5T3B0aW9ucyIsInRvU3RyaW5nIiwidmFsdWUiLCJvcHRpb25zIiwic2V0dGluZ3MiLCJpbmNsdWRlSW1hZ2VBbHQiLCJpbmNsdWRlSHRtbCIsIm9uZSIsIm5vZGUiLCJ0eXBlIiwiYWx0IiwiYWxsIiwiY2hpbGRyZW4iLCJBcnJheSIsImlzQXJyYXkiLCJ2YWx1ZXMiLCJyZXN1bHQiLCJpbmRleCIsImxlbmd0aCIsImpvaW4iLCJCb29sZWFuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-string@4.0.0/node_modules/mdast-util-to-string/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/attention.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/attention.js ***!
  \************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   attention: function() { return /* binding */ attention; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-chunked */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-chunked@2.0.1/node_modules/micromark-util-chunked/dev/index.js\");\n/* harmony import */ var micromark_util_classify_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-classify-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-classify-character@2.0.1/node_modules/micromark-util-classify-character/dev/index.js\");\n/* harmony import */ var micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-resolve-all */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-resolve-all@2.0.1/node_modules/micromark-util-resolve-all/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */ \n\n\n\n\n/** @type {Construct} */ const attention = {\n    name: \"attention\",\n    resolveAll: resolveAllAttention,\n    tokenize: tokenizeAttention\n};\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */ // eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n    let index = -1;\n    /** @type {number} */ let open;\n    /** @type {Token} */ let group;\n    /** @type {Token} */ let text;\n    /** @type {Token} */ let openingSequence;\n    /** @type {Token} */ let closingSequence;\n    /** @type {number} */ let use;\n    /** @type {Array<Event>} */ let nextEvents;\n    /** @type {number} */ let offset;\n    // Walk through all events.\n    //\n    // Note: performance of this is fine on an mb of normal markdown, but it’s\n    // a bottleneck for malicious stuff.\n    while(++index < events.length){\n        // Find a token that can close.\n        if (events[index][0] === \"enter\" && events[index][1].type === \"attentionSequence\" && events[index][1]._close) {\n            open = index;\n            // Now walk back to find an opener.\n            while(open--){\n                // Find a token that can open the closer.\n                if (events[open][0] === \"exit\" && events[open][1].type === \"attentionSequence\" && events[open][1]._open && // If the markers are the same:\n                context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n                    // If the opening can close or the closing can open,\n                    // and the close size *is not* a multiple of three,\n                    // but the sum of the opening and closing size *is* multiple of three,\n                    // then don’t match.\n                    if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n                        continue;\n                    }\n                    // Number of markers to use from the sequence.\n                    use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n                    const start = {\n                        ...events[open][1].end\n                    };\n                    const end = {\n                        ...events[index][1].start\n                    };\n                    movePoint(start, -use);\n                    movePoint(end, use);\n                    openingSequence = {\n                        type: use > 1 ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.strongSequence : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.emphasisSequence,\n                        start,\n                        end: {\n                            ...events[open][1].end\n                        }\n                    };\n                    closingSequence = {\n                        type: use > 1 ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.strongSequence : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.emphasisSequence,\n                        start: {\n                            ...events[index][1].start\n                        },\n                        end\n                    };\n                    text = {\n                        type: use > 1 ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.strongText : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.emphasisText,\n                        start: {\n                            ...events[open][1].end\n                        },\n                        end: {\n                            ...events[index][1].start\n                        }\n                    };\n                    group = {\n                        type: use > 1 ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.strong : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.emphasis,\n                        start: {\n                            ...openingSequence.start\n                        },\n                        end: {\n                            ...closingSequence.end\n                        }\n                    };\n                    events[open][1].end = {\n                        ...openingSequence.start\n                    };\n                    events[index][1].start = {\n                        ...closingSequence.end\n                    };\n                    nextEvents = [];\n                    // If there are more markers in the opening, add them before.\n                    if (events[open][1].end.offset - events[open][1].start.offset) {\n                        nextEvents = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(nextEvents, [\n                            [\n                                \"enter\",\n                                events[open][1],\n                                context\n                            ],\n                            [\n                                \"exit\",\n                                events[open][1],\n                                context\n                            ]\n                        ]);\n                    }\n                    // Opening.\n                    nextEvents = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(nextEvents, [\n                        [\n                            \"enter\",\n                            group,\n                            context\n                        ],\n                        [\n                            \"enter\",\n                            openingSequence,\n                            context\n                        ],\n                        [\n                            \"exit\",\n                            openingSequence,\n                            context\n                        ],\n                        [\n                            \"enter\",\n                            text,\n                            context\n                        ]\n                    ]);\n                    // Always populated by defaults.\n                    (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(context.parser.constructs.insideSpan.null, \"expected `insideSpan` to be populated\");\n                    // Between.\n                    nextEvents = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(nextEvents, (0,micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_3__.resolveAll)(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n                    // Closing.\n                    nextEvents = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(nextEvents, [\n                        [\n                            \"exit\",\n                            text,\n                            context\n                        ],\n                        [\n                            \"enter\",\n                            closingSequence,\n                            context\n                        ],\n                        [\n                            \"exit\",\n                            closingSequence,\n                            context\n                        ],\n                        [\n                            \"exit\",\n                            group,\n                            context\n                        ]\n                    ]);\n                    // If there are more markers in the closing, add them after.\n                    if (events[index][1].end.offset - events[index][1].start.offset) {\n                        offset = 2;\n                        nextEvents = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(nextEvents, [\n                            [\n                                \"enter\",\n                                events[index][1],\n                                context\n                            ],\n                            [\n                                \"exit\",\n                                events[index][1],\n                                context\n                            ]\n                        ]);\n                    } else {\n                        offset = 0;\n                    }\n                    (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.splice)(events, open - 1, index - open + 3, nextEvents);\n                    index = open + nextEvents.length - offset - 2;\n                    break;\n                }\n            }\n        }\n    }\n    // Remove remaining sequences.\n    index = -1;\n    while(++index < events.length){\n        if (events[index][1].type === \"attentionSequence\") {\n            events[index][1].type = \"data\";\n        }\n    }\n    return events;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeAttention(effects, ok) {\n    const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n    const previous = this.previous;\n    const before = (0,micromark_util_classify_character__WEBPACK_IMPORTED_MODULE_4__.classifyCharacter)(previous);\n    /** @type {NonNullable<Code>} */ let marker;\n    return start;\n    /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.underscore, \"expected asterisk or underscore\");\n        marker = code;\n        effects.enter(\"attentionSequence\");\n        return inside(code);\n    }\n    /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */ function inside(code) {\n        if (code === marker) {\n            effects.consume(code);\n            return inside;\n        }\n        const token = effects.exit(\"attentionSequence\");\n        // To do: next major: move this to resolver, just like `markdown-rs`.\n        const after = (0,micromark_util_classify_character__WEBPACK_IMPORTED_MODULE_4__.classifyCharacter)(code);\n        // Always populated by defaults.\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(attentionMarkers, \"expected `attentionMarkers` to be populated\");\n        const open = !after || after === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_6__.constants.characterGroupPunctuation && before || attentionMarkers.includes(code);\n        const close = !before || before === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_6__.constants.characterGroupPunctuation && after || attentionMarkers.includes(previous);\n        token._open = Boolean(marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.asterisk ? open : open && (before || !close));\n        token._close = Boolean(marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.asterisk ? close : close && (after || !open));\n        return ok(code);\n    }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */ function movePoint(point, offset) {\n    point.column += offset;\n    point.offset += offset;\n    point._bufferIndex += offset;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/attention.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/autolink.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/autolink.js ***!
  \***********************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autolink: function() { return /* binding */ autolink; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n/** @type {Construct} */ const autolink = {\n    name: \"autolink\",\n    tokenize: tokenizeAutolink\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeAutolink(effects, ok, nok) {\n    let size = 0;\n    return start;\n    /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan, \"expected `<`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolink);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkProtocol);\n        return open;\n    }\n    /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function open(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlpha)(code)) {\n            effects.consume(code);\n            return schemeOrEmailAtext;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.atSign) {\n            return nok(code);\n        }\n        return emailAtext(code);\n    }\n    /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function schemeOrEmailAtext(code) {\n        // ASCII alphanumeric and `+`, `-`, and `.`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.plusSign || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) {\n            // Count the previous alphabetical from `open` too.\n            size = 1;\n            return schemeInsideOrEmailAtext(code);\n        }\n        return emailAtext(code);\n    }\n    /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function schemeInsideOrEmailAtext(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon) {\n            effects.consume(code);\n            size = 0;\n            return urlInside;\n        }\n        // ASCII alphanumeric and `+`, `-`, and `.`.\n        if ((code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.plusSign || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) && size++ < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.autolinkSchemeSizeMax) {\n            effects.consume(code);\n            return schemeInsideOrEmailAtext;\n        }\n        size = 0;\n        return emailAtext(code);\n    }\n    /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function urlInside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkProtocol);\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolink);\n            return ok;\n        }\n        // ASCII control, space, or `<`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.space || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiControl)(code)) {\n            return nok(code);\n        }\n        effects.consume(code);\n        return urlInside;\n    }\n    /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */ function emailAtext(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.atSign) {\n            effects.consume(code);\n            return emailAtSignOrDot;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAtext)(code)) {\n            effects.consume(code);\n            return emailAtext;\n        }\n        return nok(code);\n    }\n    /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */ function emailAtSignOrDot(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code) ? emailLabel(code) : nok(code);\n    }\n    /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */ function emailLabel(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot) {\n            effects.consume(code);\n            size = 0;\n            return emailAtSignOrDot;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n            // Exit, then change the token type.\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkProtocol).type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkEmail;\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolink);\n            return ok;\n        }\n        return emailValue(code);\n    }\n    /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */ function emailValue(code) {\n        // ASCII alphanumeric or `-`.\n        if ((code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) && size++ < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.autolinkDomainSizeMax) {\n            const next = code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash ? emailValue : emailLabel;\n            effects.consume(code);\n            return next;\n        }\n        return nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/autolink.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/blank-line.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/blank-line.js ***!
  \*************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blankLine: function() { return /* binding */ blankLine; }\n/* harmony export */ });\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n/** @type {Construct} */ const blankLine = {\n    partial: true,\n    tokenize: tokenizeBlankLine\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeBlankLine(effects, ok, nok) {\n    return start;\n    /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_0__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_1__.factorySpace)(effects, after, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix)(code) : after(code);\n    }\n    /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_0__.markdownLineEnding)(code) ? ok(code) : nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvYmxhbmstbGluZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7O0NBT0MsR0FFbUQ7QUFDc0I7QUFDeEI7QUFFbEQsc0JBQXNCLEdBQ2YsTUFBTUssWUFBWTtJQUFDQyxTQUFTO0lBQU1DLFVBQVVDO0FBQWlCLEVBQUM7QUFFckU7Ozs7Q0FJQyxHQUNELFNBQVNBLGtCQUFrQkMsT0FBTyxFQUFFQyxFQUFFLEVBQUVDLEdBQUc7SUFDekMsT0FBT0M7SUFFUDs7Ozs7Ozs7Ozs7OztHQWFDLEdBQ0QsU0FBU0EsTUFBTUMsSUFBSTtRQUNqQixPQUFPWCx1RUFBYUEsQ0FBQ1csUUFDakJiLHFFQUFZQSxDQUFDUyxTQUFTSyxPQUFPVix3REFBS0EsQ0FBQ1csVUFBVSxFQUFFRixRQUMvQ0MsTUFBTUQ7SUFDWjtJQUVBOzs7Ozs7Ozs7Ozs7O0dBYUMsR0FDRCxTQUFTQyxNQUFNRCxJQUFJO1FBQ2pCLE9BQU9BLFNBQVNWLHdEQUFLQSxDQUFDYSxHQUFHLElBQUlmLDRFQUFrQkEsQ0FBQ1ksUUFBUUgsR0FBR0csUUFBUUYsSUFBSUU7SUFDekU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWNvcmUtY29tbW9ubWFya0AyLjAuMy9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9kZXYvbGliL2JsYW5rLWxpbmUuanM/MTc2YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb25zdHJ1Y3QsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplclxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZywgbWFya2Rvd25TcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2RlcywgdHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbCdcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgYmxhbmtMaW5lID0ge3BhcnRpYWw6IHRydWUsIHRva2VuaXplOiB0b2tlbml6ZUJsYW5rTGluZX1cblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVCbGFua0xpbmUoZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gc3RhcnRcblxuICAvKipcbiAgICogU3RhcnQgb2YgYmxhbmsgbGluZS5cbiAgICpcbiAgICogPiDwn5GJICoqTm90ZSoqOiBg4pCgYCByZXByZXNlbnRzIGEgc3BhY2UgY2hhcmFjdGVyLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwg4pCg4pCg4pCKXG4gICAqICAgICBeXG4gICAqID4gfCDikIpcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICByZXR1cm4gbWFya2Rvd25TcGFjZShjb2RlKVxuICAgICAgPyBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYWZ0ZXIsIHR5cGVzLmxpbmVQcmVmaXgpKGNvZGUpXG4gICAgICA6IGFmdGVyKGNvZGUpXG4gIH1cblxuICAvKipcbiAgICogQXQgZW9mL2VvbCwgYWZ0ZXIgb3B0aW9uYWwgd2hpdGVzcGFjZS5cbiAgICpcbiAgICogPiDwn5GJICoqTm90ZSoqOiBg4pCgYCByZXByZXNlbnRzIGEgc3BhY2UgY2hhcmFjdGVyLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwg4pCg4pCg4pCKXG4gICAqICAgICAgIF5cbiAgICogPiB8IOKQilxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIHJldHVybiBjb2RlID09PSBjb2Rlcy5lb2YgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpID8gb2soY29kZSkgOiBub2soY29kZSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbImZhY3RvcnlTcGFjZSIsIm1hcmtkb3duTGluZUVuZGluZyIsIm1hcmtkb3duU3BhY2UiLCJjb2RlcyIsInR5cGVzIiwiYmxhbmtMaW5lIiwicGFydGlhbCIsInRva2VuaXplIiwidG9rZW5pemVCbGFua0xpbmUiLCJlZmZlY3RzIiwib2siLCJub2siLCJzdGFydCIsImNvZGUiLCJhZnRlciIsImxpbmVQcmVmaXgiLCJlb2YiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/blank-line.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/block-quote.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/block-quote.js ***!
  \**************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockQuote: function() { return /* binding */ blockQuote; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const blockQuote = {\n    continuation: {\n        tokenize: tokenizeBlockQuoteContinuation\n    },\n    exit,\n    name: \"blockQuote\",\n    tokenize: tokenizeBlockQuoteStart\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeBlockQuoteStart(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.greaterThan) {\n            const state = self.containerState;\n            (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(state, \"expected `containerState` to be defined in container\");\n            if (!state.open) {\n                effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuote, {\n                    _container: true\n                });\n                state.open = true;\n            }\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuotePrefix);\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuoteMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuoteMarker);\n            return after;\n        }\n        return nok(code);\n    }\n    /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuotePrefixWhitespace);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuotePrefixWhitespace);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuotePrefix);\n            return ok;\n        }\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuotePrefix);\n        return ok(code);\n    }\n}\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeBlockQuoteContinuation(effects, ok, nok) {\n    const self = this;\n    return contStart;\n    /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function contStart(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            // Always populated by defaults.\n            (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.parser.constructs.disable.null, \"expected `disable.null` to be populated\");\n            return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, contBefore, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix, self.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.constants.tabSize)(code);\n        }\n        return contBefore(code);\n    }\n    /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function contBefore(code) {\n        return effects.attempt(blockQuote, ok, nok)(code);\n    }\n}\n/** @type {Exiter} */ function exit(effects) {\n    effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuote);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvYmxvY2stcXVvdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7Ozs7OztDQVFDLEdBRWtDO0FBQ2lCO0FBQ0U7QUFDTztBQUU3RCxzQkFBc0IsR0FDZixNQUFNTyxhQUFhO0lBQ3hCQyxjQUFjO1FBQUNDLFVBQVVDO0lBQThCO0lBQ3ZEQztJQUNBQyxNQUFNO0lBQ05ILFVBQVVJO0FBQ1osRUFBQztBQUVEOzs7O0NBSUMsR0FDRCxTQUFTQSx3QkFBd0JDLE9BQU8sRUFBRWQsRUFBRSxFQUFFZSxHQUFHO0lBQy9DLE1BQU1DLE9BQU8sSUFBSTtJQUVqQixPQUFPQztJQUVQOzs7Ozs7Ozs7R0FTQyxHQUNELFNBQVNBLE1BQU1DLElBQUk7UUFDakIsSUFBSUEsU0FBU2Qsd0RBQUtBLENBQUNlLFdBQVcsRUFBRTtZQUM5QixNQUFNQyxRQUFRSixLQUFLSyxjQUFjO1lBRWpDcEIsMENBQU1BLENBQUNtQixPQUFPO1lBRWQsSUFBSSxDQUFDQSxNQUFNRSxJQUFJLEVBQUU7Z0JBQ2ZSLFFBQVFTLEtBQUssQ0FBQ2pCLHdEQUFLQSxDQUFDQyxVQUFVLEVBQUU7b0JBQUNpQixZQUFZO2dCQUFJO2dCQUNqREosTUFBTUUsSUFBSSxHQUFHO1lBQ2Y7WUFFQVIsUUFBUVMsS0FBSyxDQUFDakIsd0RBQUtBLENBQUNtQixnQkFBZ0I7WUFDcENYLFFBQVFTLEtBQUssQ0FBQ2pCLHdEQUFLQSxDQUFDb0IsZ0JBQWdCO1lBQ3BDWixRQUFRYSxPQUFPLENBQUNUO1lBQ2hCSixRQUFRSCxJQUFJLENBQUNMLHdEQUFLQSxDQUFDb0IsZ0JBQWdCO1lBQ25DLE9BQU9FO1FBQ1Q7UUFFQSxPQUFPYixJQUFJRztJQUNiO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU1UsTUFBTVYsSUFBSTtRQUNqQixJQUFJZix1RUFBYUEsQ0FBQ2UsT0FBTztZQUN2QkosUUFBUVMsS0FBSyxDQUFDakIsd0RBQUtBLENBQUN1QiwwQkFBMEI7WUFDOUNmLFFBQVFhLE9BQU8sQ0FBQ1Q7WUFDaEJKLFFBQVFILElBQUksQ0FBQ0wsd0RBQUtBLENBQUN1QiwwQkFBMEI7WUFDN0NmLFFBQVFILElBQUksQ0FBQ0wsd0RBQUtBLENBQUNtQixnQkFBZ0I7WUFDbkMsT0FBT3pCO1FBQ1Q7UUFFQWMsUUFBUUgsSUFBSSxDQUFDTCx3REFBS0EsQ0FBQ21CLGdCQUFnQjtRQUNuQyxPQUFPekIsR0FBR2tCO0lBQ1o7QUFDRjtBQUVBOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNELFNBQVNSLCtCQUErQkksT0FBTyxFQUFFZCxFQUFFLEVBQUVlLEdBQUc7SUFDdEQsTUFBTUMsT0FBTyxJQUFJO0lBRWpCLE9BQU9jO0lBRVA7Ozs7Ozs7Ozs7OztHQVlDLEdBQ0QsU0FBU0EsVUFBVVosSUFBSTtRQUNyQixJQUFJZix1RUFBYUEsQ0FBQ2UsT0FBTztZQUN2QixnQ0FBZ0M7WUFDaENqQiwwQ0FBTUEsQ0FDSmUsS0FBS2UsTUFBTSxDQUFDQyxVQUFVLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxFQUNuQztZQUdGLE9BQU9oQyxxRUFBWUEsQ0FDakJZLFNBQ0FxQixZQUNBN0Isd0RBQUtBLENBQUM4QixVQUFVLEVBQ2hCcEIsS0FBS2UsTUFBTSxDQUFDQyxVQUFVLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDRyxRQUFRLENBQUMsa0JBQ3pDQyxZQUNBakMsNERBQVNBLENBQUNrQyxPQUFPLEVBQ3JCckI7UUFDSjtRQUVBLE9BQU9pQixXQUFXakI7SUFDcEI7SUFFQTs7Ozs7Ozs7Ozs7O0dBWUMsR0FDRCxTQUFTaUIsV0FBV2pCLElBQUk7UUFDdEIsT0FBT0osUUFBUTBCLE9BQU8sQ0FBQ2pDLFlBQVlQLElBQUllLEtBQUtHO0lBQzlDO0FBQ0Y7QUFFQSxtQkFBbUIsR0FDbkIsU0FBU1AsS0FBS0csT0FBTztJQUNuQkEsUUFBUUgsSUFBSSxDQUFDTCx3REFBS0EsQ0FBQ0MsVUFBVTtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWNvcmUtY29tbW9ubWFya0AyLjAuMy9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9kZXYvbGliL2Jsb2NrLXF1b3RlLmpzP2M4NmIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgQ29uc3RydWN0LFxuICogICBFeGl0ZXIsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplclxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuaW1wb3J0IHtmYWN0b3J5U3BhY2V9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJ1xuaW1wb3J0IHttYXJrZG93blNwYWNlfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge2NvZGVzLCBjb25zdGFudHMsIHR5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wnXG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGJsb2NrUXVvdGUgPSB7XG4gIGNvbnRpbnVhdGlvbjoge3Rva2VuaXplOiB0b2tlbml6ZUJsb2NrUXVvdGVDb250aW51YXRpb259LFxuICBleGl0LFxuICBuYW1lOiAnYmxvY2tRdW90ZScsXG4gIHRva2VuaXplOiB0b2tlbml6ZUJsb2NrUXVvdGVTdGFydFxufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUJsb2NrUXVvdGVTdGFydChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLyoqXG4gICAqIFN0YXJ0IG9mIGJsb2NrIHF1b3RlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgPiBhXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHNlbGYuY29udGFpbmVyU3RhdGVcblxuICAgICAgYXNzZXJ0KHN0YXRlLCAnZXhwZWN0ZWQgYGNvbnRhaW5lclN0YXRlYCB0byBiZSBkZWZpbmVkIGluIGNvbnRhaW5lcicpXG5cbiAgICAgIGlmICghc3RhdGUub3Blbikge1xuICAgICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmJsb2NrUXVvdGUsIHtfY29udGFpbmVyOiB0cnVlfSlcbiAgICAgICAgc3RhdGUub3BlbiA9IHRydWVcbiAgICAgIH1cblxuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5ibG9ja1F1b3RlUHJlZml4KVxuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5ibG9ja1F1b3RlTWFya2VyKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuYmxvY2tRdW90ZU1hcmtlcilcbiAgICAgIHJldHVybiBhZnRlclxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBgPmAsIGJlZm9yZSBvcHRpb25hbCB3aGl0ZXNwYWNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgPiBhXG4gICAqICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmJsb2NrUXVvdGVQcmVmaXhXaGl0ZXNwYWNlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuYmxvY2tRdW90ZVByZWZpeFdoaXRlc3BhY2UpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuYmxvY2tRdW90ZVByZWZpeClcbiAgICAgIHJldHVybiBva1xuICAgIH1cblxuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5ibG9ja1F1b3RlUHJlZml4KVxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG59XG5cbi8qKlxuICogU3RhcnQgb2YgYmxvY2sgcXVvdGUgY29udGludWF0aW9uLlxuICpcbiAqIGBgYG1hcmtkb3duXG4gKiAgIHwgPiBhXG4gKiA+IHwgPiBiXG4gKiAgICAgXlxuICogYGBgXG4gKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplQmxvY2tRdW90ZUNvbnRpbnVhdGlvbihlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgcmV0dXJuIGNvbnRTdGFydFxuXG4gIC8qKlxuICAgKiBTdGFydCBvZiBibG9jayBxdW90ZSBjb250aW51YXRpb24uXG4gICAqXG4gICAqIEFsc28gdXNlZCB0byBwYXJzZSB0aGUgZmlyc3QgYmxvY2sgcXVvdGUgb3BlbmluZy5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogICB8ID4gYVxuICAgKiA+IHwgPiBiXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBjb250U3RhcnQoY29kZSkge1xuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICAvLyBBbHdheXMgcG9wdWxhdGVkIGJ5IGRlZmF1bHRzLlxuICAgICAgYXNzZXJ0KFxuICAgICAgICBzZWxmLnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbCxcbiAgICAgICAgJ2V4cGVjdGVkIGBkaXNhYmxlLm51bGxgIHRvIGJlIHBvcHVsYXRlZCdcbiAgICAgIClcblxuICAgICAgcmV0dXJuIGZhY3RvcnlTcGFjZShcbiAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgY29udEJlZm9yZSxcbiAgICAgICAgdHlwZXMubGluZVByZWZpeCxcbiAgICAgICAgc2VsZi5wYXJzZXIuY29uc3RydWN0cy5kaXNhYmxlLm51bGwuaW5jbHVkZXMoJ2NvZGVJbmRlbnRlZCcpXG4gICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICA6IGNvbnN0YW50cy50YWJTaXplXG4gICAgICApKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRCZWZvcmUoY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBdCBgPmAsIGFmdGVyIG9wdGlvbmFsIHdoaXRlc3BhY2UuXG4gICAqXG4gICAqIEFsc28gdXNlZCB0byBwYXJzZSB0aGUgZmlyc3QgYmxvY2sgcXVvdGUgb3BlbmluZy5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogICB8ID4gYVxuICAgKiA+IHwgPiBiXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBjb250QmVmb3JlKGNvZGUpIHtcbiAgICByZXR1cm4gZWZmZWN0cy5hdHRlbXB0KGJsb2NrUXVvdGUsIG9rLCBub2spKGNvZGUpXG4gIH1cbn1cblxuLyoqIEB0eXBlIHtFeGl0ZXJ9ICovXG5mdW5jdGlvbiBleGl0KGVmZmVjdHMpIHtcbiAgZWZmZWN0cy5leGl0KHR5cGVzLmJsb2NrUXVvdGUpXG59XG4iXSwibmFtZXMiOlsib2siLCJhc3NlcnQiLCJmYWN0b3J5U3BhY2UiLCJtYXJrZG93blNwYWNlIiwiY29kZXMiLCJjb25zdGFudHMiLCJ0eXBlcyIsImJsb2NrUXVvdGUiLCJjb250aW51YXRpb24iLCJ0b2tlbml6ZSIsInRva2VuaXplQmxvY2tRdW90ZUNvbnRpbnVhdGlvbiIsImV4aXQiLCJuYW1lIiwidG9rZW5pemVCbG9ja1F1b3RlU3RhcnQiLCJlZmZlY3RzIiwibm9rIiwic2VsZiIsInN0YXJ0IiwiY29kZSIsImdyZWF0ZXJUaGFuIiwic3RhdGUiLCJjb250YWluZXJTdGF0ZSIsIm9wZW4iLCJlbnRlciIsIl9jb250YWluZXIiLCJibG9ja1F1b3RlUHJlZml4IiwiYmxvY2tRdW90ZU1hcmtlciIsImNvbnN1bWUiLCJhZnRlciIsImJsb2NrUXVvdGVQcmVmaXhXaGl0ZXNwYWNlIiwiY29udFN0YXJ0IiwicGFyc2VyIiwiY29uc3RydWN0cyIsImRpc2FibGUiLCJudWxsIiwiY29udEJlZm9yZSIsImxpbmVQcmVmaXgiLCJpbmNsdWRlcyIsInVuZGVmaW5lZCIsInRhYlNpemUiLCJhdHRlbXB0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/block-quote.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/character-escape.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/character-escape.js ***!
  \*******************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   characterEscape: function() { return /* binding */ characterEscape; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n/** @type {Construct} */ const characterEscape = {\n    name: \"characterEscape\",\n    tokenize: tokenizeCharacterEscape\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeCharacterEscape(effects, ok, nok) {\n    return start;\n    /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.backslash, \"expected `\\\\`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterEscape);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.escapeMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.escapeMarker);\n        return inside;\n    }\n    /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function inside(code) {\n        // ASCII punctuation.\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiPunctuation)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterEscapeValue);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterEscapeValue);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterEscape);\n            return ok;\n        }\n        return nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvY2hhcmFjdGVyLWVzY2FwZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7O0NBT0MsR0FFa0M7QUFDc0I7QUFDUDtBQUVsRCxzQkFBc0IsR0FDZixNQUFNSyxrQkFBa0I7SUFDN0JDLE1BQU07SUFDTkMsVUFBVUM7QUFDWixFQUFDO0FBRUQ7Ozs7Q0FJQyxHQUNELFNBQVNBLHdCQUF3QkMsT0FBTyxFQUFFVCxFQUFFLEVBQUVVLEdBQUc7SUFDL0MsT0FBT0M7SUFFUDs7Ozs7Ozs7O0dBU0MsR0FDRCxTQUFTQSxNQUFNQyxJQUFJO1FBQ2pCWCwwQ0FBTUEsQ0FBQ1csU0FBU1Qsd0RBQUtBLENBQUNVLFNBQVMsRUFBRTtRQUNqQ0osUUFBUUssS0FBSyxDQUFDVix3REFBS0EsQ0FBQ0MsZUFBZTtRQUNuQ0ksUUFBUUssS0FBSyxDQUFDVix3REFBS0EsQ0FBQ1csWUFBWTtRQUNoQ04sUUFBUU8sT0FBTyxDQUFDSjtRQUNoQkgsUUFBUVEsSUFBSSxDQUFDYix3REFBS0EsQ0FBQ1csWUFBWTtRQUMvQixPQUFPRztJQUNUO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU0EsT0FBT04sSUFBSTtRQUNsQixxQkFBcUI7UUFDckIsSUFBSVYsMEVBQWdCQSxDQUFDVSxPQUFPO1lBQzFCSCxRQUFRSyxLQUFLLENBQUNWLHdEQUFLQSxDQUFDZSxvQkFBb0I7WUFDeENWLFFBQVFPLE9BQU8sQ0FBQ0o7WUFDaEJILFFBQVFRLElBQUksQ0FBQ2Isd0RBQUtBLENBQUNlLG9CQUFvQjtZQUN2Q1YsUUFBUVEsSUFBSSxDQUFDYix3REFBS0EsQ0FBQ0MsZUFBZTtZQUNsQyxPQUFPTDtRQUNUO1FBRUEsT0FBT1UsSUFBSUU7SUFDYjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvY2hhcmFjdGVyLWVzY2FwZS5qcz9hZDlmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvbnN0cnVjdCxcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQge2FzY2lpUHVuY3R1YXRpb259IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7Y29kZXMsIHR5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wnXG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGNoYXJhY3RlckVzY2FwZSA9IHtcbiAgbmFtZTogJ2NoYXJhY3RlckVzY2FwZScsXG4gIHRva2VuaXplOiB0b2tlbml6ZUNoYXJhY3RlckVzY2FwZVxufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUNoYXJhY3RlckVzY2FwZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydFxuXG4gIC8qKlxuICAgKiBTdGFydCBvZiBjaGFyYWN0ZXIgZXNjYXBlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYVxcKmJcbiAgICogICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgYXNzZXJ0KGNvZGUgPT09IGNvZGVzLmJhY2tzbGFzaCwgJ2V4cGVjdGVkIGBcXFxcYCcpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5jaGFyYWN0ZXJFc2NhcGUpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5lc2NhcGVNYXJrZXIpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmVzY2FwZU1hcmtlcilcbiAgICByZXR1cm4gaW5zaWRlXG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgYFxcYCwgYXQgcHVuY3R1YXRpb24uXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhXFwqYlxuICAgKiAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBpbnNpZGUoY29kZSkge1xuICAgIC8vIEFTQ0lJIHB1bmN0dWF0aW9uLlxuICAgIGlmIChhc2NpaVB1bmN0dWF0aW9uKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNoYXJhY3RlckVzY2FwZVZhbHVlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuY2hhcmFjdGVyRXNjYXBlVmFsdWUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuY2hhcmFjdGVyRXNjYXBlKVxuICAgICAgcmV0dXJuIG9rXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG59XG4iXSwibmFtZXMiOlsib2siLCJhc3NlcnQiLCJhc2NpaVB1bmN0dWF0aW9uIiwiY29kZXMiLCJ0eXBlcyIsImNoYXJhY3RlckVzY2FwZSIsIm5hbWUiLCJ0b2tlbml6ZSIsInRva2VuaXplQ2hhcmFjdGVyRXNjYXBlIiwiZWZmZWN0cyIsIm5vayIsInN0YXJ0IiwiY29kZSIsImJhY2tzbGFzaCIsImVudGVyIiwiZXNjYXBlTWFya2VyIiwiY29uc3VtZSIsImV4aXQiLCJpbnNpZGUiLCJjaGFyYWN0ZXJFc2NhcGVWYWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/character-escape.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/character-reference.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/character-reference.js ***!
  \**********************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   characterReference: function() { return /* binding */ characterReference; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var decode_named_character_reference__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! decode-named-character-reference */ \"(app-pages-browser)/./node_modules/.pnpm/decode-named-character-reference@1.1.0/node_modules/decode-named-character-reference/index.dom.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const characterReference = {\n    name: \"characterReference\",\n    tokenize: tokenizeCharacterReference\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeCharacterReference(effects, ok, nok) {\n    const self = this;\n    let size = 0;\n    /** @type {number} */ let max;\n    /** @type {(code: Code) => boolean} */ let test;\n    return start;\n    /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.ampersand, \"expected `&`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReference);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarker);\n        return open;\n    }\n    /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function open(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.numberSign) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarkerNumeric);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarkerNumeric);\n            return numeric;\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceValue);\n        max = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.characterReferenceNamedSizeMax;\n        test = micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlphanumeric;\n        return value(code);\n    }\n    /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function numeric(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.uppercaseX || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lowercaseX) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarkerHexadecimal);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarkerHexadecimal);\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceValue);\n            max = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.characterReferenceHexadecimalSizeMax;\n            test = micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiHexDigit;\n            return value;\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceValue);\n        max = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.characterReferenceDecimalSizeMax;\n        test = micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiDigit;\n        return value(code);\n    }\n    /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function value(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.semicolon && size) {\n            const token = effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceValue);\n            if (test === micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlphanumeric && !(0,decode_named_character_reference__WEBPACK_IMPORTED_MODULE_5__.decodeNamedCharacterReference)(self.sliceSerialize(token))) {\n                return nok(code);\n            }\n            // To do: `markdown-rs` uses a different name:\n            // `CharacterReferenceMarkerSemi`.\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarker);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReference);\n            return ok;\n        }\n        if (test(code) && size++ < max) {\n            effects.consume(code);\n            return value;\n        }\n        return nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/character-reference.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-fenced.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-fenced.js ***!
  \**************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codeFenced: function() { return /* binding */ codeFenced; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const nonLazyContinuation = {\n    partial: true,\n    tokenize: tokenizeNonLazyContinuation\n};\n/** @type {Construct} */ const codeFenced = {\n    concrete: true,\n    name: \"codeFenced\",\n    tokenize: tokenizeCodeFenced\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeCodeFenced(effects, ok, nok) {\n    const self = this;\n    /** @type {Construct} */ const closeStart = {\n        partial: true,\n        tokenize: tokenizeCloseStart\n    };\n    let initialPrefix = 0;\n    let sizeOpen = 0;\n    /** @type {NonNullable<Code>} */ let marker;\n    return start;\n    /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // To do: parse whitespace like `markdown-rs`.\n        return beforeSequenceOpen(code);\n    }\n    /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function beforeSequenceOpen(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.tilde, \"expected `` ` `` or `~`\");\n        const tail = self.events[self.events.length - 1];\n        initialPrefix = tail && tail[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix ? tail[2].sliceSerialize(tail[1], true).length : 0;\n        marker = code;\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFenced);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFence);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceSequence);\n        return sequenceOpen(code);\n    }\n    /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function sequenceOpen(code) {\n        if (code === marker) {\n            sizeOpen++;\n            effects.consume(code);\n            return sequenceOpen;\n        }\n        if (sizeOpen < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.codeFencedSequenceSizeMin) {\n            return nok(code);\n        }\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceSequence);\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, infoBefore, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)(code) : infoBefore(code);\n    }\n    /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function infoBefore(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFence);\n            return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceInfo);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString, {\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.contentTypeString\n        });\n        return info(code);\n    }\n    /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function info(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceInfo);\n            return infoBefore(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceInfo);\n            return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, metaBefore, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent && code === marker) {\n            return nok(code);\n        }\n        effects.consume(code);\n        return info;\n    }\n    /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function metaBefore(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            return infoBefore(code);\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceMeta);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString, {\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.contentTypeString\n        });\n        return meta(code);\n    }\n    /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function meta(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceMeta);\n            return infoBefore(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent && code === marker) {\n            return nok(code);\n        }\n        effects.consume(code);\n        return meta;\n    }\n    /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function atNonLazyBreak(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), \"expected eol\");\n        return effects.attempt(closeStart, after, contentBefore)(code);\n    }\n    /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function contentBefore(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), \"expected eol\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        return contentStart;\n    }\n    /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function contentStart(code) {\n        return initialPrefix > 0 && (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, beforeContentChunk, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix, initialPrefix + 1)(code) : beforeContentChunk(code);\n    }\n    /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function beforeContentChunk(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFlowValue);\n        return contentChunk(code);\n    }\n    /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function contentChunk(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFlowValue);\n            return beforeContentChunk(code);\n        }\n        effects.consume(code);\n        return contentChunk;\n    }\n    /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFenced);\n        return ok(code);\n    }\n    /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */ function tokenizeCloseStart(effects, ok, nok) {\n        let size = 0;\n        return startBefore;\n        /**\n     *\n     *\n     * @type {State}\n     */ function startBefore(code) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), \"expected eol\");\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n            return start;\n        }\n        /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */ function start(code) {\n            // Always populated by defaults.\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(self.parser.constructs.disable.null, \"expected `disable.null` to be populated\");\n            // To do: `enter` here or in next state?\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFence);\n            return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, beforeSequenceClose, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix, self.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.tabSize)(code) : beforeSequenceClose(code);\n        }\n        /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */ function beforeSequenceClose(code) {\n            if (code === marker) {\n                effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceSequence);\n                return sequenceClose(code);\n            }\n            return nok(code);\n        }\n        /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */ function sequenceClose(code) {\n            if (code === marker) {\n                size++;\n                effects.consume(code);\n                return sequenceClose;\n            }\n            if (size >= sizeOpen) {\n                effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceSequence);\n                return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, sequenceCloseAfter, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)(code) : sequenceCloseAfter(code);\n            }\n            return nok(code);\n        }\n        /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */ function sequenceCloseAfter(code) {\n            if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n                effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFence);\n                return ok(code);\n            }\n            return nok(code);\n        }\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeNonLazyContinuation(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   *\n   *\n   * @type {State}\n   */ function start(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            return nok(code);\n        }\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), \"expected eol\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        return lineStart;\n    }\n    /**\n   *\n   *\n   * @type {State}\n   */ function lineStart(code) {\n        return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-fenced.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-indented.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-indented.js ***!
  \****************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codeIndented: function() { return /* binding */ codeIndented; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const codeIndented = {\n    name: \"codeIndented\",\n    tokenize: tokenizeCodeIndented\n};\n/** @type {Construct} */ const furtherStart = {\n    partial: true,\n    tokenize: tokenizeFurtherStart\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeCodeIndented(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // To do: manually check if interrupting like `markdown-rs`.\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownSpace)(code));\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeIndented);\n        // To do: use an improved `space_or_tab` function like `markdown-rs`,\n        // so that we can drop the next state.\n        return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__.factorySpace)(effects, afterPrefix, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize + 1)(code);\n    }\n    /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function afterPrefix(code) {\n        const tail = self.events[self.events.length - 1];\n        return tail && tail[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize ? atBreak(code) : nok(code);\n    }\n    /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */ function atBreak(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.eof) {\n            return after(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n            return effects.attempt(furtherStart, atBreak, after)(code);\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFlowValue);\n        return inside(code);\n    }\n    /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */ function inside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFlowValue);\n            return atBreak(code);\n        }\n        effects.consume(code);\n        return inside;\n    }\n    /** @type {State} */ function after(code) {\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeIndented);\n        // To do: allow interrupting like `markdown-rs`.\n        // Feel free to interrupt.\n        // tokenizer.interrupt = false\n        return ok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeFurtherStart(effects, ok, nok) {\n    const self = this;\n    return furtherStart;\n    /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */ function furtherStart(code) {\n        // To do: improve `lazy` / `pierce` handling.\n        // If this is a lazy line, it can’t be code.\n        if (self.parser.lazy[self.now().line]) {\n            return nok(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n            return furtherStart;\n        }\n        // To do: the code here in `micromark-js` is a bit different from\n        // `markdown-rs` because there it can attempt spaces.\n        // We can’t yet.\n        //\n        // To do: use an improved `space_or_tab` function like `markdown-rs`,\n        // so that we can drop the next state.\n        return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__.factorySpace)(effects, afterPrefix, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize + 1)(code);\n    }\n    /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function afterPrefix(code) {\n        const tail = self.events[self.events.length - 1];\n        return tail && tail[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize ? ok(code) : (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code) ? furtherStart(code) : nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvY29kZS1pbmRlbnRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Q0FPQyxHQUVrQztBQUNpQjtBQUNzQjtBQUNiO0FBRTdELHNCQUFzQixHQUNmLE1BQU1RLGVBQWU7SUFDMUJDLE1BQU07SUFDTkMsVUFBVUM7QUFDWixFQUFDO0FBRUQsc0JBQXNCLEdBQ3RCLE1BQU1DLGVBQWU7SUFBQ0MsU0FBUztJQUFNSCxVQUFVSTtBQUFvQjtBQUVuRTs7OztDQUlDLEdBQ0QsU0FBU0gscUJBQXFCSSxPQUFPLEVBQUVmLEVBQUUsRUFBRWdCLEdBQUc7SUFDNUMsTUFBTUMsT0FBTyxJQUFJO0lBQ2pCLE9BQU9DO0lBRVA7Ozs7Ozs7Ozs7Ozs7R0FhQyxHQUNELFNBQVNBLE1BQU1DLElBQUk7UUFDakIsNERBQTREO1FBQzVEbEIsMENBQU1BLENBQUNHLHVFQUFhQSxDQUFDZTtRQUNyQkosUUFBUUssS0FBSyxDQUFDYix3REFBS0EsQ0FBQ0MsWUFBWTtRQUNoQyxxRUFBcUU7UUFDckUsc0NBQXNDO1FBQ3RDLE9BQU9OLHFFQUFZQSxDQUNqQmEsU0FDQU0sYUFDQWQsd0RBQUtBLENBQUNlLFVBQVUsRUFDaEJoQiw0REFBU0EsQ0FBQ2lCLE9BQU8sR0FBRyxHQUNwQko7SUFDSjtJQUVBOzs7Ozs7Ozs7R0FTQyxHQUNELFNBQVNFLFlBQVlGLElBQUk7UUFDdkIsTUFBTUssT0FBT1AsS0FBS1EsTUFBTSxDQUFDUixLQUFLUSxNQUFNLENBQUNDLE1BQU0sR0FBRyxFQUFFO1FBQ2hELE9BQU9GLFFBQ0xBLElBQUksQ0FBQyxFQUFFLENBQUNHLElBQUksS0FBS3BCLHdEQUFLQSxDQUFDZSxVQUFVLElBQ2pDRSxJQUFJLENBQUMsRUFBRSxDQUFDSSxjQUFjLENBQUNKLElBQUksQ0FBQyxFQUFFLEVBQUUsTUFBTUUsTUFBTSxJQUFJcEIsNERBQVNBLENBQUNpQixPQUFPLEdBQy9ETSxRQUFRVixRQUNSSCxJQUFJRztJQUNWO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU1UsUUFBUVYsSUFBSTtRQUNuQixJQUFJQSxTQUFTZCx3REFBS0EsQ0FBQ3lCLEdBQUcsRUFBRTtZQUN0QixPQUFPQyxNQUFNWjtRQUNmO1FBRUEsSUFBSWhCLDRFQUFrQkEsQ0FBQ2dCLE9BQU87WUFDNUIsT0FBT0osUUFBUWlCLE9BQU8sQ0FBQ3BCLGNBQWNpQixTQUFTRSxPQUFPWjtRQUN2RDtRQUVBSixRQUFRSyxLQUFLLENBQUNiLHdEQUFLQSxDQUFDMEIsYUFBYTtRQUNqQyxPQUFPQyxPQUFPZjtJQUNoQjtJQUVBOzs7Ozs7Ozs7R0FTQyxHQUNELFNBQVNlLE9BQU9mLElBQUk7UUFDbEIsSUFBSUEsU0FBU2Qsd0RBQUtBLENBQUN5QixHQUFHLElBQUkzQiw0RUFBa0JBLENBQUNnQixPQUFPO1lBQ2xESixRQUFRb0IsSUFBSSxDQUFDNUIsd0RBQUtBLENBQUMwQixhQUFhO1lBQ2hDLE9BQU9KLFFBQVFWO1FBQ2pCO1FBRUFKLFFBQVFxQixPQUFPLENBQUNqQjtRQUNoQixPQUFPZTtJQUNUO0lBRUEsa0JBQWtCLEdBQ2xCLFNBQVNILE1BQU1aLElBQUk7UUFDakJKLFFBQVFvQixJQUFJLENBQUM1Qix3REFBS0EsQ0FBQ0MsWUFBWTtRQUMvQixnREFBZ0Q7UUFDaEQsMEJBQTBCO1FBQzFCLDhCQUE4QjtRQUM5QixPQUFPUixHQUFHbUI7SUFDWjtBQUNGO0FBRUE7Ozs7Q0FJQyxHQUNELFNBQVNMLHFCQUFxQkMsT0FBTyxFQUFFZixFQUFFLEVBQUVnQixHQUFHO0lBQzVDLE1BQU1DLE9BQU8sSUFBSTtJQUVqQixPQUFPTDtJQUVQOzs7Ozs7Ozs7O0dBVUMsR0FDRCxTQUFTQSxhQUFhTyxJQUFJO1FBQ3hCLDZDQUE2QztRQUM3Qyw0Q0FBNEM7UUFDNUMsSUFBSUYsS0FBS29CLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDckIsS0FBS3NCLEdBQUcsR0FBR0MsSUFBSSxDQUFDLEVBQUU7WUFDckMsT0FBT3hCLElBQUlHO1FBQ2I7UUFFQSxJQUFJaEIsNEVBQWtCQSxDQUFDZ0IsT0FBTztZQUM1QkosUUFBUUssS0FBSyxDQUFDYix3REFBS0EsQ0FBQ2tDLFVBQVU7WUFDOUIxQixRQUFRcUIsT0FBTyxDQUFDakI7WUFDaEJKLFFBQVFvQixJQUFJLENBQUM1Qix3REFBS0EsQ0FBQ2tDLFVBQVU7WUFDN0IsT0FBTzdCO1FBQ1Q7UUFFQSxpRUFBaUU7UUFDakUscURBQXFEO1FBQ3JELGdCQUFnQjtRQUNoQixFQUFFO1FBQ0YscUVBQXFFO1FBQ3JFLHNDQUFzQztRQUN0QyxPQUFPVixxRUFBWUEsQ0FDakJhLFNBQ0FNLGFBQ0FkLHdEQUFLQSxDQUFDZSxVQUFVLEVBQ2hCaEIsNERBQVNBLENBQUNpQixPQUFPLEdBQUcsR0FDcEJKO0lBQ0o7SUFFQTs7Ozs7Ozs7O0dBU0MsR0FDRCxTQUFTRSxZQUFZRixJQUFJO1FBQ3ZCLE1BQU1LLE9BQU9QLEtBQUtRLE1BQU0sQ0FBQ1IsS0FBS1EsTUFBTSxDQUFDQyxNQUFNLEdBQUcsRUFBRTtRQUNoRCxPQUFPRixRQUNMQSxJQUFJLENBQUMsRUFBRSxDQUFDRyxJQUFJLEtBQUtwQix3REFBS0EsQ0FBQ2UsVUFBVSxJQUNqQ0UsSUFBSSxDQUFDLEVBQUUsQ0FBQ0ksY0FBYyxDQUFDSixJQUFJLENBQUMsRUFBRSxFQUFFLE1BQU1FLE1BQU0sSUFBSXBCLDREQUFTQSxDQUFDaUIsT0FBTyxHQUMvRHZCLEdBQUdtQixRQUNIaEIsNEVBQWtCQSxDQUFDZ0IsUUFDakJQLGFBQWFPLFFBQ2JILElBQUlHO0lBQ1o7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWNvcmUtY29tbW9ubWFya0AyLjAuMy9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9kZXYvbGliL2NvZGUtaW5kZW50ZWQuanM/ZGY2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb25zdHJ1Y3QsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplclxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuaW1wb3J0IHtmYWN0b3J5U3BhY2V9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJ1xuaW1wb3J0IHttYXJrZG93bkxpbmVFbmRpbmcsIG1hcmtkb3duU3BhY2V9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7Y29kZXMsIGNvbnN0YW50cywgdHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbCdcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgY29kZUluZGVudGVkID0ge1xuICBuYW1lOiAnY29kZUluZGVudGVkJyxcbiAgdG9rZW5pemU6IHRva2VuaXplQ29kZUluZGVudGVkXG59XG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuY29uc3QgZnVydGhlclN0YXJ0ID0ge3BhcnRpYWw6IHRydWUsIHRva2VuaXplOiB0b2tlbml6ZUZ1cnRoZXJTdGFydH1cblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVDb2RlSW5kZW50ZWQoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICByZXR1cm4gc3RhcnRcblxuICAvKipcbiAgICogU3RhcnQgb2YgY29kZSAoaW5kZW50ZWQpLlxuICAgKlxuICAgKiA+ICoqUGFyc2luZyBub3RlKio6IGl0IGlzIG5vdCBuZWVkZWQgdG8gY2hlY2sgaWYgdGhpcyBmaXJzdCBsaW5lIGlzIGFcbiAgICogPiBmaWxsZWQgbGluZSAodGhhdCBpdCBoYXMgYSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIpLCBiZWNhdXNlIGJsYW5rIGxpbmVzXG4gICAqID4gYXJlIHBhcnNlZCBhbHJlYWR5LCBzbyB3ZSBuZXZlciBydW4gaW50byB0aGF0LlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgICAgIGFhYVxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIC8vIFRvIGRvOiBtYW51YWxseSBjaGVjayBpZiBpbnRlcnJ1cHRpbmcgbGlrZSBgbWFya2Rvd24tcnNgLlxuICAgIGFzc2VydChtYXJrZG93blNwYWNlKGNvZGUpKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuY29kZUluZGVudGVkKVxuICAgIC8vIFRvIGRvOiB1c2UgYW4gaW1wcm92ZWQgYHNwYWNlX29yX3RhYmAgZnVuY3Rpb24gbGlrZSBgbWFya2Rvd24tcnNgLFxuICAgIC8vIHNvIHRoYXQgd2UgY2FuIGRyb3AgdGhlIG5leHQgc3RhdGUuXG4gICAgcmV0dXJuIGZhY3RvcnlTcGFjZShcbiAgICAgIGVmZmVjdHMsXG4gICAgICBhZnRlclByZWZpeCxcbiAgICAgIHR5cGVzLmxpbmVQcmVmaXgsXG4gICAgICBjb25zdGFudHMudGFiU2l6ZSArIDFcbiAgICApKGNvZGUpXG4gIH1cblxuICAvKipcbiAgICogQXQgc3RhcnQsIGFmdGVyIDEgb3IgNCBzcGFjZXMuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCAgICAgYWFhXG4gICAqICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYWZ0ZXJQcmVmaXgoY29kZSkge1xuICAgIGNvbnN0IHRhaWwgPSBzZWxmLmV2ZW50c1tzZWxmLmV2ZW50cy5sZW5ndGggLSAxXVxuICAgIHJldHVybiB0YWlsICYmXG4gICAgICB0YWlsWzFdLnR5cGUgPT09IHR5cGVzLmxpbmVQcmVmaXggJiZcbiAgICAgIHRhaWxbMl0uc2xpY2VTZXJpYWxpemUodGFpbFsxXSwgdHJ1ZSkubGVuZ3RoID49IGNvbnN0YW50cy50YWJTaXplXG4gICAgICA/IGF0QnJlYWsoY29kZSlcbiAgICAgIDogbm9rKGNvZGUpXG4gIH1cblxuICAvKipcbiAgICogQXQgYSBicmVhay5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICAgICBhYWFcbiAgICogICAgICAgICBeICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhdEJyZWFrKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mKSB7XG4gICAgICByZXR1cm4gYWZ0ZXIoY29kZSlcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm4gZWZmZWN0cy5hdHRlbXB0KGZ1cnRoZXJTdGFydCwgYXRCcmVhaywgYWZ0ZXIpKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5jb2RlRmxvd1ZhbHVlKVxuICAgIHJldHVybiBpbnNpZGUoY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBjb2RlIGNvbnRlbnQuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCAgICAgYWFhXG4gICAqICAgICAgICAgXl5eXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gaW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmNvZGVGbG93VmFsdWUpXG4gICAgICByZXR1cm4gYXRCcmVhayhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBpbnNpZGVcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMuY29kZUluZGVudGVkKVxuICAgIC8vIFRvIGRvOiBhbGxvdyBpbnRlcnJ1cHRpbmcgbGlrZSBgbWFya2Rvd24tcnNgLlxuICAgIC8vIEZlZWwgZnJlZSB0byBpbnRlcnJ1cHQuXG4gICAgLy8gdG9rZW5pemVyLmludGVycnVwdCA9IGZhbHNlXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cbn1cblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVGdXJ0aGVyU3RhcnQoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIHJldHVybiBmdXJ0aGVyU3RhcnRcblxuICAvKipcbiAgICogQXQgZW9sLCB0cnlpbmcgdG8gcGFyc2UgYW5vdGhlciBpbmRlbnQuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCAgICAgYWFhXG4gICAqICAgICAgICAgICAgXlxuICAgKiAgIHwgICAgIGJiYlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gZnVydGhlclN0YXJ0KGNvZGUpIHtcbiAgICAvLyBUbyBkbzogaW1wcm92ZSBgbGF6eWAgLyBgcGllcmNlYCBoYW5kbGluZy5cbiAgICAvLyBJZiB0aGlzIGlzIGEgbGF6eSBsaW5lLCBpdCBjYW7igJl0IGJlIGNvZGUuXG4gICAgaWYgKHNlbGYucGFyc2VyLmxhenlbc2VsZi5ub3coKS5saW5lXSkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZXMubGluZUVuZGluZylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmxpbmVFbmRpbmcpXG4gICAgICByZXR1cm4gZnVydGhlclN0YXJ0XG4gICAgfVxuXG4gICAgLy8gVG8gZG86IHRoZSBjb2RlIGhlcmUgaW4gYG1pY3JvbWFyay1qc2AgaXMgYSBiaXQgZGlmZmVyZW50IGZyb21cbiAgICAvLyBgbWFya2Rvd24tcnNgIGJlY2F1c2UgdGhlcmUgaXQgY2FuIGF0dGVtcHQgc3BhY2VzLlxuICAgIC8vIFdlIGNhbuKAmXQgeWV0LlxuICAgIC8vXG4gICAgLy8gVG8gZG86IHVzZSBhbiBpbXByb3ZlZCBgc3BhY2Vfb3JfdGFiYCBmdW5jdGlvbiBsaWtlIGBtYXJrZG93bi1yc2AsXG4gICAgLy8gc28gdGhhdCB3ZSBjYW4gZHJvcCB0aGUgbmV4dCBzdGF0ZS5cbiAgICByZXR1cm4gZmFjdG9yeVNwYWNlKFxuICAgICAgZWZmZWN0cyxcbiAgICAgIGFmdGVyUHJlZml4LFxuICAgICAgdHlwZXMubGluZVByZWZpeCxcbiAgICAgIGNvbnN0YW50cy50YWJTaXplICsgMVxuICAgICkoY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBdCBzdGFydCwgYWZ0ZXIgMSBvciA0IHNwYWNlcy5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICAgICBhYWFcbiAgICogICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhZnRlclByZWZpeChjb2RlKSB7XG4gICAgY29uc3QgdGFpbCA9IHNlbGYuZXZlbnRzW3NlbGYuZXZlbnRzLmxlbmd0aCAtIDFdXG4gICAgcmV0dXJuIHRhaWwgJiZcbiAgICAgIHRhaWxbMV0udHlwZSA9PT0gdHlwZXMubGluZVByZWZpeCAmJlxuICAgICAgdGFpbFsyXS5zbGljZVNlcmlhbGl6ZSh0YWlsWzFdLCB0cnVlKS5sZW5ndGggPj0gY29uc3RhbnRzLnRhYlNpemVcbiAgICAgID8gb2soY29kZSlcbiAgICAgIDogbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpXG4gICAgICAgID8gZnVydGhlclN0YXJ0KGNvZGUpXG4gICAgICAgIDogbm9rKGNvZGUpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJvayIsImFzc2VydCIsImZhY3RvcnlTcGFjZSIsIm1hcmtkb3duTGluZUVuZGluZyIsIm1hcmtkb3duU3BhY2UiLCJjb2RlcyIsImNvbnN0YW50cyIsInR5cGVzIiwiY29kZUluZGVudGVkIiwibmFtZSIsInRva2VuaXplIiwidG9rZW5pemVDb2RlSW5kZW50ZWQiLCJmdXJ0aGVyU3RhcnQiLCJwYXJ0aWFsIiwidG9rZW5pemVGdXJ0aGVyU3RhcnQiLCJlZmZlY3RzIiwibm9rIiwic2VsZiIsInN0YXJ0IiwiY29kZSIsImVudGVyIiwiYWZ0ZXJQcmVmaXgiLCJsaW5lUHJlZml4IiwidGFiU2l6ZSIsInRhaWwiLCJldmVudHMiLCJsZW5ndGgiLCJ0eXBlIiwic2xpY2VTZXJpYWxpemUiLCJhdEJyZWFrIiwiZW9mIiwiYWZ0ZXIiLCJhdHRlbXB0IiwiY29kZUZsb3dWYWx1ZSIsImluc2lkZSIsImV4aXQiLCJjb25zdW1lIiwicGFyc2VyIiwibGF6eSIsIm5vdyIsImxpbmUiLCJsaW5lRW5kaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-indented.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-text.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-text.js ***!
  \************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codeText: function() { return /* binding */ codeText; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */ \n\n\n/** @type {Construct} */ const codeText = {\n    name: \"codeText\",\n    previous,\n    resolve: resolveCodeText,\n    tokenize: tokenizeCodeText\n};\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */ function resolveCodeText(events) {\n    let tailExitIndex = events.length - 4;\n    let headEnterIndex = 3;\n    /** @type {number} */ let index;\n    /** @type {number | undefined} */ let enter;\n    // If we start and end with an EOL or a space.\n    if ((events[headEnterIndex][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding || events[headEnterIndex][1].type === \"space\") && (events[tailExitIndex][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding || events[tailExitIndex][1].type === \"space\")) {\n        index = headEnterIndex;\n        // And we have data.\n        while(++index < tailExitIndex){\n            if (events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextData) {\n                // Then we have padding.\n                events[headEnterIndex][1].type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextPadding;\n                events[tailExitIndex][1].type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextPadding;\n                headEnterIndex += 2;\n                tailExitIndex -= 2;\n                break;\n            }\n        }\n    }\n    // Merge adjacent spaces and data.\n    index = headEnterIndex - 1;\n    tailExitIndex++;\n    while(++index <= tailExitIndex){\n        if (enter === undefined) {\n            if (index !== tailExitIndex && events[index][1].type !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding) {\n                enter = index;\n            }\n        } else if (index === tailExitIndex || events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding) {\n            events[enter][1].type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextData;\n            if (index !== enter + 2) {\n                events[enter][1].end = events[index - 1][1].end;\n                events.splice(enter + 2, index - enter - 2);\n                tailExitIndex -= index - enter - 2;\n                index = enter + 2;\n            }\n            enter = undefined;\n        }\n    }\n    return events;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */ function previous(code) {\n    // If there is a previous code, there will always be a tail.\n    return code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent || this.events[this.events.length - 1][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.characterEscape;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeCodeText(effects, ok, nok) {\n    const self = this;\n    let sizeOpen = 0;\n    /** @type {number} */ let size;\n    /** @type {Token} */ let token;\n    return start;\n    /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent, \"expected `` ` ``\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(previous.call(self, self.previous), \"expected correct previous\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeText);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextSequence);\n        return sequenceOpen(code);\n    }\n    /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function sequenceOpen(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent) {\n            effects.consume(code);\n            sizeOpen++;\n            return sequenceOpen;\n        }\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextSequence);\n        return between(code);\n    }\n    /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */ function between(code) {\n        // EOF.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            return nok(code);\n        }\n        // To do: next major: don’t do spaces in resolve, but when compiling,\n        // like `markdown-rs`.\n        // Tabs don’t work, and virtual spaces don’t make sense.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.space) {\n            effects.enter(\"space\");\n            effects.consume(code);\n            effects.exit(\"space\");\n            return between;\n        }\n        // Closing fence? Could also be data.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent) {\n            token = effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextSequence);\n            size = 0;\n            return sequenceClose(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n            return between;\n        }\n        // Data.\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextData);\n        return data(code);\n    }\n    /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function data(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.space || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextData);\n            return between(code);\n        }\n        effects.consume(code);\n        return data;\n    }\n    /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function sequenceClose(code) {\n        // More.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent) {\n            effects.consume(code);\n            size++;\n            return sequenceClose;\n        }\n        // Done!\n        if (size === sizeOpen) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextSequence);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeText);\n            return ok(code);\n        }\n        // More or less accents: mark as data.\n        token.type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextData;\n        return data(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvY29kZS10ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Q0FVQyxHQUVrQztBQUN3QjtBQUNUO0FBRWxELHNCQUFzQixHQUNmLE1BQU1LLFdBQVc7SUFDdEJDLE1BQU07SUFDTkM7SUFDQUMsU0FBU0M7SUFDVEMsVUFBVUM7QUFDWixFQUFDO0FBRUQsd0RBQXdEO0FBQ3hELHFCQUFxQixHQUNyQixTQUFTRixnQkFBZ0JHLE1BQU07SUFDN0IsSUFBSUMsZ0JBQWdCRCxPQUFPRSxNQUFNLEdBQUc7SUFDcEMsSUFBSUMsaUJBQWlCO0lBQ3JCLG1CQUFtQixHQUNuQixJQUFJQztJQUNKLCtCQUErQixHQUMvQixJQUFJQztJQUVKLDhDQUE4QztJQUM5QyxJQUNFLENBQUNMLE1BQU0sQ0FBQ0csZUFBZSxDQUFDLEVBQUUsQ0FBQ0csSUFBSSxLQUFLZCx3REFBS0EsQ0FBQ2UsVUFBVSxJQUNsRFAsTUFBTSxDQUFDRyxlQUFlLENBQUMsRUFBRSxDQUFDRyxJQUFJLEtBQUssT0FBTSxLQUMxQ04sQ0FBQUEsTUFBTSxDQUFDQyxjQUFjLENBQUMsRUFBRSxDQUFDSyxJQUFJLEtBQUtkLHdEQUFLQSxDQUFDZSxVQUFVLElBQ2pEUCxNQUFNLENBQUNDLGNBQWMsQ0FBQyxFQUFFLENBQUNLLElBQUksS0FBSyxPQUFNLEdBQzFDO1FBQ0FGLFFBQVFEO1FBRVIsb0JBQW9CO1FBQ3BCLE1BQU8sRUFBRUMsUUFBUUgsY0FBZTtZQUM5QixJQUFJRCxNQUFNLENBQUNJLE1BQU0sQ0FBQyxFQUFFLENBQUNFLElBQUksS0FBS2Qsd0RBQUtBLENBQUNnQixZQUFZLEVBQUU7Z0JBQ2hELHdCQUF3QjtnQkFDeEJSLE1BQU0sQ0FBQ0csZUFBZSxDQUFDLEVBQUUsQ0FBQ0csSUFBSSxHQUFHZCx3REFBS0EsQ0FBQ2lCLGVBQWU7Z0JBQ3REVCxNQUFNLENBQUNDLGNBQWMsQ0FBQyxFQUFFLENBQUNLLElBQUksR0FBR2Qsd0RBQUtBLENBQUNpQixlQUFlO2dCQUNyRE4sa0JBQWtCO2dCQUNsQkYsaUJBQWlCO2dCQUNqQjtZQUNGO1FBQ0Y7SUFDRjtJQUVBLGtDQUFrQztJQUNsQ0csUUFBUUQsaUJBQWlCO0lBQ3pCRjtJQUVBLE1BQU8sRUFBRUcsU0FBU0gsY0FBZTtRQUMvQixJQUFJSSxVQUFVSyxXQUFXO1lBQ3ZCLElBQ0VOLFVBQVVILGlCQUNWRCxNQUFNLENBQUNJLE1BQU0sQ0FBQyxFQUFFLENBQUNFLElBQUksS0FBS2Qsd0RBQUtBLENBQUNlLFVBQVUsRUFDMUM7Z0JBQ0FGLFFBQVFEO1lBQ1Y7UUFDRixPQUFPLElBQ0xBLFVBQVVILGlCQUNWRCxNQUFNLENBQUNJLE1BQU0sQ0FBQyxFQUFFLENBQUNFLElBQUksS0FBS2Qsd0RBQUtBLENBQUNlLFVBQVUsRUFDMUM7WUFDQVAsTUFBTSxDQUFDSyxNQUFNLENBQUMsRUFBRSxDQUFDQyxJQUFJLEdBQUdkLHdEQUFLQSxDQUFDZ0IsWUFBWTtZQUUxQyxJQUFJSixVQUFVQyxRQUFRLEdBQUc7Z0JBQ3ZCTCxNQUFNLENBQUNLLE1BQU0sQ0FBQyxFQUFFLENBQUNNLEdBQUcsR0FBR1gsTUFBTSxDQUFDSSxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUNPLEdBQUc7Z0JBQy9DWCxPQUFPWSxNQUFNLENBQUNQLFFBQVEsR0FBR0QsUUFBUUMsUUFBUTtnQkFDekNKLGlCQUFpQkcsUUFBUUMsUUFBUTtnQkFDakNELFFBQVFDLFFBQVE7WUFDbEI7WUFFQUEsUUFBUUs7UUFDVjtJQUNGO0lBRUEsT0FBT1Y7QUFDVDtBQUVBOzs7O0NBSUMsR0FDRCxTQUFTTCxTQUFTa0IsSUFBSTtJQUNwQiw0REFBNEQ7SUFDNUQsT0FDRUEsU0FBU3RCLHdEQUFLQSxDQUFDdUIsV0FBVyxJQUMxQixJQUFJLENBQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUNBLE1BQU0sQ0FBQ0UsTUFBTSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUNJLElBQUksS0FBS2Qsd0RBQUtBLENBQUN1QixlQUFlO0FBRXpFO0FBRUE7Ozs7Q0FJQyxHQUNELFNBQVNoQixpQkFBaUJpQixPQUFPLEVBQUU1QixFQUFFLEVBQUU2QixHQUFHO0lBQ3hDLE1BQU1DLE9BQU8sSUFBSTtJQUNqQixJQUFJQyxXQUFXO0lBQ2YsbUJBQW1CLEdBQ25CLElBQUlDO0lBQ0osa0JBQWtCLEdBQ2xCLElBQUlDO0lBRUosT0FBT0M7SUFFUDs7Ozs7Ozs7Ozs7R0FXQyxHQUNELFNBQVNBLE1BQU1ULElBQUk7UUFDakJ4QiwwQ0FBTUEsQ0FBQ3dCLFNBQVN0Qix3REFBS0EsQ0FBQ3VCLFdBQVcsRUFBRTtRQUNuQ3pCLDBDQUFNQSxDQUFDTSxTQUFTNEIsSUFBSSxDQUFDTCxNQUFNQSxLQUFLdkIsUUFBUSxHQUFHO1FBQzNDcUIsUUFBUVgsS0FBSyxDQUFDYix3REFBS0EsQ0FBQ0MsUUFBUTtRQUM1QnVCLFFBQVFYLEtBQUssQ0FBQ2Isd0RBQUtBLENBQUNnQyxnQkFBZ0I7UUFDcEMsT0FBT0MsYUFBYVo7SUFDdEI7SUFFQTs7Ozs7Ozs7O0dBU0MsR0FDRCxTQUFTWSxhQUFhWixJQUFJO1FBQ3hCLElBQUlBLFNBQVN0Qix3REFBS0EsQ0FBQ3VCLFdBQVcsRUFBRTtZQUM5QkUsUUFBUVUsT0FBTyxDQUFDYjtZQUNoQk07WUFDQSxPQUFPTTtRQUNUO1FBRUFULFFBQVFXLElBQUksQ0FBQ25DLHdEQUFLQSxDQUFDZ0MsZ0JBQWdCO1FBQ25DLE9BQU9JLFFBQVFmO0lBQ2pCO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU2UsUUFBUWYsSUFBSTtRQUNuQixPQUFPO1FBQ1AsSUFBSUEsU0FBU3RCLHdEQUFLQSxDQUFDc0MsR0FBRyxFQUFFO1lBQ3RCLE9BQU9aLElBQUlKO1FBQ2I7UUFFQSxxRUFBcUU7UUFDckUsc0JBQXNCO1FBQ3RCLHdEQUF3RDtRQUN4RCxJQUFJQSxTQUFTdEIsd0RBQUtBLENBQUN1QyxLQUFLLEVBQUU7WUFDeEJkLFFBQVFYLEtBQUssQ0FBQztZQUNkVyxRQUFRVSxPQUFPLENBQUNiO1lBQ2hCRyxRQUFRVyxJQUFJLENBQUM7WUFDYixPQUFPQztRQUNUO1FBRUEscUNBQXFDO1FBQ3JDLElBQUlmLFNBQVN0Qix3REFBS0EsQ0FBQ3VCLFdBQVcsRUFBRTtZQUM5Qk8sUUFBUUwsUUFBUVgsS0FBSyxDQUFDYix3REFBS0EsQ0FBQ2dDLGdCQUFnQjtZQUM1Q0osT0FBTztZQUNQLE9BQU9XLGNBQWNsQjtRQUN2QjtRQUVBLElBQUl2Qiw0RUFBa0JBLENBQUN1QixPQUFPO1lBQzVCRyxRQUFRWCxLQUFLLENBQUNiLHdEQUFLQSxDQUFDZSxVQUFVO1lBQzlCUyxRQUFRVSxPQUFPLENBQUNiO1lBQ2hCRyxRQUFRVyxJQUFJLENBQUNuQyx3REFBS0EsQ0FBQ2UsVUFBVTtZQUM3QixPQUFPcUI7UUFDVDtRQUVBLFFBQVE7UUFDUlosUUFBUVgsS0FBSyxDQUFDYix3REFBS0EsQ0FBQ2dCLFlBQVk7UUFDaEMsT0FBT3dCLEtBQUtuQjtJQUNkO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU21CLEtBQUtuQixJQUFJO1FBQ2hCLElBQ0VBLFNBQVN0Qix3REFBS0EsQ0FBQ3NDLEdBQUcsSUFDbEJoQixTQUFTdEIsd0RBQUtBLENBQUN1QyxLQUFLLElBQ3BCakIsU0FBU3RCLHdEQUFLQSxDQUFDdUIsV0FBVyxJQUMxQnhCLDRFQUFrQkEsQ0FBQ3VCLE9BQ25CO1lBQ0FHLFFBQVFXLElBQUksQ0FBQ25DLHdEQUFLQSxDQUFDZ0IsWUFBWTtZQUMvQixPQUFPb0IsUUFBUWY7UUFDakI7UUFFQUcsUUFBUVUsT0FBTyxDQUFDYjtRQUNoQixPQUFPbUI7SUFDVDtJQUVBOzs7Ozs7Ozs7R0FTQyxHQUNELFNBQVNELGNBQWNsQixJQUFJO1FBQ3pCLFFBQVE7UUFDUixJQUFJQSxTQUFTdEIsd0RBQUtBLENBQUN1QixXQUFXLEVBQUU7WUFDOUJFLFFBQVFVLE9BQU8sQ0FBQ2I7WUFDaEJPO1lBQ0EsT0FBT1c7UUFDVDtRQUVBLFFBQVE7UUFDUixJQUFJWCxTQUFTRCxVQUFVO1lBQ3JCSCxRQUFRVyxJQUFJLENBQUNuQyx3REFBS0EsQ0FBQ2dDLGdCQUFnQjtZQUNuQ1IsUUFBUVcsSUFBSSxDQUFDbkMsd0RBQUtBLENBQUNDLFFBQVE7WUFDM0IsT0FBT0wsR0FBR3lCO1FBQ1o7UUFFQSxzQ0FBc0M7UUFDdENRLE1BQU1mLElBQUksR0FBR2Qsd0RBQUtBLENBQUNnQixZQUFZO1FBQy9CLE9BQU93QixLQUFLbkI7SUFDZDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvY29kZS10ZXh0LmpzPzEwOTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgQ29uc3RydWN0LFxuICogICBQcmV2aW91cyxcbiAqICAgUmVzb2x2ZXIsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplcixcbiAqICAgVG9rZW5cbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge2NvZGVzLCB0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBjb2RlVGV4dCA9IHtcbiAgbmFtZTogJ2NvZGVUZXh0JyxcbiAgcHJldmlvdXMsXG4gIHJlc29sdmU6IHJlc29sdmVDb2RlVGV4dCxcbiAgdG9rZW5pemU6IHRva2VuaXplQ29kZVRleHRcbn1cblxuLy8gVG8gZG86IG5leHQgbWFqb3I6IGRvbuKAmXQgcmVzb2x2ZSwgbGlrZSBgbWFya2Rvd24tcnNgLlxuLyoqIEB0eXBlIHtSZXNvbHZlcn0gKi9cbmZ1bmN0aW9uIHJlc29sdmVDb2RlVGV4dChldmVudHMpIHtcbiAgbGV0IHRhaWxFeGl0SW5kZXggPSBldmVudHMubGVuZ3RoIC0gNFxuICBsZXQgaGVhZEVudGVySW5kZXggPSAzXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBsZXQgaW5kZXhcbiAgLyoqIEB0eXBlIHtudW1iZXIgfCB1bmRlZmluZWR9ICovXG4gIGxldCBlbnRlclxuXG4gIC8vIElmIHdlIHN0YXJ0IGFuZCBlbmQgd2l0aCBhbiBFT0wgb3IgYSBzcGFjZS5cbiAgaWYgKFxuICAgIChldmVudHNbaGVhZEVudGVySW5kZXhdWzFdLnR5cGUgPT09IHR5cGVzLmxpbmVFbmRpbmcgfHxcbiAgICAgIGV2ZW50c1toZWFkRW50ZXJJbmRleF1bMV0udHlwZSA9PT0gJ3NwYWNlJykgJiZcbiAgICAoZXZlbnRzW3RhaWxFeGl0SW5kZXhdWzFdLnR5cGUgPT09IHR5cGVzLmxpbmVFbmRpbmcgfHxcbiAgICAgIGV2ZW50c1t0YWlsRXhpdEluZGV4XVsxXS50eXBlID09PSAnc3BhY2UnKVxuICApIHtcbiAgICBpbmRleCA9IGhlYWRFbnRlckluZGV4XG5cbiAgICAvLyBBbmQgd2UgaGF2ZSBkYXRhLlxuICAgIHdoaWxlICgrK2luZGV4IDwgdGFpbEV4aXRJbmRleCkge1xuICAgICAgaWYgKGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gdHlwZXMuY29kZVRleHREYXRhKSB7XG4gICAgICAgIC8vIFRoZW4gd2UgaGF2ZSBwYWRkaW5nLlxuICAgICAgICBldmVudHNbaGVhZEVudGVySW5kZXhdWzFdLnR5cGUgPSB0eXBlcy5jb2RlVGV4dFBhZGRpbmdcbiAgICAgICAgZXZlbnRzW3RhaWxFeGl0SW5kZXhdWzFdLnR5cGUgPSB0eXBlcy5jb2RlVGV4dFBhZGRpbmdcbiAgICAgICAgaGVhZEVudGVySW5kZXggKz0gMlxuICAgICAgICB0YWlsRXhpdEluZGV4IC09IDJcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBNZXJnZSBhZGphY2VudCBzcGFjZXMgYW5kIGRhdGEuXG4gIGluZGV4ID0gaGVhZEVudGVySW5kZXggLSAxXG4gIHRhaWxFeGl0SW5kZXgrK1xuXG4gIHdoaWxlICgrK2luZGV4IDw9IHRhaWxFeGl0SW5kZXgpIHtcbiAgICBpZiAoZW50ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKFxuICAgICAgICBpbmRleCAhPT0gdGFpbEV4aXRJbmRleCAmJlxuICAgICAgICBldmVudHNbaW5kZXhdWzFdLnR5cGUgIT09IHR5cGVzLmxpbmVFbmRpbmdcbiAgICAgICkge1xuICAgICAgICBlbnRlciA9IGluZGV4XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGluZGV4ID09PSB0YWlsRXhpdEluZGV4IHx8XG4gICAgICBldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09IHR5cGVzLmxpbmVFbmRpbmdcbiAgICApIHtcbiAgICAgIGV2ZW50c1tlbnRlcl1bMV0udHlwZSA9IHR5cGVzLmNvZGVUZXh0RGF0YVxuXG4gICAgICBpZiAoaW5kZXggIT09IGVudGVyICsgMikge1xuICAgICAgICBldmVudHNbZW50ZXJdWzFdLmVuZCA9IGV2ZW50c1tpbmRleCAtIDFdWzFdLmVuZFxuICAgICAgICBldmVudHMuc3BsaWNlKGVudGVyICsgMiwgaW5kZXggLSBlbnRlciAtIDIpXG4gICAgICAgIHRhaWxFeGl0SW5kZXggLT0gaW5kZXggLSBlbnRlciAtIDJcbiAgICAgICAgaW5kZXggPSBlbnRlciArIDJcbiAgICAgIH1cblxuICAgICAgZW50ZXIgPSB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXZlbnRzXG59XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtQcmV2aW91c31cbiAqL1xuZnVuY3Rpb24gcHJldmlvdXMoY29kZSkge1xuICAvLyBJZiB0aGVyZSBpcyBhIHByZXZpb3VzIGNvZGUsIHRoZXJlIHdpbGwgYWx3YXlzIGJlIGEgdGFpbC5cbiAgcmV0dXJuIChcbiAgICBjb2RlICE9PSBjb2Rlcy5ncmF2ZUFjY2VudCB8fFxuICAgIHRoaXMuZXZlbnRzW3RoaXMuZXZlbnRzLmxlbmd0aCAtIDFdWzFdLnR5cGUgPT09IHR5cGVzLmNoYXJhY3RlckVzY2FwZVxuICApXG59XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplQ29kZVRleHQoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBsZXQgc2l6ZU9wZW4gPSAwXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBsZXQgc2l6ZVxuICAvKiogQHR5cGUge1Rva2VufSAqL1xuICBsZXQgdG9rZW5cblxuICByZXR1cm4gc3RhcnRcblxuICAvKipcbiAgICogU3RhcnQgb2YgY29kZSAodGV4dCkuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBgYWBcbiAgICogICAgIF5cbiAgICogPiB8IFxcYGFgXG4gICAqICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGFzc2VydChjb2RlID09PSBjb2Rlcy5ncmF2ZUFjY2VudCwgJ2V4cGVjdGVkIGBgIGAgYGAnKVxuICAgIGFzc2VydChwcmV2aW91cy5jYWxsKHNlbGYsIHNlbGYucHJldmlvdXMpLCAnZXhwZWN0ZWQgY29ycmVjdCBwcmV2aW91cycpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5jb2RlVGV4dClcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNvZGVUZXh0U2VxdWVuY2UpXG4gICAgcmV0dXJuIHNlcXVlbmNlT3Blbihjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqIEluIG9wZW5pbmcgc2VxdWVuY2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBgYWBcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHNlcXVlbmNlT3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmdyYXZlQWNjZW50KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHNpemVPcGVuKytcbiAgICAgIHJldHVybiBzZXF1ZW5jZU9wZW5cbiAgICB9XG5cbiAgICBlZmZlY3RzLmV4aXQodHlwZXMuY29kZVRleHRTZXF1ZW5jZSlcbiAgICByZXR1cm4gYmV0d2Vlbihjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqIEJldHdlZW4gc29tZXRoaW5nIGFuZCBzb21ldGhpbmcgZWxzZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGBhYFxuICAgKiAgICAgIF5eXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBiZXR3ZWVuKGNvZGUpIHtcbiAgICAvLyBFT0YuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmVvZikge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIC8vIFRvIGRvOiBuZXh0IG1ham9yOiBkb27igJl0IGRvIHNwYWNlcyBpbiByZXNvbHZlLCBidXQgd2hlbiBjb21waWxpbmcsXG4gICAgLy8gbGlrZSBgbWFya2Rvd24tcnNgLlxuICAgIC8vIFRhYnMgZG9u4oCZdCB3b3JrLCBhbmQgdmlydHVhbCBzcGFjZXMgZG9u4oCZdCBtYWtlIHNlbnNlLlxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5zcGFjZSkge1xuICAgICAgZWZmZWN0cy5lbnRlcignc3BhY2UnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ3NwYWNlJylcbiAgICAgIHJldHVybiBiZXR3ZWVuXG4gICAgfVxuXG4gICAgLy8gQ2xvc2luZyBmZW5jZT8gQ291bGQgYWxzbyBiZSBkYXRhLlxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5ncmF2ZUFjY2VudCkge1xuICAgICAgdG9rZW4gPSBlZmZlY3RzLmVudGVyKHR5cGVzLmNvZGVUZXh0U2VxdWVuY2UpXG4gICAgICBzaXplID0gMFxuICAgICAgcmV0dXJuIHNlcXVlbmNlQ2xvc2UoY29kZSlcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmxpbmVFbmRpbmcpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5saW5lRW5kaW5nKVxuICAgICAgcmV0dXJuIGJldHdlZW5cbiAgICB9XG5cbiAgICAvLyBEYXRhLlxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuY29kZVRleHREYXRhKVxuICAgIHJldHVybiBkYXRhKGNvZGUpXG4gIH1cblxuICAvKipcbiAgICogSW4gZGF0YS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGBhYFxuICAgKiAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGRhdGEoY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IGNvZGVzLmVvZiB8fFxuICAgICAgY29kZSA9PT0gY29kZXMuc3BhY2UgfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmdyYXZlQWNjZW50IHx8XG4gICAgICBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSlcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jb2RlVGV4dERhdGEpXG4gICAgICByZXR1cm4gYmV0d2Vlbihjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICAvKipcbiAgICogSW4gY2xvc2luZyBzZXF1ZW5jZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGBhYFxuICAgKiAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzZXF1ZW5jZUNsb3NlKGNvZGUpIHtcbiAgICAvLyBNb3JlLlxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5ncmF2ZUFjY2VudCkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBzaXplKytcbiAgICAgIHJldHVybiBzZXF1ZW5jZUNsb3NlXG4gICAgfVxuXG4gICAgLy8gRG9uZSFcbiAgICBpZiAoc2l6ZSA9PT0gc2l6ZU9wZW4pIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jb2RlVGV4dFNlcXVlbmNlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmNvZGVUZXh0KVxuICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgfVxuXG4gICAgLy8gTW9yZSBvciBsZXNzIGFjY2VudHM6IG1hcmsgYXMgZGF0YS5cbiAgICB0b2tlbi50eXBlID0gdHlwZXMuY29kZVRleHREYXRhXG4gICAgcmV0dXJuIGRhdGEoY29kZSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm9rIiwiYXNzZXJ0IiwibWFya2Rvd25MaW5lRW5kaW5nIiwiY29kZXMiLCJ0eXBlcyIsImNvZGVUZXh0IiwibmFtZSIsInByZXZpb3VzIiwicmVzb2x2ZSIsInJlc29sdmVDb2RlVGV4dCIsInRva2VuaXplIiwidG9rZW5pemVDb2RlVGV4dCIsImV2ZW50cyIsInRhaWxFeGl0SW5kZXgiLCJsZW5ndGgiLCJoZWFkRW50ZXJJbmRleCIsImluZGV4IiwiZW50ZXIiLCJ0eXBlIiwibGluZUVuZGluZyIsImNvZGVUZXh0RGF0YSIsImNvZGVUZXh0UGFkZGluZyIsInVuZGVmaW5lZCIsImVuZCIsInNwbGljZSIsImNvZGUiLCJncmF2ZUFjY2VudCIsImNoYXJhY3RlckVzY2FwZSIsImVmZmVjdHMiLCJub2siLCJzZWxmIiwic2l6ZU9wZW4iLCJzaXplIiwidG9rZW4iLCJzdGFydCIsImNhbGwiLCJjb2RlVGV4dFNlcXVlbmNlIiwic2VxdWVuY2VPcGVuIiwiY29uc3VtZSIsImV4aXQiLCJiZXR3ZWVuIiwiZW9mIiwic3BhY2UiLCJzZXF1ZW5jZUNsb3NlIiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-text.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/content.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/content.js ***!
  \**********************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   content: function() { return /* binding */ content; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_subtokenize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-subtokenize */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-subtokenize@2.1.0/node_modules/micromark-util-subtokenize/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */ \n\n\n\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */ const content = {\n    resolve: resolveContent,\n    tokenize: tokenizeContent\n};\n/** @type {Construct} */ const continuationConstruct = {\n    partial: true,\n    tokenize: tokenizeContinuation\n};\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */ function resolveContent(events) {\n    (0,micromark_util_subtokenize__WEBPACK_IMPORTED_MODULE_0__.subtokenize)(events);\n    return events;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeContent(effects, ok) {\n    /** @type {Token | undefined} */ let previous;\n    return chunkStart;\n    /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function chunkStart(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof && !(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code), \"expected no eof or eol\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.content);\n        previous = effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.chunkContent, {\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.constants.contentTypeContent\n        });\n        return chunkInside(code);\n    }\n    /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */ function chunkInside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof) {\n            return contentEnd(code);\n        }\n        // To do: in `markdown-rs`, each line is parsed on its own, and everything\n        // is stitched together resolving.\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n        }\n        // Data.\n        effects.consume(code);\n        return chunkInside;\n    }\n    /**\n   *\n   *\n   * @type {State}\n   */ function contentEnd(code) {\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.chunkContent);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.content);\n        return ok(code);\n    }\n    /**\n   *\n   *\n   * @type {State}\n   */ function contentContinue(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code), \"expected eol\");\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.chunkContent);\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(previous, \"expected previous token\");\n        previous.next = effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.chunkContent, {\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.constants.contentTypeContent,\n            previous\n        });\n        previous = previous.next;\n        return chunkInside;\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeContinuation(effects, ok, nok) {\n    const self = this;\n    return startLookahead;\n    /**\n   *\n   *\n   * @type {State}\n   */ function startLookahead(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code), \"expected a line ending\");\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.chunkContent);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding);\n        return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__.factorySpace)(effects, prefixed, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.linePrefix);\n    }\n    /**\n   *\n   *\n   * @type {State}\n   */ function prefixed(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            return nok(code);\n        }\n        // Always populated by defaults.\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.parser.constructs.disable.null, \"expected `disable.null` to be populated\");\n        const tail = self.events[self.events.length - 1];\n        if (!self.parser.constructs.disable.null.includes(\"codeIndented\") && tail && tail[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.constants.tabSize) {\n            return ok(code);\n        }\n        return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/content.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/definition.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/definition.js ***!
  \*************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   definition: function() { return /* binding */ definition; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_destination__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-factory-destination */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-destination@2.0.1/node_modules/micromark-factory-destination/dev/index.js\");\n/* harmony import */ var micromark_factory_label__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-factory-label */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-label@2.0.1/node_modules/micromark-factory-label/dev/index.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_factory_title__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! micromark-factory-title */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-title@2.0.1/node_modules/micromark-factory-title/dev/index.js\");\n/* harmony import */ var micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-factory-whitespace */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-whitespace@2.0.1/node_modules/micromark-factory-whitespace/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-normalize-identifier */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-normalize-identifier@2.0.1/node_modules/micromark-util-normalize-identifier/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n\n\n\n\n\n/** @type {Construct} */ const definition = {\n    name: \"definition\",\n    tokenize: tokenizeDefinition\n};\n/** @type {Construct} */ const titleBefore = {\n    partial: true,\n    tokenize: tokenizeTitleBefore\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeDefinition(effects, ok, nok) {\n    const self = this;\n    /** @type {string} */ let identifier;\n    return start;\n    /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // Do not interrupt paragraphs (but do follow definitions).\n        // To do: do `interrupt` the way `markdown-rs` does.\n        // To do: parse whitespace the way `markdown-rs` does.\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definition);\n        return before(code);\n    }\n    /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        // To do: parse whitespace the way `markdown-rs` does.\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.leftSquareBracket, \"expected `[`\");\n        return micromark_factory_label__WEBPACK_IMPORTED_MODULE_3__.factoryLabel.call(self, effects, labelAfter, // Note: we don’t need to reset the way `markdown-rs` does.\n        nok, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionLabel, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionLabelMarker, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionLabelString)(code);\n    }\n    /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function labelAfter(code) {\n        identifier = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_4__.normalizeIdentifier)(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.colon) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionMarker);\n            return markerAfter;\n        }\n        return nok(code);\n    }\n    /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function markerAfter(code) {\n        // Note: whitespace is optional.\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code) ? (0,micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_6__.factoryWhitespace)(effects, destinationBefore)(code) : destinationBefore(code);\n    }\n    /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function destinationBefore(code) {\n        return (0,micromark_factory_destination__WEBPACK_IMPORTED_MODULE_7__.factoryDestination)(effects, destinationAfter, // Note: we don’t need to reset the way `markdown-rs` does.\n        nok, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionDestination, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionDestinationLiteral, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionDestinationLiteralMarker, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionDestinationRaw, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionDestinationString)(code);\n    }\n    /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function destinationAfter(code) {\n        return effects.attempt(titleBefore, after, after)(code);\n    }\n    /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_8__.factorySpace)(effects, afterWhitespace, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.whitespace)(code) : afterWhitespace(code);\n    }\n    /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function afterWhitespace(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definition);\n            // Note: we don’t care about uniqueness.\n            // It’s likely that that doesn’t happen very frequently.\n            // It is more likely that it wastes precious time.\n            self.parser.defined.push(identifier);\n            // To do: `markdown-rs` interrupt.\n            // // You’d be interrupting.\n            // tokenizer.interrupt = true\n            return ok(code);\n        }\n        return nok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeTitleBefore(effects, ok, nok) {\n    return titleBefore;\n    /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function titleBefore(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code) ? (0,micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_6__.factoryWhitespace)(effects, beforeMarker)(code) : nok(code);\n    }\n    /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function beforeMarker(code) {\n        return (0,micromark_factory_title__WEBPACK_IMPORTED_MODULE_9__.factoryTitle)(effects, titleAfter, nok, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionTitle, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionTitleMarker, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionTitleString)(code);\n    }\n    /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function titleAfter(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_8__.factorySpace)(effects, titleAfterOptionalWhitespace, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.whitespace)(code) : titleAfterOptionalWhitespace(code);\n    }\n    /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function titleAfterOptionalWhitespace(code) {\n        return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code) ? ok(code) : nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/definition.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js ***!
  \********************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hardBreakEscape: function() { return /* binding */ hardBreakEscape; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n/** @type {Construct} */ const hardBreakEscape = {\n    name: \"hardBreakEscape\",\n    tokenize: tokenizeHardBreakEscape\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeHardBreakEscape(effects, ok, nok) {\n    return start;\n    /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.backslash, \"expected `\\\\`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.hardBreakEscape);\n        effects.consume(code);\n        return after;\n    }\n    /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */ function after(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.hardBreakEscape);\n            return ok(code);\n        }\n        return nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvaGFyZC1icmVhay1lc2NhcGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7OztDQU9DLEdBRWtDO0FBQ3dCO0FBQ1Q7QUFFbEQsc0JBQXNCLEdBQ2YsTUFBTUssa0JBQWtCO0lBQzdCQyxNQUFNO0lBQ05DLFVBQVVDO0FBQ1osRUFBQztBQUVEOzs7O0NBSUMsR0FDRCxTQUFTQSx3QkFBd0JDLE9BQU8sRUFBRVQsRUFBRSxFQUFFVSxHQUFHO0lBQy9DLE9BQU9DO0lBRVA7Ozs7Ozs7Ozs7R0FVQyxHQUNELFNBQVNBLE1BQU1DLElBQUk7UUFDakJYLDBDQUFNQSxDQUFDVyxTQUFTVCx3REFBS0EsQ0FBQ1UsU0FBUyxFQUFFO1FBQ2pDSixRQUFRSyxLQUFLLENBQUNWLHdEQUFLQSxDQUFDQyxlQUFlO1FBQ25DSSxRQUFRTSxPQUFPLENBQUNIO1FBQ2hCLE9BQU9JO0lBQ1Q7SUFFQTs7Ozs7Ozs7OztHQVVDLEdBQ0QsU0FBU0EsTUFBTUosSUFBSTtRQUNqQixJQUFJViw0RUFBa0JBLENBQUNVLE9BQU87WUFDNUJILFFBQVFRLElBQUksQ0FBQ2Isd0RBQUtBLENBQUNDLGVBQWU7WUFDbEMsT0FBT0wsR0FBR1k7UUFDWjtRQUVBLE9BQU9GLElBQUlFO0lBQ2I7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWNvcmUtY29tbW9ubWFya0AyLjAuMy9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9kZXYvbGliL2hhcmQtYnJlYWstZXNjYXBlLmpzPzA1NmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgQ29uc3RydWN0LFxuICogICBTdGF0ZSxcbiAqICAgVG9rZW5pemVDb250ZXh0LFxuICogICBUb2tlbml6ZXJcbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge2NvZGVzLCB0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBoYXJkQnJlYWtFc2NhcGUgPSB7XG4gIG5hbWU6ICdoYXJkQnJlYWtFc2NhcGUnLFxuICB0b2tlbml6ZTogdG9rZW5pemVIYXJkQnJlYWtFc2NhcGVcbn1cblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVIYXJkQnJlYWtFc2NhcGUoZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gc3RhcnRcblxuICAvKipcbiAgICogU3RhcnQgb2YgYSBoYXJkIGJyZWFrIChlc2NhcGUpLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYVxcXG4gICAqICAgICAgXlxuICAgKiAgIHwgYlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGFzc2VydChjb2RlID09PSBjb2Rlcy5iYWNrc2xhc2gsICdleHBlY3RlZCBgXFxcXGAnKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuaGFyZEJyZWFrRXNjYXBlKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBhZnRlclxuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGBcXGAsIGF0IGVvbC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGFcXFxuICAgKiAgICAgICBeXG4gICAqICAgfCBiXG4gICAqIGBgYFxuICAgKlxuICAgKiAgQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5oYXJkQnJlYWtFc2NhcGUpXG4gICAgICByZXR1cm4gb2soY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJvayIsImFzc2VydCIsIm1hcmtkb3duTGluZUVuZGluZyIsImNvZGVzIiwidHlwZXMiLCJoYXJkQnJlYWtFc2NhcGUiLCJuYW1lIiwidG9rZW5pemUiLCJ0b2tlbml6ZUhhcmRCcmVha0VzY2FwZSIsImVmZmVjdHMiLCJub2siLCJzdGFydCIsImNvZGUiLCJiYWNrc2xhc2giLCJlbnRlciIsImNvbnN1bWUiLCJhZnRlciIsImV4aXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/heading-atx.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/heading-atx.js ***!
  \**************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headingAtx: function() { return /* binding */ headingAtx; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-chunked */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-chunked@2.0.1/node_modules/micromark-util-chunked/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */ \n\n\n\n\n/** @type {Construct} */ const headingAtx = {\n    name: \"headingAtx\",\n    resolve: resolveHeadingAtx,\n    tokenize: tokenizeHeadingAtx\n};\n/** @type {Resolver} */ function resolveHeadingAtx(events, context) {\n    let contentEnd = events.length - 2;\n    let contentStart = 3;\n    /** @type {Token} */ let content;\n    /** @type {Token} */ let text;\n    // Prefix whitespace, part of the opening.\n    if (events[contentStart][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.whitespace) {\n        contentStart += 2;\n    }\n    // Suffix whitespace, part of the closing.\n    if (contentEnd - 2 > contentStart && events[contentEnd][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.whitespace) {\n        contentEnd -= 2;\n    }\n    if (events[contentEnd][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingSequence && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.whitespace)) {\n        contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n    }\n    if (contentEnd > contentStart) {\n        content = {\n            type: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingText,\n            start: events[contentStart][1].start,\n            end: events[contentEnd][1].end\n        };\n        text = {\n            type: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.chunkText,\n            start: events[contentStart][1].start,\n            end: events[contentEnd][1].end,\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.constants.contentTypeText\n        };\n        (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.splice)(events, contentStart, contentEnd - contentStart + 1, [\n            [\n                \"enter\",\n                content,\n                context\n            ],\n            [\n                \"enter\",\n                text,\n                context\n            ],\n            [\n                \"exit\",\n                text,\n                context\n            ],\n            [\n                \"exit\",\n                content,\n                context\n            ]\n        ]);\n    }\n    return events;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeHeadingAtx(effects, ok, nok) {\n    let size = 0;\n    return start;\n    /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // To do: parse indent like `markdown-rs`.\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeading);\n        return before(code);\n    }\n    /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.numberSign, \"expected `#`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingSequence);\n        return sequenceOpen(code);\n    }\n    /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function sequenceOpen(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.numberSign && size++ < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.constants.atxHeadingOpeningFenceSizeMax) {\n            effects.consume(code);\n            return sequenceOpen;\n        }\n        // Always at least one `#`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingSequence);\n            return atBreak(code);\n        }\n        return nok(code);\n    }\n    /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function atBreak(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.numberSign) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingSequence);\n            return sequenceFurther(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeading);\n            // To do: interrupt like `markdown-rs`.\n            // // Feel free to interrupt.\n            // tokenizer.interrupt = false\n            return ok(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownSpace)(code)) {\n            return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__.factorySpace)(effects, atBreak, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.whitespace)(code);\n        }\n        // To do: generate `data` tokens, add the `text` token later.\n        // Needs edit map, see: `markdown.rs`.\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingText);\n        return data(code);\n    }\n    /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function sequenceFurther(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.numberSign) {\n            effects.consume(code);\n            return sequenceFurther;\n        }\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingSequence);\n        return atBreak(code);\n    }\n    /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function data(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.numberSign || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingText);\n            return atBreak(code);\n        }\n        effects.consume(code);\n        return data;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/heading-atx.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/html-flow.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/html-flow.js ***!
  \************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   htmlFlow: function() { return /* binding */ htmlFlow; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_html_tag_name__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-html-tag-name */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-html-tag-name@2.0.1/node_modules/micromark-util-html-tag-name/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/* harmony import */ var _blank_line_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./blank-line.js */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/blank-line.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n\n/** @type {Construct} */ const htmlFlow = {\n    concrete: true,\n    name: \"htmlFlow\",\n    resolveTo: resolveToHtmlFlow,\n    tokenize: tokenizeHtmlFlow\n};\n/** @type {Construct} */ const blankLineBefore = {\n    partial: true,\n    tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n    partial: true,\n    tokenize: tokenizeNonLazyContinuationStart\n};\n/** @type {Resolver} */ function resolveToHtmlFlow(events) {\n    let index = events.length;\n    while(index--){\n        if (events[index][0] === \"enter\" && events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlow) {\n            break;\n        }\n    }\n    if (index > 1 && events[index - 2][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.linePrefix) {\n        // Add the prefix start to the HTML token.\n        events[index][1].start = events[index - 2][1].start;\n        // Add the prefix start to the HTML line token.\n        events[index + 1][1].start = events[index - 2][1].start;\n        // Remove the line prefix.\n        events.splice(index - 2, 2);\n    }\n    return events;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeHtmlFlow(effects, ok, nok) {\n    const self = this;\n    /** @type {number} */ let marker;\n    /** @type {boolean} */ let closingTag;\n    /** @type {string} */ let buffer;\n    /** @type {number} */ let index;\n    /** @type {Code} */ let markerB;\n    return start;\n    /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // To do: parse indent like `markdown-rs`.\n        return before(code);\n    }\n    /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.lessThan, \"expected `<`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlow);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlowData);\n        effects.consume(code);\n        return open;\n    }\n    /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function open(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.exclamationMark) {\n            effects.consume(code);\n            return declarationOpen;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.slash) {\n            effects.consume(code);\n            closingTag = true;\n            return tagCloseStart;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.questionMark) {\n            effects.consume(code);\n            marker = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlInstruction;\n            // To do:\n            // tokenizer.concrete = true\n            // To do: use `markdown-rs` style interrupt.\n            // While we’re in an instruction instead of a declaration, we’re on a `?`\n            // right now, so we do need to search for `>`, similar to declarations.\n            return self.interrupt ? ok : continuationDeclarationInside;\n        }\n        // ASCII alphabetical.\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlpha)(code)) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code !== null) // Always the case.\n            ;\n            effects.consume(code);\n            buffer = String.fromCharCode(code);\n            return tagName;\n        }\n        return nok(code);\n    }\n    /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function declarationOpen(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash) {\n            effects.consume(code);\n            marker = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlComment;\n            return commentOpenInside;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.leftSquareBracket) {\n            effects.consume(code);\n            marker = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlCdata;\n            index = 0;\n            return cdataOpenInside;\n        }\n        // ASCII alphabetical.\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlpha)(code)) {\n            effects.consume(code);\n            marker = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlDeclaration;\n            // // Do not form containers.\n            // tokenizer.concrete = true\n            return self.interrupt ? ok : continuationDeclarationInside;\n        }\n        return nok(code);\n    }\n    /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function commentOpenInside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash) {\n            effects.consume(code);\n            // // Do not form containers.\n            // tokenizer.concrete = true\n            return self.interrupt ? ok : continuationDeclarationInside;\n        }\n        return nok(code);\n    }\n    /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */ function cdataOpenInside(code) {\n        const value = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.cdataOpeningString;\n        if (code === value.charCodeAt(index++)) {\n            effects.consume(code);\n            if (index === value.length) {\n                // // Do not form containers.\n                // tokenizer.concrete = true\n                return self.interrupt ? ok : continuation;\n            }\n            return cdataOpenInside;\n        }\n        return nok(code);\n    }\n    /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function tagCloseStart(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlpha)(code)) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code !== null) // Always the case.\n            ;\n            effects.consume(code);\n            buffer = String.fromCharCode(code);\n            return tagName;\n        }\n        return nok(code);\n    }\n    /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */ function tagName(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEndingOrSpace)(code)) {\n            const slash = code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.slash;\n            const name = buffer.toLowerCase();\n            if (!slash && !closingTag && micromark_util_html_tag_name__WEBPACK_IMPORTED_MODULE_5__.htmlRawNames.includes(name)) {\n                marker = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlRaw;\n                // // Do not form containers.\n                // tokenizer.concrete = true\n                return self.interrupt ? ok(code) : continuation(code);\n            }\n            if (micromark_util_html_tag_name__WEBPACK_IMPORTED_MODULE_5__.htmlBlockNames.includes(buffer.toLowerCase())) {\n                marker = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlBasic;\n                if (slash) {\n                    effects.consume(code);\n                    return basicSelfClosing;\n                }\n                // // Do not form containers.\n                // tokenizer.concrete = true\n                return self.interrupt ? ok(code) : continuation(code);\n            }\n            marker = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlComplete;\n            // Do not support complete HTML when interrupting.\n            return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n        }\n        // ASCII alphanumerical and `-`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlphanumeric)(code)) {\n            effects.consume(code);\n            buffer += String.fromCharCode(code);\n            return tagName;\n        }\n        return nok(code);\n    }\n    /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function basicSelfClosing(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan) {\n            effects.consume(code);\n            // // Do not form containers.\n            // tokenizer.concrete = true\n            return self.interrupt ? ok : continuation;\n        }\n        return nok(code);\n    }\n    /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function completeClosingTagAfter(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.consume(code);\n            return completeClosingTagAfter;\n        }\n        return completeEnd(code);\n    }\n    /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeNameBefore(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.slash) {\n            effects.consume(code);\n            return completeEnd;\n        }\n        // ASCII alphanumerical and `:` and `_`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.colon || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.underscore || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlpha)(code)) {\n            effects.consume(code);\n            return completeAttributeName;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.consume(code);\n            return completeAttributeNameBefore;\n        }\n        return completeEnd(code);\n    }\n    /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeName(code) {\n        // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dot || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.colon || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.underscore || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlphanumeric)(code)) {\n            effects.consume(code);\n            return completeAttributeName;\n        }\n        return completeAttributeNameAfter(code);\n    }\n    /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeNameAfter(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.equalsTo) {\n            effects.consume(code);\n            return completeAttributeValueBefore;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.consume(code);\n            return completeAttributeNameAfter;\n        }\n        return completeAttributeNameBefore(code);\n    }\n    /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeValueBefore(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.lessThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.equalsTo || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.graveAccent) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.quotationMark || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.apostrophe) {\n            effects.consume(code);\n            markerB = code;\n            return completeAttributeValueQuoted;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.consume(code);\n            return completeAttributeValueBefore;\n        }\n        return completeAttributeValueUnquoted(code);\n    }\n    /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeValueQuoted(code) {\n        if (code === markerB) {\n            effects.consume(code);\n            markerB = null;\n            return completeAttributeValueQuotedAfter;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            return nok(code);\n        }\n        effects.consume(code);\n        return completeAttributeValueQuoted;\n    }\n    /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeValueUnquoted(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.quotationMark || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.apostrophe || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.lessThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.equalsTo || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.graveAccent || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEndingOrSpace)(code)) {\n            return completeAttributeNameAfter(code);\n        }\n        effects.consume(code);\n        return completeAttributeValueUnquoted;\n    }\n    /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeValueQuotedAfter(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            return completeAttributeNameBefore(code);\n        }\n        return nok(code);\n    }\n    /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function completeEnd(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan) {\n            effects.consume(code);\n            return completeAfter;\n        }\n        return nok(code);\n    }\n    /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAfter(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            // // Do not form containers.\n            // tokenizer.concrete = true\n            return continuation(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.consume(code);\n            return completeAfter;\n        }\n        return nok(code);\n    }\n    /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function continuation(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash && marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlComment) {\n            effects.consume(code);\n            return continuationCommentInside;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.lessThan && marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlRaw) {\n            effects.consume(code);\n            return continuationRawTagOpen;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan && marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlDeclaration) {\n            effects.consume(code);\n            return continuationClose;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.questionMark && marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlInstruction) {\n            effects.consume(code);\n            return continuationDeclarationInside;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.rightSquareBracket && marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlCdata) {\n            effects.consume(code);\n            return continuationCdataInside;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code) && (marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlBasic || marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlComplete)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlowData);\n            return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlowData);\n            return continuationStart(code);\n        }\n        effects.consume(code);\n        return continuation;\n    }\n    /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */ function continuationStart(code) {\n        return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n    }\n    /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */ function continuationStartNonLazy(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code));\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n        return continuationBefore;\n    }\n    /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationBefore(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            return continuationStart(code);\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlowData);\n        return continuation(code);\n    }\n    /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationCommentInside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash) {\n            effects.consume(code);\n            return continuationDeclarationInside;\n        }\n        return continuation(code);\n    }\n    /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationRawTagOpen(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.slash) {\n            effects.consume(code);\n            buffer = \"\";\n            return continuationRawEndTag;\n        }\n        return continuation(code);\n    }\n    /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */ function continuationRawEndTag(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan) {\n            const name = buffer.toLowerCase();\n            if (micromark_util_html_tag_name__WEBPACK_IMPORTED_MODULE_5__.htmlRawNames.includes(name)) {\n                effects.consume(code);\n                return continuationClose;\n            }\n            return continuation(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlpha)(code) && buffer.length < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlRawSizeMax) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code !== null) // Always the case.\n            ;\n            effects.consume(code);\n            buffer += String.fromCharCode(code);\n            return continuationRawEndTag;\n        }\n        return continuation(code);\n    }\n    /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationCdataInside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.rightSquareBracket) {\n            effects.consume(code);\n            return continuationDeclarationInside;\n        }\n        return continuation(code);\n    }\n    /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationDeclarationInside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan) {\n            effects.consume(code);\n            return continuationClose;\n        }\n        // More dashes.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash && marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlComment) {\n            effects.consume(code);\n            return continuationDeclarationInside;\n        }\n        return continuation(code);\n    }\n    /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationClose(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlowData);\n            return continuationAfter(code);\n        }\n        effects.consume(code);\n        return continuationClose;\n    }\n    /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationAfter(code) {\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlow);\n        // // Feel free to interrupt.\n        // tokenizer.interrupt = false\n        // // No longer concrete.\n        // tokenizer.concrete = false\n        return ok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeNonLazyContinuationStart(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n            return after;\n        }\n        return nok(code);\n    }\n    /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeBlankLineBefore(effects, ok, nok) {\n    return start;\n    /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), \"expected a line ending\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n        return effects.attempt(_blank_line_js__WEBPACK_IMPORTED_MODULE_6__.blankLine, ok, nok);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/html-flow.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/html-text.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/html-text.js ***!
  \************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   htmlText: function() { return /* binding */ htmlText; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const htmlText = {\n    name: \"htmlText\",\n    tokenize: tokenizeHtmlText\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeHtmlText(effects, ok, nok) {\n    const self = this;\n    /** @type {NonNullable<Code> | undefined} */ let marker;\n    /** @type {number} */ let index;\n    /** @type {State} */ let returnState;\n    return start;\n    /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan, \"expected `<`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.htmlText);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.htmlTextData);\n        effects.consume(code);\n        return open;\n    }\n    /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function open(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.exclamationMark) {\n            effects.consume(code);\n            return declarationOpen;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash) {\n            effects.consume(code);\n            return tagCloseStart;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.questionMark) {\n            effects.consume(code);\n            return instruction;\n        }\n        // ASCII alphabetical.\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlpha)(code)) {\n            effects.consume(code);\n            return tagOpen;\n        }\n        return nok(code);\n    }\n    /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function declarationOpen(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash) {\n            effects.consume(code);\n            return commentOpenInside;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket) {\n            effects.consume(code);\n            index = 0;\n            return cdataOpenInside;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlpha)(code)) {\n            effects.consume(code);\n            return declaration;\n        }\n        return nok(code);\n    }\n    /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function commentOpenInside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash) {\n            effects.consume(code);\n            return commentEnd;\n        }\n        return nok(code);\n    }\n    /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function comment(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash) {\n            effects.consume(code);\n            return commentClose;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = comment;\n            return lineEndingBefore(code);\n        }\n        effects.consume(code);\n        return comment;\n    }\n    /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function commentClose(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash) {\n            effects.consume(code);\n            return commentEnd;\n        }\n        return comment(code);\n    }\n    /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */ function commentEnd(code) {\n        return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ? end(code) : code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash ? commentClose(code) : comment(code);\n    }\n    /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */ function cdataOpenInside(code) {\n        const value = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.cdataOpeningString;\n        if (code === value.charCodeAt(index++)) {\n            effects.consume(code);\n            return index === value.length ? cdata : cdataOpenInside;\n        }\n        return nok(code);\n    }\n    /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */ function cdata(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {\n            effects.consume(code);\n            return cdataClose;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = cdata;\n            return lineEndingBefore(code);\n        }\n        effects.consume(code);\n        return cdata;\n    }\n    /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */ function cdataClose(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {\n            effects.consume(code);\n            return cdataEnd;\n        }\n        return cdata(code);\n    }\n    /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */ function cdataEnd(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n            return end(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {\n            effects.consume(code);\n            return cdataEnd;\n        }\n        return cdata(code);\n    }\n    /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function declaration(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n            return end(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = declaration;\n            return lineEndingBefore(code);\n        }\n        effects.consume(code);\n        return declaration;\n    }\n    /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function instruction(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.questionMark) {\n            effects.consume(code);\n            return instructionClose;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = instruction;\n            return lineEndingBefore(code);\n        }\n        effects.consume(code);\n        return instruction;\n    }\n    /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function instructionClose(code) {\n        return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ? end(code) : instruction(code);\n    }\n    /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function tagCloseStart(code) {\n        // ASCII alphabetical.\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlpha)(code)) {\n            effects.consume(code);\n            return tagClose;\n        }\n        return nok(code);\n    }\n    /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function tagClose(code) {\n        // ASCII alphanumerical and `-`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) {\n            effects.consume(code);\n            return tagClose;\n        }\n        return tagCloseBetween(code);\n    }\n    /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function tagCloseBetween(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = tagCloseBetween;\n            return lineEndingBefore(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            effects.consume(code);\n            return tagCloseBetween;\n        }\n        return end(code);\n    }\n    /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpen(code) {\n        // ASCII alphanumerical and `-`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) {\n            effects.consume(code);\n            return tagOpen;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEndingOrSpace)(code)) {\n            return tagOpenBetween(code);\n        }\n        return nok(code);\n    }\n    /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenBetween(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash) {\n            effects.consume(code);\n            return end;\n        }\n        // ASCII alphabetical and `:` and `_`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.underscore || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlpha)(code)) {\n            effects.consume(code);\n            return tagOpenAttributeName;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = tagOpenBetween;\n            return lineEndingBefore(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            effects.consume(code);\n            return tagOpenBetween;\n        }\n        return end(code);\n    }\n    /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeName(code) {\n        // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.underscore || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) {\n            effects.consume(code);\n            return tagOpenAttributeName;\n        }\n        return tagOpenAttributeNameAfter(code);\n    }\n    /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeNameAfter(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo) {\n            effects.consume(code);\n            return tagOpenAttributeValueBefore;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = tagOpenAttributeNameAfter;\n            return lineEndingBefore(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            effects.consume(code);\n            return tagOpenAttributeNameAfter;\n        }\n        return tagOpenBetween(code);\n    }\n    /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeValueBefore(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.quotationMark || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.apostrophe) {\n            effects.consume(code);\n            marker = code;\n            return tagOpenAttributeValueQuoted;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = tagOpenAttributeValueBefore;\n            return lineEndingBefore(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            effects.consume(code);\n            return tagOpenAttributeValueBefore;\n        }\n        effects.consume(code);\n        return tagOpenAttributeValueUnquoted;\n    }\n    /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeValueQuoted(code) {\n        if (code === marker) {\n            effects.consume(code);\n            marker = undefined;\n            return tagOpenAttributeValueQuotedAfter;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            return nok(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = tagOpenAttributeValueQuoted;\n            return lineEndingBefore(code);\n        }\n        effects.consume(code);\n        return tagOpenAttributeValueQuoted;\n    }\n    /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeValueUnquoted(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.quotationMark || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.apostrophe || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEndingOrSpace)(code)) {\n            return tagOpenBetween(code);\n        }\n        effects.consume(code);\n        return tagOpenAttributeValueUnquoted;\n    }\n    /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeValueQuotedAfter(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEndingOrSpace)(code)) {\n            return tagOpenBetween(code);\n        }\n        return nok(code);\n    }\n    /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function end(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.htmlTextData);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.htmlText);\n            return ok;\n        }\n        return nok(code);\n    }\n    /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */ function lineEndingBefore(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(returnState, \"expected return state\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code), \"expected eol\");\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.htmlTextData);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        return lineEndingAfter;\n    }\n    /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function lineEndingAfter(code) {\n        // Always populated by defaults.\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(self.parser.constructs.disable.null, \"expected `disable.null` to be populated\");\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, lineEndingAfterPrefix, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix, self.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize)(code) : lineEndingAfterPrefix(code);\n    }\n    /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function lineEndingAfterPrefix(code) {\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.htmlTextData);\n        return returnState(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/html-text.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-end.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-end.js ***!
  \************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   labelEnd: function() { return /* binding */ labelEnd; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_destination__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! micromark-factory-destination */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-destination@2.0.1/node_modules/micromark-factory-destination/dev/index.js\");\n/* harmony import */ var micromark_factory_label__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! micromark-factory-label */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-label@2.0.1/node_modules/micromark-factory-label/dev/index.js\");\n/* harmony import */ var micromark_factory_title__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! micromark-factory-title */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-title@2.0.1/node_modules/micromark-factory-title/dev/index.js\");\n/* harmony import */ var micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-factory-whitespace */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-whitespace@2.0.1/node_modules/micromark-factory-whitespace/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-chunked */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-chunked@2.0.1/node_modules/micromark-util-chunked/dev/index.js\");\n/* harmony import */ var micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-normalize-identifier */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-normalize-identifier@2.0.1/node_modules/micromark-util-normalize-identifier/dev/index.js\");\n/* harmony import */ var micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-resolve-all */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-resolve-all@2.0.1/node_modules/micromark-util-resolve-all/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */ \n\n\n\n\n\n\n\n\n\n/** @type {Construct} */ const labelEnd = {\n    name: \"labelEnd\",\n    resolveAll: resolveAllLabelEnd,\n    resolveTo: resolveToLabelEnd,\n    tokenize: tokenizeLabelEnd\n};\n/** @type {Construct} */ const resourceConstruct = {\n    tokenize: tokenizeResource\n};\n/** @type {Construct} */ const referenceFullConstruct = {\n    tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */ const referenceCollapsedConstruct = {\n    tokenize: tokenizeReferenceCollapsed\n};\n/** @type {Resolver} */ function resolveAllLabelEnd(events) {\n    let index = -1;\n    /** @type {Array<Event>} */ const newEvents = [];\n    while(++index < events.length){\n        const token = events[index][1];\n        newEvents.push(events[index]);\n        if (token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelImage || token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelLink || token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelEnd) {\n            // Remove the marker.\n            const offset = token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelImage ? 4 : 2;\n            token.type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.data;\n            index += offset;\n        }\n    }\n    // If the events are equal, we don't have to copy newEvents to events\n    if (events.length !== newEvents.length) {\n        (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.splice)(events, 0, events.length, newEvents);\n    }\n    return events;\n}\n/** @type {Resolver} */ function resolveToLabelEnd(events, context) {\n    let index = events.length;\n    let offset = 0;\n    /** @type {Token} */ let token;\n    /** @type {number | undefined} */ let open;\n    /** @type {number | undefined} */ let close;\n    /** @type {Array<Event>} */ let media;\n    // Find an opening.\n    while(index--){\n        token = events[index][1];\n        if (open) {\n            // If we see another link, or inactive link label, we’ve been here before.\n            if (token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.link || token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelLink && token._inactive) {\n                break;\n            }\n            // Mark other link openings as inactive, as we can’t have links in\n            // links.\n            if (events[index][0] === \"enter\" && token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelLink) {\n                token._inactive = true;\n            }\n        } else if (close) {\n            if (events[index][0] === \"enter\" && (token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelImage || token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelLink) && !token._balanced) {\n                open = index;\n                if (token.type !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelLink) {\n                    offset = 2;\n                    break;\n                }\n            }\n        } else if (token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelEnd) {\n            close = index;\n        }\n    }\n    (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(open !== undefined, \"`open` is supposed to be found\");\n    (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(close !== undefined, \"`close` is supposed to be found\");\n    const group = {\n        type: events[open][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelLink ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.link : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.image,\n        start: {\n            ...events[open][1].start\n        },\n        end: {\n            ...events[events.length - 1][1].end\n        }\n    };\n    const label = {\n        type: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.label,\n        start: {\n            ...events[open][1].start\n        },\n        end: {\n            ...events[close][1].end\n        }\n    };\n    const text = {\n        type: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelText,\n        start: {\n            ...events[open + offset + 2][1].end\n        },\n        end: {\n            ...events[close - 2][1].start\n        }\n    };\n    media = [\n        [\n            \"enter\",\n            group,\n            context\n        ],\n        [\n            \"enter\",\n            label,\n            context\n        ]\n    ];\n    // Opening marker.\n    media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(media, events.slice(open + 1, open + offset + 3));\n    // Text open.\n    media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(media, [\n        [\n            \"enter\",\n            text,\n            context\n        ]\n    ]);\n    // Always populated by defaults.\n    (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(context.parser.constructs.insideSpan.null, \"expected `insideSpan.null` to be populated\");\n    // Between.\n    media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(media, (0,micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_3__.resolveAll)(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n    // Text close, marker close, label close.\n    media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(media, [\n        [\n            \"exit\",\n            text,\n            context\n        ],\n        events[close - 2],\n        events[close - 1],\n        [\n            \"exit\",\n            label,\n            context\n        ]\n    ]);\n    // Reference, resource, or so.\n    media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(media, events.slice(close + 1));\n    // Media close.\n    media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(media, [\n        [\n            \"exit\",\n            group,\n            context\n        ]\n    ]);\n    (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.splice)(events, open, events.length, media);\n    return events;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeLabelEnd(effects, ok, nok) {\n    const self = this;\n    let index = self.events.length;\n    /** @type {Token} */ let labelStart;\n    /** @type {boolean} */ let defined;\n    // Find an opening.\n    while(index--){\n        if ((self.events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelImage || self.events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelLink) && !self.events[index][1]._balanced) {\n            labelStart = self.events[index][1];\n            break;\n        }\n    }\n    return start;\n    /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.rightSquareBracket, \"expected `]`\");\n        // If there is not an okay opening.\n        if (!labelStart) {\n            return nok(code);\n        }\n        // If the corresponding label (link) start is marked as inactive,\n        // it means we’d be wrapping a link, like this:\n        //\n        // ```markdown\n        // > | a [b [c](d) e](f) g.\n        //                  ^\n        // ```\n        //\n        // We can’t have that, so it’s just balanced brackets.\n        if (labelStart._inactive) {\n            return labelEndNok(code);\n        }\n        defined = self.parser.defined.includes((0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_5__.normalizeIdentifier)(self.sliceSerialize({\n            start: labelStart.end,\n            end: self.now()\n        })));\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelEnd);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelMarker);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelEnd);\n        return after;\n    }\n    /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n        // an extension.\n        // Resource (`[asd](fgh)`)?\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.leftParenthesis) {\n            return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n        }\n        // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.leftSquareBracket) {\n            return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n        }\n        // Shortcut (`[asd]`) reference?\n        return defined ? labelEndOk(code) : labelEndNok(code);\n    }\n    /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function referenceNotFull(code) {\n        return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n    }\n    /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function labelEndOk(code) {\n        // Note: `markdown-rs` does a bunch of stuff here.\n        return ok(code);\n    }\n    /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function labelEndNok(code) {\n        labelStart._balanced = true;\n        return nok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeResource(effects, ok, nok) {\n    return resourceStart;\n    /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceStart(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.leftParenthesis, \"expected left paren\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resource);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceMarker);\n        return resourceBefore;\n    }\n    /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceBefore(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_6__.markdownLineEndingOrSpace)(code) ? (0,micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_7__.factoryWhitespace)(effects, resourceOpen)(code) : resourceOpen(code);\n    }\n    /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceOpen(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.rightParenthesis) {\n            return resourceEnd(code);\n        }\n        return (0,micromark_factory_destination__WEBPACK_IMPORTED_MODULE_8__.factoryDestination)(effects, resourceDestinationAfter, resourceDestinationMissing, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceDestination, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceDestinationLiteral, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceDestinationLiteralMarker, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceDestinationRaw, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceDestinationString, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_9__.constants.linkResourceDestinationBalanceMax)(code);\n    }\n    /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceDestinationAfter(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_6__.markdownLineEndingOrSpace)(code) ? (0,micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_7__.factoryWhitespace)(effects, resourceBetween)(code) : resourceEnd(code);\n    }\n    /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceDestinationMissing(code) {\n        return nok(code);\n    }\n    /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceBetween(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.quotationMark || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.apostrophe || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.leftParenthesis) {\n            return (0,micromark_factory_title__WEBPACK_IMPORTED_MODULE_10__.factoryTitle)(effects, resourceTitleAfter, nok, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceTitle, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceTitleMarker, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceTitleString)(code);\n        }\n        return resourceEnd(code);\n    }\n    /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceTitleAfter(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_6__.markdownLineEndingOrSpace)(code) ? (0,micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_7__.factoryWhitespace)(effects, resourceEnd)(code) : resourceEnd(code);\n    }\n    /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceEnd(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.rightParenthesis) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceMarker);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resource);\n            return ok;\n        }\n        return nok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeReferenceFull(effects, ok, nok) {\n    const self = this;\n    return referenceFull;\n    /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function referenceFull(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.leftSquareBracket, \"expected left bracket\");\n        return micromark_factory_label__WEBPACK_IMPORTED_MODULE_11__.factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.reference, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.referenceMarker, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.referenceString)(code);\n    }\n    /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function referenceFullAfter(code) {\n        return self.parser.defined.includes((0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_5__.normalizeIdentifier)(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n    }\n    /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function referenceFullMissing(code) {\n        return nok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeReferenceCollapsed(effects, ok, nok) {\n    return referenceCollapsedStart;\n    /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function referenceCollapsedStart(code) {\n        // We only attempt a collapsed label if there’s a `[`.\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.leftSquareBracket, \"expected left bracket\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.reference);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.referenceMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.referenceMarker);\n        return referenceCollapsedOpen;\n    }\n    /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */ function referenceCollapsedOpen(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.rightSquareBracket) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.referenceMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.referenceMarker);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.reference);\n            return ok;\n        }\n        return nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-end.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-start-image.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-start-image.js ***!
  \********************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   labelStartImage: function() { return /* binding */ labelStartImage; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var _label_end_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./label-end.js */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-end.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n/** @type {Construct} */ const labelStartImage = {\n    name: \"labelStartImage\",\n    resolveAll: _label_end_js__WEBPACK_IMPORTED_MODULE_0__.labelEnd.resolveAll,\n    tokenize: tokenizeLabelStartImage\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeLabelStartImage(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.exclamationMark, \"expected `!`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelImage);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelImageMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelImageMarker);\n        return open;\n    }\n    /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function open(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.leftSquareBracket) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelMarker);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelImage);\n            return after;\n        }\n        return nok(code);\n    }\n    /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        // To do: use a new field to do this, this is still needed for\n        // `micromark-extension-gfm-footnote`, but the `label-start-link`\n        // behavior isn’t.\n        // Hidden footnotes hook.\n        /* c8 ignore next 3 */ return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.caret && \"_hiddenFootnoteSupport\" in self.parser.constructs ? nok(code) : ok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvbGFiZWwtc3RhcnQtaW1hZ2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7OztDQU9DLEdBRWtDO0FBQ2U7QUFDWDtBQUV2QyxzQkFBc0IsR0FDZixNQUFNSyxrQkFBa0I7SUFDN0JDLE1BQU07SUFDTkMsWUFBWUgsbURBQVFBLENBQUNHLFVBQVU7SUFDL0JDLFVBQVVDO0FBQ1osRUFBQztBQUVEOzs7O0NBSUMsR0FDRCxTQUFTQSx3QkFBd0JDLE9BQU8sRUFBRVYsRUFBRSxFQUFFVyxHQUFHO0lBQy9DLE1BQU1DLE9BQU8sSUFBSTtJQUVqQixPQUFPQztJQUVQOzs7Ozs7Ozs7R0FTQyxHQUNELFNBQVNBLE1BQU1DLElBQUk7UUFDakJiLDBDQUFNQSxDQUFDYSxTQUFTWix3REFBS0EsQ0FBQ2EsZUFBZSxFQUFFO1FBQ3ZDTCxRQUFRTSxLQUFLLENBQUNiLHdEQUFLQSxDQUFDYyxVQUFVO1FBQzlCUCxRQUFRTSxLQUFLLENBQUNiLHdEQUFLQSxDQUFDZSxnQkFBZ0I7UUFDcENSLFFBQVFTLE9BQU8sQ0FBQ0w7UUFDaEJKLFFBQVFVLElBQUksQ0FBQ2pCLHdEQUFLQSxDQUFDZSxnQkFBZ0I7UUFDbkMsT0FBT0c7SUFDVDtJQUVBOzs7Ozs7Ozs7R0FTQyxHQUNELFNBQVNBLEtBQUtQLElBQUk7UUFDaEIsSUFBSUEsU0FBU1osd0RBQUtBLENBQUNvQixpQkFBaUIsRUFBRTtZQUNwQ1osUUFBUU0sS0FBSyxDQUFDYix3REFBS0EsQ0FBQ29CLFdBQVc7WUFDL0JiLFFBQVFTLE9BQU8sQ0FBQ0w7WUFDaEJKLFFBQVFVLElBQUksQ0FBQ2pCLHdEQUFLQSxDQUFDb0IsV0FBVztZQUM5QmIsUUFBUVUsSUFBSSxDQUFDakIsd0RBQUtBLENBQUNjLFVBQVU7WUFDN0IsT0FBT087UUFDVDtRQUVBLE9BQU9iLElBQUlHO0lBQ2I7SUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EwQkMsR0FDRCxTQUFTVSxNQUFNVixJQUFJO1FBQ2pCLDhEQUE4RDtRQUM5RCxpRUFBaUU7UUFDakUsa0JBQWtCO1FBQ2xCLHlCQUF5QjtRQUN6QixvQkFBb0IsR0FDcEIsT0FBT0EsU0FBU1osd0RBQUtBLENBQUN1QixLQUFLLElBQ3pCLDRCQUE0QmIsS0FBS2MsTUFBTSxDQUFDQyxVQUFVLEdBQ2hEaEIsSUFBSUcsUUFDSmQsR0FBR2M7SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvbGFiZWwtc3RhcnQtaW1hZ2UuanM/MTg1MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb25zdHJ1Y3QsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplclxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuaW1wb3J0IHtjb2RlcywgdHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbCdcbmltcG9ydCB7bGFiZWxFbmR9IGZyb20gJy4vbGFiZWwtZW5kLmpzJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBsYWJlbFN0YXJ0SW1hZ2UgPSB7XG4gIG5hbWU6ICdsYWJlbFN0YXJ0SW1hZ2UnLFxuICByZXNvbHZlQWxsOiBsYWJlbEVuZC5yZXNvbHZlQWxsLFxuICB0b2tlbml6ZTogdG9rZW5pemVMYWJlbFN0YXJ0SW1hZ2Vcbn1cblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVMYWJlbFN0YXJ0SW1hZ2UoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIHJldHVybiBzdGFydFxuXG4gIC8qKlxuICAgKiBTdGFydCBvZiBsYWJlbCAoaW1hZ2UpIHN0YXJ0LlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSAhW2JdIGNcbiAgICogICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGFzc2VydChjb2RlID09PSBjb2Rlcy5leGNsYW1hdGlvbk1hcmssICdleHBlY3RlZCBgIWAnKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMubGFiZWxJbWFnZSlcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmxhYmVsSW1hZ2VNYXJrZXIpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmxhYmVsSW1hZ2VNYXJrZXIpXG4gICAgcmV0dXJuIG9wZW5cbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBgIWAsIGF0IGBbYC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgIVtiXSBjXG4gICAqICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBvcGVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMubGVmdFNxdWFyZUJyYWNrZXQpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZXMubGFiZWxNYXJrZXIpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5sYWJlbE1hcmtlcilcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5sYWJlbEltYWdlKVxuICAgICAgcmV0dXJuIGFmdGVyXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGAhW2AuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhICFbYl0gY1xuICAgKiAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIFRoaXMgaXMgbmVlZGVkIGluIGJlY2F1c2UsIHdoZW4gR0ZNIGZvb3Rub3RlcyBhcmUgZW5hYmxlZCwgaW1hZ2VzIG5ldmVyXG4gICAqIGZvcm0gd2hlbiBzdGFydGVkIHdpdGggYSBgXmAuXG4gICAqIEluc3RlYWQsIGxpbmtzIGZvcm06XG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqICFbXmFdKGIpXG4gICAqXG4gICAqICFbXmFdW2JdXG4gICAqXG4gICAqIFtiXTogY1xuICAgKiBgYGBcbiAgICpcbiAgICogYGBgaHRtbFxuICAgKiA8cD4hPGEgaHJlZj1cXFwiYlxcXCI+XmE8L2E+PC9wPlxuICAgKiA8cD4hPGEgaHJlZj1cXFwiY1xcXCI+XmE8L2E+PC9wPlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIC8vIFRvIGRvOiB1c2UgYSBuZXcgZmllbGQgdG8gZG8gdGhpcywgdGhpcyBpcyBzdGlsbCBuZWVkZWQgZm9yXG4gICAgLy8gYG1pY3JvbWFyay1leHRlbnNpb24tZ2ZtLWZvb3Rub3RlYCwgYnV0IHRoZSBgbGFiZWwtc3RhcnQtbGlua2BcbiAgICAvLyBiZWhhdmlvciBpc27igJl0LlxuICAgIC8vIEhpZGRlbiBmb290bm90ZXMgaG9vay5cbiAgICAvKiBjOCBpZ25vcmUgbmV4dCAzICovXG4gICAgcmV0dXJuIGNvZGUgPT09IGNvZGVzLmNhcmV0ICYmXG4gICAgICAnX2hpZGRlbkZvb3Rub3RlU3VwcG9ydCcgaW4gc2VsZi5wYXJzZXIuY29uc3RydWN0c1xuICAgICAgPyBub2soY29kZSlcbiAgICAgIDogb2soY29kZSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm9rIiwiYXNzZXJ0IiwiY29kZXMiLCJ0eXBlcyIsImxhYmVsRW5kIiwibGFiZWxTdGFydEltYWdlIiwibmFtZSIsInJlc29sdmVBbGwiLCJ0b2tlbml6ZSIsInRva2VuaXplTGFiZWxTdGFydEltYWdlIiwiZWZmZWN0cyIsIm5vayIsInNlbGYiLCJzdGFydCIsImNvZGUiLCJleGNsYW1hdGlvbk1hcmsiLCJlbnRlciIsImxhYmVsSW1hZ2UiLCJsYWJlbEltYWdlTWFya2VyIiwiY29uc3VtZSIsImV4aXQiLCJvcGVuIiwibGVmdFNxdWFyZUJyYWNrZXQiLCJsYWJlbE1hcmtlciIsImFmdGVyIiwiY2FyZXQiLCJwYXJzZXIiLCJjb25zdHJ1Y3RzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-start-image.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-start-link.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-start-link.js ***!
  \*******************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   labelStartLink: function() { return /* binding */ labelStartLink; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var _label_end_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./label-end.js */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-end.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n/** @type {Construct} */ const labelStartLink = {\n    name: \"labelStartLink\",\n    resolveAll: _label_end_js__WEBPACK_IMPORTED_MODULE_0__.labelEnd.resolveAll,\n    tokenize: tokenizeLabelStartLink\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeLabelStartLink(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.leftSquareBracket, \"expected `[`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelLink);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelMarker);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelLink);\n        return after;\n    }\n    /** @type {State} */ function after(code) {\n        // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n        // remove.\n        // Hidden footnotes hook.\n        /* c8 ignore next 3 */ return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.caret && \"_hiddenFootnoteSupport\" in self.parser.constructs ? nok(code) : ok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvbGFiZWwtc3RhcnQtbGluay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7O0NBT0MsR0FFa0M7QUFDZTtBQUNYO0FBRXZDLHNCQUFzQixHQUNmLE1BQU1LLGlCQUFpQjtJQUM1QkMsTUFBTTtJQUNOQyxZQUFZSCxtREFBUUEsQ0FBQ0csVUFBVTtJQUMvQkMsVUFBVUM7QUFDWixFQUFDO0FBRUQ7Ozs7Q0FJQyxHQUNELFNBQVNBLHVCQUF1QkMsT0FBTyxFQUFFVixFQUFFLEVBQUVXLEdBQUc7SUFDOUMsTUFBTUMsT0FBTyxJQUFJO0lBRWpCLE9BQU9DO0lBRVA7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU0EsTUFBTUMsSUFBSTtRQUNqQmIsMENBQU1BLENBQUNhLFNBQVNaLHdEQUFLQSxDQUFDYSxpQkFBaUIsRUFBRTtRQUN6Q0wsUUFBUU0sS0FBSyxDQUFDYix3REFBS0EsQ0FBQ2MsU0FBUztRQUM3QlAsUUFBUU0sS0FBSyxDQUFDYix3REFBS0EsQ0FBQ2UsV0FBVztRQUMvQlIsUUFBUVMsT0FBTyxDQUFDTDtRQUNoQkosUUFBUVUsSUFBSSxDQUFDakIsd0RBQUtBLENBQUNlLFdBQVc7UUFDOUJSLFFBQVFVLElBQUksQ0FBQ2pCLHdEQUFLQSxDQUFDYyxTQUFTO1FBQzVCLE9BQU9JO0lBQ1Q7SUFFQSxrQkFBa0IsR0FDbEIsU0FBU0EsTUFBTVAsSUFBSTtRQUNqQixrRUFBa0U7UUFDbEUsVUFBVTtRQUNWLHlCQUF5QjtRQUN6QixvQkFBb0IsR0FDcEIsT0FBT0EsU0FBU1osd0RBQUtBLENBQUNvQixLQUFLLElBQ3pCLDRCQUE0QlYsS0FBS1csTUFBTSxDQUFDQyxVQUFVLEdBQ2hEYixJQUFJRyxRQUNKZCxHQUFHYztJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9sYWJlbC1zdGFydC1saW5rLmpzP2RiZjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgQ29uc3RydWN0LFxuICogICBTdGF0ZSxcbiAqICAgVG9rZW5pemVDb250ZXh0LFxuICogICBUb2tlbml6ZXJcbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcbmltcG9ydCB7Y29kZXMsIHR5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wnXG5pbXBvcnQge2xhYmVsRW5kfSBmcm9tICcuL2xhYmVsLWVuZC5qcydcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgbGFiZWxTdGFydExpbmsgPSB7XG4gIG5hbWU6ICdsYWJlbFN0YXJ0TGluaycsXG4gIHJlc29sdmVBbGw6IGxhYmVsRW5kLnJlc29sdmVBbGwsXG4gIHRva2VuaXplOiB0b2tlbml6ZUxhYmVsU3RhcnRMaW5rXG59XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplTGFiZWxTdGFydExpbmsoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIHJldHVybiBzdGFydFxuXG4gIC8qKlxuICAgKiBTdGFydCBvZiBsYWJlbCAobGluaykgc3RhcnQuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIFtiXSBjXG4gICAqICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBhc3NlcnQoY29kZSA9PT0gY29kZXMubGVmdFNxdWFyZUJyYWNrZXQsICdleHBlY3RlZCBgW2AnKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMubGFiZWxMaW5rKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMubGFiZWxNYXJrZXIpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmxhYmVsTWFya2VyKVxuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5sYWJlbExpbmspXG4gICAgcmV0dXJuIGFmdGVyXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgLy8gVG8gZG86IHRoaXMgaXNu4oCZdCBuZWVkZWQgaW4gYG1pY3JvbWFyay1leHRlbnNpb24tZ2ZtLWZvb3Rub3RlYCxcbiAgICAvLyByZW1vdmUuXG4gICAgLy8gSGlkZGVuIGZvb3Rub3RlcyBob29rLlxuICAgIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbiAgICByZXR1cm4gY29kZSA9PT0gY29kZXMuY2FyZXQgJiZcbiAgICAgICdfaGlkZGVuRm9vdG5vdGVTdXBwb3J0JyBpbiBzZWxmLnBhcnNlci5jb25zdHJ1Y3RzXG4gICAgICA/IG5vayhjb2RlKVxuICAgICAgOiBvayhjb2RlKVxuICB9XG59XG4iXSwibmFtZXMiOlsib2siLCJhc3NlcnQiLCJjb2RlcyIsInR5cGVzIiwibGFiZWxFbmQiLCJsYWJlbFN0YXJ0TGluayIsIm5hbWUiLCJyZXNvbHZlQWxsIiwidG9rZW5pemUiLCJ0b2tlbml6ZUxhYmVsU3RhcnRMaW5rIiwiZWZmZWN0cyIsIm5vayIsInNlbGYiLCJzdGFydCIsImNvZGUiLCJsZWZ0U3F1YXJlQnJhY2tldCIsImVudGVyIiwibGFiZWxMaW5rIiwibGFiZWxNYXJrZXIiLCJjb25zdW1lIiwiZXhpdCIsImFmdGVyIiwiY2FyZXQiLCJwYXJzZXIiLCJjb25zdHJ1Y3RzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-start-link.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/line-ending.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/line-ending.js ***!
  \**************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   lineEnding: function() { return /* binding */ lineEnding; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const lineEnding = {\n    name: \"lineEnding\",\n    tokenize: tokenizeLineEnding\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeLineEnding(effects, ok) {\n    return start;\n    /** @type {State} */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code), \"expected eol\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__.factorySpace)(effects, ok, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvbGluZS1lbmRpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7OztDQU9DLEdBRWtDO0FBQ2lCO0FBQ087QUFDaEI7QUFFM0Msc0JBQXNCLEdBQ2YsTUFBTUssYUFBYTtJQUFDQyxNQUFNO0lBQWNDLFVBQVVDO0FBQWtCLEVBQUM7QUFFNUU7Ozs7Q0FJQyxHQUNELFNBQVNBLG1CQUFtQkMsT0FBTyxFQUFFVCxFQUFFO0lBQ3JDLE9BQU9VO0lBRVAsa0JBQWtCLEdBQ2xCLFNBQVNBLE1BQU1DLElBQUk7UUFDakJWLDBDQUFNQSxDQUFDRSw0RUFBa0JBLENBQUNRLE9BQU87UUFDakNGLFFBQVFHLEtBQUssQ0FBQ1Isd0RBQUtBLENBQUNDLFVBQVU7UUFDOUJJLFFBQVFJLE9BQU8sQ0FBQ0Y7UUFDaEJGLFFBQVFLLElBQUksQ0FBQ1Ysd0RBQUtBLENBQUNDLFVBQVU7UUFDN0IsT0FBT0gscUVBQVlBLENBQUNPLFNBQVNULElBQUlJLHdEQUFLQSxDQUFDVyxVQUFVO0lBQ25EO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9saW5lLWVuZGluZy5qcz8zYWIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvbnN0cnVjdCxcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZ30gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBsaW5lRW5kaW5nID0ge25hbWU6ICdsaW5lRW5kaW5nJywgdG9rZW5pemU6IHRva2VuaXplTGluZUVuZGluZ31cblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVMaW5lRW5kaW5nKGVmZmVjdHMsIG9rKSB7XG4gIHJldHVybiBzdGFydFxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBhc3NlcnQobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpLCAnZXhwZWN0ZWQgZW9sJylcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmxpbmVFbmRpbmcpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmxpbmVFbmRpbmcpXG4gICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBvaywgdHlwZXMubGluZVByZWZpeClcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm9rIiwiYXNzZXJ0IiwiZmFjdG9yeVNwYWNlIiwibWFya2Rvd25MaW5lRW5kaW5nIiwidHlwZXMiLCJsaW5lRW5kaW5nIiwibmFtZSIsInRva2VuaXplIiwidG9rZW5pemVMaW5lRW5kaW5nIiwiZWZmZWN0cyIsInN0YXJ0IiwiY29kZSIsImVudGVyIiwiY29uc3VtZSIsImV4aXQiLCJsaW5lUHJlZml4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/line-ending.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/list.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/list.js ***!
  \*******************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   list: function() { return /* binding */ list; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/* harmony import */ var _blank_line_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./blank-line.js */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/blank-line.js\");\n/* harmony import */ var _thematic_break_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./thematic-break.js */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/thematic-break.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n\n\n/** @type {Construct} */ const list = {\n    continuation: {\n        tokenize: tokenizeListContinuation\n    },\n    exit: tokenizeListEnd,\n    name: \"list\",\n    tokenize: tokenizeListStart\n};\n/** @type {Construct} */ const listItemPrefixWhitespaceConstruct = {\n    partial: true,\n    tokenize: tokenizeListItemPrefixWhitespace\n};\n/** @type {Construct} */ const indentConstruct = {\n    partial: true,\n    tokenize: tokenizeIndent\n};\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeListStart(effects, ok, nok) {\n    const self = this;\n    const tail = self.events[self.events.length - 1];\n    let initialSize = tail && tail[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.linePrefix ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    let size = 0;\n    return start;\n    /** @type {State} */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        const kind = self.containerState.type || (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.plusSign || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listUnordered : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listOrdered);\n        if (kind === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listUnordered ? !self.containerState.marker || code === self.containerState.marker : (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiDigit)(code)) {\n            if (!self.containerState.type) {\n                self.containerState.type = kind;\n                effects.enter(kind, {\n                    _container: true\n                });\n            }\n            if (kind === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listUnordered) {\n                effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemPrefix);\n                return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash ? effects.check(_thematic_break_js__WEBPACK_IMPORTED_MODULE_4__.thematicBreak, nok, atMarker)(code) : atMarker(code);\n            }\n            if (!self.interrupt || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.digit1) {\n                effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemPrefix);\n                effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemValue);\n                return inside(code);\n            }\n        }\n        return nok(code);\n    }\n    /** @type {State} */ function inside(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiDigit)(code) && ++size < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.constants.listItemValueSizeMax) {\n            effects.consume(code);\n            return inside;\n        }\n        if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.rightParenthesis || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dot)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemValue);\n            return atMarker(code);\n        }\n        return nok(code);\n    }\n    /**\n   * @type {State}\n   **/ function atMarker(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof, \"eof (`null`) is not a marker\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemMarker);\n        self.containerState.marker = self.containerState.marker || code;\n        return effects.check(_blank_line_js__WEBPACK_IMPORTED_MODULE_6__.blankLine, // Can’t be empty when interrupting.\n        self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n    }\n    /** @type {State} */ function onBlank(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        self.containerState.initialBlankLine = true;\n        initialSize++;\n        return endOfPrefix(code);\n    }\n    /** @type {State} */ function otherPrefix(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemPrefixWhitespace);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemPrefixWhitespace);\n            return endOfPrefix;\n        }\n        return nok(code);\n    }\n    /** @type {State} */ function endOfPrefix(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        self.containerState.size = initialSize + self.sliceSerialize(effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemPrefix), true).length;\n        return ok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeListContinuation(effects, ok, nok) {\n    const self = this;\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n    self.containerState._closeFlow = undefined;\n    return effects.check(_blank_line_js__WEBPACK_IMPORTED_MODULE_6__.blankLine, onBlank, notBlank);\n    /** @type {State} */ function onBlank(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(typeof self.containerState.size === \"number\", \"expected size\");\n        self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n        // We have a blank line.\n        // Still, try to consume at most the items size.\n        return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__.factorySpace)(effects, ok, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemIndent, self.containerState.size + 1)(code);\n    }\n    /** @type {State} */ function notBlank(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        if (self.containerState.furtherBlankLines || !(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            self.containerState.furtherBlankLines = undefined;\n            self.containerState.initialBlankLine = undefined;\n            return notInCurrentItem(code);\n        }\n        self.containerState.furtherBlankLines = undefined;\n        self.containerState.initialBlankLine = undefined;\n        return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n    }\n    /** @type {State} */ function notInCurrentItem(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        // While we do continue, we signal that the flow should be closed.\n        self.containerState._closeFlow = true;\n        // As we’re closing flow, we’re no longer interrupting.\n        self.interrupt = undefined;\n        // Always populated by defaults.\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.parser.constructs.disable.null, \"expected `disable.null` to be populated\");\n        return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__.factorySpace)(effects, effects.attempt(list, ok, nok), micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.linePrefix, self.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.constants.tabSize)(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeIndent(effects, ok, nok) {\n    const self = this;\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(typeof self.containerState.size === \"number\", \"expected size\");\n    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__.factorySpace)(effects, afterPrefix, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemIndent, self.containerState.size + 1);\n    /** @type {State} */ function afterPrefix(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        const tail = self.events[self.events.length - 1];\n        return tail && tail[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemIndent && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */ function tokenizeListEnd(effects) {\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(this.containerState, \"expected state\");\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(typeof this.containerState.type === \"string\", \"expected type\");\n    effects.exit(this.containerState.type);\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n    const self = this;\n    // Always populated by defaults.\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.parser.constructs.disable.null, \"expected `disable.null` to be populated\");\n    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__.factorySpace)(effects, afterPrefix, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemPrefixWhitespace, self.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.constants.tabSize + 1);\n    /** @type {State} */ function afterPrefix(code) {\n        const tail = self.events[self.events.length - 1];\n        return !(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code) && tail && tail[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemPrefixWhitespace ? ok(code) : nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/list.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/setext-underline.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/setext-underline.js ***!
  \*******************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setextUnderline: function() { return /* binding */ setextUnderline; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const setextUnderline = {\n    name: \"setextUnderline\",\n    resolveTo: resolveToSetextUnderline,\n    tokenize: tokenizeSetextUnderline\n};\n/** @type {Resolver} */ function resolveToSetextUnderline(events, context) {\n    // To do: resolve like `markdown-rs`.\n    let index = events.length;\n    /** @type {number | undefined} */ let content;\n    /** @type {number | undefined} */ let text;\n    /** @type {number | undefined} */ let definition;\n    // Find the opening of the content.\n    // It’ll always exist: we don’t tokenize if it isn’t there.\n    while(index--){\n        if (events[index][0] === \"enter\") {\n            if (events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.content) {\n                content = index;\n                break;\n            }\n            if (events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.paragraph) {\n                text = index;\n            }\n        } else {\n            if (events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.content) {\n                // Remove the content end (if needed we’ll add it later)\n                events.splice(index, 1);\n            }\n            if (!definition && events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definition) {\n                definition = index;\n            }\n        }\n    }\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(text !== undefined, \"expected a `text` index to be found\");\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(content !== undefined, \"expected a `text` index to be found\");\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(events[content][2] === context, \"enter context should be same\");\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(events[events.length - 1][2] === context, \"enter context should be same\");\n    const heading = {\n        type: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.setextHeading,\n        start: {\n            ...events[content][1].start\n        },\n        end: {\n            ...events[events.length - 1][1].end\n        }\n    };\n    // Change the paragraph to setext heading text.\n    events[text][1].type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.setextHeadingText;\n    // If we have definitions in the content, we’ll keep on having content,\n    // but we need move it.\n    if (definition) {\n        events.splice(text, 0, [\n            \"enter\",\n            heading,\n            context\n        ]);\n        events.splice(definition + 1, 0, [\n            \"exit\",\n            events[content][1],\n            context\n        ]);\n        events[content][1].end = {\n            ...events[definition][1].end\n        };\n    } else {\n        events[content][1] = heading;\n    }\n    // Add the heading exit at the end.\n    events.push([\n        \"exit\",\n        heading,\n        context\n    ]);\n    return events;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeSetextUnderline(effects, ok, nok) {\n    const self = this;\n    /** @type {NonNullable<Code>} */ let marker;\n    return start;\n    /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        let index = self.events.length;\n        /** @type {boolean | undefined} */ let paragraph;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.equalsTo, \"expected `=` or `-`\");\n        // Find an opening.\n        while(index--){\n            // Skip enter/exit of line ending, line prefix, and content.\n            // We can now either have a definition or a paragraph.\n            if (self.events[index][1].type !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding && self.events[index][1].type !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.linePrefix && self.events[index][1].type !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.content) {\n                paragraph = self.events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.paragraph;\n                break;\n            }\n        }\n        // To do: handle lazy/pierce like `markdown-rs`.\n        // To do: parse indent like `markdown-rs`.\n        if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.setextHeadingLine);\n            marker = code;\n            return before(code);\n        }\n        return nok(code);\n    }\n    /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.setextHeadingLineSequence);\n        return inside(code);\n    }\n    /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function inside(code) {\n        if (code === marker) {\n            effects.consume(code);\n            return inside;\n        }\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.setextHeadingLineSequence);\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, after, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineSuffix)(code) : after(code);\n    }\n    /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.setextHeadingLine);\n            return ok(code);\n        }\n        return nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvc2V0ZXh0LXVuZGVybGluZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7O0NBU0MsR0FFa0M7QUFDaUI7QUFDc0I7QUFDeEI7QUFFbEQsc0JBQXNCLEdBQ2YsTUFBTU8sa0JBQWtCO0lBQzdCQyxNQUFNO0lBQ05DLFdBQVdDO0lBQ1hDLFVBQVVDO0FBQ1osRUFBQztBQUVELHFCQUFxQixHQUNyQixTQUFTRix5QkFBeUJHLE1BQU0sRUFBRUMsT0FBTztJQUMvQyxxQ0FBcUM7SUFDckMsSUFBSUMsUUFBUUYsT0FBT0csTUFBTTtJQUN6QiwrQkFBK0IsR0FDL0IsSUFBSUM7SUFDSiwrQkFBK0IsR0FDL0IsSUFBSUM7SUFDSiwrQkFBK0IsR0FDL0IsSUFBSUM7SUFFSixtQ0FBbUM7SUFDbkMsMkRBQTJEO0lBQzNELE1BQU9KLFFBQVM7UUFDZCxJQUFJRixNQUFNLENBQUNFLE1BQU0sQ0FBQyxFQUFFLEtBQUssU0FBUztZQUNoQyxJQUFJRixNQUFNLENBQUNFLE1BQU0sQ0FBQyxFQUFFLENBQUNLLElBQUksS0FBS2Qsd0RBQUtBLENBQUNXLE9BQU8sRUFBRTtnQkFDM0NBLFVBQVVGO2dCQUNWO1lBQ0Y7WUFFQSxJQUFJRixNQUFNLENBQUNFLE1BQU0sQ0FBQyxFQUFFLENBQUNLLElBQUksS0FBS2Qsd0RBQUtBLENBQUNlLFNBQVMsRUFBRTtnQkFDN0NILE9BQU9IO1lBQ1Q7UUFDRixPQUVLO1lBQ0gsSUFBSUYsTUFBTSxDQUFDRSxNQUFNLENBQUMsRUFBRSxDQUFDSyxJQUFJLEtBQUtkLHdEQUFLQSxDQUFDVyxPQUFPLEVBQUU7Z0JBQzNDLHdEQUF3RDtnQkFDeERKLE9BQU9TLE1BQU0sQ0FBQ1AsT0FBTztZQUN2QjtZQUVBLElBQUksQ0FBQ0ksY0FBY04sTUFBTSxDQUFDRSxNQUFNLENBQUMsRUFBRSxDQUFDSyxJQUFJLEtBQUtkLHdEQUFLQSxDQUFDYSxVQUFVLEVBQUU7Z0JBQzdEQSxhQUFhSjtZQUNmO1FBQ0Y7SUFDRjtJQUVBZCwwQ0FBTUEsQ0FBQ2lCLFNBQVNLLFdBQVc7SUFDM0J0QiwwQ0FBTUEsQ0FBQ2dCLFlBQVlNLFdBQVc7SUFDOUJ0QiwwQ0FBTUEsQ0FBQ1ksTUFBTSxDQUFDSSxRQUFRLENBQUMsRUFBRSxLQUFLSCxTQUFTO0lBQ3ZDYiwwQ0FBTUEsQ0FDSlksTUFBTSxDQUFDQSxPQUFPRyxNQUFNLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBS0YsU0FDakM7SUFFRixNQUFNVSxVQUFVO1FBQ2RKLE1BQU1kLHdEQUFLQSxDQUFDbUIsYUFBYTtRQUN6QkMsT0FBTztZQUFDLEdBQUdiLE1BQU0sQ0FBQ0ksUUFBUSxDQUFDLEVBQUUsQ0FBQ1MsS0FBSztRQUFBO1FBQ25DQyxLQUFLO1lBQUMsR0FBR2QsTUFBTSxDQUFDQSxPQUFPRyxNQUFNLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQ1csR0FBRztRQUFBO0lBQzNDO0lBRUEsK0NBQStDO0lBQy9DZCxNQUFNLENBQUNLLEtBQUssQ0FBQyxFQUFFLENBQUNFLElBQUksR0FBR2Qsd0RBQUtBLENBQUNzQixpQkFBaUI7SUFFOUMsdUVBQXVFO0lBQ3ZFLHVCQUF1QjtJQUN2QixJQUFJVCxZQUFZO1FBQ2ROLE9BQU9TLE1BQU0sQ0FBQ0osTUFBTSxHQUFHO1lBQUM7WUFBU007WUFBU1Y7U0FBUTtRQUNsREQsT0FBT1MsTUFBTSxDQUFDSCxhQUFhLEdBQUcsR0FBRztZQUFDO1lBQVFOLE1BQU0sQ0FBQ0ksUUFBUSxDQUFDLEVBQUU7WUFBRUg7U0FBUTtRQUN0RUQsTUFBTSxDQUFDSSxRQUFRLENBQUMsRUFBRSxDQUFDVSxHQUFHLEdBQUc7WUFBQyxHQUFHZCxNQUFNLENBQUNNLFdBQVcsQ0FBQyxFQUFFLENBQUNRLEdBQUc7UUFBQTtJQUN4RCxPQUFPO1FBQ0xkLE1BQU0sQ0FBQ0ksUUFBUSxDQUFDLEVBQUUsR0FBR087SUFDdkI7SUFFQSxtQ0FBbUM7SUFDbkNYLE9BQU9nQixJQUFJLENBQUM7UUFBQztRQUFRTDtRQUFTVjtLQUFRO0lBRXRDLE9BQU9EO0FBQ1Q7QUFFQTs7OztDQUlDLEdBQ0QsU0FBU0Qsd0JBQXdCa0IsT0FBTyxFQUFFOUIsRUFBRSxFQUFFK0IsR0FBRztJQUMvQyxNQUFNQyxPQUFPLElBQUk7SUFDakIsOEJBQThCLEdBQzlCLElBQUlDO0lBRUosT0FBT1A7SUFFUDs7Ozs7Ozs7OztHQVVDLEdBQ0QsU0FBU0EsTUFBTVEsSUFBSTtRQUNqQixJQUFJbkIsUUFBUWlCLEtBQUtuQixNQUFNLENBQUNHLE1BQU07UUFDOUIsZ0NBQWdDLEdBQ2hDLElBQUlLO1FBRUpwQiwwQ0FBTUEsQ0FDSmlDLFNBQVM3Qix3REFBS0EsQ0FBQzhCLElBQUksSUFBSUQsU0FBUzdCLHdEQUFLQSxDQUFDK0IsUUFBUSxFQUM5QztRQUdGLG1CQUFtQjtRQUNuQixNQUFPckIsUUFBUztZQUNkLDREQUE0RDtZQUM1RCxzREFBc0Q7WUFDdEQsSUFDRWlCLEtBQUtuQixNQUFNLENBQUNFLE1BQU0sQ0FBQyxFQUFFLENBQUNLLElBQUksS0FBS2Qsd0RBQUtBLENBQUMrQixVQUFVLElBQy9DTCxLQUFLbkIsTUFBTSxDQUFDRSxNQUFNLENBQUMsRUFBRSxDQUFDSyxJQUFJLEtBQUtkLHdEQUFLQSxDQUFDZ0MsVUFBVSxJQUMvQ04sS0FBS25CLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLEVBQUUsQ0FBQ0ssSUFBSSxLQUFLZCx3REFBS0EsQ0FBQ1csT0FBTyxFQUM1QztnQkFDQUksWUFBWVcsS0FBS25CLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLEVBQUUsQ0FBQ0ssSUFBSSxLQUFLZCx3REFBS0EsQ0FBQ2UsU0FBUztnQkFDMUQ7WUFDRjtRQUNGO1FBRUEsZ0RBQWdEO1FBQ2hELDBDQUEwQztRQUMxQyxJQUFJLENBQUNXLEtBQUtPLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDUixLQUFLUyxHQUFHLEdBQUdDLElBQUksQ0FBQyxJQUFLVixDQUFBQSxLQUFLVyxTQUFTLElBQUl0QixTQUFRLEdBQUk7WUFDdkVTLFFBQVFjLEtBQUssQ0FBQ3RDLHdEQUFLQSxDQUFDdUMsaUJBQWlCO1lBQ3JDWixTQUFTQztZQUNULE9BQU9ZLE9BQU9aO1FBQ2hCO1FBRUEsT0FBT0gsSUFBSUc7SUFDYjtJQUVBOzs7Ozs7Ozs7O0dBVUMsR0FDRCxTQUFTWSxPQUFPWixJQUFJO1FBQ2xCSixRQUFRYyxLQUFLLENBQUN0Qyx3REFBS0EsQ0FBQ3lDLHlCQUF5QjtRQUM3QyxPQUFPQyxPQUFPZDtJQUNoQjtJQUVBOzs7Ozs7Ozs7O0dBVUMsR0FDRCxTQUFTYyxPQUFPZCxJQUFJO1FBQ2xCLElBQUlBLFNBQVNELFFBQVE7WUFDbkJILFFBQVFtQixPQUFPLENBQUNmO1lBQ2hCLE9BQU9jO1FBQ1Q7UUFFQWxCLFFBQVFvQixJQUFJLENBQUM1Qyx3REFBS0EsQ0FBQ3lDLHlCQUF5QjtRQUU1QyxPQUFPM0MsdUVBQWFBLENBQUM4QixRQUNqQmhDLHFFQUFZQSxDQUFDNEIsU0FBU3FCLE9BQU83Qyx3REFBS0EsQ0FBQzhDLFVBQVUsRUFBRWxCLFFBQy9DaUIsTUFBTWpCO0lBQ1o7SUFFQTs7Ozs7Ozs7OztHQVVDLEdBQ0QsU0FBU2lCLE1BQU1qQixJQUFJO1FBQ2pCLElBQUlBLFNBQVM3Qix3REFBS0EsQ0FBQ2dELEdBQUcsSUFBSWxELDRFQUFrQkEsQ0FBQytCLE9BQU87WUFDbERKLFFBQVFvQixJQUFJLENBQUM1Qyx3REFBS0EsQ0FBQ3VDLGlCQUFpQjtZQUNwQyxPQUFPN0MsR0FBR2tDO1FBQ1o7UUFFQSxPQUFPSCxJQUFJRztJQUNiO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9zZXRleHQtdW5kZXJsaW5lLmpzP2ZkYTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgQ29kZSxcbiAqICAgQ29uc3RydWN0LFxuICogICBSZXNvbHZlcixcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZywgbWFya2Rvd25TcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2RlcywgdHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbCdcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3Qgc2V0ZXh0VW5kZXJsaW5lID0ge1xuICBuYW1lOiAnc2V0ZXh0VW5kZXJsaW5lJyxcbiAgcmVzb2x2ZVRvOiByZXNvbHZlVG9TZXRleHRVbmRlcmxpbmUsXG4gIHRva2VuaXplOiB0b2tlbml6ZVNldGV4dFVuZGVybGluZVxufVxuXG4vKiogQHR5cGUge1Jlc29sdmVyfSAqL1xuZnVuY3Rpb24gcmVzb2x2ZVRvU2V0ZXh0VW5kZXJsaW5lKGV2ZW50cywgY29udGV4dCkge1xuICAvLyBUbyBkbzogcmVzb2x2ZSBsaWtlIGBtYXJrZG93bi1yc2AuXG4gIGxldCBpbmRleCA9IGV2ZW50cy5sZW5ndGhcbiAgLyoqIEB0eXBlIHtudW1iZXIgfCB1bmRlZmluZWR9ICovXG4gIGxldCBjb250ZW50XG4gIC8qKiBAdHlwZSB7bnVtYmVyIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgdGV4dFxuICAvKiogQHR5cGUge251bWJlciB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IGRlZmluaXRpb25cblxuICAvLyBGaW5kIHRoZSBvcGVuaW5nIG9mIHRoZSBjb250ZW50LlxuICAvLyBJdOKAmWxsIGFsd2F5cyBleGlzdDogd2UgZG9u4oCZdCB0b2tlbml6ZSBpZiBpdCBpc27igJl0IHRoZXJlLlxuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIGlmIChldmVudHNbaW5kZXhdWzBdID09PSAnZW50ZXInKSB7XG4gICAgICBpZiAoZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSB0eXBlcy5jb250ZW50KSB7XG4gICAgICAgIGNvbnRlbnQgPSBpbmRleFxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSB0eXBlcy5wYXJhZ3JhcGgpIHtcbiAgICAgICAgdGV4dCA9IGluZGV4XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEV4aXRcbiAgICBlbHNlIHtcbiAgICAgIGlmIChldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09IHR5cGVzLmNvbnRlbnQpIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBjb250ZW50IGVuZCAoaWYgbmVlZGVkIHdl4oCZbGwgYWRkIGl0IGxhdGVyKVxuICAgICAgICBldmVudHMuc3BsaWNlKGluZGV4LCAxKVxuICAgICAgfVxuXG4gICAgICBpZiAoIWRlZmluaXRpb24gJiYgZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSB0eXBlcy5kZWZpbml0aW9uKSB7XG4gICAgICAgIGRlZmluaXRpb24gPSBpbmRleFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzc2VydCh0ZXh0ICE9PSB1bmRlZmluZWQsICdleHBlY3RlZCBhIGB0ZXh0YCBpbmRleCB0byBiZSBmb3VuZCcpXG4gIGFzc2VydChjb250ZW50ICE9PSB1bmRlZmluZWQsICdleHBlY3RlZCBhIGB0ZXh0YCBpbmRleCB0byBiZSBmb3VuZCcpXG4gIGFzc2VydChldmVudHNbY29udGVudF1bMl0gPT09IGNvbnRleHQsICdlbnRlciBjb250ZXh0IHNob3VsZCBiZSBzYW1lJylcbiAgYXNzZXJ0KFxuICAgIGV2ZW50c1tldmVudHMubGVuZ3RoIC0gMV1bMl0gPT09IGNvbnRleHQsXG4gICAgJ2VudGVyIGNvbnRleHQgc2hvdWxkIGJlIHNhbWUnXG4gIClcbiAgY29uc3QgaGVhZGluZyA9IHtcbiAgICB0eXBlOiB0eXBlcy5zZXRleHRIZWFkaW5nLFxuICAgIHN0YXJ0OiB7Li4uZXZlbnRzW2NvbnRlbnRdWzFdLnN0YXJ0fSxcbiAgICBlbmQ6IHsuLi5ldmVudHNbZXZlbnRzLmxlbmd0aCAtIDFdWzFdLmVuZH1cbiAgfVxuXG4gIC8vIENoYW5nZSB0aGUgcGFyYWdyYXBoIHRvIHNldGV4dCBoZWFkaW5nIHRleHQuXG4gIGV2ZW50c1t0ZXh0XVsxXS50eXBlID0gdHlwZXMuc2V0ZXh0SGVhZGluZ1RleHRcblxuICAvLyBJZiB3ZSBoYXZlIGRlZmluaXRpb25zIGluIHRoZSBjb250ZW50LCB3ZeKAmWxsIGtlZXAgb24gaGF2aW5nIGNvbnRlbnQsXG4gIC8vIGJ1dCB3ZSBuZWVkIG1vdmUgaXQuXG4gIGlmIChkZWZpbml0aW9uKSB7XG4gICAgZXZlbnRzLnNwbGljZSh0ZXh0LCAwLCBbJ2VudGVyJywgaGVhZGluZywgY29udGV4dF0pXG4gICAgZXZlbnRzLnNwbGljZShkZWZpbml0aW9uICsgMSwgMCwgWydleGl0JywgZXZlbnRzW2NvbnRlbnRdWzFdLCBjb250ZXh0XSlcbiAgICBldmVudHNbY29udGVudF1bMV0uZW5kID0gey4uLmV2ZW50c1tkZWZpbml0aW9uXVsxXS5lbmR9XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzW2NvbnRlbnRdWzFdID0gaGVhZGluZ1xuICB9XG5cbiAgLy8gQWRkIHRoZSBoZWFkaW5nIGV4aXQgYXQgdGhlIGVuZC5cbiAgZXZlbnRzLnB1c2goWydleGl0JywgaGVhZGluZywgY29udGV4dF0pXG5cbiAgcmV0dXJuIGV2ZW50c1xufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZVNldGV4dFVuZGVybGluZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIC8qKiBAdHlwZSB7Tm9uTnVsbGFibGU8Q29kZT59ICovXG4gIGxldCBtYXJrZXJcblxuICByZXR1cm4gc3RhcnRcblxuICAvKipcbiAgICogQXQgc3RhcnQgb2YgaGVhZGluZyAoc2V0ZXh0KSB1bmRlcmxpbmUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqICAgfCBhYVxuICAgKiA+IHwgPT1cbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBsZXQgaW5kZXggPSBzZWxmLmV2ZW50cy5sZW5ndGhcbiAgICAvKiogQHR5cGUge2Jvb2xlYW4gfCB1bmRlZmluZWR9ICovXG4gICAgbGV0IHBhcmFncmFwaFxuXG4gICAgYXNzZXJ0KFxuICAgICAgY29kZSA9PT0gY29kZXMuZGFzaCB8fCBjb2RlID09PSBjb2Rlcy5lcXVhbHNUbyxcbiAgICAgICdleHBlY3RlZCBgPWAgb3IgYC1gJ1xuICAgIClcblxuICAgIC8vIEZpbmQgYW4gb3BlbmluZy5cbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgLy8gU2tpcCBlbnRlci9leGl0IG9mIGxpbmUgZW5kaW5nLCBsaW5lIHByZWZpeCwgYW5kIGNvbnRlbnQuXG4gICAgICAvLyBXZSBjYW4gbm93IGVpdGhlciBoYXZlIGEgZGVmaW5pdGlvbiBvciBhIHBhcmFncmFwaC5cbiAgICAgIGlmIChcbiAgICAgICAgc2VsZi5ldmVudHNbaW5kZXhdWzFdLnR5cGUgIT09IHR5cGVzLmxpbmVFbmRpbmcgJiZcbiAgICAgICAgc2VsZi5ldmVudHNbaW5kZXhdWzFdLnR5cGUgIT09IHR5cGVzLmxpbmVQcmVmaXggJiZcbiAgICAgICAgc2VsZi5ldmVudHNbaW5kZXhdWzFdLnR5cGUgIT09IHR5cGVzLmNvbnRlbnRcbiAgICAgICkge1xuICAgICAgICBwYXJhZ3JhcGggPSBzZWxmLmV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gdHlwZXMucGFyYWdyYXBoXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVG8gZG86IGhhbmRsZSBsYXp5L3BpZXJjZSBsaWtlIGBtYXJrZG93bi1yc2AuXG4gICAgLy8gVG8gZG86IHBhcnNlIGluZGVudCBsaWtlIGBtYXJrZG93bi1yc2AuXG4gICAgaWYgKCFzZWxmLnBhcnNlci5sYXp5W3NlbGYubm93KCkubGluZV0gJiYgKHNlbGYuaW50ZXJydXB0IHx8IHBhcmFncmFwaCkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuc2V0ZXh0SGVhZGluZ0xpbmUpXG4gICAgICBtYXJrZXIgPSBjb2RlXG4gICAgICByZXR1cm4gYmVmb3JlKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIG9wdGlvbmFsIHdoaXRlc3BhY2UsIGF0IGAtYCBvciBgPWAuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqICAgfCBhYVxuICAgKiA+IHwgPT1cbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGJlZm9yZShjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5zZXRleHRIZWFkaW5nTGluZVNlcXVlbmNlKVxuICAgIHJldHVybiBpbnNpZGUoY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBzZXF1ZW5jZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogICB8IGFhXG4gICAqID4gfCA9PVxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gaW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBpbnNpZGVcbiAgICB9XG5cbiAgICBlZmZlY3RzLmV4aXQodHlwZXMuc2V0ZXh0SGVhZGluZ0xpbmVTZXF1ZW5jZSlcblxuICAgIHJldHVybiBtYXJrZG93blNwYWNlKGNvZGUpXG4gICAgICA/IGZhY3RvcnlTcGFjZShlZmZlY3RzLCBhZnRlciwgdHlwZXMubGluZVN1ZmZpeCkoY29kZSlcbiAgICAgIDogYWZ0ZXIoY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBzZXF1ZW5jZSwgYWZ0ZXIgb3B0aW9uYWwgd2hpdGVzcGFjZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogICB8IGFhXG4gICAqID4gfCA9PVxuICAgKiAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmVvZiB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5zZXRleHRIZWFkaW5nTGluZSlcbiAgICAgIHJldHVybiBvayhjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm9rIiwiYXNzZXJ0IiwiZmFjdG9yeVNwYWNlIiwibWFya2Rvd25MaW5lRW5kaW5nIiwibWFya2Rvd25TcGFjZSIsImNvZGVzIiwidHlwZXMiLCJzZXRleHRVbmRlcmxpbmUiLCJuYW1lIiwicmVzb2x2ZVRvIiwicmVzb2x2ZVRvU2V0ZXh0VW5kZXJsaW5lIiwidG9rZW5pemUiLCJ0b2tlbml6ZVNldGV4dFVuZGVybGluZSIsImV2ZW50cyIsImNvbnRleHQiLCJpbmRleCIsImxlbmd0aCIsImNvbnRlbnQiLCJ0ZXh0IiwiZGVmaW5pdGlvbiIsInR5cGUiLCJwYXJhZ3JhcGgiLCJzcGxpY2UiLCJ1bmRlZmluZWQiLCJoZWFkaW5nIiwic2V0ZXh0SGVhZGluZyIsInN0YXJ0IiwiZW5kIiwic2V0ZXh0SGVhZGluZ1RleHQiLCJwdXNoIiwiZWZmZWN0cyIsIm5vayIsInNlbGYiLCJtYXJrZXIiLCJjb2RlIiwiZGFzaCIsImVxdWFsc1RvIiwibGluZUVuZGluZyIsImxpbmVQcmVmaXgiLCJwYXJzZXIiLCJsYXp5Iiwibm93IiwibGluZSIsImludGVycnVwdCIsImVudGVyIiwic2V0ZXh0SGVhZGluZ0xpbmUiLCJiZWZvcmUiLCJzZXRleHRIZWFkaW5nTGluZVNlcXVlbmNlIiwiaW5zaWRlIiwiY29uc3VtZSIsImV4aXQiLCJhZnRlciIsImxpbmVTdWZmaXgiLCJlb2YiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/setext-underline.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/thematic-break.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/thematic-break.js ***!
  \*****************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   thematicBreak: function() { return /* binding */ thematicBreak; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const thematicBreak = {\n    name: \"thematicBreak\",\n    tokenize: tokenizeThematicBreak\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeThematicBreak(effects, ok, nok) {\n    let size = 0;\n    /** @type {NonNullable<Code>} */ let marker;\n    return start;\n    /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.thematicBreak);\n        // To do: parse indent like `markdown-rs`.\n        return before(code);\n    }\n    /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.underscore, \"expected `*`, `-`, or `_`\");\n        marker = code;\n        return atBreak(code);\n    }\n    /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function atBreak(code) {\n        if (code === marker) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.thematicBreakSequence);\n            return sequence(code);\n        }\n        if (size >= micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.thematicBreakMarkerCountMin && (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code))) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.thematicBreak);\n            return ok(code);\n        }\n        return nok(code);\n    }\n    /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function sequence(code) {\n        if (code === marker) {\n            effects.consume(code);\n            size++;\n            return sequence;\n        }\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.thematicBreakSequence);\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, atBreak, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.whitespace)(code) : atBreak(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvdGhlbWF0aWMtYnJlYWsuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7Ozs7OztDQVFDLEdBRWtDO0FBQ2lCO0FBQ3NCO0FBQ2I7QUFFN0Qsc0JBQXNCLEdBQ2YsTUFBTVEsZ0JBQWdCO0lBQzNCQyxNQUFNO0lBQ05DLFVBQVVDO0FBQ1osRUFBQztBQUVEOzs7O0NBSUMsR0FDRCxTQUFTQSxzQkFBc0JDLE9BQU8sRUFBRVosRUFBRSxFQUFFYSxHQUFHO0lBQzdDLElBQUlDLE9BQU87SUFDWCw4QkFBOEIsR0FDOUIsSUFBSUM7SUFFSixPQUFPQztJQUVQOzs7Ozs7Ozs7R0FTQyxHQUNELFNBQVNBLE1BQU1DLElBQUk7UUFDakJMLFFBQVFNLEtBQUssQ0FBQ1gsd0RBQUtBLENBQUNDLGFBQWE7UUFDakMsMENBQTBDO1FBQzFDLE9BQU9XLE9BQU9GO0lBQ2hCO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU0UsT0FBT0YsSUFBSTtRQUNsQmhCLDBDQUFNQSxDQUNKZ0IsU0FBU1osd0RBQUtBLENBQUNlLFFBQVEsSUFDckJILFNBQVNaLHdEQUFLQSxDQUFDZ0IsSUFBSSxJQUNuQkosU0FBU1osd0RBQUtBLENBQUNpQixVQUFVLEVBQzNCO1FBRUZQLFNBQVNFO1FBQ1QsT0FBT00sUUFBUU47SUFDakI7SUFFQTs7Ozs7Ozs7O0dBU0MsR0FDRCxTQUFTTSxRQUFRTixJQUFJO1FBQ25CLElBQUlBLFNBQVNGLFFBQVE7WUFDbkJILFFBQVFNLEtBQUssQ0FBQ1gsd0RBQUtBLENBQUNpQixxQkFBcUI7WUFDekMsT0FBT0MsU0FBU1I7UUFDbEI7UUFFQSxJQUNFSCxRQUFRUiw0REFBU0EsQ0FBQ29CLDJCQUEyQixJQUM1Q1QsQ0FBQUEsU0FBU1osd0RBQUtBLENBQUNzQixHQUFHLElBQUl4Qiw0RUFBa0JBLENBQUNjLEtBQUksR0FDOUM7WUFDQUwsUUFBUWdCLElBQUksQ0FBQ3JCLHdEQUFLQSxDQUFDQyxhQUFhO1lBQ2hDLE9BQU9SLEdBQUdpQjtRQUNaO1FBRUEsT0FBT0osSUFBSUk7SUFDYjtJQUVBOzs7Ozs7Ozs7R0FTQyxHQUNELFNBQVNRLFNBQVNSLElBQUk7UUFDcEIsSUFBSUEsU0FBU0YsUUFBUTtZQUNuQkgsUUFBUWlCLE9BQU8sQ0FBQ1o7WUFDaEJIO1lBQ0EsT0FBT1c7UUFDVDtRQUVBYixRQUFRZ0IsSUFBSSxDQUFDckIsd0RBQUtBLENBQUNpQixxQkFBcUI7UUFDeEMsT0FBT3BCLHVFQUFhQSxDQUFDYSxRQUNqQmYscUVBQVlBLENBQUNVLFNBQVNXLFNBQVNoQix3REFBS0EsQ0FBQ3VCLFVBQVUsRUFBRWIsUUFDakRNLFFBQVFOO0lBQ2Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWNvcmUtY29tbW9ubWFya0AyLjAuMy9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9kZXYvbGliL3RoZW1hdGljLWJyZWFrLmpzP2RlZmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgQ29kZSxcbiAqICAgQ29uc3RydWN0LFxuICogICBTdGF0ZSxcbiAqICAgVG9rZW5pemVDb250ZXh0LFxuICogICBUb2tlbml6ZXJcbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcbmltcG9ydCB7ZmFjdG9yeVNwYWNlfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSdcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nLCBtYXJrZG93blNwYWNlfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge2NvZGVzLCBjb25zdGFudHMsIHR5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wnXG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IHRoZW1hdGljQnJlYWsgPSB7XG4gIG5hbWU6ICd0aGVtYXRpY0JyZWFrJyxcbiAgdG9rZW5pemU6IHRva2VuaXplVGhlbWF0aWNCcmVha1xufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZVRoZW1hdGljQnJlYWsoZWZmZWN0cywgb2ssIG5vaykge1xuICBsZXQgc2l6ZSA9IDBcbiAgLyoqIEB0eXBlIHtOb25OdWxsYWJsZTxDb2RlPn0gKi9cbiAgbGV0IG1hcmtlclxuXG4gIHJldHVybiBzdGFydFxuXG4gIC8qKlxuICAgKiBTdGFydCBvZiB0aGVtYXRpYyBicmVhay5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICoqKlxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMudGhlbWF0aWNCcmVhaylcbiAgICAvLyBUbyBkbzogcGFyc2UgaW5kZW50IGxpa2UgYG1hcmtkb3duLXJzYC5cbiAgICByZXR1cm4gYmVmb3JlKGNvZGUpXG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgb3B0aW9uYWwgd2hpdGVzcGFjZSwgYXQgbWFya2VyLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgKioqXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBiZWZvcmUoY29kZSkge1xuICAgIGFzc2VydChcbiAgICAgIGNvZGUgPT09IGNvZGVzLmFzdGVyaXNrIHx8XG4gICAgICAgIGNvZGUgPT09IGNvZGVzLmRhc2ggfHxcbiAgICAgICAgY29kZSA9PT0gY29kZXMudW5kZXJzY29yZSxcbiAgICAgICdleHBlY3RlZCBgKmAsIGAtYCwgb3IgYF9gJ1xuICAgIClcbiAgICBtYXJrZXIgPSBjb2RlXG4gICAgcmV0dXJuIGF0QnJlYWsoY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBzb21ldGhpbmcsIGJlZm9yZSBzb21ldGhpbmcgZWxzZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICoqKlxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYXRCcmVhayhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy50aGVtYXRpY0JyZWFrU2VxdWVuY2UpXG4gICAgICByZXR1cm4gc2VxdWVuY2UoY29kZSlcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBzaXplID49IGNvbnN0YW50cy50aGVtYXRpY0JyZWFrTWFya2VyQ291bnRNaW4gJiZcbiAgICAgIChjb2RlID09PSBjb2Rlcy5lb2YgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKVxuICAgICkge1xuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLnRoZW1hdGljQnJlYWspXG4gICAgICByZXR1cm4gb2soY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICAvKipcbiAgICogSW4gc2VxdWVuY2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCAqKipcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHNlcXVlbmNlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHNpemUrK1xuICAgICAgcmV0dXJuIHNlcXVlbmNlXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLnRoZW1hdGljQnJlYWtTZXF1ZW5jZSlcbiAgICByZXR1cm4gbWFya2Rvd25TcGFjZShjb2RlKVxuICAgICAgPyBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYXRCcmVhaywgdHlwZXMud2hpdGVzcGFjZSkoY29kZSlcbiAgICAgIDogYXRCcmVhayhjb2RlKVxuICB9XG59XG4iXSwibmFtZXMiOlsib2siLCJhc3NlcnQiLCJmYWN0b3J5U3BhY2UiLCJtYXJrZG93bkxpbmVFbmRpbmciLCJtYXJrZG93blNwYWNlIiwiY29kZXMiLCJjb25zdGFudHMiLCJ0eXBlcyIsInRoZW1hdGljQnJlYWsiLCJuYW1lIiwidG9rZW5pemUiLCJ0b2tlbml6ZVRoZW1hdGljQnJlYWsiLCJlZmZlY3RzIiwibm9rIiwic2l6ZSIsIm1hcmtlciIsInN0YXJ0IiwiY29kZSIsImVudGVyIiwiYmVmb3JlIiwiYXN0ZXJpc2siLCJkYXNoIiwidW5kZXJzY29yZSIsImF0QnJlYWsiLCJ0aGVtYXRpY0JyZWFrU2VxdWVuY2UiLCJzZXF1ZW5jZSIsInRoZW1hdGljQnJlYWtNYXJrZXJDb3VudE1pbiIsImVvZiIsImV4aXQiLCJjb25zdW1lIiwid2hpdGVzcGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/thematic-break.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-factory-destination@2.0.1/node_modules/micromark-factory-destination/dev/index.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-factory-destination@2.0.1/node_modules/micromark-factory-destination/dev/index.js ***!
  \************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   factoryDestination: function() { return /* binding */ factoryDestination; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */ \n\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n    const limit = max || Number.POSITIVE_INFINITY;\n    let balance = 0;\n    return start;\n    /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan) {\n            effects.enter(type);\n            effects.enter(literalType);\n            effects.enter(literalMarkerType);\n            effects.consume(code);\n            effects.exit(literalMarkerType);\n            return enclosedBefore;\n        }\n        // ASCII control, space, closing paren.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.space || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.rightParenthesis || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.asciiControl)(code)) {\n            return nok(code);\n        }\n        effects.enter(type);\n        effects.enter(rawType);\n        effects.enter(stringType);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString, {\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.contentTypeString\n        });\n        return raw(code);\n    }\n    /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function enclosedBefore(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.greaterThan) {\n            effects.enter(literalMarkerType);\n            effects.consume(code);\n            effects.exit(literalMarkerType);\n            effects.exit(literalType);\n            effects.exit(type);\n            return ok;\n        }\n        effects.enter(stringType);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString, {\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.contentTypeString\n        });\n        return enclosed(code);\n    }\n    /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function enclosed(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.greaterThan) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString);\n            effects.exit(stringType);\n            return enclosedBefore(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n            return nok(code);\n        }\n        effects.consume(code);\n        return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.backslash ? enclosedEscape : enclosed;\n    }\n    /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function enclosedEscape(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.backslash) {\n            effects.consume(code);\n            return enclosed;\n        }\n        return enclosed(code);\n    }\n    /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function raw(code) {\n        if (!balance && (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.rightParenthesis || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEndingOrSpace)(code))) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString);\n            effects.exit(stringType);\n            effects.exit(rawType);\n            effects.exit(type);\n            return ok(code);\n        }\n        if (balance < limit && code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftParenthesis) {\n            effects.consume(code);\n            balance++;\n            return raw;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.rightParenthesis) {\n            effects.consume(code);\n            balance--;\n            return raw;\n        }\n        // ASCII control (but *not* `\\0`) and space and `(`.\n        // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n        // doesn’t.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.space || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftParenthesis || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.asciiControl)(code)) {\n            return nok(code);\n        }\n        effects.consume(code);\n        return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.backslash ? rawEscape : raw;\n    }\n    /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function rawEscape(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftParenthesis || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.rightParenthesis || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.backslash) {\n            effects.consume(code);\n            return raw;\n        }\n        return raw(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-factory-destination@2.0.1/node_modules/micromark-factory-destination/dev/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-factory-label@2.0.1/node_modules/micromark-factory-label/dev/index.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-factory-label@2.0.1/node_modules/micromark-factory-label/dev/index.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   factoryLabel: function() { return /* binding */ factoryLabel; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */ \n\n\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n    const self = this;\n    let size = 0;\n    /** @type {boolean} */ let seen;\n    return start;\n    /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket, \"expected `[`\");\n        effects.enter(type);\n        effects.enter(markerType);\n        effects.consume(code);\n        effects.exit(markerType);\n        effects.enter(stringType);\n        return atBreak;\n    }\n    /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function atBreak(code) {\n        if (size > micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.constants.linkReferenceSizeMax || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket && !seen || // To do: remove in the future once we’ve switched from\n        // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n        // which doesn’t need this.\n        // Hidden footnotes hook.\n        /* c8 ignore next 3 */ code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.caret && !size && \"_hiddenFootnoteSupport\" in self.parser.constructs) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {\n            effects.exit(stringType);\n            effects.enter(markerType);\n            effects.consume(code);\n            effects.exit(markerType);\n            effects.exit(type);\n            return ok;\n        }\n        // To do: indent? Link chunks and EOLs together?\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding);\n            return atBreak;\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.chunkString, {\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.constants.contentTypeString\n        });\n        return labelInside(code);\n    }\n    /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function labelInside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code) || size++ > micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.constants.linkReferenceSizeMax) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.chunkString);\n            return atBreak(code);\n        }\n        effects.consume(code);\n        if (!seen) seen = !(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code);\n        return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.backslash ? labelEscape : labelInside;\n    }\n    /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function labelEscape(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.backslash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {\n            effects.consume(code);\n            size++;\n            return labelInside;\n        }\n        return labelInside(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-factory-label@2.0.1/node_modules/micromark-factory-label/dev/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   factorySpace: function() { return /* binding */ factorySpace; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */ \n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */ function factorySpace(effects, ok, type, max) {\n    const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n    let size = 0;\n    return start;\n    /** @type {State} */ function start(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_0__.markdownSpace)(code)) {\n            effects.enter(type);\n            return prefix(code);\n        }\n        return ok(code);\n    }\n    /** @type {State} */ function prefix(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_0__.markdownSpace)(code) && size++ < limit) {\n            effects.consume(code);\n            return prefix;\n        }\n        effects.exit(type);\n        return ok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstZmFjdG9yeS1zcGFjZUAyLjAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UvZGV2L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0NBRUMsR0FFcUQ7QUFFdEQsOEVBQThFO0FBRTlFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBK0JDLEdBQ00sU0FBU0MsYUFBYUMsT0FBTyxFQUFFQyxFQUFFLEVBQUVDLElBQUksRUFBRUMsR0FBRztJQUNqRCxNQUFNQyxRQUFRRCxNQUFNQSxNQUFNLElBQUlFLE9BQU9DLGlCQUFpQjtJQUN0RCxJQUFJQyxPQUFPO0lBRVgsT0FBT0M7SUFFUCxrQkFBa0IsR0FDbEIsU0FBU0EsTUFBTUMsSUFBSTtRQUNqQixJQUFJWCx1RUFBYUEsQ0FBQ1csT0FBTztZQUN2QlQsUUFBUVUsS0FBSyxDQUFDUjtZQUNkLE9BQU9TLE9BQU9GO1FBQ2hCO1FBRUEsT0FBT1IsR0FBR1E7SUFDWjtJQUVBLGtCQUFrQixHQUNsQixTQUFTRSxPQUFPRixJQUFJO1FBQ2xCLElBQUlYLHVFQUFhQSxDQUFDVyxTQUFTRixTQUFTSCxPQUFPO1lBQ3pDSixRQUFRWSxPQUFPLENBQUNIO1lBQ2hCLE9BQU9FO1FBQ1Q7UUFFQVgsUUFBUWEsSUFBSSxDQUFDWDtRQUNiLE9BQU9ELEdBQUdRO0lBQ1o7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWZhY3Rvcnktc3BhY2VAMi4wLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1mYWN0b3J5LXNwYWNlL2Rldi9pbmRleC5qcz84NGFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7RWZmZWN0cywgU3RhdGUsIFRva2VuVHlwZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHttYXJrZG93blNwYWNlfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5cbi8vIFRvIGRvOiBpbXBsZW1lbnQgYHNwYWNlT3JUYWJgLCBgc3BhY2VPclRhYk1pbk1heGAsIGBzcGFjZU9yVGFiV2l0aE9wdGlvbnNgLlxuXG4vKipcbiAqIFBhcnNlIHNwYWNlcyBhbmQgdGFicy5cbiAqXG4gKiBUaGVyZSBpcyBubyBgbm9rYCBwYXJhbWV0ZXI6XG4gKlxuICogKiAgIHNwYWNlcyBpbiBtYXJrZG93biBhcmUgb2Z0ZW4gb3B0aW9uYWwsIGluIHdoaWNoIGNhc2UgdGhpcyBmYWN0b3J5IGNhbiBiZVxuICogICAgIHVzZWQgYW5kIGBva2Agd2lsbCBiZSBzd2l0Y2hlZCB0byB3aGV0aGVyIHNwYWNlcyB3ZXJlIGZvdW5kIG9yIG5vdFxuICogKiAgIG9uZSBsaW5lIGVuZGluZyBvciBzcGFjZSBjYW4gYmUgZGV0ZWN0ZWQgd2l0aCBgbWFya2Rvd25TcGFjZShjb2RlKWAgcmlnaHRcbiAqICAgICBiZWZvcmUgdXNpbmcgYGZhY3RvcnlTcGFjZWBcbiAqXG4gKiAjIyMjIyMgRXhhbXBsZXNcbiAqXG4gKiBXaGVyZSBg4pCJYCByZXByZXNlbnRzIGEgdGFiIChwbHVzIGhvdyBtdWNoIGl0IGV4cGFuZHMpIGFuZCBg4pCgYCByZXByZXNlbnRzIGFcbiAqIHNpbmdsZSBzcGFjZS5cbiAqXG4gKiBgYGBtYXJrZG93blxuICog4pCJXG4gKiDikKDikKDikKDikKBcbiAqIOKQieKQoFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtFZmZlY3RzfSBlZmZlY3RzXG4gKiAgIENvbnRleHQuXG4gKiBAcGFyYW0ge1N0YXRlfSBva1xuICogICBTdGF0ZSBzd2l0Y2hlZCB0byB3aGVuIHN1Y2Nlc3NmdWwuXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gdHlwZVxuICogICBUeXBlIChgJyBcXHQnYCkuXG4gKiBAcGFyYW0ge251bWJlciB8IHVuZGVmaW5lZH0gW21heD1JbmZpbml0eV1cbiAqICAgTWF4IChleGNsdXNpdmUpLlxuICogQHJldHVybnMge1N0YXRlfVxuICogICBTdGFydCBzdGF0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBvaywgdHlwZSwgbWF4KSB7XG4gIGNvbnN0IGxpbWl0ID0gbWF4ID8gbWF4IC0gMSA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICBsZXQgc2l6ZSA9IDBcblxuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZSlcbiAgICAgIHJldHVybiBwcmVmaXgoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gb2soY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHByZWZpeChjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkgJiYgc2l6ZSsrIDwgbGltaXQpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHByZWZpeFxuICAgIH1cblxuICAgIGVmZmVjdHMuZXhpdCh0eXBlKVxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG59XG4iXSwibmFtZXMiOlsibWFya2Rvd25TcGFjZSIsImZhY3RvcnlTcGFjZSIsImVmZmVjdHMiLCJvayIsInR5cGUiLCJtYXgiLCJsaW1pdCIsIk51bWJlciIsIlBPU0lUSVZFX0lORklOSVRZIiwic2l6ZSIsInN0YXJ0IiwiY29kZSIsImVudGVyIiwicHJlZml4IiwiY29uc3VtZSIsImV4aXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-factory-title@2.0.1/node_modules/micromark-factory-title/dev/index.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-factory-title@2.0.1/node_modules/micromark-factory-title/dev/index.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   factoryTitle: function() { return /* binding */ factoryTitle; }\n/* harmony export */ });\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */ \n\n\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n    /** @type {NonNullable<Code>} */ let marker;\n    return start;\n    /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.quotationMark || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.apostrophe || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftParenthesis) {\n            effects.enter(type);\n            effects.enter(markerType);\n            effects.consume(code);\n            effects.exit(markerType);\n            marker = code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftParenthesis ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.rightParenthesis : code;\n            return begin;\n        }\n        return nok(code);\n    }\n    /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function begin(code) {\n        if (code === marker) {\n            effects.enter(markerType);\n            effects.consume(code);\n            effects.exit(markerType);\n            effects.exit(type);\n            return ok;\n        }\n        effects.enter(stringType);\n        return atBreak(code);\n    }\n    /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function atBreak(code) {\n        if (code === marker) {\n            effects.exit(stringType);\n            return begin(marker);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof) {\n            return nok(code);\n        }\n        // Note: blank lines can’t exist in content.\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n            // To do: use `space_or_tab_eol_with_options`, connect.\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n            return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__.factorySpace)(effects, atBreak, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix);\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString, {\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.contentTypeString\n        });\n        return inside(code);\n    }\n    /**\n   *\n   *\n   * @type {State}\n   */ function inside(code) {\n        if (code === marker || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString);\n            return atBreak(code);\n        }\n        effects.consume(code);\n        return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.backslash ? escape : inside;\n    }\n    /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function escape(code) {\n        if (code === marker || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.backslash) {\n            effects.consume(code);\n            return inside;\n        }\n        return inside(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstZmFjdG9yeS10aXRsZUAyLjAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWZhY3RvcnktdGl0bGUvZGV2L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7Ozs7O0NBT0MsR0FFbUQ7QUFDTztBQUNFO0FBRTdEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E4QkMsR0FDTSxTQUFTSyxhQUFhQyxPQUFPLEVBQUVDLEVBQUUsRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLFVBQVUsRUFBRUMsVUFBVTtJQUN6RSw4QkFBOEIsR0FDOUIsSUFBSUM7SUFFSixPQUFPQztJQUVQOzs7Ozs7Ozs7R0FTQyxHQUNELFNBQVNBLE1BQU1DLElBQUk7UUFDakIsSUFDRUEsU0FBU1osd0RBQUtBLENBQUNhLGFBQWEsSUFDNUJELFNBQVNaLHdEQUFLQSxDQUFDYyxVQUFVLElBQ3pCRixTQUFTWix3REFBS0EsQ0FBQ2UsZUFBZSxFQUM5QjtZQUNBWCxRQUFRWSxLQUFLLENBQUNUO1lBQ2RILFFBQVFZLEtBQUssQ0FBQ1I7WUFDZEosUUFBUWEsT0FBTyxDQUFDTDtZQUNoQlIsUUFBUWMsSUFBSSxDQUFDVjtZQUNiRSxTQUFTRSxTQUFTWix3REFBS0EsQ0FBQ2UsZUFBZSxHQUFHZix3REFBS0EsQ0FBQ21CLGdCQUFnQixHQUFHUDtZQUNuRSxPQUFPUTtRQUNUO1FBRUEsT0FBT2QsSUFBSU07SUFDYjtJQUVBOzs7Ozs7Ozs7OztHQVdDLEdBQ0QsU0FBU1EsTUFBTVIsSUFBSTtRQUNqQixJQUFJQSxTQUFTRixRQUFRO1lBQ25CTixRQUFRWSxLQUFLLENBQUNSO1lBQ2RKLFFBQVFhLE9BQU8sQ0FBQ0w7WUFDaEJSLFFBQVFjLElBQUksQ0FBQ1Y7WUFDYkosUUFBUWMsSUFBSSxDQUFDWDtZQUNiLE9BQU9GO1FBQ1Q7UUFFQUQsUUFBUVksS0FBSyxDQUFDUDtRQUNkLE9BQU9ZLFFBQVFUO0lBQ2pCO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU1MsUUFBUVQsSUFBSTtRQUNuQixJQUFJQSxTQUFTRixRQUFRO1lBQ25CTixRQUFRYyxJQUFJLENBQUNUO1lBQ2IsT0FBT1csTUFBTVY7UUFDZjtRQUVBLElBQUlFLFNBQVNaLHdEQUFLQSxDQUFDc0IsR0FBRyxFQUFFO1lBQ3RCLE9BQU9oQixJQUFJTTtRQUNiO1FBRUEsNENBQTRDO1FBQzVDLElBQUliLDRFQUFrQkEsQ0FBQ2EsT0FBTztZQUM1Qix1REFBdUQ7WUFDdkRSLFFBQVFZLEtBQUssQ0FBQ2Qsd0RBQUtBLENBQUNxQixVQUFVO1lBQzlCbkIsUUFBUWEsT0FBTyxDQUFDTDtZQUNoQlIsUUFBUWMsSUFBSSxDQUFDaEIsd0RBQUtBLENBQUNxQixVQUFVO1lBQzdCLE9BQU96QixxRUFBWUEsQ0FBQ00sU0FBU2lCLFNBQVNuQix3REFBS0EsQ0FBQ3NCLFVBQVU7UUFDeEQ7UUFFQXBCLFFBQVFZLEtBQUssQ0FBQ2Qsd0RBQUtBLENBQUN1QixXQUFXLEVBQUU7WUFBQ0MsYUFBYXpCLDREQUFTQSxDQUFDMEIsaUJBQWlCO1FBQUE7UUFDMUUsT0FBT0MsT0FBT2hCO0lBQ2hCO0lBRUE7Ozs7R0FJQyxHQUNELFNBQVNnQixPQUFPaEIsSUFBSTtRQUNsQixJQUFJQSxTQUFTRixVQUFVRSxTQUFTWix3REFBS0EsQ0FBQ3NCLEdBQUcsSUFBSXZCLDRFQUFrQkEsQ0FBQ2EsT0FBTztZQUNyRVIsUUFBUWMsSUFBSSxDQUFDaEIsd0RBQUtBLENBQUN1QixXQUFXO1lBQzlCLE9BQU9KLFFBQVFUO1FBQ2pCO1FBRUFSLFFBQVFhLE9BQU8sQ0FBQ0w7UUFDaEIsT0FBT0EsU0FBU1osd0RBQUtBLENBQUM2QixTQUFTLEdBQUdDLFNBQVNGO0lBQzdDO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU0UsT0FBT2xCLElBQUk7UUFDbEIsSUFBSUEsU0FBU0YsVUFBVUUsU0FBU1osd0RBQUtBLENBQUM2QixTQUFTLEVBQUU7WUFDL0N6QixRQUFRYSxPQUFPLENBQUNMO1lBQ2hCLE9BQU9nQjtRQUNUO1FBRUEsT0FBT0EsT0FBT2hCO0lBQ2hCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1mYWN0b3J5LXRpdGxlQDIuMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmstZmFjdG9yeS10aXRsZS9kZXYvaW5kZXguanM/Zjk2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb2RlLFxuICogICBFZmZlY3RzLFxuICogICBTdGF0ZSxcbiAqICAgVG9rZW5UeXBlXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7ZmFjdG9yeVNwYWNlfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSdcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge2NvZGVzLCBjb25zdGFudHMsIHR5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wnXG5cbi8qKlxuICogUGFyc2UgdGl0bGVzLlxuICpcbiAqICMjIyMjIyBFeGFtcGxlc1xuICpcbiAqIGBgYG1hcmtkb3duXG4gKiBcImFcIlxuICogJ2InXG4gKiAoYylcbiAqIFwiYVxuICogYlwiXG4gKiAnYVxuICogICAgIGInXG4gKiAoYVxcKWIpXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0VmZmVjdHN9IGVmZmVjdHNcbiAqICAgQ29udGV4dC5cbiAqIEBwYXJhbSB7U3RhdGV9IG9rXG4gKiAgIFN0YXRlIHN3aXRjaGVkIHRvIHdoZW4gc3VjY2Vzc2Z1bC5cbiAqIEBwYXJhbSB7U3RhdGV9IG5va1xuICogICBTdGF0ZSBzd2l0Y2hlZCB0byB3aGVuIHVuc3VjY2Vzc2Z1bC5cbiAqIEBwYXJhbSB7VG9rZW5UeXBlfSB0eXBlXG4gKiAgIFR5cGUgb2YgdGhlIHdob2xlIHRpdGxlIChgXCJhXCJgLCBgJ2InYCwgYChjKWApLlxuICogQHBhcmFtIHtUb2tlblR5cGV9IG1hcmtlclR5cGVcbiAqICAgVHlwZSBmb3IgdGhlIG1hcmtlcnMgKGBcImAsIGAnYCwgYChgLCBhbmQgYClgKS5cbiAqIEBwYXJhbSB7VG9rZW5UeXBlfSBzdHJpbmdUeXBlXG4gKiAgIFR5cGUgZm9yIHRoZSB2YWx1ZSAoYGFgKS5cbiAqIEByZXR1cm5zIHtTdGF0ZX1cbiAqICAgU3RhcnQgc3RhdGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmYWN0b3J5VGl0bGUoZWZmZWN0cywgb2ssIG5vaywgdHlwZSwgbWFya2VyVHlwZSwgc3RyaW5nVHlwZSkge1xuICAvKiogQHR5cGUge05vbk51bGxhYmxlPENvZGU+fSAqL1xuICBsZXQgbWFya2VyXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLyoqXG4gICAqIFN0YXJ0IG9mIHRpdGxlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgXCJhXCJcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBjb2Rlcy5xdW90YXRpb25NYXJrIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5hcG9zdHJvcGhlIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5sZWZ0UGFyZW50aGVzaXNcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZSlcbiAgICAgIGVmZmVjdHMuZW50ZXIobWFya2VyVHlwZSlcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KG1hcmtlclR5cGUpXG4gICAgICBtYXJrZXIgPSBjb2RlID09PSBjb2Rlcy5sZWZ0UGFyZW50aGVzaXMgPyBjb2Rlcy5yaWdodFBhcmVudGhlc2lzIDogY29kZVxuICAgICAgcmV0dXJuIGJlZ2luXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIG9wZW5pbmcgbWFya2VyLlxuICAgKlxuICAgKiBUaGlzIGlzIGFsc28gdXNlZCBhdCB0aGUgY2xvc2luZyBtYXJrZXIuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBcImFcIlxuICAgKiAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGJlZ2luKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKG1hcmtlclR5cGUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdChtYXJrZXJUeXBlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGUpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKHN0cmluZ1R5cGUpXG4gICAgcmV0dXJuIGF0QnJlYWsoY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBdCBzb21ldGhpbmcsIGJlZm9yZSBzb21ldGhpbmcgZWxzZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFwiYVwiXG4gICAqICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYXRCcmVhayhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgZWZmZWN0cy5leGl0KHN0cmluZ1R5cGUpXG4gICAgICByZXR1cm4gYmVnaW4obWFya2VyKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICAvLyBOb3RlOiBibGFuayBsaW5lcyBjYW7igJl0IGV4aXN0IGluIGNvbnRlbnQuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgLy8gVG8gZG86IHVzZSBgc3BhY2Vfb3JfdGFiX2VvbF93aXRoX29wdGlvbnNgLCBjb25uZWN0LlxuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5saW5lRW5kaW5nKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMubGluZUVuZGluZylcbiAgICAgIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYXRCcmVhaywgdHlwZXMubGluZVByZWZpeClcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNodW5rU3RyaW5nLCB7Y29udGVudFR5cGU6IGNvbnN0YW50cy5jb250ZW50VHlwZVN0cmluZ30pXG4gICAgcmV0dXJuIGluc2lkZShjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGluc2lkZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlciB8fCBjb2RlID09PSBjb2Rlcy5lb2YgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuY2h1bmtTdHJpbmcpXG4gICAgICByZXR1cm4gYXRCcmVhayhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBjb2RlID09PSBjb2Rlcy5iYWNrc2xhc2ggPyBlc2NhcGUgOiBpbnNpZGVcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBgXFxgLCBhdCBhIHNwZWNpYWwgY2hhcmFjdGVyLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgXCJhXFwqYlwiXG4gICAqICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyIHx8IGNvZGUgPT09IGNvZGVzLmJhY2tzbGFzaCkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gaW5zaWRlXG4gICAgfVxuXG4gICAgcmV0dXJuIGluc2lkZShjb2RlKVxuICB9XG59XG4iXSwibmFtZXMiOlsiZmFjdG9yeVNwYWNlIiwibWFya2Rvd25MaW5lRW5kaW5nIiwiY29kZXMiLCJjb25zdGFudHMiLCJ0eXBlcyIsImZhY3RvcnlUaXRsZSIsImVmZmVjdHMiLCJvayIsIm5vayIsInR5cGUiLCJtYXJrZXJUeXBlIiwic3RyaW5nVHlwZSIsIm1hcmtlciIsInN0YXJ0IiwiY29kZSIsInF1b3RhdGlvbk1hcmsiLCJhcG9zdHJvcGhlIiwibGVmdFBhcmVudGhlc2lzIiwiZW50ZXIiLCJjb25zdW1lIiwiZXhpdCIsInJpZ2h0UGFyZW50aGVzaXMiLCJiZWdpbiIsImF0QnJlYWsiLCJlb2YiLCJsaW5lRW5kaW5nIiwibGluZVByZWZpeCIsImNodW5rU3RyaW5nIiwiY29udGVudFR5cGUiLCJjb250ZW50VHlwZVN0cmluZyIsImluc2lkZSIsImJhY2tzbGFzaCIsImVzY2FwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-factory-title@2.0.1/node_modules/micromark-factory-title/dev/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-factory-whitespace@2.0.1/node_modules/micromark-factory-whitespace/dev/index.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-factory-whitespace@2.0.1/node_modules/micromark-factory-whitespace/dev/index.js ***!
  \**********************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   factoryWhitespace: function() { return /* binding */ factoryWhitespace; }\n/* harmony export */ });\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/**\n * @import {Effects, State} from 'micromark-util-types'\n */ \n\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */ function factoryWhitespace(effects, ok) {\n    /** @type {boolean} */ let seen;\n    return start;\n    /** @type {State} */ function start(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_0__.markdownLineEnding)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding);\n            seen = true;\n            return start;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_0__.markdownSpace)(code)) {\n            return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_2__.factorySpace)(effects, start, seen ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.lineSuffix)(code);\n        }\n        return ok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstZmFjdG9yeS13aGl0ZXNwYWNlQDIuMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmstZmFjdG9yeS13aGl0ZXNwYWNlL2Rldi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0NBRUMsR0FFbUQ7QUFDc0I7QUFDL0I7QUFFM0M7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBaUJDLEdBQ00sU0FBU0ksa0JBQWtCQyxPQUFPLEVBQUVDLEVBQUU7SUFDM0Msb0JBQW9CLEdBQ3BCLElBQUlDO0lBRUosT0FBT0M7SUFFUCxrQkFBa0IsR0FDbEIsU0FBU0EsTUFBTUMsSUFBSTtRQUNqQixJQUFJUiw0RUFBa0JBLENBQUNRLE9BQU87WUFDNUJKLFFBQVFLLEtBQUssQ0FBQ1Asd0RBQUtBLENBQUNRLFVBQVU7WUFDOUJOLFFBQVFPLE9BQU8sQ0FBQ0g7WUFDaEJKLFFBQVFRLElBQUksQ0FBQ1Ysd0RBQUtBLENBQUNRLFVBQVU7WUFDN0JKLE9BQU87WUFDUCxPQUFPQztRQUNUO1FBRUEsSUFBSU4sdUVBQWFBLENBQUNPLE9BQU87WUFDdkIsT0FBT1QscUVBQVlBLENBQ2pCSyxTQUNBRyxPQUNBRCxPQUFPSix3REFBS0EsQ0FBQ1csVUFBVSxHQUFHWCx3REFBS0EsQ0FBQ1ksVUFBVSxFQUMxQ047UUFDSjtRQUVBLE9BQU9ILEdBQUdHO0lBQ1o7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWZhY3Rvcnktd2hpdGVzcGFjZUAyLjAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWZhY3Rvcnktd2hpdGVzcGFjZS9kZXYvaW5kZXguanM/ODY3MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge0VmZmVjdHMsIFN0YXRlfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZywgbWFya2Rvd25TcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuXG4vKipcbiAqIFBhcnNlIHNwYWNlcyBhbmQgdGFicy5cbiAqXG4gKiBUaGVyZSBpcyBubyBgbm9rYCBwYXJhbWV0ZXI6XG4gKlxuICogKiAgIGxpbmUgZW5kaW5ncyBvciBzcGFjZXMgaW4gbWFya2Rvd24gYXJlIG9mdGVuIG9wdGlvbmFsLCBpbiB3aGljaCBjYXNlIHRoaXNcbiAqICAgICBmYWN0b3J5IGNhbiBiZSB1c2VkIGFuZCBgb2tgIHdpbGwgYmUgc3dpdGNoZWQgdG8gd2hldGhlciBzcGFjZXMgd2VyZSBmb3VuZFxuICogICAgIG9yIG5vdFxuICogKiAgIG9uZSBsaW5lIGVuZGluZyBvciBzcGFjZSBjYW4gYmUgZGV0ZWN0ZWQgd2l0aFxuICogICAgIGBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpYCByaWdodCBiZWZvcmUgdXNpbmcgYGZhY3RvcnlXaGl0ZXNwYWNlYFxuICpcbiAqIEBwYXJhbSB7RWZmZWN0c30gZWZmZWN0c1xuICogICBDb250ZXh0LlxuICogQHBhcmFtIHtTdGF0ZX0gb2tcbiAqICAgU3RhdGUgc3dpdGNoZWQgdG8gd2hlbiBzdWNjZXNzZnVsLlxuICogQHJldHVybnMge1N0YXRlfVxuICogICBTdGFydCBzdGF0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZhY3RvcnlXaGl0ZXNwYWNlKGVmZmVjdHMsIG9rKSB7XG4gIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgbGV0IHNlZW5cblxuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5saW5lRW5kaW5nKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMubGluZUVuZGluZylcbiAgICAgIHNlZW4gPSB0cnVlXG4gICAgICByZXR1cm4gc3RhcnRcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgcmV0dXJuIGZhY3RvcnlTcGFjZShcbiAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHNlZW4gPyB0eXBlcy5saW5lUHJlZml4IDogdHlwZXMubGluZVN1ZmZpeFxuICAgICAgKShjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG59XG4iXSwibmFtZXMiOlsiZmFjdG9yeVNwYWNlIiwibWFya2Rvd25MaW5lRW5kaW5nIiwibWFya2Rvd25TcGFjZSIsInR5cGVzIiwiZmFjdG9yeVdoaXRlc3BhY2UiLCJlZmZlY3RzIiwib2siLCJzZWVuIiwic3RhcnQiLCJjb2RlIiwiZW50ZXIiLCJsaW5lRW5kaW5nIiwiY29uc3VtZSIsImV4aXQiLCJsaW5lUHJlZml4IiwibGluZVN1ZmZpeCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-factory-whitespace@2.0.1/node_modules/micromark-factory-whitespace/dev/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asciiAlpha: function() { return /* binding */ asciiAlpha; },\n/* harmony export */   asciiAlphanumeric: function() { return /* binding */ asciiAlphanumeric; },\n/* harmony export */   asciiAtext: function() { return /* binding */ asciiAtext; },\n/* harmony export */   asciiControl: function() { return /* binding */ asciiControl; },\n/* harmony export */   asciiDigit: function() { return /* binding */ asciiDigit; },\n/* harmony export */   asciiHexDigit: function() { return /* binding */ asciiHexDigit; },\n/* harmony export */   asciiPunctuation: function() { return /* binding */ asciiPunctuation; },\n/* harmony export */   markdownLineEnding: function() { return /* binding */ markdownLineEnding; },\n/* harmony export */   markdownLineEndingOrSpace: function() { return /* binding */ markdownLineEndingOrSpace; },\n/* harmony export */   markdownSpace: function() { return /* binding */ markdownSpace; },\n/* harmony export */   unicodePunctuation: function() { return /* binding */ unicodePunctuation; },\n/* harmony export */   unicodeWhitespace: function() { return /* binding */ unicodeWhitespace; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/**\n * @import {Code} from 'micromark-util-types'\n */ \n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */ const asciiAlpha = regexCheck(/[A-Za-z]/);\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */ const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */ const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */ function asciiControl(code) {\n    return(// Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.space || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.del));\n}\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */ const asciiDigit = regexCheck(/\\d/);\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */ const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */ const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */ function markdownLineEnding(code) {\n    return code !== null && code < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.horizontalTab;\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */ function markdownLineEndingOrSpace(code) {\n    return code !== null && (code < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.nul || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.space);\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */ function markdownSpace(code) {\n    return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.horizontalTab || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.virtualSpace || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.space;\n}\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */ const unicodePunctuation = regexCheck(RegExp(\"\\\\p{P}|\\\\p{S}\", \"u\"));\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */ const unicodeWhitespace = regexCheck(/\\s/);\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */ function regexCheck(regex) {\n    return check;\n    /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */ function check(code) {\n        return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-chunked@2.0.1/node_modules/micromark-util-chunked/dev/index.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-chunked@2.0.1/node_modules/micromark-util-chunked/dev/index.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   push: function() { return /* binding */ push; },\n/* harmony export */   splice: function() { return /* binding */ splice; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n\n/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */ function splice(list, start, remove, items) {\n    const end = list.length;\n    let chunkStart = 0;\n    /** @type {Array<unknown>} */ let parameters;\n    // Make start between zero and `end` (included).\n    if (start < 0) {\n        start = -start > end ? 0 : end + start;\n    } else {\n        start = start > end ? end : start;\n    }\n    remove = remove > 0 ? remove : 0;\n    // No need to chunk the items if there’s only a couple (10k) items.\n    if (items.length < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.constants.v8MaxSafeChunkSize) {\n        parameters = Array.from(items);\n        parameters.unshift(start, remove);\n        // @ts-expect-error Hush, it’s fine.\n        list.splice(...parameters);\n    } else {\n        // Delete `remove` items starting from `start`\n        if (remove) list.splice(start, remove);\n        // Insert the items in chunks to not cause stack overflows.\n        while(chunkStart < items.length){\n            parameters = items.slice(chunkStart, chunkStart + micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.constants.v8MaxSafeChunkSize);\n            parameters.unshift(start, 0);\n            // @ts-expect-error Hush, it’s fine.\n            list.splice(...parameters);\n            chunkStart += micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.constants.v8MaxSafeChunkSize;\n            start += micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.constants.v8MaxSafeChunkSize;\n        }\n    }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */ function push(list, items) {\n    if (list.length > 0) {\n        splice(list, list.length, 0, items);\n        return list;\n    }\n    return items;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstdXRpbC1jaHVua2VkQDIuMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1jaHVua2VkL2Rldi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0M7QUFFL0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXFCQyxHQUNNLFNBQVNDLE9BQU9DLElBQUksRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLEtBQUs7SUFDL0MsTUFBTUMsTUFBTUosS0FBS0ssTUFBTTtJQUN2QixJQUFJQyxhQUFhO0lBQ2pCLDJCQUEyQixHQUMzQixJQUFJQztJQUVKLGdEQUFnRDtJQUNoRCxJQUFJTixRQUFRLEdBQUc7UUFDYkEsUUFBUSxDQUFDQSxRQUFRRyxNQUFNLElBQUlBLE1BQU1IO0lBQ25DLE9BQU87UUFDTEEsUUFBUUEsUUFBUUcsTUFBTUEsTUFBTUg7SUFDOUI7SUFFQUMsU0FBU0EsU0FBUyxJQUFJQSxTQUFTO0lBRS9CLG1FQUFtRTtJQUNuRSxJQUFJQyxNQUFNRSxNQUFNLEdBQUdQLDREQUFTQSxDQUFDVSxrQkFBa0IsRUFBRTtRQUMvQ0QsYUFBYUUsTUFBTUMsSUFBSSxDQUFDUDtRQUN4QkksV0FBV0ksT0FBTyxDQUFDVixPQUFPQztRQUMxQixvQ0FBb0M7UUFDcENGLEtBQUtELE1BQU0sSUFBSVE7SUFDakIsT0FBTztRQUNMLDhDQUE4QztRQUM5QyxJQUFJTCxRQUFRRixLQUFLRCxNQUFNLENBQUNFLE9BQU9DO1FBRS9CLDJEQUEyRDtRQUMzRCxNQUFPSSxhQUFhSCxNQUFNRSxNQUFNLENBQUU7WUFDaENFLGFBQWFKLE1BQU1TLEtBQUssQ0FDdEJOLFlBQ0FBLGFBQWFSLDREQUFTQSxDQUFDVSxrQkFBa0I7WUFFM0NELFdBQVdJLE9BQU8sQ0FBQ1YsT0FBTztZQUMxQixvQ0FBb0M7WUFDcENELEtBQUtELE1BQU0sSUFBSVE7WUFFZkQsY0FBY1IsNERBQVNBLENBQUNVLGtCQUFrQjtZQUMxQ1AsU0FBU0gsNERBQVNBLENBQUNVLGtCQUFrQjtRQUN2QztJQUNGO0FBQ0Y7QUFFQTs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDTSxTQUFTSyxLQUFLYixJQUFJLEVBQUVHLEtBQUs7SUFDOUIsSUFBSUgsS0FBS0ssTUFBTSxHQUFHLEdBQUc7UUFDbkJOLE9BQU9DLE1BQU1BLEtBQUtLLE1BQU0sRUFBRSxHQUFHRjtRQUM3QixPQUFPSDtJQUNUO0lBRUEsT0FBT0c7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLXV0aWwtY2h1bmtlZEAyLjAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtY2h1bmtlZC9kZXYvaW5kZXguanM/MDlmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NvbnN0YW50c30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuXG4vKipcbiAqIExpa2UgYEFycmF5I3NwbGljZWAsIGJ1dCBzbWFydGVyIGZvciBnaWFudCBhcnJheXMuXG4gKlxuICogYEFycmF5I3NwbGljZWAgdGFrZXMgYWxsIGl0ZW1zIHRvIGJlIGluc2VydGVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnQgd2hpY2hcbiAqIGNhdXNlcyBhIHN0YWNrIG92ZXJmbG93IGluIFY4IHdoZW4gdHJ5aW5nIHRvIGluc2VydCAxMDBrIGl0ZW1zIGZvciBpbnN0YW5jZS5cbiAqXG4gKiBPdGhlcndpc2UsIHRoaXMgZG9lcyBub3QgcmV0dXJuIHRoZSByZW1vdmVkIGl0ZW1zLCBhbmQgdGFrZXMgYGl0ZW1zYCBhcyBhblxuICogYXJyYXkgaW5zdGVhZCBvZiByZXN0IHBhcmFtZXRlcnMuXG4gKlxuICogQHRlbXBsYXRlIHt1bmtub3dufSBUXG4gKiAgIEl0ZW0gdHlwZS5cbiAqIEBwYXJhbSB7QXJyYXk8VD59IGxpc3RcbiAqICAgTGlzdCB0byBvcGVyYXRlIG9uLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0XG4gKiAgIEluZGV4IHRvIHJlbW92ZS9pbnNlcnQgYXQgKGNhbiBiZSBuZWdhdGl2ZSkuXG4gKiBAcGFyYW0ge251bWJlcn0gcmVtb3ZlXG4gKiAgIE51bWJlciBvZiBpdGVtcyB0byByZW1vdmUuXG4gKiBAcGFyYW0ge0FycmF5PFQ+fSBpdGVtc1xuICogICBJdGVtcyB0byBpbmplY3QgaW50byBgbGlzdGAuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BsaWNlKGxpc3QsIHN0YXJ0LCByZW1vdmUsIGl0ZW1zKSB7XG4gIGNvbnN0IGVuZCA9IGxpc3QubGVuZ3RoXG4gIGxldCBjaHVua1N0YXJ0ID0gMFxuICAvKiogQHR5cGUge0FycmF5PHVua25vd24+fSAqL1xuICBsZXQgcGFyYW1ldGVyc1xuXG4gIC8vIE1ha2Ugc3RhcnQgYmV0d2VlbiB6ZXJvIGFuZCBgZW5kYCAoaW5jbHVkZWQpLlxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAtc3RhcnQgPiBlbmQgPyAwIDogZW5kICsgc3RhcnRcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IHN0YXJ0ID4gZW5kID8gZW5kIDogc3RhcnRcbiAgfVxuXG4gIHJlbW92ZSA9IHJlbW92ZSA+IDAgPyByZW1vdmUgOiAwXG5cbiAgLy8gTm8gbmVlZCB0byBjaHVuayB0aGUgaXRlbXMgaWYgdGhlcmXigJlzIG9ubHkgYSBjb3VwbGUgKDEwaykgaXRlbXMuXG4gIGlmIChpdGVtcy5sZW5ndGggPCBjb25zdGFudHMudjhNYXhTYWZlQ2h1bmtTaXplKSB7XG4gICAgcGFyYW1ldGVycyA9IEFycmF5LmZyb20oaXRlbXMpXG4gICAgcGFyYW1ldGVycy51bnNoaWZ0KHN0YXJ0LCByZW1vdmUpXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBIdXNoLCBpdOKAmXMgZmluZS5cbiAgICBsaXN0LnNwbGljZSguLi5wYXJhbWV0ZXJzKVxuICB9IGVsc2Uge1xuICAgIC8vIERlbGV0ZSBgcmVtb3ZlYCBpdGVtcyBzdGFydGluZyBmcm9tIGBzdGFydGBcbiAgICBpZiAocmVtb3ZlKSBsaXN0LnNwbGljZShzdGFydCwgcmVtb3ZlKVxuXG4gICAgLy8gSW5zZXJ0IHRoZSBpdGVtcyBpbiBjaHVua3MgdG8gbm90IGNhdXNlIHN0YWNrIG92ZXJmbG93cy5cbiAgICB3aGlsZSAoY2h1bmtTdGFydCA8IGl0ZW1zLmxlbmd0aCkge1xuICAgICAgcGFyYW1ldGVycyA9IGl0ZW1zLnNsaWNlKFxuICAgICAgICBjaHVua1N0YXJ0LFxuICAgICAgICBjaHVua1N0YXJ0ICsgY29uc3RhbnRzLnY4TWF4U2FmZUNodW5rU2l6ZVxuICAgICAgKVxuICAgICAgcGFyYW1ldGVycy51bnNoaWZ0KHN0YXJ0LCAwKVxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBIdXNoLCBpdOKAmXMgZmluZS5cbiAgICAgIGxpc3Quc3BsaWNlKC4uLnBhcmFtZXRlcnMpXG5cbiAgICAgIGNodW5rU3RhcnQgKz0gY29uc3RhbnRzLnY4TWF4U2FmZUNodW5rU2l6ZVxuICAgICAgc3RhcnQgKz0gY29uc3RhbnRzLnY4TWF4U2FmZUNodW5rU2l6ZVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFwcGVuZCBgaXRlbXNgIChhbiBhcnJheSkgYXQgdGhlIGVuZCBvZiBgbGlzdGAgKGFub3RoZXIgYXJyYXkpLlxuICogV2hlbiBgbGlzdGAgd2FzIGVtcHR5LCByZXR1cm5zIGBpdGVtc2AgaW5zdGVhZC5cbiAqXG4gKiBUaGlzIHByZXZlbnRzIGEgcG90ZW50aWFsbHkgZXhwZW5zaXZlIG9wZXJhdGlvbiB3aGVuIGBsaXN0YCBpcyBlbXB0eSxcbiAqIGFuZCBhZGRzIGl0ZW1zIGluIGJhdGNoZXMgdG8gcHJldmVudCBWOCBmcm9tIGhhbmdpbmcuXG4gKlxuICogQHRlbXBsYXRlIHt1bmtub3dufSBUXG4gKiAgIEl0ZW0gdHlwZS5cbiAqIEBwYXJhbSB7QXJyYXk8VD59IGxpc3RcbiAqICAgTGlzdCB0byBvcGVyYXRlIG9uLlxuICogQHBhcmFtIHtBcnJheTxUPn0gaXRlbXNcbiAqICAgSXRlbXMgdG8gYWRkIHRvIGBsaXN0YC5cbiAqIEByZXR1cm5zIHtBcnJheTxUPn1cbiAqICAgRWl0aGVyIGBsaXN0YCBvciBgaXRlbXNgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHVzaChsaXN0LCBpdGVtcykge1xuICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgc3BsaWNlKGxpc3QsIGxpc3QubGVuZ3RoLCAwLCBpdGVtcylcbiAgICByZXR1cm4gbGlzdFxuICB9XG5cbiAgcmV0dXJuIGl0ZW1zXG59XG4iXSwibmFtZXMiOlsiY29uc3RhbnRzIiwic3BsaWNlIiwibGlzdCIsInN0YXJ0IiwicmVtb3ZlIiwiaXRlbXMiLCJlbmQiLCJsZW5ndGgiLCJjaHVua1N0YXJ0IiwicGFyYW1ldGVycyIsInY4TWF4U2FmZUNodW5rU2l6ZSIsIkFycmF5IiwiZnJvbSIsInVuc2hpZnQiLCJzbGljZSIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-chunked@2.0.1/node_modules/micromark-util-chunked/dev/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-classify-character@2.0.1/node_modules/micromark-util-classify-character/dev/index.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-classify-character@2.0.1/node_modules/micromark-util-classify-character/dev/index.js ***!
  \********************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   classifyCharacter: function() { return /* binding */ classifyCharacter; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {Code} from 'micromark-util-types'\n */ \n\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */ function classifyCharacter(code) {\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEndingOrSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.unicodeWhitespace)(code)) {\n        return micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.constants.characterGroupWhitespace;\n    }\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.unicodePunctuation)(code)) {\n        return micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.constants.characterGroupPunctuation;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstdXRpbC1jbGFzc2lmeS1jaGFyYWN0ZXJAMi4wLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLWNsYXNzaWZ5LWNoYXJhY3Rlci9kZXYvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztDQUVDLEdBTWdDO0FBQ3FCO0FBRXREOzs7Ozs7Ozs7Ozs7O0NBYUMsR0FDTSxTQUFTSyxrQkFBa0JDLElBQUk7SUFDcEMsSUFDRUEsU0FBU0gsd0RBQUtBLENBQUNJLEdBQUcsSUFDbEJQLG1GQUF5QkEsQ0FBQ00sU0FDMUJKLDJFQUFpQkEsQ0FBQ0ksT0FDbEI7UUFDQSxPQUFPRiw0REFBU0EsQ0FBQ0ksd0JBQXdCO0lBQzNDO0lBRUEsSUFBSVAsNEVBQWtCQSxDQUFDSyxPQUFPO1FBQzVCLE9BQU9GLDREQUFTQSxDQUFDSyx5QkFBeUI7SUFDNUM7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLXV0aWwtY2xhc3NpZnktY2hhcmFjdGVyQDIuMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1jbGFzc2lmeS1jaGFyYWN0ZXIvZGV2L2luZGV4LmpzP2ZkNzMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtDb2RlfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQge1xuICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlLFxuICB1bmljb2RlUHVuY3R1YXRpb24sXG4gIHVuaWNvZGVXaGl0ZXNwYWNlXG59IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7Y29kZXMsIGNvbnN0YW50c30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuXG4vKipcbiAqIENsYXNzaWZ5IHdoZXRoZXIgYSBjb2RlIHJlcHJlc2VudHMgd2hpdGVzcGFjZSwgcHVuY3R1YXRpb24sIG9yIHNvbWV0aGluZ1xuICogZWxzZS5cbiAqXG4gKiBVc2VkIGZvciBhdHRlbnRpb24gKGVtcGhhc2lzLCBzdHJvbmcpLCB3aG9zZSBzZXF1ZW5jZXMgY2FuIG9wZW4gb3IgY2xvc2VcbiAqIGJhc2VkIG9uIHRoZSBjbGFzcyBvZiBzdXJyb3VuZGluZyBjaGFyYWN0ZXJzLlxuICpcbiAqID4g8J+RiSAqKk5vdGUqKjogZW9mIChgbnVsbGApIGlzIHNlZW4gYXMgd2hpdGVzcGFjZS5cbiAqXG4gKiBAcGFyYW0ge0NvZGV9IGNvZGVcbiAqICAgQ29kZS5cbiAqIEByZXR1cm5zIHt0eXBlb2YgY29uc3RhbnRzLmNoYXJhY3Rlckdyb3VwV2hpdGVzcGFjZSB8IHR5cGVvZiBjb25zdGFudHMuY2hhcmFjdGVyR3JvdXBQdW5jdHVhdGlvbiB8IHVuZGVmaW5lZH1cbiAqICAgR3JvdXAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGFzc2lmeUNoYXJhY3Rlcihjb2RlKSB7XG4gIGlmIChcbiAgICBjb2RlID09PSBjb2Rlcy5lb2YgfHxcbiAgICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpIHx8XG4gICAgdW5pY29kZVdoaXRlc3BhY2UoY29kZSlcbiAgKSB7XG4gICAgcmV0dXJuIGNvbnN0YW50cy5jaGFyYWN0ZXJHcm91cFdoaXRlc3BhY2VcbiAgfVxuXG4gIGlmICh1bmljb2RlUHVuY3R1YXRpb24oY29kZSkpIHtcbiAgICByZXR1cm4gY29uc3RhbnRzLmNoYXJhY3Rlckdyb3VwUHVuY3R1YXRpb25cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UiLCJ1bmljb2RlUHVuY3R1YXRpb24iLCJ1bmljb2RlV2hpdGVzcGFjZSIsImNvZGVzIiwiY29uc3RhbnRzIiwiY2xhc3NpZnlDaGFyYWN0ZXIiLCJjb2RlIiwiZW9mIiwiY2hhcmFjdGVyR3JvdXBXaGl0ZXNwYWNlIiwiY2hhcmFjdGVyR3JvdXBQdW5jdHVhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-classify-character@2.0.1/node_modules/micromark-util-classify-character/dev/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-combine-extensions@2.0.1/node_modules/micromark-util-combine-extensions/index.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-combine-extensions@2.0.1/node_modules/micromark-util-combine-extensions/index.js ***!
  \****************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   combineExtensions: function() { return /* binding */ combineExtensions; },\n/* harmony export */   combineHtmlExtensions: function() { return /* binding */ combineHtmlExtensions; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-chunked */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-chunked@2.0.1/node_modules/micromark-util-chunked/dev/index.js\");\n/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */ \nconst hasOwnProperty = {}.hasOwnProperty;\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */ function combineExtensions(extensions) {\n    /** @type {NormalizedExtension} */ const all = {};\n    let index = -1;\n    while(++index < extensions.length){\n        syntaxExtension(all, extensions[index]);\n    }\n    return all;\n}\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */ function syntaxExtension(all, extension) {\n    /** @type {keyof Extension} */ let hook;\n    for(hook in extension){\n        const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;\n        /** @type {Record<string, unknown>} */ const left = maybe || (all[hook] = {});\n        /** @type {Record<string, unknown> | undefined} */ const right = extension[hook];\n        /** @type {string} */ let code;\n        if (right) {\n            for(code in right){\n                if (!hasOwnProperty.call(left, code)) left[code] = [];\n                const value = right[code];\n                constructs(// @ts-expect-error Looks like a list.\n                left[code], Array.isArray(value) ? value : value ? [\n                    value\n                ] : []);\n            }\n        }\n    }\n}\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */ function constructs(existing, list) {\n    let index = -1;\n    /** @type {Array<unknown>} */ const before = [];\n    while(++index < list.length){\n        // @ts-expect-error Looks like an object.\n        ;\n        (list[index].add === \"after\" ? existing : before).push(list[index]);\n    }\n    (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_0__.splice)(existing, 0, 0, before);\n}\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */ function combineHtmlExtensions(htmlExtensions) {\n    /** @type {HtmlExtension} */ const handlers = {};\n    let index = -1;\n    while(++index < htmlExtensions.length){\n        htmlExtension(handlers, htmlExtensions[index]);\n    }\n    return handlers;\n}\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */ function htmlExtension(all, extension) {\n    /** @type {keyof HtmlExtension} */ let hook;\n    for(hook in extension){\n        const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;\n        const left = maybe || (all[hook] = {});\n        const right = extension[hook];\n        /** @type {keyof Handles} */ let type;\n        if (right) {\n            for(type in right){\n                // @ts-expect-error assume document vs regular handler are managed correctly.\n                left[type] = right[type];\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstdXRpbC1jb21iaW5lLWV4dGVuc2lvbnNAMi4wLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLWNvbWJpbmUtZXh0ZW5zaW9ucy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7OztDQU9DLEdBRTRDO0FBRTdDLE1BQU1DLGlCQUFpQixDQUFDLEVBQUVBLGNBQWM7QUFFeEM7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNDLGtCQUFrQkMsVUFBVTtJQUMxQyxnQ0FBZ0MsR0FDaEMsTUFBTUMsTUFBTSxDQUFDO0lBQ2IsSUFBSUMsUUFBUSxDQUFDO0lBRWIsTUFBTyxFQUFFQSxRQUFRRixXQUFXRyxNQUFNLENBQUU7UUFDbENDLGdCQUFnQkgsS0FBS0QsVUFBVSxDQUFDRSxNQUFNO0lBQ3hDO0lBRUEsT0FBT0Q7QUFDVDtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNHLGdCQUFnQkgsR0FBRyxFQUFFSSxTQUFTO0lBQ3JDLDRCQUE0QixHQUM1QixJQUFJQztJQUVKLElBQUtBLFFBQVFELFVBQVc7UUFDdEIsTUFBTUUsUUFBUVQsZUFBZVUsSUFBSSxDQUFDUCxLQUFLSyxRQUFRTCxHQUFHLENBQUNLLEtBQUssR0FBR0c7UUFDM0Qsb0NBQW9DLEdBQ3BDLE1BQU1DLE9BQU9ILFNBQVVOLENBQUFBLEdBQUcsQ0FBQ0ssS0FBSyxHQUFHLENBQUM7UUFDcEMsZ0RBQWdELEdBQ2hELE1BQU1LLFFBQVFOLFNBQVMsQ0FBQ0MsS0FBSztRQUM3QixtQkFBbUIsR0FDbkIsSUFBSU07UUFFSixJQUFJRCxPQUFPO1lBQ1QsSUFBS0MsUUFBUUQsTUFBTztnQkFDbEIsSUFBSSxDQUFDYixlQUFlVSxJQUFJLENBQUNFLE1BQU1FLE9BQU9GLElBQUksQ0FBQ0UsS0FBSyxHQUFHLEVBQUU7Z0JBQ3JELE1BQU1DLFFBQVFGLEtBQUssQ0FBQ0MsS0FBSztnQkFDekJFLFdBQ0Usc0NBQXNDO2dCQUN0Q0osSUFBSSxDQUFDRSxLQUFLLEVBQ1ZHLE1BQU1DLE9BQU8sQ0FBQ0gsU0FBU0EsUUFBUUEsUUFBUTtvQkFBQ0E7aUJBQU0sR0FBRyxFQUFFO1lBRXZEO1FBQ0Y7SUFDRjtBQUNGO0FBRUE7Ozs7Ozs7Ozs7Q0FVQyxHQUNELFNBQVNDLFdBQVdHLFFBQVEsRUFBRUMsSUFBSTtJQUNoQyxJQUFJaEIsUUFBUSxDQUFDO0lBQ2IsMkJBQTJCLEdBQzNCLE1BQU1pQixTQUFTLEVBQUU7SUFFakIsTUFBTyxFQUFFakIsUUFBUWdCLEtBQUtmLE1BQU0sQ0FBRTtRQUM1Qix5Q0FBeUM7O1FBQ3ZDZSxDQUFBQSxJQUFJLENBQUNoQixNQUFNLENBQUNrQixHQUFHLEtBQUssVUFBVUgsV0FBV0UsTUFBSyxFQUFHRSxJQUFJLENBQUNILElBQUksQ0FBQ2hCLE1BQU07SUFDckU7SUFFQUwsOERBQU1BLENBQUNvQixVQUFVLEdBQUcsR0FBR0U7QUFDekI7QUFFQTs7Ozs7OztDQU9DLEdBQ00sU0FBU0csc0JBQXNCQyxjQUFjO0lBQ2xELDBCQUEwQixHQUMxQixNQUFNQyxXQUFXLENBQUM7SUFDbEIsSUFBSXRCLFFBQVEsQ0FBQztJQUViLE1BQU8sRUFBRUEsUUFBUXFCLGVBQWVwQixNQUFNLENBQUU7UUFDdENzQixjQUFjRCxVQUFVRCxjQUFjLENBQUNyQixNQUFNO0lBQy9DO0lBRUEsT0FBT3NCO0FBQ1Q7QUFFQTs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTQyxjQUFjeEIsR0FBRyxFQUFFSSxTQUFTO0lBQ25DLGdDQUFnQyxHQUNoQyxJQUFJQztJQUVKLElBQUtBLFFBQVFELFVBQVc7UUFDdEIsTUFBTUUsUUFBUVQsZUFBZVUsSUFBSSxDQUFDUCxLQUFLSyxRQUFRTCxHQUFHLENBQUNLLEtBQUssR0FBR0c7UUFDM0QsTUFBTUMsT0FBT0gsU0FBVU4sQ0FBQUEsR0FBRyxDQUFDSyxLQUFLLEdBQUcsQ0FBQztRQUNwQyxNQUFNSyxRQUFRTixTQUFTLENBQUNDLEtBQUs7UUFDN0IsMEJBQTBCLEdBQzFCLElBQUlvQjtRQUVKLElBQUlmLE9BQU87WUFDVCxJQUFLZSxRQUFRZixNQUFPO2dCQUNsQiw2RUFBNkU7Z0JBQzdFRCxJQUFJLENBQUNnQixLQUFLLEdBQUdmLEtBQUssQ0FBQ2UsS0FBSztZQUMxQjtRQUNGO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLXV0aWwtY29tYmluZS1leHRlbnNpb25zQDIuMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1jb21iaW5lLWV4dGVuc2lvbnMvaW5kZXguanM/ODg2NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1xuICogICBFeHRlbnNpb24sXG4gKiAgIEhhbmRsZXMsXG4gKiAgIEh0bWxFeHRlbnNpb24sXG4gKiAgIE5vcm1hbGl6ZWRFeHRlbnNpb25cbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHtzcGxpY2V9IGZyb20gJ21pY3JvbWFyay11dGlsLWNodW5rZWQnXG5cbmNvbnN0IGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHlcblxuLyoqXG4gKiBDb21iaW5lIG11bHRpcGxlIHN5bnRheCBleHRlbnNpb25zIGludG8gb25lLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlBcnJheTxFeHRlbnNpb24+fSBleHRlbnNpb25zXG4gKiAgIExpc3Qgb2Ygc3ludGF4IGV4dGVuc2lvbnMuXG4gKiBAcmV0dXJucyB7Tm9ybWFsaXplZEV4dGVuc2lvbn1cbiAqICAgQSBzaW5nbGUgY29tYmluZWQgZXh0ZW5zaW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZUV4dGVuc2lvbnMoZXh0ZW5zaW9ucykge1xuICAvKiogQHR5cGUge05vcm1hbGl6ZWRFeHRlbnNpb259ICovXG4gIGNvbnN0IGFsbCA9IHt9XG4gIGxldCBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBleHRlbnNpb25zLmxlbmd0aCkge1xuICAgIHN5bnRheEV4dGVuc2lvbihhbGwsIGV4dGVuc2lvbnNbaW5kZXhdKVxuICB9XG5cbiAgcmV0dXJuIGFsbFxufVxuXG4vKipcbiAqIE1lcmdlIGBleHRlbnNpb25gIGludG8gYGFsbGAuXG4gKlxuICogQHBhcmFtIHtOb3JtYWxpemVkRXh0ZW5zaW9ufSBhbGxcbiAqICAgRXh0ZW5zaW9uIHRvIG1lcmdlIGludG8uXG4gKiBAcGFyYW0ge0V4dGVuc2lvbn0gZXh0ZW5zaW9uXG4gKiAgIEV4dGVuc2lvbiB0byBtZXJnZS5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmZ1bmN0aW9uIHN5bnRheEV4dGVuc2lvbihhbGwsIGV4dGVuc2lvbikge1xuICAvKiogQHR5cGUge2tleW9mIEV4dGVuc2lvbn0gKi9cbiAgbGV0IGhvb2tcblxuICBmb3IgKGhvb2sgaW4gZXh0ZW5zaW9uKSB7XG4gICAgY29uc3QgbWF5YmUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFsbCwgaG9vaykgPyBhbGxbaG9va10gOiB1bmRlZmluZWRcbiAgICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSAqL1xuICAgIGNvbnN0IGxlZnQgPSBtYXliZSB8fCAoYWxsW2hvb2tdID0ge30pXG4gICAgLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB8IHVuZGVmaW5lZH0gKi9cbiAgICBjb25zdCByaWdodCA9IGV4dGVuc2lvbltob29rXVxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIGxldCBjb2RlXG5cbiAgICBpZiAocmlnaHQpIHtcbiAgICAgIGZvciAoY29kZSBpbiByaWdodCkge1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobGVmdCwgY29kZSkpIGxlZnRbY29kZV0gPSBbXVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHJpZ2h0W2NvZGVdXG4gICAgICAgIGNvbnN0cnVjdHMoXG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBMb29rcyBsaWtlIGEgbGlzdC5cbiAgICAgICAgICBsZWZ0W2NvZGVdLFxuICAgICAgICAgIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiB2YWx1ZSA/IFt2YWx1ZV0gOiBbXVxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgYGxpc3RgIGludG8gYGV4aXN0aW5nYCAoYm90aCBsaXN0cyBvZiBjb25zdHJ1Y3RzKS5cbiAqIE11dGF0ZXMgYGV4aXN0aW5nYC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PHVua25vd24+fSBleGlzdGluZ1xuICogICBMaXN0IG9mIGNvbnN0cnVjdHMgdG8gbWVyZ2UgaW50by5cbiAqIEBwYXJhbSB7QXJyYXk8dW5rbm93bj59IGxpc3RcbiAqICAgTGlzdCBvZiBjb25zdHJ1Y3RzIHRvIG1lcmdlLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTm90aGluZy5cbiAqL1xuZnVuY3Rpb24gY29uc3RydWN0cyhleGlzdGluZywgbGlzdCkge1xuICBsZXQgaW5kZXggPSAtMVxuICAvKiogQHR5cGUge0FycmF5PHVua25vd24+fSAqL1xuICBjb25zdCBiZWZvcmUgPSBbXVxuXG4gIHdoaWxlICgrK2luZGV4IDwgbGlzdC5sZW5ndGgpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIExvb2tzIGxpa2UgYW4gb2JqZWN0LlxuICAgIDsobGlzdFtpbmRleF0uYWRkID09PSAnYWZ0ZXInID8gZXhpc3RpbmcgOiBiZWZvcmUpLnB1c2gobGlzdFtpbmRleF0pXG4gIH1cblxuICBzcGxpY2UoZXhpc3RpbmcsIDAsIDAsIGJlZm9yZSlcbn1cblxuLyoqXG4gKiBDb21iaW5lIG11bHRpcGxlIEhUTUwgZXh0ZW5zaW9ucyBpbnRvIG9uZS5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8SHRtbEV4dGVuc2lvbj59IGh0bWxFeHRlbnNpb25zXG4gKiAgIExpc3Qgb2YgSFRNTCBleHRlbnNpb25zLlxuICogQHJldHVybnMge0h0bWxFeHRlbnNpb259XG4gKiAgIFNpbmdsZSBjb21iaW5lZCBIVE1MIGV4dGVuc2lvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVIdG1sRXh0ZW5zaW9ucyhodG1sRXh0ZW5zaW9ucykge1xuICAvKiogQHR5cGUge0h0bWxFeHRlbnNpb259ICovXG4gIGNvbnN0IGhhbmRsZXJzID0ge31cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IGh0bWxFeHRlbnNpb25zLmxlbmd0aCkge1xuICAgIGh0bWxFeHRlbnNpb24oaGFuZGxlcnMsIGh0bWxFeHRlbnNpb25zW2luZGV4XSlcbiAgfVxuXG4gIHJldHVybiBoYW5kbGVyc1xufVxuXG4vKipcbiAqIE1lcmdlIGBleHRlbnNpb25gIGludG8gYGFsbGAuXG4gKlxuICogQHBhcmFtIHtIdG1sRXh0ZW5zaW9ufSBhbGxcbiAqICAgRXh0ZW5zaW9uIHRvIG1lcmdlIGludG8uXG4gKiBAcGFyYW0ge0h0bWxFeHRlbnNpb259IGV4dGVuc2lvblxuICogICBFeHRlbnNpb24gdG8gbWVyZ2UuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5mdW5jdGlvbiBodG1sRXh0ZW5zaW9uKGFsbCwgZXh0ZW5zaW9uKSB7XG4gIC8qKiBAdHlwZSB7a2V5b2YgSHRtbEV4dGVuc2lvbn0gKi9cbiAgbGV0IGhvb2tcblxuICBmb3IgKGhvb2sgaW4gZXh0ZW5zaW9uKSB7XG4gICAgY29uc3QgbWF5YmUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFsbCwgaG9vaykgPyBhbGxbaG9va10gOiB1bmRlZmluZWRcbiAgICBjb25zdCBsZWZ0ID0gbWF5YmUgfHwgKGFsbFtob29rXSA9IHt9KVxuICAgIGNvbnN0IHJpZ2h0ID0gZXh0ZW5zaW9uW2hvb2tdXG4gICAgLyoqIEB0eXBlIHtrZXlvZiBIYW5kbGVzfSAqL1xuICAgIGxldCB0eXBlXG5cbiAgICBpZiAocmlnaHQpIHtcbiAgICAgIGZvciAodHlwZSBpbiByaWdodCkge1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGFzc3VtZSBkb2N1bWVudCB2cyByZWd1bGFyIGhhbmRsZXIgYXJlIG1hbmFnZWQgY29ycmVjdGx5LlxuICAgICAgICBsZWZ0W3R5cGVdID0gcmlnaHRbdHlwZV1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJzcGxpY2UiLCJoYXNPd25Qcm9wZXJ0eSIsImNvbWJpbmVFeHRlbnNpb25zIiwiZXh0ZW5zaW9ucyIsImFsbCIsImluZGV4IiwibGVuZ3RoIiwic3ludGF4RXh0ZW5zaW9uIiwiZXh0ZW5zaW9uIiwiaG9vayIsIm1heWJlIiwiY2FsbCIsInVuZGVmaW5lZCIsImxlZnQiLCJyaWdodCIsImNvZGUiLCJ2YWx1ZSIsImNvbnN0cnVjdHMiLCJBcnJheSIsImlzQXJyYXkiLCJleGlzdGluZyIsImxpc3QiLCJiZWZvcmUiLCJhZGQiLCJwdXNoIiwiY29tYmluZUh0bWxFeHRlbnNpb25zIiwiaHRtbEV4dGVuc2lvbnMiLCJoYW5kbGVycyIsImh0bWxFeHRlbnNpb24iLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-combine-extensions@2.0.1/node_modules/micromark-util-combine-extensions/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-decode-numeric-character-reference@2.0.2/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-decode-numeric-character-reference@2.0.2/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js ***!
  \****************************************************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeNumericCharacterReference: function() { return /* binding */ decodeNumericCharacterReference; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/values.js\");\n\n/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */ function decodeNumericCharacterReference(value, base) {\n    const code = Number.parseInt(value, base);\n    if (// C0 except for HT, LF, FF, CR, space.\n    code < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.ht || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.vt || code > micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.cr && code < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.space || // Control character (DEL) of C0, and C1 controls.\n    code > micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.tilde && code < 160 || // Lone high surrogates and low surrogates.\n    code > 55295 && code < 57344 || // Noncharacters.\n    code > 64975 && code < 65008 || /* eslint-disable no-bitwise */ (code & 65535) === 65535 || (code & 65535) === 65534 || /* eslint-enable no-bitwise */ // Out of range\n    code > 1114111) {\n        return micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.values.replacementCharacter;\n    }\n    return String.fromCodePoint(code);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstdXRpbC1kZWNvZGUtbnVtZXJpYy1jaGFyYWN0ZXItcmVmZXJlbmNlQDIuMC4yL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1kZWNvZGUtbnVtZXJpYy1jaGFyYWN0ZXItcmVmZXJlbmNlL2Rldi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUQ7QUFFbkQ7Ozs7Ozs7Ozs7Ozs7Q0FhQyxHQUNNLFNBQVNFLGdDQUFnQ0MsS0FBSyxFQUFFQyxJQUFJO0lBQ3pELE1BQU1DLE9BQU9DLE9BQU9DLFFBQVEsQ0FBQ0osT0FBT0M7SUFFcEMsSUFDRSx1Q0FBdUM7SUFDdkNDLE9BQU9MLHdEQUFLQSxDQUFDUSxFQUFFLElBQ2ZILFNBQVNMLHdEQUFLQSxDQUFDUyxFQUFFLElBQ2hCSixPQUFPTCx3REFBS0EsQ0FBQ1UsRUFBRSxJQUFJTCxPQUFPTCx3REFBS0EsQ0FBQ1csS0FBSyxJQUN0QyxrREFBa0Q7SUFDakROLE9BQU9MLHdEQUFLQSxDQUFDWSxLQUFLLElBQUlQLE9BQU8sT0FDOUIsMkNBQTJDO0lBQzFDQSxPQUFPLFNBQVVBLE9BQU8sU0FDekIsaUJBQWlCO0lBQ2hCQSxPQUFPLFNBQVVBLE9BQU8sU0FFekIsNkJBRDZCLEdBQzVCQSxDQUFBQSxPQUFPLEtBQUssTUFBTyxTQUNwQixDQUFDQSxPQUFPLEtBQUssTUFBTyxTQUNwQiw0QkFBNEIsR0FDNUIsZUFBZTtJQUNmQSxPQUFPLFNBQ1A7UUFDQSxPQUFPSix5REFBTUEsQ0FBQ1ksb0JBQW9CO0lBQ3BDO0lBRUEsT0FBT0MsT0FBT0MsYUFBYSxDQUFDVjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLXV0aWwtZGVjb2RlLW51bWVyaWMtY2hhcmFjdGVyLXJlZmVyZW5jZUAyLjAuMi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtZGVjb2RlLW51bWVyaWMtY2hhcmFjdGVyLXJlZmVyZW5jZS9kZXYvaW5kZXguanM/ZGE0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NvZGVzLCB2YWx1ZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbCdcblxuLyoqXG4gKiBUdXJuIHRoZSBudW1iZXIgKGluIHN0cmluZyBmb3JtIGFzIGVpdGhlciBoZXhhLSBvciBwbGFpbiBkZWNpbWFsKSBjb21pbmcgZnJvbVxuICogYSBudW1lcmljIGNoYXJhY3RlciByZWZlcmVuY2UgaW50byBhIGNoYXJhY3Rlci5cbiAqXG4gKiBTb3J0IG9mIGxpa2UgYFN0cmluZy5mcm9tQ29kZVBvaW50KE51bWJlci5wYXJzZUludCh2YWx1ZSwgYmFzZSkpYCwgYnV0IG1ha2VzXG4gKiBub24tY2hhcmFjdGVycyBhbmQgY29udHJvbCBjaGFyYWN0ZXJzIHNhZmUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiAgIFZhbHVlIHRvIGRlY29kZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiYXNlXG4gKiAgIE51bWVyaWMgYmFzZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIENoYXJhY3Rlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZU51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2UodmFsdWUsIGJhc2UpIHtcbiAgY29uc3QgY29kZSA9IE51bWJlci5wYXJzZUludCh2YWx1ZSwgYmFzZSlcblxuICBpZiAoXG4gICAgLy8gQzAgZXhjZXB0IGZvciBIVCwgTEYsIEZGLCBDUiwgc3BhY2UuXG4gICAgY29kZSA8IGNvZGVzLmh0IHx8XG4gICAgY29kZSA9PT0gY29kZXMudnQgfHxcbiAgICAoY29kZSA+IGNvZGVzLmNyICYmIGNvZGUgPCBjb2Rlcy5zcGFjZSkgfHxcbiAgICAvLyBDb250cm9sIGNoYXJhY3RlciAoREVMKSBvZiBDMCwgYW5kIEMxIGNvbnRyb2xzLlxuICAgIChjb2RlID4gY29kZXMudGlsZGUgJiYgY29kZSA8IDE2MCkgfHxcbiAgICAvLyBMb25lIGhpZ2ggc3Vycm9nYXRlcyBhbmQgbG93IHN1cnJvZ2F0ZXMuXG4gICAgKGNvZGUgPiA1NV8yOTUgJiYgY29kZSA8IDU3XzM0NCkgfHxcbiAgICAvLyBOb25jaGFyYWN0ZXJzLlxuICAgIChjb2RlID4gNjRfOTc1ICYmIGNvZGUgPCA2NV8wMDgpIHx8XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuICAgIChjb2RlICYgNjVfNTM1KSA9PT0gNjVfNTM1IHx8XG4gICAgKGNvZGUgJiA2NV81MzUpID09PSA2NV81MzQgfHxcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWJpdHdpc2UgKi9cbiAgICAvLyBPdXQgb2YgcmFuZ2VcbiAgICBjb2RlID4gMV8xMTRfMTExXG4gICkge1xuICAgIHJldHVybiB2YWx1ZXMucmVwbGFjZW1lbnRDaGFyYWN0ZXJcbiAgfVxuXG4gIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludChjb2RlKVxufVxuIl0sIm5hbWVzIjpbImNvZGVzIiwidmFsdWVzIiwiZGVjb2RlTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZSIsInZhbHVlIiwiYmFzZSIsImNvZGUiLCJOdW1iZXIiLCJwYXJzZUludCIsImh0IiwidnQiLCJjciIsInNwYWNlIiwidGlsZGUiLCJyZXBsYWNlbWVudENoYXJhY3RlciIsIlN0cmluZyIsImZyb21Db2RlUG9pbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-decode-numeric-character-reference@2.0.2/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-decode-string@2.0.1/node_modules/micromark-util-decode-string/dev/index.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-decode-string@2.0.1/node_modules/micromark-util-decode-string/dev/index.js ***!
  \**********************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeString: function() { return /* binding */ decodeString; }\n/* harmony export */ });\n/* harmony import */ var decode_named_character_reference__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! decode-named-character-reference */ \"(app-pages-browser)/./node_modules/.pnpm/decode-named-character-reference@1.1.0/node_modules/decode-named-character-reference/index.dom.js\");\n/* harmony import */ var micromark_util_decode_numeric_character_reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-decode-numeric-character-reference */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-decode-numeric-character-reference@2.0.2/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n\n\n\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */ function decodeString(value) {\n    return value.replace(characterEscapeOrReference, decode);\n}\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */ function decode($0, $1, $2) {\n    if ($1) {\n        // Escape.\n        return $1;\n    }\n    // Reference.\n    const head = $2.charCodeAt(0);\n    if (head === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.numberSign) {\n        const head = $2.charCodeAt(1);\n        const hex = head === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lowercaseX || head === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.uppercaseX;\n        return (0,micromark_util_decode_numeric_character_reference__WEBPACK_IMPORTED_MODULE_1__.decodeNumericCharacterReference)($2.slice(hex ? 2 : 1), hex ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.constants.numericBaseHexadecimal : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.constants.numericBaseDecimal);\n    }\n    return (0,decode_named_character_reference__WEBPACK_IMPORTED_MODULE_3__.decodeNamedCharacterReference)($2) || $0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstdXRpbC1kZWNvZGUtc3RyaW5nQDIuMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1kZWNvZGUtc3RyaW5nL2Rldi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE4RTtBQUNtQjtBQUMzQztBQUV0RCxNQUFNSSw2QkFDSjtBQUVGOzs7Ozs7Ozs7OztDQVdDLEdBQ00sU0FBU0MsYUFBYUMsS0FBSztJQUNoQyxPQUFPQSxNQUFNQyxPQUFPLENBQUNILDRCQUE0Qkk7QUFDbkQ7QUFFQTs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTQSxPQUFPQyxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsRUFBRTtJQUN4QixJQUFJRCxJQUFJO1FBQ04sVUFBVTtRQUNWLE9BQU9BO0lBQ1Q7SUFFQSxhQUFhO0lBQ2IsTUFBTUUsT0FBT0QsR0FBR0UsVUFBVSxDQUFDO0lBRTNCLElBQUlELFNBQVNWLHdEQUFLQSxDQUFDWSxVQUFVLEVBQUU7UUFDN0IsTUFBTUYsT0FBT0QsR0FBR0UsVUFBVSxDQUFDO1FBQzNCLE1BQU1FLE1BQU1ILFNBQVNWLHdEQUFLQSxDQUFDYyxVQUFVLElBQUlKLFNBQVNWLHdEQUFLQSxDQUFDZSxVQUFVO1FBQ2xFLE9BQU9oQixrSEFBK0JBLENBQ3BDVSxHQUFHTyxLQUFLLENBQUNILE1BQU0sSUFBSSxJQUNuQkEsTUFBTVosNERBQVNBLENBQUNnQixzQkFBc0IsR0FBR2hCLDREQUFTQSxDQUFDaUIsa0JBQWtCO0lBRXpFO0lBRUEsT0FBT3BCLCtGQUE2QkEsQ0FBQ1csT0FBT0Y7QUFDOUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay11dGlsLWRlY29kZS1zdHJpbmdAMi4wLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLWRlY29kZS1zdHJpbmcvZGV2L2luZGV4LmpzP2NkZTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtkZWNvZGVOYW1lZENoYXJhY3RlclJlZmVyZW5jZX0gZnJvbSAnZGVjb2RlLW5hbWVkLWNoYXJhY3Rlci1yZWZlcmVuY2UnXG5pbXBvcnQge2RlY29kZU51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2V9IGZyb20gJ21pY3JvbWFyay11dGlsLWRlY29kZS1udW1lcmljLWNoYXJhY3Rlci1yZWZlcmVuY2UnXG5pbXBvcnQge2NvZGVzLCBjb25zdGFudHN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbCdcblxuY29uc3QgY2hhcmFjdGVyRXNjYXBlT3JSZWZlcmVuY2UgPVxuICAvXFxcXChbIS0vOi1AWy1gey1+XSl8JigjKD86XFxkezEsN318eFtcXGRhLWZdezEsNn0pfFtcXGRhLXpdezEsMzF9KTsvZ2lcblxuLyoqXG4gKiBEZWNvZGUgbWFya2Rvd24gc3RyaW5ncyAod2hpY2ggb2NjdXIgaW4gcGxhY2VzIHN1Y2ggYXMgZmVuY2VkIGNvZGUgaW5mb1xuICogc3RyaW5ncywgZGVzdGluYXRpb25zLCBsYWJlbHMsIGFuZCB0aXRsZXMpLlxuICpcbiAqIFRoZSDigJxzdHJpbmfigJ0gY29udGVudCB0eXBlIGFsbG93cyBjaGFyYWN0ZXIgZXNjYXBlcyBhbmQgLXJlZmVyZW5jZXMuXG4gKiBUaGlzIGRlY29kZXMgdGhvc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiAgIFZhbHVlIHRvIGRlY29kZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIERlY29kZWQgdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoY2hhcmFjdGVyRXNjYXBlT3JSZWZlcmVuY2UsIGRlY29kZSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gJDBcbiAqICAgTWF0Y2guXG4gKiBAcGFyYW0ge3N0cmluZ30gJDFcbiAqICAgQ2hhcmFjdGVyIGVzY2FwZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSAkMlxuICogICBDaGFyYWN0ZXIgcmVmZXJlbmNlLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgRGVjb2RlZCB2YWx1ZVxuICovXG5mdW5jdGlvbiBkZWNvZGUoJDAsICQxLCAkMikge1xuICBpZiAoJDEpIHtcbiAgICAvLyBFc2NhcGUuXG4gICAgcmV0dXJuICQxXG4gIH1cblxuICAvLyBSZWZlcmVuY2UuXG4gIGNvbnN0IGhlYWQgPSAkMi5jaGFyQ29kZUF0KDApXG5cbiAgaWYgKGhlYWQgPT09IGNvZGVzLm51bWJlclNpZ24pIHtcbiAgICBjb25zdCBoZWFkID0gJDIuY2hhckNvZGVBdCgxKVxuICAgIGNvbnN0IGhleCA9IGhlYWQgPT09IGNvZGVzLmxvd2VyY2FzZVggfHwgaGVhZCA9PT0gY29kZXMudXBwZXJjYXNlWFxuICAgIHJldHVybiBkZWNvZGVOdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlKFxuICAgICAgJDIuc2xpY2UoaGV4ID8gMiA6IDEpLFxuICAgICAgaGV4ID8gY29uc3RhbnRzLm51bWVyaWNCYXNlSGV4YWRlY2ltYWwgOiBjb25zdGFudHMubnVtZXJpY0Jhc2VEZWNpbWFsXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZU5hbWVkQ2hhcmFjdGVyUmVmZXJlbmNlKCQyKSB8fCAkMFxufVxuIl0sIm5hbWVzIjpbImRlY29kZU5hbWVkQ2hhcmFjdGVyUmVmZXJlbmNlIiwiZGVjb2RlTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZSIsImNvZGVzIiwiY29uc3RhbnRzIiwiY2hhcmFjdGVyRXNjYXBlT3JSZWZlcmVuY2UiLCJkZWNvZGVTdHJpbmciLCJ2YWx1ZSIsInJlcGxhY2UiLCJkZWNvZGUiLCIkMCIsIiQxIiwiJDIiLCJoZWFkIiwiY2hhckNvZGVBdCIsIm51bWJlclNpZ24iLCJoZXgiLCJsb3dlcmNhc2VYIiwidXBwZXJjYXNlWCIsInNsaWNlIiwibnVtZXJpY0Jhc2VIZXhhZGVjaW1hbCIsIm51bWVyaWNCYXNlRGVjaW1hbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-decode-string@2.0.1/node_modules/micromark-util-decode-string/dev/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-encode@2.0.1/node_modules/micromark-util-encode/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-encode@2.0.1/node_modules/micromark-util-encode/index.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encode: function() { return /* binding */ encode; }\n/* harmony export */ });\nconst characterReferences = {\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"<\": \"lt\",\n    \">\": \"gt\"\n};\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n *   Value to encode.\n * @returns {string}\n *   Encoded value.\n */ function encode(value) {\n    return value.replace(/[\"&<>]/g, replace);\n    /**\n   * @param {string} value\n   *   Value to replace.\n   * @returns {string}\n   *   Encoded value.\n   */ function replace(value) {\n        return \"&\" + characterReferences[/** @type {keyof typeof characterReferences} */ value] + \";\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstdXRpbC1lbmNvZGVAMi4wLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLWVuY29kZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsc0JBQXNCO0lBQUMsS0FBSztJQUFRLEtBQUs7SUFBTyxLQUFLO0lBQU0sS0FBSztBQUFJO0FBRTFFOzs7Ozs7Ozs7OztDQVdDLEdBQ00sU0FBU0MsT0FBT0MsS0FBSztJQUMxQixPQUFPQSxNQUFNQyxPQUFPLENBQUMsV0FBV0E7SUFFaEM7Ozs7O0dBS0MsR0FDRCxTQUFTQSxRQUFRRCxLQUFLO1FBQ3BCLE9BQ0UsTUFDQUYsbUJBQW1CLENBQ2pCLDZDQUE2QyxHQUFJRSxNQUNsRCxHQUNEO0lBRUo7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLXV0aWwtZW5jb2RlQDIuMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1lbmNvZGUvaW5kZXguanM/MTU1YiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjaGFyYWN0ZXJSZWZlcmVuY2VzID0geydcIic6ICdxdW90JywgJyYnOiAnYW1wJywgJzwnOiAnbHQnLCAnPic6ICdndCd9XG5cbi8qKlxuICogRW5jb2RlIG9ubHkgdGhlIGRhbmdlcm91cyBIVE1MIGNoYXJhY3RlcnMuXG4gKlxuICogVGhpcyBlbnN1cmVzIHRoYXQgY2VydGFpbiBjaGFyYWN0ZXJzIHdoaWNoIGhhdmUgc3BlY2lhbCBtZWFuaW5nIGluIEhUTUwgYXJlXG4gKiBkZWFsdCB3aXRoLlxuICogVGVjaG5pY2FsbHksIHdlIGNhbiBza2lwIGA+YCBhbmQgYFwiYCBpbiBtYW55IGNhc2VzLCBidXQgQ00gaW5jbHVkZXMgdGhlbS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqICAgVmFsdWUgdG8gZW5jb2RlLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgRW5jb2RlZCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUucmVwbGFjZSgvW1wiJjw+XS9nLCByZXBsYWNlKVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogICBWYWx1ZSB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiAgIEVuY29kZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICcmJyArXG4gICAgICBjaGFyYWN0ZXJSZWZlcmVuY2VzW1xuICAgICAgICAvKiogQHR5cGUge2tleW9mIHR5cGVvZiBjaGFyYWN0ZXJSZWZlcmVuY2VzfSAqLyAodmFsdWUpXG4gICAgICBdICtcbiAgICAgICc7J1xuICAgIClcbiAgfVxufVxuIl0sIm5hbWVzIjpbImNoYXJhY3RlclJlZmVyZW5jZXMiLCJlbmNvZGUiLCJ2YWx1ZSIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-encode@2.0.1/node_modules/micromark-util-encode/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-html-tag-name@2.0.1/node_modules/micromark-util-html-tag-name/index.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-html-tag-name@2.0.1/node_modules/micromark-util-html-tag-name/index.js ***!
  \******************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   htmlBlockNames: function() { return /* binding */ htmlBlockNames; },\n/* harmony export */   htmlRawNames: function() { return /* binding */ htmlRawNames; }\n/* harmony export */ });\n/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */ const htmlBlockNames = [\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"base\",\n    \"basefont\",\n    \"blockquote\",\n    \"body\",\n    \"caption\",\n    \"center\",\n    \"col\",\n    \"colgroup\",\n    \"dd\",\n    \"details\",\n    \"dialog\",\n    \"dir\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"frame\",\n    \"frameset\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"head\",\n    \"header\",\n    \"hr\",\n    \"html\",\n    \"iframe\",\n    \"legend\",\n    \"li\",\n    \"link\",\n    \"main\",\n    \"menu\",\n    \"menuitem\",\n    \"nav\",\n    \"noframes\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"p\",\n    \"param\",\n    \"search\",\n    \"section\",\n    \"summary\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"title\",\n    \"tr\",\n    \"track\",\n    \"ul\"\n];\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */ const htmlRawNames = [\n    \"pre\",\n    \"script\",\n    \"style\",\n    \"textarea\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstdXRpbC1odG1sLXRhZy1uYW1lQDIuMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1odG1sLXRhZy1uYW1lL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDTSxNQUFNQSxpQkFBaUI7SUFDNUI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNEO0FBRUQ7Ozs7Ozs7Ozs7O0NBV0MsR0FDTSxNQUFNQyxlQUFlO0lBQUM7SUFBTztJQUFVO0lBQVM7Q0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLXV0aWwtaHRtbC10YWctbmFtZUAyLjAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtaHRtbC10YWctbmFtZS9pbmRleC5qcz9kOWRmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGlzdCBvZiBsb3dlcmNhc2UgSFRNTCDigJxibG9ja+KAnSB0YWcgbmFtZXMuXG4gKlxuICogVGhlIGxpc3QsIHdoZW4gcGFyc2luZyBIVE1MIChmbG93KSwgcmVzdWx0cyBpbiBtb3JlIHJlbGF4ZWQgcnVsZXMgKGNvbmRpdGlvblxuICogNikuXG4gKiBCZWNhdXNlIHRoZXkgYXJlIGtub3duIGJsb2NrcywgdGhlIEhUTUwtbGlrZSBzeW50YXggZG9lc27igJl0IGhhdmUgdG8gYmVcbiAqIHN0cmljdGx5IHBhcnNlZC5cbiAqIEZvciB0YWcgbmFtZXMgbm90IGluIHRoaXMgbGlzdCwgYSBtb3JlIHN0cmljdCBhbGdvcml0aG0gKGNvbmRpdGlvbiA3KSBpcyB1c2VkXG4gKiB0byBkZXRlY3Qgd2hldGhlciB0aGUgSFRNTC1saWtlIHN5bnRheCBpcyBzZWVuIGFzIEhUTUwgKGZsb3cpIG9yIG5vdC5cbiAqXG4gKiBUaGlzIGlzIGNvcGllZCBmcm9tOlxuICogPGh0dHBzOi8vc3BlYy5jb21tb25tYXJrLm9yZy8wLjMwLyNodG1sLWJsb2Nrcz4uXG4gKlxuICogPiDwn5GJICoqTm90ZSoqOiBgc2VhcmNoYCB3YXMgYWRkZWQgaW4gYENvbW1vbk1hcmtAMC4zMWAuXG4gKi9cbmV4cG9ydCBjb25zdCBodG1sQmxvY2tOYW1lcyA9IFtcbiAgJ2FkZHJlc3MnLFxuICAnYXJ0aWNsZScsXG4gICdhc2lkZScsXG4gICdiYXNlJyxcbiAgJ2Jhc2Vmb250JyxcbiAgJ2Jsb2NrcXVvdGUnLFxuICAnYm9keScsXG4gICdjYXB0aW9uJyxcbiAgJ2NlbnRlcicsXG4gICdjb2wnLFxuICAnY29sZ3JvdXAnLFxuICAnZGQnLFxuICAnZGV0YWlscycsXG4gICdkaWFsb2cnLFxuICAnZGlyJyxcbiAgJ2RpdicsXG4gICdkbCcsXG4gICdkdCcsXG4gICdmaWVsZHNldCcsXG4gICdmaWdjYXB0aW9uJyxcbiAgJ2ZpZ3VyZScsXG4gICdmb290ZXInLFxuICAnZm9ybScsXG4gICdmcmFtZScsXG4gICdmcmFtZXNldCcsXG4gICdoMScsXG4gICdoMicsXG4gICdoMycsXG4gICdoNCcsXG4gICdoNScsXG4gICdoNicsXG4gICdoZWFkJyxcbiAgJ2hlYWRlcicsXG4gICdocicsXG4gICdodG1sJyxcbiAgJ2lmcmFtZScsXG4gICdsZWdlbmQnLFxuICAnbGknLFxuICAnbGluaycsXG4gICdtYWluJyxcbiAgJ21lbnUnLFxuICAnbWVudWl0ZW0nLFxuICAnbmF2JyxcbiAgJ25vZnJhbWVzJyxcbiAgJ29sJyxcbiAgJ29wdGdyb3VwJyxcbiAgJ29wdGlvbicsXG4gICdwJyxcbiAgJ3BhcmFtJyxcbiAgJ3NlYXJjaCcsXG4gICdzZWN0aW9uJyxcbiAgJ3N1bW1hcnknLFxuICAndGFibGUnLFxuICAndGJvZHknLFxuICAndGQnLFxuICAndGZvb3QnLFxuICAndGgnLFxuICAndGhlYWQnLFxuICAndGl0bGUnLFxuICAndHInLFxuICAndHJhY2snLFxuICAndWwnXG5dXG5cbi8qKlxuICogTGlzdCBvZiBsb3dlcmNhc2UgSFRNTCDigJxyYXfigJ0gdGFnIG5hbWVzLlxuICpcbiAqIFRoZSBsaXN0LCB3aGVuIHBhcnNpbmcgSFRNTCAoZmxvdyksIHJlc3VsdHMgaW4gSFRNTCB0aGF0IGNhbiBpbmNsdWRlIGxpbmVzXG4gKiB3aXRob3V0IGV4aXRpbmcsIHVudGlsIGEgY2xvc2luZyB0YWcgYWxzbyBpbiB0aGlzIGxpc3QgaXMgZm91bmQgKGNvbmRpdGlvblxuICogMSkuXG4gKlxuICogVGhpcyBtb2R1bGUgaXMgY29waWVkIGZyb206XG4gKiA8aHR0cHM6Ly9zcGVjLmNvbW1vbm1hcmsub3JnLzAuMzAvI2h0bWwtYmxvY2tzPi5cbiAqXG4gKiA+IPCfkYkgKipOb3RlKio6IGB0ZXh0YXJlYWAgd2FzIGFkZGVkIGluIGBDb21tb25NYXJrQDAuMzBgLlxuICovXG5leHBvcnQgY29uc3QgaHRtbFJhd05hbWVzID0gWydwcmUnLCAnc2NyaXB0JywgJ3N0eWxlJywgJ3RleHRhcmVhJ11cbiJdLCJuYW1lcyI6WyJodG1sQmxvY2tOYW1lcyIsImh0bWxSYXdOYW1lcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-html-tag-name@2.0.1/node_modules/micromark-util-html-tag-name/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-normalize-identifier@2.0.1/node_modules/micromark-util-normalize-identifier/dev/index.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-normalize-identifier@2.0.1/node_modules/micromark-util-normalize-identifier/dev/index.js ***!
  \************************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizeIdentifier: function() { return /* binding */ normalizeIdentifier; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/values.js\");\n\n/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */ function normalizeIdentifier(value) {\n    return value// Collapse markdown whitespace.\n    .replace(/[\\t\\n\\r ]+/g, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.values.space)// Trim.\n    .replace(/^ | $/g, \"\")// Some characters are considered “uppercase”, but if their lowercase\n    // counterpart is uppercased will result in a different uppercase\n    // character.\n    // Hence, to get that form, we perform both lower- and uppercase.\n    // Upper case makes sure keys will not interact with default prototypal\n    // methods: no method is uppercase.\n    .toLowerCase().toUpperCase();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstdXRpbC1ub3JtYWxpemUtaWRlbnRpZmllckAyLjAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtbm9ybWFsaXplLWlkZW50aWZpZXIvZGV2L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBRTVDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FrQkMsR0FDTSxTQUFTQyxvQkFBb0JDLEtBQUs7SUFDdkMsT0FDRUEsS0FDRSxnQ0FBZ0M7S0FDL0JDLE9BQU8sQ0FBQyxlQUFlSCx5REFBTUEsQ0FBQ0ksS0FBSyxDQUNwQyxRQUFRO0tBQ1BELE9BQU8sQ0FBQyxVQUFVLEdBQ25CLHFFQUFxRTtJQUNyRSxpRUFBaUU7SUFDakUsYUFBYTtJQUNiLGlFQUFpRTtJQUNqRSx1RUFBdUU7SUFDdkUsbUNBQW1DO0tBQ2xDRSxXQUFXLEdBQ1hDLFdBQVc7QUFFbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay11dGlsLW5vcm1hbGl6ZS1pZGVudGlmaWVyQDIuMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1ub3JtYWxpemUtaWRlbnRpZmllci9kZXYvaW5kZXguanM/ODFiNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3ZhbHVlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuXG4vKipcbiAqIE5vcm1hbGl6ZSBhbiBpZGVudGlmaWVyIChhcyBmb3VuZCBpbiByZWZlcmVuY2VzLCBkZWZpbml0aW9ucykuXG4gKlxuICogQ29sbGFwc2VzIG1hcmtkb3duIHdoaXRlc3BhY2UsIHRyaW0sIGFuZCB0aGVuIGxvd2VyLSBhbmQgdXBwZXJjYXNlLlxuICpcbiAqIFNvbWUgY2hhcmFjdGVycyBhcmUgY29uc2lkZXJlZCDigJx1cHBlcmNhc2XigJ0sIHN1Y2ggYXMgVSswM0Y0IChgz7RgKSwgYnV0IGlmIHRoZWlyXG4gKiBsb3dlcmNhc2UgY291bnRlcnBhcnQgKFUrMDNCOCAoYM64YCkpIGlzIHVwcGVyY2FzZWQgd2lsbCByZXN1bHQgaW4gYSBkaWZmZXJlbnRcbiAqIHVwcGVyY2FzZSBjaGFyYWN0ZXIgKFUrMDM5OCAoYM6YYCkpLlxuICogU28sIHRvIGdldCBhIGNhbm9uaWNhbCBmb3JtLCB3ZSBwZXJmb3JtIGJvdGggbG93ZXItIGFuZCB1cHBlcmNhc2UuXG4gKlxuICogVXNpbmcgdXBwZXJjYXNlIGxhc3QgbWFrZXMgc3VyZSBrZXlzIHdpbGwgbmV2ZXIgaW50ZXJhY3Qgd2l0aCBkZWZhdWx0XG4gKiBwcm90b3R5cGFsIHZhbHVlcyAoc3VjaCBhcyBgY29uc3RydWN0b3JgKTogbm90aGluZyBpbiB0aGUgcHJvdG90eXBlIG9mXG4gKiBgT2JqZWN0YCBpcyB1cHBlcmNhc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiAgIElkZW50aWZpZXIgdG8gbm9ybWFsaXplLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgTm9ybWFsaXplZCBpZGVudGlmaWVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplSWRlbnRpZmllcih2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHZhbHVlXG4gICAgICAvLyBDb2xsYXBzZSBtYXJrZG93biB3aGl0ZXNwYWNlLlxuICAgICAgLnJlcGxhY2UoL1tcXHRcXG5cXHIgXSsvZywgdmFsdWVzLnNwYWNlKVxuICAgICAgLy8gVHJpbS5cbiAgICAgIC5yZXBsYWNlKC9eIHwgJC9nLCAnJylcbiAgICAgIC8vIFNvbWUgY2hhcmFjdGVycyBhcmUgY29uc2lkZXJlZCDigJx1cHBlcmNhc2XigJ0sIGJ1dCBpZiB0aGVpciBsb3dlcmNhc2VcbiAgICAgIC8vIGNvdW50ZXJwYXJ0IGlzIHVwcGVyY2FzZWQgd2lsbCByZXN1bHQgaW4gYSBkaWZmZXJlbnQgdXBwZXJjYXNlXG4gICAgICAvLyBjaGFyYWN0ZXIuXG4gICAgICAvLyBIZW5jZSwgdG8gZ2V0IHRoYXQgZm9ybSwgd2UgcGVyZm9ybSBib3RoIGxvd2VyLSBhbmQgdXBwZXJjYXNlLlxuICAgICAgLy8gVXBwZXIgY2FzZSBtYWtlcyBzdXJlIGtleXMgd2lsbCBub3QgaW50ZXJhY3Qgd2l0aCBkZWZhdWx0IHByb3RvdHlwYWxcbiAgICAgIC8vIG1ldGhvZHM6IG5vIG1ldGhvZCBpcyB1cHBlcmNhc2UuXG4gICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgLnRvVXBwZXJDYXNlKClcbiAgKVxufVxuIl0sIm5hbWVzIjpbInZhbHVlcyIsIm5vcm1hbGl6ZUlkZW50aWZpZXIiLCJ2YWx1ZSIsInJlcGxhY2UiLCJzcGFjZSIsInRvTG93ZXJDYXNlIiwidG9VcHBlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-normalize-identifier@2.0.1/node_modules/micromark-util-normalize-identifier/dev/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-resolve-all@2.0.1/node_modules/micromark-util-resolve-all/index.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-resolve-all@2.0.1/node_modules/micromark-util-resolve-all/index.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveAll: function() { return /* binding */ resolveAll; }\n/* harmony export */ });\n/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */ /**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */ function resolveAll(constructs, events, context) {\n    /** @type {Array<Resolver>} */ const called = [];\n    let index = -1;\n    while(++index < constructs.length){\n        const resolve = constructs[index].resolveAll;\n        if (resolve && !called.includes(resolve)) {\n            events = resolve(events, context);\n            called.push(resolve);\n        }\n    }\n    return events;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstdXRpbC1yZXNvbHZlLWFsbEAyLjAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtcmVzb2x2ZS1hbGwvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBRUQ7Ozs7Ozs7Ozs7O0NBV0MsR0FDTSxTQUFTQSxXQUFXQyxVQUFVLEVBQUVDLE1BQU0sRUFBRUMsT0FBTztJQUNwRCw0QkFBNEIsR0FDNUIsTUFBTUMsU0FBUyxFQUFFO0lBQ2pCLElBQUlDLFFBQVEsQ0FBQztJQUViLE1BQU8sRUFBRUEsUUFBUUosV0FBV0ssTUFBTSxDQUFFO1FBQ2xDLE1BQU1DLFVBQVVOLFVBQVUsQ0FBQ0ksTUFBTSxDQUFDTCxVQUFVO1FBRTVDLElBQUlPLFdBQVcsQ0FBQ0gsT0FBT0ksUUFBUSxDQUFDRCxVQUFVO1lBQ3hDTCxTQUFTSyxRQUFRTCxRQUFRQztZQUN6QkMsT0FBT0ssSUFBSSxDQUFDRjtRQUNkO0lBQ0Y7SUFFQSxPQUFPTDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstdXRpbC1yZXNvbHZlLWFsbEAyLjAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtcmVzb2x2ZS1hbGwvaW5kZXguanM/OTJiYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge0V2ZW50LCBSZXNvbHZlciwgVG9rZW5pemVDb250ZXh0fSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG4vKipcbiAqIENhbGwgYWxsIGByZXNvbHZlQWxsYHMuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seUFycmF5PHtyZXNvbHZlQWxsPzogUmVzb2x2ZXIgfCB1bmRlZmluZWR9Pn0gY29uc3RydWN0c1xuICogICBMaXN0IG9mIGNvbnN0cnVjdHMsIG9wdGlvbmFsbHkgd2l0aCBgcmVzb2x2ZUFsbGBzLlxuICogQHBhcmFtIHtBcnJheTxFdmVudD59IGV2ZW50c1xuICogICBMaXN0IG9mIGV2ZW50cy5cbiAqIEBwYXJhbSB7VG9rZW5pemVDb250ZXh0fSBjb250ZXh0XG4gKiAgIENvbnRleHQgdXNlZCBieSBgdG9rZW5pemVgLlxuICogQHJldHVybnMge0FycmF5PEV2ZW50Pn1cbiAqICAgQ2hhbmdlZCBldmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQWxsKGNvbnN0cnVjdHMsIGV2ZW50cywgY29udGV4dCkge1xuICAvKiogQHR5cGUge0FycmF5PFJlc29sdmVyPn0gKi9cbiAgY29uc3QgY2FsbGVkID0gW11cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IGNvbnN0cnVjdHMubGVuZ3RoKSB7XG4gICAgY29uc3QgcmVzb2x2ZSA9IGNvbnN0cnVjdHNbaW5kZXhdLnJlc29sdmVBbGxcblxuICAgIGlmIChyZXNvbHZlICYmICFjYWxsZWQuaW5jbHVkZXMocmVzb2x2ZSkpIHtcbiAgICAgIGV2ZW50cyA9IHJlc29sdmUoZXZlbnRzLCBjb250ZXh0KVxuICAgICAgY2FsbGVkLnB1c2gocmVzb2x2ZSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXZlbnRzXG59XG4iXSwibmFtZXMiOlsicmVzb2x2ZUFsbCIsImNvbnN0cnVjdHMiLCJldmVudHMiLCJjb250ZXh0IiwiY2FsbGVkIiwiaW5kZXgiLCJsZW5ndGgiLCJyZXNvbHZlIiwiaW5jbHVkZXMiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-resolve-all@2.0.1/node_modules/micromark-util-resolve-all/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-sanitize-uri@2.0.1/node_modules/micromark-util-sanitize-uri/dev/index.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-sanitize-uri@2.0.1/node_modules/micromark-util-sanitize-uri/dev/index.js ***!
  \********************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizeUri: function() { return /* binding */ normalizeUri; },\n/* harmony export */   sanitizeUri: function() { return /* binding */ sanitizeUri; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_encode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-encode */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-encode@2.0.1/node_modules/micromark-util-encode/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/values.js\");\n\n\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */ function sanitizeUri(url, protocol) {\n    const value = (0,micromark_util_encode__WEBPACK_IMPORTED_MODULE_0__.encode)(normalizeUri(url || \"\"));\n    if (!protocol) {\n        return value;\n    }\n    const colon = value.indexOf(\":\");\n    const questionMark = value.indexOf(\"?\");\n    const numberSign = value.indexOf(\"#\");\n    const slash = value.indexOf(\"/\");\n    if (// If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))) {\n        return value;\n    }\n    return \"\";\n}\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */ function normalizeUri(value) {\n    /** @type {Array<string>} */ const result = [];\n    let index = -1;\n    let start = 0;\n    let skip = 0;\n    while(++index < value.length){\n        const code = value.charCodeAt(index);\n        /** @type {string} */ let replace = \"\";\n        // A correct percent encoded value.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.percentSign && (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.asciiAlphanumeric)(value.charCodeAt(index + 1)) && (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.asciiAlphanumeric)(value.charCodeAt(index + 2))) {\n            skip = 2;\n        } else if (code < 128) {\n            if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n                replace = String.fromCharCode(code);\n            }\n        } else if (code > 55295 && code < 57344) {\n            const next = value.charCodeAt(index + 1);\n            // A correct surrogate pair.\n            if (code < 56320 && next > 56319 && next < 57344) {\n                replace = String.fromCharCode(code, next);\n                skip = 1;\n            } else {\n                replace = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.values.replacementCharacter;\n            }\n        } else {\n            replace = String.fromCharCode(code);\n        }\n        if (replace) {\n            result.push(value.slice(start, index), encodeURIComponent(replace));\n            start = index + skip + 1;\n            replace = \"\";\n        }\n        if (skip) {\n            index += skip;\n            skip = 0;\n        }\n    }\n    return result.join(\"\") + value.slice(start);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstdXRpbC1zYW5pdGl6ZS11cmlAMi4wLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLXNhbml0aXplLXVyaS9kZXYvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTBEO0FBQ2Q7QUFDTztBQUVuRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBcUJDLEdBQ00sU0FBU0ksWUFBWUMsR0FBRyxFQUFFQyxRQUFRO0lBQ3ZDLE1BQU1DLFFBQVFOLDZEQUFNQSxDQUFDTyxhQUFhSCxPQUFPO0lBRXpDLElBQUksQ0FBQ0MsVUFBVTtRQUNiLE9BQU9DO0lBQ1Q7SUFFQSxNQUFNRSxRQUFRRixNQUFNRyxPQUFPLENBQUM7SUFDNUIsTUFBTUMsZUFBZUosTUFBTUcsT0FBTyxDQUFDO0lBQ25DLE1BQU1FLGFBQWFMLE1BQU1HLE9BQU8sQ0FBQztJQUNqQyxNQUFNRyxRQUFRTixNQUFNRyxPQUFPLENBQUM7SUFFNUIsSUFDRSwwQ0FBMEM7SUFDMUNELFFBQVEsS0FDUix1RUFBdUU7SUFDdEVJLFFBQVEsQ0FBQyxLQUFLSixRQUFRSSxTQUN0QkYsZUFBZSxDQUFDLEtBQUtGLFFBQVFFLGdCQUM3QkMsYUFBYSxDQUFDLEtBQUtILFFBQVFHLGNBQzVCLDBDQUEwQztJQUMxQ04sU0FBU1EsSUFBSSxDQUFDUCxNQUFNUSxLQUFLLENBQUMsR0FBR04sU0FDN0I7UUFDQSxPQUFPRjtJQUNUO0lBRUEsT0FBTztBQUNUO0FBRUE7Ozs7Ozs7Ozs7Q0FVQyxHQUNNLFNBQVNDLGFBQWFELEtBQUs7SUFDaEMsMEJBQTBCLEdBQzFCLE1BQU1TLFNBQVMsRUFBRTtJQUNqQixJQUFJQyxRQUFRLENBQUM7SUFDYixJQUFJQyxRQUFRO0lBQ1osSUFBSUMsT0FBTztJQUVYLE1BQU8sRUFBRUYsUUFBUVYsTUFBTWEsTUFBTSxDQUFFO1FBQzdCLE1BQU1DLE9BQU9kLE1BQU1lLFVBQVUsQ0FBQ0w7UUFDOUIsbUJBQW1CLEdBQ25CLElBQUlNLFVBQVU7UUFFZCxtQ0FBbUM7UUFDbkMsSUFDRUYsU0FBU25CLHdEQUFLQSxDQUFDc0IsV0FBVyxJQUMxQnhCLDJFQUFpQkEsQ0FBQ08sTUFBTWUsVUFBVSxDQUFDTCxRQUFRLE9BQzNDakIsMkVBQWlCQSxDQUFDTyxNQUFNZSxVQUFVLENBQUNMLFFBQVEsS0FDM0M7WUFDQUUsT0FBTztRQUNULE9BRUssSUFBSUUsT0FBTyxLQUFLO1lBQ25CLElBQUksQ0FBQyxvQkFBb0JQLElBQUksQ0FBQ1csT0FBT0MsWUFBWSxDQUFDTCxRQUFRO2dCQUN4REUsVUFBVUUsT0FBT0MsWUFBWSxDQUFDTDtZQUNoQztRQUNGLE9BRUssSUFBSUEsT0FBTyxTQUFVQSxPQUFPLE9BQVE7WUFDdkMsTUFBTU0sT0FBT3BCLE1BQU1lLFVBQVUsQ0FBQ0wsUUFBUTtZQUV0Qyw0QkFBNEI7WUFDNUIsSUFBSUksT0FBTyxTQUFVTSxPQUFPLFNBQVVBLE9BQU8sT0FBUTtnQkFDbkRKLFVBQVVFLE9BQU9DLFlBQVksQ0FBQ0wsTUFBTU07Z0JBQ3BDUixPQUFPO1lBQ1QsT0FFSztnQkFDSEksVUFBVXBCLHlEQUFNQSxDQUFDeUIsb0JBQW9CO1lBQ3ZDO1FBQ0YsT0FFSztZQUNITCxVQUFVRSxPQUFPQyxZQUFZLENBQUNMO1FBQ2hDO1FBRUEsSUFBSUUsU0FBUztZQUNYUCxPQUFPYSxJQUFJLENBQUN0QixNQUFNUSxLQUFLLENBQUNHLE9BQU9ELFFBQVFhLG1CQUFtQlA7WUFDMURMLFFBQVFELFFBQVFFLE9BQU87WUFDdkJJLFVBQVU7UUFDWjtRQUVBLElBQUlKLE1BQU07WUFDUkYsU0FBU0U7WUFDVEEsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPSCxPQUFPZSxJQUFJLENBQUMsTUFBTXhCLE1BQU1RLEtBQUssQ0FBQ0c7QUFDdkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay11dGlsLXNhbml0aXplLXVyaUAyLjAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtc2FuaXRpemUtdXJpL2Rldi9pbmRleC5qcz8wOTk5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXNjaWlBbHBoYW51bWVyaWN9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7ZW5jb2RlfSBmcm9tICdtaWNyb21hcmstdXRpbC1lbmNvZGUnXG5pbXBvcnQge2NvZGVzLCB2YWx1ZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbCdcblxuLyoqXG4gKiBNYWtlIGEgdmFsdWUgc2FmZSBmb3IgaW5qZWN0aW9uIGFzIGEgVVJMLlxuICpcbiAqIFRoaXMgZW5jb2RlcyB1bnNhZmUgY2hhcmFjdGVycyB3aXRoIHBlcmNlbnQtZW5jb2RpbmcgYW5kIHNraXBzIGFscmVhZHlcbiAqIGVuY29kZWQgc2VxdWVuY2VzIChzZWUgYG5vcm1hbGl6ZVVyaWApLlxuICogRnVydGhlciB1bnNhZmUgY2hhcmFjdGVycyBhcmUgZW5jb2RlZCBhcyBjaGFyYWN0ZXIgcmVmZXJlbmNlcyAoc2VlXG4gKiBgbWljcm9tYXJrLXV0aWwtZW5jb2RlYCkuXG4gKlxuICogQSByZWdleCBvZiBhbGxvd2VkIHByb3RvY29scyBjYW4gYmUgZ2l2ZW4sIGluIHdoaWNoIGNhc2UgdGhlIFVSTCBpc1xuICogc2FuaXRpemVkLlxuICogRm9yIGV4YW1wbGUsIGAvXihodHRwcz98aXJjcz98bWFpbHRvfHhtcHApJC9pYCBjYW4gYmUgdXNlZCBmb3IgYGFbaHJlZl1gLCBvclxuICogYC9eaHR0cHM/JC9pYCBmb3IgYGltZ1tzcmNdYCAodGhpcyBpcyB3aGF0IGBnaXRodWIuY29tYCBhbGxvd3MpLlxuICogSWYgdGhlIFVSTCBpbmNsdWRlcyBhbiB1bmtub3duIHByb3RvY29sIChvbmUgbm90IG1hdGNoZWQgYnkgYHByb3RvY29sYCwgc3VjaFxuICogYXMgYSBkYW5nZXJvdXMgZXhhbXBsZSwgYGphdmFzY3JpcHQ6YCksIHRoZSB2YWx1ZSBpcyBpZ25vcmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gdXJsXG4gKiAgIFVSSSB0byBzYW5pdGl6ZS5cbiAqIEBwYXJhbSB7UmVnRXhwIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3Byb3RvY29sXVxuICogICBBbGxvd2VkIHByb3RvY29scy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIFNhbml0aXplZCBVUkkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZVVyaSh1cmwsIHByb3RvY29sKSB7XG4gIGNvbnN0IHZhbHVlID0gZW5jb2RlKG5vcm1hbGl6ZVVyaSh1cmwgfHwgJycpKVxuXG4gIGlmICghcHJvdG9jb2wpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIGNvbnN0IGNvbG9uID0gdmFsdWUuaW5kZXhPZignOicpXG4gIGNvbnN0IHF1ZXN0aW9uTWFyayA9IHZhbHVlLmluZGV4T2YoJz8nKVxuICBjb25zdCBudW1iZXJTaWduID0gdmFsdWUuaW5kZXhPZignIycpXG4gIGNvbnN0IHNsYXNoID0gdmFsdWUuaW5kZXhPZignLycpXG5cbiAgaWYgKFxuICAgIC8vIElmIHRoZXJlIGlzIG5vIHByb3RvY29sLCBpdOKAmXMgcmVsYXRpdmUuXG4gICAgY29sb24gPCAwIHx8XG4gICAgLy8gSWYgdGhlIGZpcnN0IGNvbG9uIGlzIGFmdGVyIGEgYD9gLCBgI2AsIG9yIGAvYCwgaXTigJlzIG5vdCBhIHByb3RvY29sLlxuICAgIChzbGFzaCA+IC0xICYmIGNvbG9uID4gc2xhc2gpIHx8XG4gICAgKHF1ZXN0aW9uTWFyayA+IC0xICYmIGNvbG9uID4gcXVlc3Rpb25NYXJrKSB8fFxuICAgIChudW1iZXJTaWduID4gLTEgJiYgY29sb24gPiBudW1iZXJTaWduKSB8fFxuICAgIC8vIEl0IGlzIGEgcHJvdG9jb2wsIGl0IHNob3VsZCBiZSBhbGxvd2VkLlxuICAgIHByb3RvY29sLnRlc3QodmFsdWUuc2xpY2UoMCwgY29sb24pKVxuICApIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIHJldHVybiAnJ1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIFVSTC5cbiAqXG4gKiBFbmNvZGUgdW5zYWZlIGNoYXJhY3RlcnMgd2l0aCBwZXJjZW50LWVuY29kaW5nLCBza2lwcGluZyBhbHJlYWR5IGVuY29kZWRcbiAqIHNlcXVlbmNlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqICAgVVJJIHRvIG5vcm1hbGl6ZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIE5vcm1hbGl6ZWQgVVJJLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplVXJpKHZhbHVlKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn0gKi9cbiAgY29uc3QgcmVzdWx0ID0gW11cbiAgbGV0IGluZGV4ID0gLTFcbiAgbGV0IHN0YXJ0ID0gMFxuICBsZXQgc2tpcCA9IDBcblxuICB3aGlsZSAoKytpbmRleCA8IHZhbHVlLmxlbmd0aCkge1xuICAgIGNvbnN0IGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KVxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIGxldCByZXBsYWNlID0gJydcblxuICAgIC8vIEEgY29ycmVjdCBwZXJjZW50IGVuY29kZWQgdmFsdWUuXG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY29kZXMucGVyY2VudFNpZ24gJiZcbiAgICAgIGFzY2lpQWxwaGFudW1lcmljKHZhbHVlLmNoYXJDb2RlQXQoaW5kZXggKyAxKSkgJiZcbiAgICAgIGFzY2lpQWxwaGFudW1lcmljKHZhbHVlLmNoYXJDb2RlQXQoaW5kZXggKyAyKSlcbiAgICApIHtcbiAgICAgIHNraXAgPSAyXG4gICAgfVxuICAgIC8vIEFTQ0lJLlxuICAgIGVsc2UgaWYgKGNvZGUgPCAxMjgpIHtcbiAgICAgIGlmICghL1shIyQmLTs9Py1aX2Eten5dLy50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpKSB7XG4gICAgICAgIHJlcGxhY2UgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIEFzdHJhbC5cbiAgICBlbHNlIGlmIChjb2RlID4gNTVfMjk1ICYmIGNvZGUgPCA1N18zNDQpIHtcbiAgICAgIGNvbnN0IG5leHQgPSB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4ICsgMSlcblxuICAgICAgLy8gQSBjb3JyZWN0IHN1cnJvZ2F0ZSBwYWlyLlxuICAgICAgaWYgKGNvZGUgPCA1Nl8zMjAgJiYgbmV4dCA+IDU2XzMxOSAmJiBuZXh0IDwgNTdfMzQ0KSB7XG4gICAgICAgIHJlcGxhY2UgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUsIG5leHQpXG4gICAgICAgIHNraXAgPSAxXG4gICAgICB9XG4gICAgICAvLyBMb25lIHN1cnJvZ2F0ZS5cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXBsYWNlID0gdmFsdWVzLnJlcGxhY2VtZW50Q2hhcmFjdGVyXG4gICAgICB9XG4gICAgfVxuICAgIC8vIFVuaWNvZGUuXG4gICAgZWxzZSB7XG4gICAgICByZXBsYWNlID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKVxuICAgIH1cblxuICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZS5zbGljZShzdGFydCwgaW5kZXgpLCBlbmNvZGVVUklDb21wb25lbnQocmVwbGFjZSkpXG4gICAgICBzdGFydCA9IGluZGV4ICsgc2tpcCArIDFcbiAgICAgIHJlcGxhY2UgPSAnJ1xuICAgIH1cblxuICAgIGlmIChza2lwKSB7XG4gICAgICBpbmRleCArPSBza2lwXG4gICAgICBza2lwID0gMFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQuam9pbignJykgKyB2YWx1ZS5zbGljZShzdGFydClcbn1cbiJdLCJuYW1lcyI6WyJhc2NpaUFscGhhbnVtZXJpYyIsImVuY29kZSIsImNvZGVzIiwidmFsdWVzIiwic2FuaXRpemVVcmkiLCJ1cmwiLCJwcm90b2NvbCIsInZhbHVlIiwibm9ybWFsaXplVXJpIiwiY29sb24iLCJpbmRleE9mIiwicXVlc3Rpb25NYXJrIiwibnVtYmVyU2lnbiIsInNsYXNoIiwidGVzdCIsInNsaWNlIiwicmVzdWx0IiwiaW5kZXgiLCJzdGFydCIsInNraXAiLCJsZW5ndGgiLCJjb2RlIiwiY2hhckNvZGVBdCIsInJlcGxhY2UiLCJwZXJjZW50U2lnbiIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIm5leHQiLCJyZXBsYWNlbWVudENoYXJhY3RlciIsInB1c2giLCJlbmNvZGVVUklDb21wb25lbnQiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-sanitize-uri@2.0.1/node_modules/micromark-util-sanitize-uri/dev/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-subtokenize@2.1.0/node_modules/micromark-util-subtokenize/dev/index.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-subtokenize@2.1.0/node_modules/micromark-util-subtokenize/dev/index.js ***!
  \******************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpliceBuffer: function() { return /* reexport safe */ _lib_splice_buffer_js__WEBPACK_IMPORTED_MODULE_0__.SpliceBuffer; },\n/* harmony export */   subtokenize: function() { return /* binding */ subtokenize; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-chunked */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-chunked@2.0.1/node_modules/micromark-util-chunked/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var _lib_splice_buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/splice-buffer.js */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-subtokenize@2.1.0/node_modules/micromark-util-subtokenize/dev/lib/splice-buffer.js\");\n/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */ \n\n\n\n// Hidden API exposed for testing.\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */ // eslint-disable-next-line complexity\nfunction subtokenize(eventsArray) {\n    /** @type {Record<string, number>} */ const jumps = {};\n    let index = -1;\n    /** @type {Event} */ let event;\n    /** @type {number | undefined} */ let lineIndex;\n    /** @type {number} */ let otherIndex;\n    /** @type {Event} */ let otherEvent;\n    /** @type {Array<Event>} */ let parameters;\n    /** @type {Array<Event>} */ let subevents;\n    /** @type {boolean | undefined} */ let more;\n    const events = new _lib_splice_buffer_js__WEBPACK_IMPORTED_MODULE_0__.SpliceBuffer(eventsArray);\n    while(++index < events.length){\n        while(index in jumps){\n            index = jumps[index];\n        }\n        event = events.get(index);\n        // Add a hook for the GFM tasklist extension, which needs to know if text\n        // is in the first content of a list item.\n        if (index && event[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.chunkFlow && events.get(index - 1)[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.listItemPrefix) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(event[1]._tokenizer, \"expected `_tokenizer` on subtokens\");\n            subevents = event[1]._tokenizer.events;\n            otherIndex = 0;\n            if (otherIndex < subevents.length && subevents[otherIndex][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.lineEndingBlank) {\n                otherIndex += 2;\n            }\n            if (otherIndex < subevents.length && subevents[otherIndex][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.content) {\n                while(++otherIndex < subevents.length){\n                    if (subevents[otherIndex][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.content) {\n                        break;\n                    }\n                    if (subevents[otherIndex][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.chunkText) {\n                        subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n                        otherIndex++;\n                    }\n                }\n            }\n        }\n        // Enter.\n        if (event[0] === \"enter\") {\n            if (event[1].contentType) {\n                Object.assign(jumps, subcontent(events, index));\n                index = jumps[index];\n                more = true;\n            }\n        } else if (event[1]._container) {\n            otherIndex = index;\n            lineIndex = undefined;\n            while(otherIndex--){\n                otherEvent = events.get(otherIndex);\n                if (otherEvent[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding || otherEvent[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.lineEndingBlank) {\n                    if (otherEvent[0] === \"enter\") {\n                        if (lineIndex) {\n                            events.get(lineIndex)[1].type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.lineEndingBlank;\n                        }\n                        otherEvent[1].type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding;\n                        lineIndex = otherIndex;\n                    }\n                } else if (otherEvent[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix || otherEvent[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.listItemIndent) {\n                // Move past.\n                } else {\n                    break;\n                }\n            }\n            if (lineIndex) {\n                // Fix position.\n                event[1].end = {\n                    ...events.get(lineIndex)[1].start\n                };\n                // Switch container exit w/ line endings.\n                parameters = events.slice(lineIndex, index);\n                parameters.unshift(event);\n                events.splice(lineIndex, index - lineIndex + 1, parameters);\n            }\n        }\n    }\n    // The changes to the `events` buffer must be copied back into the eventsArray\n    (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_3__.splice)(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n    return !more;\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */ function subcontent(events, eventIndex) {\n    const token = events.get(eventIndex)[1];\n    const context = events.get(eventIndex)[2];\n    let startPosition = eventIndex - 1;\n    /** @type {Array<number>} */ const startPositions = [];\n    (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(token.contentType, \"expected `contentType` on subtokens\");\n    let tokenizer = token._tokenizer;\n    if (!tokenizer) {\n        tokenizer = context.parser[token.contentType](token.start);\n        if (token._contentTypeTextTrailing) {\n            tokenizer._contentTypeTextTrailing = true;\n        }\n    }\n    const childEvents = tokenizer.events;\n    /** @type {Array<[number, number]>} */ const jumps = [];\n    /** @type {Record<string, number>} */ const gaps = {};\n    /** @type {Array<Chunk>} */ let stream;\n    /** @type {Token | undefined} */ let previous;\n    let index = -1;\n    /** @type {Token | undefined} */ let current = token;\n    let adjust = 0;\n    let start = 0;\n    const breaks = [\n        start\n    ];\n    // Loop forward through the linked tokens to pass them in order to the\n    // subtokenizer.\n    while(current){\n        // Find the position of the event for this token.\n        while(events.get(++startPosition)[1] !== current){\n        // Empty.\n        }\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(!previous || current.previous === previous, \"expected previous to match\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(!previous || previous.next === current, \"expected next to match\");\n        startPositions.push(startPosition);\n        if (!current._tokenizer) {\n            stream = context.sliceStream(current);\n            if (!current.next) {\n                stream.push(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.eof);\n            }\n            if (previous) {\n                tokenizer.defineSkip(current.start);\n            }\n            if (current._isInFirstContentOfListItem) {\n                tokenizer._gfmTasklistFirstContentOfListItem = true;\n            }\n            tokenizer.write(stream);\n            if (current._isInFirstContentOfListItem) {\n                tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n            }\n        }\n        // Unravel the next token.\n        previous = current;\n        current = current.next;\n    }\n    // Now, loop back through all events (and linked tokens), to figure out which\n    // parts belong where.\n    current = token;\n    while(++index < childEvents.length){\n        if (// Find a void token that includes a break.\n        childEvents[index][0] === \"exit\" && childEvents[index - 1][0] === \"enter\" && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(current, \"expected a current token\");\n            start = index + 1;\n            breaks.push(start);\n            // Help GC.\n            current._tokenizer = undefined;\n            current.previous = undefined;\n            current = current.next;\n        }\n    }\n    // Help GC.\n    tokenizer.events = [];\n    // If there’s one more token (which is the cases for lines that end in an\n    // EOF), that’s perfect: the last point we found starts it.\n    // If there isn’t then make sure any remaining content is added to it.\n    if (current) {\n        // Help GC.\n        current._tokenizer = undefined;\n        current.previous = undefined;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(!current.next, \"expected no next token\");\n    } else {\n        breaks.pop();\n    }\n    // Now splice the events from the subtokenizer into the current events,\n    // moving back to front so that splice indices aren’t affected.\n    index = breaks.length;\n    while(index--){\n        const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n        const start = startPositions.pop();\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(start !== undefined, \"expected a start position when splicing\");\n        jumps.push([\n            start,\n            start + slice.length - 1\n        ]);\n        events.splice(start, 2, slice);\n    }\n    jumps.reverse();\n    index = -1;\n    while(++index < jumps.length){\n        gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n        adjust += jumps[index][1] - jumps[index][0] - 1;\n    }\n    return gaps;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-subtokenize@2.1.0/node_modules/micromark-util-subtokenize/dev/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-subtokenize@2.1.0/node_modules/micromark-util-subtokenize/dev/lib/splice-buffer.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-subtokenize@2.1.0/node_modules/micromark-util-subtokenize/dev/lib/splice-buffer.js ***!
  \******************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpliceBuffer: function() { return /* binding */ SpliceBuffer; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n\n/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */ class SpliceBuffer {\n    /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */ get(index) {\n        if (index < 0 || index >= this.left.length + this.right.length) {\n            throw new RangeError(\"Cannot access index `\" + index + \"` in a splice buffer of size `\" + (this.left.length + this.right.length) + \"`\");\n        }\n        if (index < this.left.length) return this.left[index];\n        return this.right[this.right.length - index + this.left.length - 1];\n    }\n    /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */ get length() {\n        return this.left.length + this.right.length;\n    }\n    /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */ shift() {\n        this.setCursor(0);\n        return this.right.pop();\n    }\n    /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */ slice(start, end) {\n        /** @type {number} */ const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n        if (stop < this.left.length) {\n            return this.left.slice(start, stop);\n        }\n        if (start > this.left.length) {\n            return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n        }\n        return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n    }\n    /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */ splice(start, deleteCount, items) {\n        /** @type {number} */ const count = deleteCount || 0;\n        this.setCursor(Math.trunc(start));\n        const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n        if (items) chunkedPush(this.left, items);\n        return removed.reverse();\n    }\n    /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */ pop() {\n        this.setCursor(Number.POSITIVE_INFINITY);\n        return this.left.pop();\n    }\n    /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */ push(item) {\n        this.setCursor(Number.POSITIVE_INFINITY);\n        this.left.push(item);\n    }\n    /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */ pushMany(items) {\n        this.setCursor(Number.POSITIVE_INFINITY);\n        chunkedPush(this.left, items);\n    }\n    /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */ unshift(item) {\n        this.setCursor(0);\n        this.right.push(item);\n    }\n    /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */ unshiftMany(items) {\n        this.setCursor(0);\n        chunkedPush(this.right, items.reverse());\n    }\n    /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */ setCursor(n) {\n        if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n        if (n < this.left.length) {\n            // Move cursor to the this.left\n            const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n            chunkedPush(this.right, removed.reverse());\n        } else {\n            // Move cursor to the this.right\n            const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n            chunkedPush(this.left, removed.reverse());\n        }\n    }\n    /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */ constructor(initial){\n        /** @type {Array<T>} */ this.left = initial ? [\n            ...initial\n        ] : [];\n        /** @type {Array<T>} */ this.right = [];\n    }\n}\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */ function chunkedPush(list, right) {\n    /** @type {number} */ let chunkStart = 0;\n    if (right.length < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.constants.v8MaxSafeChunkSize) {\n        list.push(...right);\n    } else {\n        while(chunkStart < right.length){\n            list.push(...right.slice(chunkStart, chunkStart + micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.constants.v8MaxSafeChunkSize));\n            chunkStart += micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.constants.v8MaxSafeChunkSize;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-subtokenize@2.1.0/node_modules/micromark-util-subtokenize/dev/lib/splice-buffer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codes: function() { return /* binding */ codes; }\n/* harmony export */ });\n/**\n * Character codes.\n *\n * This module is compiled away!\n *\n * micromark works based on character codes.\n * This module contains constants for the ASCII block and the replacement\n * character.\n * A couple of them are handled in a special way, such as the line endings\n * (CR, LF, and CR+LF, commonly known as end-of-line: EOLs), the tab (horizontal\n * tab) and its expansion based on what column it’s at (virtual space),\n * and the end-of-file (eof) character.\n * As values are preprocessed before handling them, the actual characters LF,\n * CR, HT, and NUL (which is present as the replacement character), are\n * guaranteed to not exist.\n *\n * Unicode basic latin block.\n */ const codes = /** @type {const} */ {\n    carriageReturn: -5,\n    lineFeed: -4,\n    carriageReturnLineFeed: -3,\n    horizontalTab: -2,\n    virtualSpace: -1,\n    eof: null,\n    nul: 0,\n    soh: 1,\n    stx: 2,\n    etx: 3,\n    eot: 4,\n    enq: 5,\n    ack: 6,\n    bel: 7,\n    bs: 8,\n    ht: 9,\n    lf: 10,\n    vt: 11,\n    ff: 12,\n    cr: 13,\n    so: 14,\n    si: 15,\n    dle: 16,\n    dc1: 17,\n    dc2: 18,\n    dc3: 19,\n    dc4: 20,\n    nak: 21,\n    syn: 22,\n    etb: 23,\n    can: 24,\n    em: 25,\n    sub: 26,\n    esc: 27,\n    fs: 28,\n    gs: 29,\n    rs: 30,\n    us: 31,\n    space: 32,\n    exclamationMark: 33,\n    quotationMark: 34,\n    numberSign: 35,\n    dollarSign: 36,\n    percentSign: 37,\n    ampersand: 38,\n    apostrophe: 39,\n    leftParenthesis: 40,\n    rightParenthesis: 41,\n    asterisk: 42,\n    plusSign: 43,\n    comma: 44,\n    dash: 45,\n    dot: 46,\n    slash: 47,\n    digit0: 48,\n    digit1: 49,\n    digit2: 50,\n    digit3: 51,\n    digit4: 52,\n    digit5: 53,\n    digit6: 54,\n    digit7: 55,\n    digit8: 56,\n    digit9: 57,\n    colon: 58,\n    semicolon: 59,\n    lessThan: 60,\n    equalsTo: 61,\n    greaterThan: 62,\n    questionMark: 63,\n    atSign: 64,\n    uppercaseA: 65,\n    uppercaseB: 66,\n    uppercaseC: 67,\n    uppercaseD: 68,\n    uppercaseE: 69,\n    uppercaseF: 70,\n    uppercaseG: 71,\n    uppercaseH: 72,\n    uppercaseI: 73,\n    uppercaseJ: 74,\n    uppercaseK: 75,\n    uppercaseL: 76,\n    uppercaseM: 77,\n    uppercaseN: 78,\n    uppercaseO: 79,\n    uppercaseP: 80,\n    uppercaseQ: 81,\n    uppercaseR: 82,\n    uppercaseS: 83,\n    uppercaseT: 84,\n    uppercaseU: 85,\n    uppercaseV: 86,\n    uppercaseW: 87,\n    uppercaseX: 88,\n    uppercaseY: 89,\n    uppercaseZ: 90,\n    leftSquareBracket: 91,\n    backslash: 92,\n    rightSquareBracket: 93,\n    caret: 94,\n    underscore: 95,\n    graveAccent: 96,\n    lowercaseA: 97,\n    lowercaseB: 98,\n    lowercaseC: 99,\n    lowercaseD: 100,\n    lowercaseE: 101,\n    lowercaseF: 102,\n    lowercaseG: 103,\n    lowercaseH: 104,\n    lowercaseI: 105,\n    lowercaseJ: 106,\n    lowercaseK: 107,\n    lowercaseL: 108,\n    lowercaseM: 109,\n    lowercaseN: 110,\n    lowercaseO: 111,\n    lowercaseP: 112,\n    lowercaseQ: 113,\n    lowercaseR: 114,\n    lowercaseS: 115,\n    lowercaseT: 116,\n    lowercaseU: 117,\n    lowercaseV: 118,\n    lowercaseW: 119,\n    lowercaseX: 120,\n    lowercaseY: 121,\n    lowercaseZ: 122,\n    leftCurlyBrace: 123,\n    verticalBar: 124,\n    rightCurlyBrace: 125,\n    tilde: 126,\n    del: 127,\n    // Unicode Specials block.\n    byteOrderMarker: 65279,\n    // Unicode Specials block.\n    replacementCharacter: 65533 // `�`\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constants: function() { return /* binding */ constants; }\n/* harmony export */ });\n/**\n * This module is compiled away!\n *\n * Parsing markdown comes with a couple of constants, such as minimum or maximum\n * sizes of certain sequences.\n * Additionally, there are a couple symbols used inside micromark.\n * These are all defined here, but compiled away by scripts.\n */ const constants = /** @type {const} */ {\n    attentionSideAfter: 2,\n    attentionSideBefore: 1,\n    atxHeadingOpeningFenceSizeMax: 6,\n    autolinkDomainSizeMax: 63,\n    autolinkSchemeSizeMax: 32,\n    cdataOpeningString: \"CDATA[\",\n    characterGroupPunctuation: 2,\n    characterGroupWhitespace: 1,\n    characterReferenceDecimalSizeMax: 7,\n    characterReferenceHexadecimalSizeMax: 6,\n    characterReferenceNamedSizeMax: 31,\n    codeFencedSequenceSizeMin: 3,\n    contentTypeContent: \"content\",\n    contentTypeDocument: \"document\",\n    contentTypeFlow: \"flow\",\n    contentTypeString: \"string\",\n    contentTypeText: \"text\",\n    hardBreakPrefixSizeMin: 2,\n    htmlBasic: 6,\n    htmlCdata: 5,\n    htmlComment: 2,\n    htmlComplete: 7,\n    htmlDeclaration: 4,\n    htmlInstruction: 3,\n    htmlRawSizeMax: 8,\n    htmlRaw: 1,\n    linkResourceDestinationBalanceMax: 32,\n    linkReferenceSizeMax: 999,\n    listItemValueSizeMax: 10,\n    numericBaseDecimal: 10,\n    numericBaseHexadecimal: 0x10,\n    tabSize: 4,\n    thematicBreakMarkerCountMin: 3,\n    v8MaxSafeChunkSize: 10000 // V8 (and potentially others) have problems injecting giant arrays into other arrays, hence we operate in chunks.\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstdXRpbC1zeW1ib2xAMi4wLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLXN5bWJvbC9saWIvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7OztDQU9DLEdBQ00sTUFBTUEsWUFBWSxrQkFBa0IsR0FBSTtJQUM3Q0Msb0JBQW9CO0lBQ3BCQyxxQkFBcUI7SUFDckJDLCtCQUErQjtJQUMvQkMsdUJBQXVCO0lBQ3ZCQyx1QkFBdUI7SUFDdkJDLG9CQUFvQjtJQUNwQkMsMkJBQTJCO0lBQzNCQywwQkFBMEI7SUFDMUJDLGtDQUFrQztJQUNsQ0Msc0NBQXNDO0lBQ3RDQyxnQ0FBZ0M7SUFDaENDLDJCQUEyQjtJQUMzQkMsb0JBQW9CO0lBQ3BCQyxxQkFBcUI7SUFDckJDLGlCQUFpQjtJQUNqQkMsbUJBQW1CO0lBQ25CQyxpQkFBaUI7SUFDakJDLHdCQUF3QjtJQUN4QkMsV0FBVztJQUNYQyxXQUFXO0lBQ1hDLGFBQWE7SUFDYkMsY0FBYztJQUNkQyxpQkFBaUI7SUFDakJDLGlCQUFpQjtJQUNqQkMsZ0JBQWdCO0lBQ2hCQyxTQUFTO0lBQ1RDLG1DQUFtQztJQUNuQ0Msc0JBQXNCO0lBQ3RCQyxzQkFBc0I7SUFDdEJDLG9CQUFvQjtJQUNwQkMsd0JBQXdCO0lBQ3hCQyxTQUFTO0lBQ1RDLDZCQUE2QjtJQUM3QkMsb0JBQW9CLE1BQU8sa0hBQWtIO0FBQy9JLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay11dGlsLXN5bWJvbEAyLjAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtc3ltYm9sL2xpYi9jb25zdGFudHMuanM/NDRhNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgbW9kdWxlIGlzIGNvbXBpbGVkIGF3YXkhXG4gKlxuICogUGFyc2luZyBtYXJrZG93biBjb21lcyB3aXRoIGEgY291cGxlIG9mIGNvbnN0YW50cywgc3VjaCBhcyBtaW5pbXVtIG9yIG1heGltdW1cbiAqIHNpemVzIG9mIGNlcnRhaW4gc2VxdWVuY2VzLlxuICogQWRkaXRpb25hbGx5LCB0aGVyZSBhcmUgYSBjb3VwbGUgc3ltYm9scyB1c2VkIGluc2lkZSBtaWNyb21hcmsuXG4gKiBUaGVzZSBhcmUgYWxsIGRlZmluZWQgaGVyZSwgYnV0IGNvbXBpbGVkIGF3YXkgYnkgc2NyaXB0cy5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnN0YW50cyA9IC8qKiBAdHlwZSB7Y29uc3R9ICovICh7XG4gIGF0dGVudGlvblNpZGVBZnRlcjogMiwgLy8gU3ltYm9sIHRvIG1hcmsgYW4gYXR0ZW50aW9uIHNlcXVlbmNlIGFzIGFmdGVyIGNvbnRlbnQ6IGBhKmBcbiAgYXR0ZW50aW9uU2lkZUJlZm9yZTogMSwgLy8gU3ltYm9sIHRvIG1hcmsgYW4gYXR0ZW50aW9uIHNlcXVlbmNlIGFzIGJlZm9yZSBjb250ZW50OiBgKmFgXG4gIGF0eEhlYWRpbmdPcGVuaW5nRmVuY2VTaXplTWF4OiA2LCAvLyA2IG51bWJlciBzaWducyBpcyBmaW5lLCA3IGlzbuKAmXQuXG4gIGF1dG9saW5rRG9tYWluU2l6ZU1heDogNjMsIC8vIDYzIGNoYXJhY3RlcnMgaXMgZmluZSwgNjQgaXMgdG9vIG1hbnkuXG4gIGF1dG9saW5rU2NoZW1lU2l6ZU1heDogMzIsIC8vIDMyIGNoYXJhY3RlcnMgaXMgZmluZSwgMzMgaXMgdG9vIG1hbnkuXG4gIGNkYXRhT3BlbmluZ1N0cmluZzogJ0NEQVRBWycsIC8vIEFuZCBwcmVjZWRlZCBieSBgPCFbYC5cbiAgY2hhcmFjdGVyR3JvdXBQdW5jdHVhdGlvbjogMiwgLy8gU3ltYm9sIHVzZWQgdG8gaW5kaWNhdGUgYSBjaGFyYWN0ZXIgaXMgcHVuY3R1YXRpb25cbiAgY2hhcmFjdGVyR3JvdXBXaGl0ZXNwYWNlOiAxLCAvLyBTeW1ib2wgdXNlZCB0byBpbmRpY2F0ZSBhIGNoYXJhY3RlciBpcyB3aGl0ZXNwYWNlXG4gIGNoYXJhY3RlclJlZmVyZW5jZURlY2ltYWxTaXplTWF4OiA3LCAvLyBgJiM5OTk5OTk5O2AuXG4gIGNoYXJhY3RlclJlZmVyZW5jZUhleGFkZWNpbWFsU2l6ZU1heDogNiwgLy8gYCYjeGZmOTk5OTtgLlxuICBjaGFyYWN0ZXJSZWZlcmVuY2VOYW1lZFNpemVNYXg6IDMxLCAvLyBgJkNvdW50ZXJDbG9ja3dpc2VDb250b3VySW50ZWdyYWw7YC5cbiAgY29kZUZlbmNlZFNlcXVlbmNlU2l6ZU1pbjogMywgLy8gQXQgbGVhc3QgMyB0aWNrcyBvciB0aWxkZXMgYXJlIG5lZWRlZC5cbiAgY29udGVudFR5cGVDb250ZW50OiAnY29udGVudCcsXG4gIGNvbnRlbnRUeXBlRG9jdW1lbnQ6ICdkb2N1bWVudCcsXG4gIGNvbnRlbnRUeXBlRmxvdzogJ2Zsb3cnLFxuICBjb250ZW50VHlwZVN0cmluZzogJ3N0cmluZycsXG4gIGNvbnRlbnRUeXBlVGV4dDogJ3RleHQnLFxuICBoYXJkQnJlYWtQcmVmaXhTaXplTWluOiAyLCAvLyBBdCBsZWFzdCAyIHRyYWlsaW5nIHNwYWNlcyBhcmUgbmVlZGVkLlxuICBodG1sQmFzaWM6IDYsIC8vIFN5bWJvbCBmb3IgYDxkaXZgXG4gIGh0bWxDZGF0YTogNSwgLy8gU3ltYm9sIGZvciBgPCFbQ0RBVEFbXV0+YFxuICBodG1sQ29tbWVudDogMiwgLy8gU3ltYm9sIGZvciBgPCEtLS0tPmBcbiAgaHRtbENvbXBsZXRlOiA3LCAvLyBTeW1ib2wgZm9yIGA8eD5gXG4gIGh0bWxEZWNsYXJhdGlvbjogNCwgLy8gU3ltYm9sIGZvciBgPCFkb2N0eXBlPmBcbiAgaHRtbEluc3RydWN0aW9uOiAzLCAvLyBTeW1ib2wgZm9yIGA8P3BocD8+YFxuICBodG1sUmF3U2l6ZU1heDogOCwgLy8gTGVuZ3RoIG9mIGB0ZXh0YXJlYWAuXG4gIGh0bWxSYXc6IDEsIC8vIFN5bWJvbCBmb3IgYDxzY3JpcHQ+YFxuICBsaW5rUmVzb3VyY2VEZXN0aW5hdGlvbkJhbGFuY2VNYXg6IDMyLCAvLyBTZWU6IDxodHRwczovL3NwZWMuY29tbW9ubWFyay5vcmcvMC4zMC8jbGluay1kZXN0aW5hdGlvbj4sIDxodHRwczovL2dpdGh1Yi5jb20vcmVtYXJranMvcmVhY3QtbWFya2Rvd24vaXNzdWVzLzY1OCNpc3N1ZWNvbW1lbnQtOTg0MzQ1NTc3PlxuICBsaW5rUmVmZXJlbmNlU2l6ZU1heDogOTk5LCAvLyBTZWU6IDxodHRwczovL3NwZWMuY29tbW9ubWFyay5vcmcvMC4zMC8jbGluay1sYWJlbD5cbiAgbGlzdEl0ZW1WYWx1ZVNpemVNYXg6IDEwLCAvLyBTZWU6IDxodHRwczovL3NwZWMuY29tbW9ubWFyay5vcmcvMC4zMC8jb3JkZXJlZC1saXN0LW1hcmtlcj5cbiAgbnVtZXJpY0Jhc2VEZWNpbWFsOiAxMCxcbiAgbnVtZXJpY0Jhc2VIZXhhZGVjaW1hbDogMHgxMCxcbiAgdGFiU2l6ZTogNCwgLy8gVGFicyBoYXZlIGEgaGFyZC1jb2RlZCBzaXplIG9mIDQsIHBlciBDb21tb25NYXJrLlxuICB0aGVtYXRpY0JyZWFrTWFya2VyQ291bnRNaW46IDMsIC8vIEF0IGxlYXN0IDMgYXN0ZXJpc2tzLCBkYXNoZXMsIG9yIHVuZGVyc2NvcmVzIGFyZSBuZWVkZWQuXG4gIHY4TWF4U2FmZUNodW5rU2l6ZTogMTBfMDAwIC8vIFY4IChhbmQgcG90ZW50aWFsbHkgb3RoZXJzKSBoYXZlIHByb2JsZW1zIGluamVjdGluZyBnaWFudCBhcnJheXMgaW50byBvdGhlciBhcnJheXMsIGhlbmNlIHdlIG9wZXJhdGUgaW4gY2h1bmtzLlxufSlcbiJdLCJuYW1lcyI6WyJjb25zdGFudHMiLCJhdHRlbnRpb25TaWRlQWZ0ZXIiLCJhdHRlbnRpb25TaWRlQmVmb3JlIiwiYXR4SGVhZGluZ09wZW5pbmdGZW5jZVNpemVNYXgiLCJhdXRvbGlua0RvbWFpblNpemVNYXgiLCJhdXRvbGlua1NjaGVtZVNpemVNYXgiLCJjZGF0YU9wZW5pbmdTdHJpbmciLCJjaGFyYWN0ZXJHcm91cFB1bmN0dWF0aW9uIiwiY2hhcmFjdGVyR3JvdXBXaGl0ZXNwYWNlIiwiY2hhcmFjdGVyUmVmZXJlbmNlRGVjaW1hbFNpemVNYXgiLCJjaGFyYWN0ZXJSZWZlcmVuY2VIZXhhZGVjaW1hbFNpemVNYXgiLCJjaGFyYWN0ZXJSZWZlcmVuY2VOYW1lZFNpemVNYXgiLCJjb2RlRmVuY2VkU2VxdWVuY2VTaXplTWluIiwiY29udGVudFR5cGVDb250ZW50IiwiY29udGVudFR5cGVEb2N1bWVudCIsImNvbnRlbnRUeXBlRmxvdyIsImNvbnRlbnRUeXBlU3RyaW5nIiwiY29udGVudFR5cGVUZXh0IiwiaGFyZEJyZWFrUHJlZml4U2l6ZU1pbiIsImh0bWxCYXNpYyIsImh0bWxDZGF0YSIsImh0bWxDb21tZW50IiwiaHRtbENvbXBsZXRlIiwiaHRtbERlY2xhcmF0aW9uIiwiaHRtbEluc3RydWN0aW9uIiwiaHRtbFJhd1NpemVNYXgiLCJodG1sUmF3IiwibGlua1Jlc291cmNlRGVzdGluYXRpb25CYWxhbmNlTWF4IiwibGlua1JlZmVyZW5jZVNpemVNYXgiLCJsaXN0SXRlbVZhbHVlU2l6ZU1heCIsIm51bWVyaWNCYXNlRGVjaW1hbCIsIm51bWVyaWNCYXNlSGV4YWRlY2ltYWwiLCJ0YWJTaXplIiwidGhlbWF0aWNCcmVha01hcmtlckNvdW50TWluIiwidjhNYXhTYWZlQ2h1bmtTaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   types: function() { return /* binding */ types; }\n/* harmony export */ });\n/**\n * This module is compiled away!\n *\n * Here is the list of all types of tokens exposed by micromark, with a short\n * explanation of what they include and where they are found.\n * In picking names, generally, the rule is to be as explicit as possible\n * instead of reusing names.\n * For example, there is a `definitionDestination` and a `resourceDestination`,\n * instead of one shared name.\n */ // Note: when changing the next record, you must also change `TokenTypeMap`\n// in `micromark-util-types/index.d.ts`.\nconst types = /** @type {const} */ {\n    // Generic type for data, such as in a title, a destination, etc.\n    data: \"data\",\n    // Generic type for syntactic whitespace (tabs, virtual spaces, spaces).\n    // Such as, between a fenced code fence and an info string.\n    whitespace: \"whitespace\",\n    // Generic type for line endings (line feed, carriage return, carriage return +\n    // line feed).\n    lineEnding: \"lineEnding\",\n    // A line ending, but ending a blank line.\n    lineEndingBlank: \"lineEndingBlank\",\n    // Generic type for whitespace (tabs, virtual spaces, spaces) at the start of a\n    // line.\n    linePrefix: \"linePrefix\",\n    // Generic type for whitespace (tabs, virtual spaces, spaces) at the end of a\n    // line.\n    lineSuffix: \"lineSuffix\",\n    // Whole ATX heading:\n    //\n    // ```markdown\n    // #\n    // ## Alpha\n    // ### Bravo ###\n    // ```\n    //\n    // Includes `atxHeadingSequence`, `whitespace`, `atxHeadingText`.\n    atxHeading: \"atxHeading\",\n    // Sequence of number signs in an ATX heading (`###`).\n    atxHeadingSequence: \"atxHeadingSequence\",\n    // Content in an ATX heading (`alpha`).\n    // Includes text.\n    atxHeadingText: \"atxHeadingText\",\n    // Whole autolink (`<https://example.com>` or `<admin@example.com>`)\n    // Includes `autolinkMarker` and `autolinkProtocol` or `autolinkEmail`.\n    autolink: \"autolink\",\n    // Email autolink w/o markers (`admin@example.com`)\n    autolinkEmail: \"autolinkEmail\",\n    // Marker around an `autolinkProtocol` or `autolinkEmail` (`<` or `>`).\n    autolinkMarker: \"autolinkMarker\",\n    // Protocol autolink w/o markers (`https://example.com`)\n    autolinkProtocol: \"autolinkProtocol\",\n    // A whole character escape (`\\-`).\n    // Includes `escapeMarker` and `characterEscapeValue`.\n    characterEscape: \"characterEscape\",\n    // The escaped character (`-`).\n    characterEscapeValue: \"characterEscapeValue\",\n    // A whole character reference (`&amp;`, `&#8800;`, or `&#x1D306;`).\n    // Includes `characterReferenceMarker`, an optional\n    // `characterReferenceMarkerNumeric`, in which case an optional\n    // `characterReferenceMarkerHexadecimal`, and a `characterReferenceValue`.\n    characterReference: \"characterReference\",\n    // The start or end marker (`&` or `;`).\n    characterReferenceMarker: \"characterReferenceMarker\",\n    // Mark reference as numeric (`#`).\n    characterReferenceMarkerNumeric: \"characterReferenceMarkerNumeric\",\n    // Mark reference as numeric (`x` or `X`).\n    characterReferenceMarkerHexadecimal: \"characterReferenceMarkerHexadecimal\",\n    // Value of character reference w/o markers (`amp`, `8800`, or `1D306`).\n    characterReferenceValue: \"characterReferenceValue\",\n    // Whole fenced code:\n    //\n    // ````markdown\n    // ```js\n    // alert(1)\n    // ```\n    // ````\n    codeFenced: \"codeFenced\",\n    // A fenced code fence, including whitespace, sequence, info, and meta\n    // (` ```js `).\n    codeFencedFence: \"codeFencedFence\",\n    // Sequence of grave accent or tilde characters (` ``` `) in a fence.\n    codeFencedFenceSequence: \"codeFencedFenceSequence\",\n    // Info word (`js`) in a fence.\n    // Includes string.\n    codeFencedFenceInfo: \"codeFencedFenceInfo\",\n    // Meta words (`highlight=\"1\"`) in a fence.\n    // Includes string.\n    codeFencedFenceMeta: \"codeFencedFenceMeta\",\n    // A line of code.\n    codeFlowValue: \"codeFlowValue\",\n    // Whole indented code:\n    //\n    // ```markdown\n    //     alert(1)\n    // ```\n    //\n    // Includes `lineEnding`, `linePrefix`, and `codeFlowValue`.\n    codeIndented: \"codeIndented\",\n    // A text code (``` `alpha` ```).\n    // Includes `codeTextSequence`, `codeTextData`, `lineEnding`, and can include\n    // `codeTextPadding`.\n    codeText: \"codeText\",\n    codeTextData: \"codeTextData\",\n    // A space or line ending right after or before a tick.\n    codeTextPadding: \"codeTextPadding\",\n    // A text code fence (` `` `).\n    codeTextSequence: \"codeTextSequence\",\n    // Whole content:\n    //\n    // ```markdown\n    // [a]: b\n    // c\n    // =\n    // d\n    // ```\n    //\n    // Includes `paragraph` and `definition`.\n    content: \"content\",\n    // Whole definition:\n    //\n    // ```markdown\n    // [micromark]: https://github.com/micromark/micromark\n    // ```\n    //\n    // Includes `definitionLabel`, `definitionMarker`, `whitespace`,\n    // `definitionDestination`, and optionally `lineEnding` and `definitionTitle`.\n    definition: \"definition\",\n    // Destination of a definition (`https://github.com/micromark/micromark` or\n    // `<https://github.com/micromark/micromark>`).\n    // Includes `definitionDestinationLiteral` or `definitionDestinationRaw`.\n    definitionDestination: \"definitionDestination\",\n    // Enclosed destination of a definition\n    // (`<https://github.com/micromark/micromark>`).\n    // Includes `definitionDestinationLiteralMarker` and optionally\n    // `definitionDestinationString`.\n    definitionDestinationLiteral: \"definitionDestinationLiteral\",\n    // Markers of an enclosed definition destination (`<` or `>`).\n    definitionDestinationLiteralMarker: \"definitionDestinationLiteralMarker\",\n    // Unenclosed destination of a definition\n    // (`https://github.com/micromark/micromark`).\n    // Includes `definitionDestinationString`.\n    definitionDestinationRaw: \"definitionDestinationRaw\",\n    // Text in an destination (`https://github.com/micromark/micromark`).\n    // Includes string.\n    definitionDestinationString: \"definitionDestinationString\",\n    // Label of a definition (`[micromark]`).\n    // Includes `definitionLabelMarker` and `definitionLabelString`.\n    definitionLabel: \"definitionLabel\",\n    // Markers of a definition label (`[` or `]`).\n    definitionLabelMarker: \"definitionLabelMarker\",\n    // Value of a definition label (`micromark`).\n    // Includes string.\n    definitionLabelString: \"definitionLabelString\",\n    // Marker between a label and a destination (`:`).\n    definitionMarker: \"definitionMarker\",\n    // Title of a definition (`\"x\"`, `'y'`, or `(z)`).\n    // Includes `definitionTitleMarker` and optionally `definitionTitleString`.\n    definitionTitle: \"definitionTitle\",\n    // Marker around a title of a definition (`\"`, `'`, `(`, or `)`).\n    definitionTitleMarker: \"definitionTitleMarker\",\n    // Data without markers in a title (`z`).\n    // Includes string.\n    definitionTitleString: \"definitionTitleString\",\n    // Emphasis (`*alpha*`).\n    // Includes `emphasisSequence` and `emphasisText`.\n    emphasis: \"emphasis\",\n    // Sequence of emphasis markers (`*` or `_`).\n    emphasisSequence: \"emphasisSequence\",\n    // Emphasis text (`alpha`).\n    // Includes text.\n    emphasisText: \"emphasisText\",\n    // The character escape marker (`\\`).\n    escapeMarker: \"escapeMarker\",\n    // A hard break created with a backslash (`\\\\n`).\n    // Note: does not include the line ending.\n    hardBreakEscape: \"hardBreakEscape\",\n    // A hard break created with trailing spaces (`  \\n`).\n    // Does not include the line ending.\n    hardBreakTrailing: \"hardBreakTrailing\",\n    // Flow HTML:\n    //\n    // ```markdown\n    // <div\n    // ```\n    //\n    // Inlcudes `lineEnding`, `htmlFlowData`.\n    htmlFlow: \"htmlFlow\",\n    htmlFlowData: \"htmlFlowData\",\n    // HTML in text (the tag in `a <i> b`).\n    // Includes `lineEnding`, `htmlTextData`.\n    htmlText: \"htmlText\",\n    htmlTextData: \"htmlTextData\",\n    // Whole image (`![alpha](bravo)`, `![alpha][bravo]`, `![alpha][]`, or\n    // `![alpha]`).\n    // Includes `label` and an optional `resource` or `reference`.\n    image: \"image\",\n    // Whole link label (`[*alpha*]`).\n    // Includes `labelLink` or `labelImage`, `labelText`, and `labelEnd`.\n    label: \"label\",\n    // Text in an label (`*alpha*`).\n    // Includes text.\n    labelText: \"labelText\",\n    // Start a link label (`[`).\n    // Includes a `labelMarker`.\n    labelLink: \"labelLink\",\n    // Start an image label (`![`).\n    // Includes `labelImageMarker` and `labelMarker`.\n    labelImage: \"labelImage\",\n    // Marker of a label (`[` or `]`).\n    labelMarker: \"labelMarker\",\n    // Marker to start an image (`!`).\n    labelImageMarker: \"labelImageMarker\",\n    // End a label (`]`).\n    // Includes `labelMarker`.\n    labelEnd: \"labelEnd\",\n    // Whole link (`[alpha](bravo)`, `[alpha][bravo]`, `[alpha][]`, or `[alpha]`).\n    // Includes `label` and an optional `resource` or `reference`.\n    link: \"link\",\n    // Whole paragraph:\n    //\n    // ```markdown\n    // alpha\n    // bravo.\n    // ```\n    //\n    // Includes text.\n    paragraph: \"paragraph\",\n    // A reference (`[alpha]` or `[]`).\n    // Includes `referenceMarker` and an optional `referenceString`.\n    reference: \"reference\",\n    // A reference marker (`[` or `]`).\n    referenceMarker: \"referenceMarker\",\n    // Reference text (`alpha`).\n    // Includes string.\n    referenceString: \"referenceString\",\n    // A resource (`(https://example.com \"alpha\")`).\n    // Includes `resourceMarker`, an optional `resourceDestination` with an optional\n    // `whitespace` and `resourceTitle`.\n    resource: \"resource\",\n    // A resource destination (`https://example.com`).\n    // Includes `resourceDestinationLiteral` or `resourceDestinationRaw`.\n    resourceDestination: \"resourceDestination\",\n    // A literal resource destination (`<https://example.com>`).\n    // Includes `resourceDestinationLiteralMarker` and optionally\n    // `resourceDestinationString`.\n    resourceDestinationLiteral: \"resourceDestinationLiteral\",\n    // A resource destination marker (`<` or `>`).\n    resourceDestinationLiteralMarker: \"resourceDestinationLiteralMarker\",\n    // A raw resource destination (`https://example.com`).\n    // Includes `resourceDestinationString`.\n    resourceDestinationRaw: \"resourceDestinationRaw\",\n    // Resource destination text (`https://example.com`).\n    // Includes string.\n    resourceDestinationString: \"resourceDestinationString\",\n    // A resource marker (`(` or `)`).\n    resourceMarker: \"resourceMarker\",\n    // A resource title (`\"alpha\"`, `'alpha'`, or `(alpha)`).\n    // Includes `resourceTitleMarker` and optionally `resourceTitleString`.\n    resourceTitle: \"resourceTitle\",\n    // A resource title marker (`\"`, `'`, `(`, or `)`).\n    resourceTitleMarker: \"resourceTitleMarker\",\n    // Resource destination title (`alpha`).\n    // Includes string.\n    resourceTitleString: \"resourceTitleString\",\n    // Whole setext heading:\n    //\n    // ```markdown\n    // alpha\n    // bravo\n    // =====\n    // ```\n    //\n    // Includes `setextHeadingText`, `lineEnding`, `linePrefix`, and\n    // `setextHeadingLine`.\n    setextHeading: \"setextHeading\",\n    // Content in a setext heading (`alpha\\nbravo`).\n    // Includes text.\n    setextHeadingText: \"setextHeadingText\",\n    // Underline in a setext heading, including whitespace suffix (`==`).\n    // Includes `setextHeadingLineSequence`.\n    setextHeadingLine: \"setextHeadingLine\",\n    // Sequence of equals or dash characters in underline in a setext heading (`-`).\n    setextHeadingLineSequence: \"setextHeadingLineSequence\",\n    // Strong (`**alpha**`).\n    // Includes `strongSequence` and `strongText`.\n    strong: \"strong\",\n    // Sequence of strong markers (`**` or `__`).\n    strongSequence: \"strongSequence\",\n    // Strong text (`alpha`).\n    // Includes text.\n    strongText: \"strongText\",\n    // Whole thematic break:\n    //\n    // ```markdown\n    // * * *\n    // ```\n    //\n    // Includes `thematicBreakSequence` and `whitespace`.\n    thematicBreak: \"thematicBreak\",\n    // A sequence of one or more thematic break markers (`***`).\n    thematicBreakSequence: \"thematicBreakSequence\",\n    // Whole block quote:\n    //\n    // ```markdown\n    // > a\n    // >\n    // > b\n    // ```\n    //\n    // Includes `blockQuotePrefix` and flow.\n    blockQuote: \"blockQuote\",\n    // The `>` or `> ` of a block quote.\n    blockQuotePrefix: \"blockQuotePrefix\",\n    // The `>` of a block quote prefix.\n    blockQuoteMarker: \"blockQuoteMarker\",\n    // The optional ` ` of a block quote prefix.\n    blockQuotePrefixWhitespace: \"blockQuotePrefixWhitespace\",\n    // Whole ordered list:\n    //\n    // ```markdown\n    // 1. a\n    //    b\n    // ```\n    //\n    // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further\n    // lines.\n    listOrdered: \"listOrdered\",\n    // Whole unordered list:\n    //\n    // ```markdown\n    // - a\n    //   b\n    // ```\n    //\n    // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further\n    // lines.\n    listUnordered: \"listUnordered\",\n    // The indent of further list item lines.\n    listItemIndent: \"listItemIndent\",\n    // A marker, as in, `*`, `+`, `-`, `.`, or `)`.\n    listItemMarker: \"listItemMarker\",\n    // The thing that starts a list item, such as `1. `.\n    // Includes `listItemValue` if ordered, `listItemMarker`, and\n    // `listItemPrefixWhitespace` (unless followed by a line ending).\n    listItemPrefix: \"listItemPrefix\",\n    // The whitespace after a marker.\n    listItemPrefixWhitespace: \"listItemPrefixWhitespace\",\n    // The numerical value of an ordered item.\n    listItemValue: \"listItemValue\",\n    // Internal types used for subtokenizers, compiled away\n    chunkDocument: \"chunkDocument\",\n    chunkContent: \"chunkContent\",\n    chunkFlow: \"chunkFlow\",\n    chunkText: \"chunkText\",\n    chunkString: \"chunkString\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/values.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/values.js ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   values: function() { return /* binding */ values; }\n/* harmony export */ });\n/**\n * This module is compiled away!\n *\n * While micromark works based on character codes, this module includes the\n * string versions of ’em.\n * The C0 block, except for LF, CR, HT, and w/ the replacement character added,\n * are available here.\n */ const values = /** @type {const} */ {\n    ht: \"\t\",\n    lf: \"\\n\",\n    cr: \"\\r\",\n    space: \" \",\n    exclamationMark: \"!\",\n    quotationMark: '\"',\n    numberSign: \"#\",\n    dollarSign: \"$\",\n    percentSign: \"%\",\n    ampersand: \"&\",\n    apostrophe: \"'\",\n    leftParenthesis: \"(\",\n    rightParenthesis: \")\",\n    asterisk: \"*\",\n    plusSign: \"+\",\n    comma: \",\",\n    dash: \"-\",\n    dot: \".\",\n    slash: \"/\",\n    digit0: \"0\",\n    digit1: \"1\",\n    digit2: \"2\",\n    digit3: \"3\",\n    digit4: \"4\",\n    digit5: \"5\",\n    digit6: \"6\",\n    digit7: \"7\",\n    digit8: \"8\",\n    digit9: \"9\",\n    colon: \":\",\n    semicolon: \";\",\n    lessThan: \"<\",\n    equalsTo: \"=\",\n    greaterThan: \">\",\n    questionMark: \"?\",\n    atSign: \"@\",\n    uppercaseA: \"A\",\n    uppercaseB: \"B\",\n    uppercaseC: \"C\",\n    uppercaseD: \"D\",\n    uppercaseE: \"E\",\n    uppercaseF: \"F\",\n    uppercaseG: \"G\",\n    uppercaseH: \"H\",\n    uppercaseI: \"I\",\n    uppercaseJ: \"J\",\n    uppercaseK: \"K\",\n    uppercaseL: \"L\",\n    uppercaseM: \"M\",\n    uppercaseN: \"N\",\n    uppercaseO: \"O\",\n    uppercaseP: \"P\",\n    uppercaseQ: \"Q\",\n    uppercaseR: \"R\",\n    uppercaseS: \"S\",\n    uppercaseT: \"T\",\n    uppercaseU: \"U\",\n    uppercaseV: \"V\",\n    uppercaseW: \"W\",\n    uppercaseX: \"X\",\n    uppercaseY: \"Y\",\n    uppercaseZ: \"Z\",\n    leftSquareBracket: \"[\",\n    backslash: \"\\\\\",\n    rightSquareBracket: \"]\",\n    caret: \"^\",\n    underscore: \"_\",\n    graveAccent: \"`\",\n    lowercaseA: \"a\",\n    lowercaseB: \"b\",\n    lowercaseC: \"c\",\n    lowercaseD: \"d\",\n    lowercaseE: \"e\",\n    lowercaseF: \"f\",\n    lowercaseG: \"g\",\n    lowercaseH: \"h\",\n    lowercaseI: \"i\",\n    lowercaseJ: \"j\",\n    lowercaseK: \"k\",\n    lowercaseL: \"l\",\n    lowercaseM: \"m\",\n    lowercaseN: \"n\",\n    lowercaseO: \"o\",\n    lowercaseP: \"p\",\n    lowercaseQ: \"q\",\n    lowercaseR: \"r\",\n    lowercaseS: \"s\",\n    lowercaseT: \"t\",\n    lowercaseU: \"u\",\n    lowercaseV: \"v\",\n    lowercaseW: \"w\",\n    lowercaseX: \"x\",\n    lowercaseY: \"y\",\n    lowercaseZ: \"z\",\n    leftCurlyBrace: \"{\",\n    verticalBar: \"|\",\n    rightCurlyBrace: \"}\",\n    tilde: \"~\",\n    replacementCharacter: \"�\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstdXRpbC1zeW1ib2xAMi4wLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLXN5bWJvbC9saWIvdmFsdWVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7OztDQU9DLEdBQ00sTUFBTUEsU0FBUyxrQkFBa0IsR0FBSTtJQUMxQ0MsSUFBSTtJQUNKQyxJQUFJO0lBQ0pDLElBQUk7SUFDSkMsT0FBTztJQUNQQyxpQkFBaUI7SUFDakJDLGVBQWU7SUFDZkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLGFBQWE7SUFDYkMsV0FBVztJQUNYQyxZQUFZO0lBQ1pDLGlCQUFpQjtJQUNqQkMsa0JBQWtCO0lBQ2xCQyxVQUFVO0lBQ1ZDLFVBQVU7SUFDVkMsT0FBTztJQUNQQyxNQUFNO0lBQ05DLEtBQUs7SUFDTEMsT0FBTztJQUNQQyxRQUFRO0lBQ1JDLFFBQVE7SUFDUkMsUUFBUTtJQUNSQyxRQUFRO0lBQ1JDLFFBQVE7SUFDUkMsUUFBUTtJQUNSQyxRQUFRO0lBQ1JDLFFBQVE7SUFDUkMsUUFBUTtJQUNSQyxRQUFRO0lBQ1JDLE9BQU87SUFDUEMsV0FBVztJQUNYQyxVQUFVO0lBQ1ZDLFVBQVU7SUFDVkMsYUFBYTtJQUNiQyxjQUFjO0lBQ2RDLFFBQVE7SUFDUkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLG1CQUFtQjtJQUNuQkMsV0FBVztJQUNYQyxvQkFBb0I7SUFDcEJDLE9BQU87SUFDUEMsWUFBWTtJQUNaQyxhQUFhO0lBQ2JDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxnQkFBZ0I7SUFDaEJDLGFBQWE7SUFDYkMsaUJBQWlCO0lBQ2pCQyxPQUFPO0lBQ1BDLHNCQUFzQjtBQUN4QixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstdXRpbC1zeW1ib2xAMi4wLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLXN5bWJvbC9saWIvdmFsdWVzLmpzP2MzMGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIG1vZHVsZSBpcyBjb21waWxlZCBhd2F5IVxuICpcbiAqIFdoaWxlIG1pY3JvbWFyayB3b3JrcyBiYXNlZCBvbiBjaGFyYWN0ZXIgY29kZXMsIHRoaXMgbW9kdWxlIGluY2x1ZGVzIHRoZVxuICogc3RyaW5nIHZlcnNpb25zIG9mIOKAmWVtLlxuICogVGhlIEMwIGJsb2NrLCBleGNlcHQgZm9yIExGLCBDUiwgSFQsIGFuZCB3LyB0aGUgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGFkZGVkLFxuICogYXJlIGF2YWlsYWJsZSBoZXJlLlxuICovXG5leHBvcnQgY29uc3QgdmFsdWVzID0gLyoqIEB0eXBlIHtjb25zdH0gKi8gKHtcbiAgaHQ6ICdcXHQnLFxuICBsZjogJ1xcbicsXG4gIGNyOiAnXFxyJyxcbiAgc3BhY2U6ICcgJyxcbiAgZXhjbGFtYXRpb25NYXJrOiAnIScsXG4gIHF1b3RhdGlvbk1hcms6ICdcIicsXG4gIG51bWJlclNpZ246ICcjJyxcbiAgZG9sbGFyU2lnbjogJyQnLFxuICBwZXJjZW50U2lnbjogJyUnLFxuICBhbXBlcnNhbmQ6ICcmJyxcbiAgYXBvc3Ryb3BoZTogXCInXCIsXG4gIGxlZnRQYXJlbnRoZXNpczogJygnLFxuICByaWdodFBhcmVudGhlc2lzOiAnKScsXG4gIGFzdGVyaXNrOiAnKicsXG4gIHBsdXNTaWduOiAnKycsXG4gIGNvbW1hOiAnLCcsXG4gIGRhc2g6ICctJyxcbiAgZG90OiAnLicsXG4gIHNsYXNoOiAnLycsXG4gIGRpZ2l0MDogJzAnLFxuICBkaWdpdDE6ICcxJyxcbiAgZGlnaXQyOiAnMicsXG4gIGRpZ2l0MzogJzMnLFxuICBkaWdpdDQ6ICc0JyxcbiAgZGlnaXQ1OiAnNScsXG4gIGRpZ2l0NjogJzYnLFxuICBkaWdpdDc6ICc3JyxcbiAgZGlnaXQ4OiAnOCcsXG4gIGRpZ2l0OTogJzknLFxuICBjb2xvbjogJzonLFxuICBzZW1pY29sb246ICc7JyxcbiAgbGVzc1RoYW46ICc8JyxcbiAgZXF1YWxzVG86ICc9JyxcbiAgZ3JlYXRlclRoYW46ICc+JyxcbiAgcXVlc3Rpb25NYXJrOiAnPycsXG4gIGF0U2lnbjogJ0AnLFxuICB1cHBlcmNhc2VBOiAnQScsXG4gIHVwcGVyY2FzZUI6ICdCJyxcbiAgdXBwZXJjYXNlQzogJ0MnLFxuICB1cHBlcmNhc2VEOiAnRCcsXG4gIHVwcGVyY2FzZUU6ICdFJyxcbiAgdXBwZXJjYXNlRjogJ0YnLFxuICB1cHBlcmNhc2VHOiAnRycsXG4gIHVwcGVyY2FzZUg6ICdIJyxcbiAgdXBwZXJjYXNlSTogJ0knLFxuICB1cHBlcmNhc2VKOiAnSicsXG4gIHVwcGVyY2FzZUs6ICdLJyxcbiAgdXBwZXJjYXNlTDogJ0wnLFxuICB1cHBlcmNhc2VNOiAnTScsXG4gIHVwcGVyY2FzZU46ICdOJyxcbiAgdXBwZXJjYXNlTzogJ08nLFxuICB1cHBlcmNhc2VQOiAnUCcsXG4gIHVwcGVyY2FzZVE6ICdRJyxcbiAgdXBwZXJjYXNlUjogJ1InLFxuICB1cHBlcmNhc2VTOiAnUycsXG4gIHVwcGVyY2FzZVQ6ICdUJyxcbiAgdXBwZXJjYXNlVTogJ1UnLFxuICB1cHBlcmNhc2VWOiAnVicsXG4gIHVwcGVyY2FzZVc6ICdXJyxcbiAgdXBwZXJjYXNlWDogJ1gnLFxuICB1cHBlcmNhc2VZOiAnWScsXG4gIHVwcGVyY2FzZVo6ICdaJyxcbiAgbGVmdFNxdWFyZUJyYWNrZXQ6ICdbJyxcbiAgYmFja3NsYXNoOiAnXFxcXCcsXG4gIHJpZ2h0U3F1YXJlQnJhY2tldDogJ10nLFxuICBjYXJldDogJ14nLFxuICB1bmRlcnNjb3JlOiAnXycsXG4gIGdyYXZlQWNjZW50OiAnYCcsXG4gIGxvd2VyY2FzZUE6ICdhJyxcbiAgbG93ZXJjYXNlQjogJ2InLFxuICBsb3dlcmNhc2VDOiAnYycsXG4gIGxvd2VyY2FzZUQ6ICdkJyxcbiAgbG93ZXJjYXNlRTogJ2UnLFxuICBsb3dlcmNhc2VGOiAnZicsXG4gIGxvd2VyY2FzZUc6ICdnJyxcbiAgbG93ZXJjYXNlSDogJ2gnLFxuICBsb3dlcmNhc2VJOiAnaScsXG4gIGxvd2VyY2FzZUo6ICdqJyxcbiAgbG93ZXJjYXNlSzogJ2snLFxuICBsb3dlcmNhc2VMOiAnbCcsXG4gIGxvd2VyY2FzZU06ICdtJyxcbiAgbG93ZXJjYXNlTjogJ24nLFxuICBsb3dlcmNhc2VPOiAnbycsXG4gIGxvd2VyY2FzZVA6ICdwJyxcbiAgbG93ZXJjYXNlUTogJ3EnLFxuICBsb3dlcmNhc2VSOiAncicsXG4gIGxvd2VyY2FzZVM6ICdzJyxcbiAgbG93ZXJjYXNlVDogJ3QnLFxuICBsb3dlcmNhc2VVOiAndScsXG4gIGxvd2VyY2FzZVY6ICd2JyxcbiAgbG93ZXJjYXNlVzogJ3cnLFxuICBsb3dlcmNhc2VYOiAneCcsXG4gIGxvd2VyY2FzZVk6ICd5JyxcbiAgbG93ZXJjYXNlWjogJ3onLFxuICBsZWZ0Q3VybHlCcmFjZTogJ3snLFxuICB2ZXJ0aWNhbEJhcjogJ3wnLFxuICByaWdodEN1cmx5QnJhY2U6ICd9JyxcbiAgdGlsZGU6ICd+JyxcbiAgcmVwbGFjZW1lbnRDaGFyYWN0ZXI6ICfvv70nXG59KVxuIl0sIm5hbWVzIjpbInZhbHVlcyIsImh0IiwibGYiLCJjciIsInNwYWNlIiwiZXhjbGFtYXRpb25NYXJrIiwicXVvdGF0aW9uTWFyayIsIm51bWJlclNpZ24iLCJkb2xsYXJTaWduIiwicGVyY2VudFNpZ24iLCJhbXBlcnNhbmQiLCJhcG9zdHJvcGhlIiwibGVmdFBhcmVudGhlc2lzIiwicmlnaHRQYXJlbnRoZXNpcyIsImFzdGVyaXNrIiwicGx1c1NpZ24iLCJjb21tYSIsImRhc2giLCJkb3QiLCJzbGFzaCIsImRpZ2l0MCIsImRpZ2l0MSIsImRpZ2l0MiIsImRpZ2l0MyIsImRpZ2l0NCIsImRpZ2l0NSIsImRpZ2l0NiIsImRpZ2l0NyIsImRpZ2l0OCIsImRpZ2l0OSIsImNvbG9uIiwic2VtaWNvbG9uIiwibGVzc1RoYW4iLCJlcXVhbHNUbyIsImdyZWF0ZXJUaGFuIiwicXVlc3Rpb25NYXJrIiwiYXRTaWduIiwidXBwZXJjYXNlQSIsInVwcGVyY2FzZUIiLCJ1cHBlcmNhc2VDIiwidXBwZXJjYXNlRCIsInVwcGVyY2FzZUUiLCJ1cHBlcmNhc2VGIiwidXBwZXJjYXNlRyIsInVwcGVyY2FzZUgiLCJ1cHBlcmNhc2VJIiwidXBwZXJjYXNlSiIsInVwcGVyY2FzZUsiLCJ1cHBlcmNhc2VMIiwidXBwZXJjYXNlTSIsInVwcGVyY2FzZU4iLCJ1cHBlcmNhc2VPIiwidXBwZXJjYXNlUCIsInVwcGVyY2FzZVEiLCJ1cHBlcmNhc2VSIiwidXBwZXJjYXNlUyIsInVwcGVyY2FzZVQiLCJ1cHBlcmNhc2VVIiwidXBwZXJjYXNlViIsInVwcGVyY2FzZVciLCJ1cHBlcmNhc2VYIiwidXBwZXJjYXNlWSIsInVwcGVyY2FzZVoiLCJsZWZ0U3F1YXJlQnJhY2tldCIsImJhY2tzbGFzaCIsInJpZ2h0U3F1YXJlQnJhY2tldCIsImNhcmV0IiwidW5kZXJzY29yZSIsImdyYXZlQWNjZW50IiwibG93ZXJjYXNlQSIsImxvd2VyY2FzZUIiLCJsb3dlcmNhc2VDIiwibG93ZXJjYXNlRCIsImxvd2VyY2FzZUUiLCJsb3dlcmNhc2VGIiwibG93ZXJjYXNlRyIsImxvd2VyY2FzZUgiLCJsb3dlcmNhc2VJIiwibG93ZXJjYXNlSiIsImxvd2VyY2FzZUsiLCJsb3dlcmNhc2VMIiwibG93ZXJjYXNlTSIsImxvd2VyY2FzZU4iLCJsb3dlcmNhc2VPIiwibG93ZXJjYXNlUCIsImxvd2VyY2FzZVEiLCJsb3dlcmNhc2VSIiwibG93ZXJjYXNlUyIsImxvd2VyY2FzZVQiLCJsb3dlcmNhc2VVIiwibG93ZXJjYXNlViIsImxvd2VyY2FzZVciLCJsb3dlcmNhc2VYIiwibG93ZXJjYXNlWSIsImxvd2VyY2FzZVoiLCJsZWZ0Q3VybHlCcmFjZSIsInZlcnRpY2FsQmFyIiwicmlnaHRDdXJseUJyYWNlIiwidGlsZGUiLCJyZXBsYWNlbWVudENoYXJhY3RlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/values.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/constructs.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/constructs.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   attentionMarkers: function() { return /* binding */ attentionMarkers; },\n/* harmony export */   contentInitial: function() { return /* binding */ contentInitial; },\n/* harmony export */   disable: function() { return /* binding */ disable; },\n/* harmony export */   document: function() { return /* binding */ document; },\n/* harmony export */   flow: function() { return /* binding */ flow; },\n/* harmony export */   flowInitial: function() { return /* binding */ flowInitial; },\n/* harmony export */   insideSpan: function() { return /* binding */ insideSpan; },\n/* harmony export */   string: function() { return /* binding */ string; },\n/* harmony export */   text: function() { return /* binding */ text; }\n/* harmony export */ });\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/list.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/block-quote.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/definition.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-indented.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/heading-atx.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/thematic-break.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/setext-underline.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/html-flow.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-fenced.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/character-reference.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/character-escape.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/line-ending.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-start-image.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/attention.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/autolink.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/html-text.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-start-link.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-end.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-text.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var _initialize_text_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./initialize/text.js */ \"(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/text.js\");\n/**\n * @import {Extension} from 'micromark-util-types'\n */ \n\n\n/** @satisfies {Extension['document']} */ const document = {\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.asterisk]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.plusSign]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.dash]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.digit0]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.digit1]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.digit2]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.digit3]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.digit4]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.digit5]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.digit6]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.digit7]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.digit8]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.digit9]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.greaterThan]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_2__.blockQuote\n};\n/** @satisfies {Extension['contentInitial']} */ const contentInitial = {\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftSquareBracket]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_3__.definition\n};\n/** @satisfies {Extension['flowInitial']} */ const flowInitial = {\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.horizontalTab]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_4__.codeIndented,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.virtualSpace]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_4__.codeIndented,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.space]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_4__.codeIndented\n};\n/** @satisfies {Extension['flow']} */ const flow = {\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.numberSign]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_5__.headingAtx,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.asterisk]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_6__.thematicBreak,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.dash]: [\n        micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_7__.setextUnderline,\n        micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_6__.thematicBreak\n    ],\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_8__.htmlFlow,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.equalsTo]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_7__.setextUnderline,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.underscore]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_6__.thematicBreak,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.graveAccent]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_9__.codeFenced,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.tilde]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_9__.codeFenced\n};\n/** @satisfies {Extension['string']} */ const string = {\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.ampersand]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_10__.characterReference,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.backslash]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_11__.characterEscape\n};\n/** @satisfies {Extension['text']} */ const text = {\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.carriageReturn]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_12__.lineEnding,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lineFeed]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_12__.lineEnding,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.carriageReturnLineFeed]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_12__.lineEnding,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.exclamationMark]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_13__.labelStartImage,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.ampersand]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_10__.characterReference,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.asterisk]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_14__.attention,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan]: [\n        micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_15__.autolink,\n        micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_16__.htmlText\n    ],\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftSquareBracket]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_17__.labelStartLink,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.backslash]: [\n        micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_18__.hardBreakEscape,\n        micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_11__.characterEscape\n    ],\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.rightSquareBracket]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_19__.labelEnd,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.underscore]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_14__.attention,\n    [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.graveAccent]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_20__.codeText\n};\n/** @satisfies {Extension['insideSpan']} */ const insideSpan = {\n    null: [\n        micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_14__.attention,\n        _initialize_text_js__WEBPACK_IMPORTED_MODULE_21__.resolver\n    ]\n};\n/** @satisfies {Extension['attentionMarkers']} */ const attentionMarkers = {\n    null: [\n        micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.asterisk,\n        micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.underscore\n    ]\n};\n/** @satisfies {Extension['disable']} */ const disable = {\n    null: []\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/constructs.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/create-tokenizer.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/create-tokenizer.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTokenizer: function() { return /* binding */ createTokenizer; }\n/* harmony export */ });\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ \"(app-pages-browser)/./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js\");\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-chunked */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-chunked@2.0.1/node_modules/micromark-util-chunked/dev/index.js\");\n/* harmony import */ var micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-resolve-all */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-resolve-all@2.0.1/node_modules/micromark-util-resolve-all/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/values.js\");\n/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */ /**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */ \n\n\n\n\n\nconst debug = debug__WEBPACK_IMPORTED_MODULE_0__(\"micromark\");\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */ function createTokenizer(parser, initialize, from) {\n    /** @type {Point} */ let point = {\n        _bufferIndex: -1,\n        _index: 0,\n        line: from && from.line || 1,\n        column: from && from.column || 1,\n        offset: from && from.offset || 0\n    };\n    /** @type {Record<string, number>} */ const columnStart = {};\n    /** @type {Array<Construct>} */ const resolveAllConstructs = [];\n    /** @type {Array<Chunk>} */ let chunks = [];\n    /** @type {Array<Token>} */ let stack = [];\n    /** @type {boolean | undefined} */ let consumed = true;\n    /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */ const effects = {\n        attempt: constructFactory(onsuccessfulconstruct),\n        check: constructFactory(onsuccessfulcheck),\n        consume,\n        enter,\n        exit,\n        interrupt: constructFactory(onsuccessfulcheck, {\n            interrupt: true\n        })\n    };\n    /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */ const context = {\n        code: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof,\n        containerState: {},\n        defineSkip,\n        events: [],\n        now,\n        parser,\n        previous: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof,\n        sliceSerialize,\n        sliceStream,\n        write\n    };\n    /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */ let state = initialize.tokenize.call(context, effects);\n    /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */ let expectedCode;\n    if (initialize.resolveAll) {\n        resolveAllConstructs.push(initialize);\n    }\n    return context;\n    /** @type {TokenizeContext['write']} */ function write(slice) {\n        chunks = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.push)(chunks, slice);\n        main();\n        // Exit if we’re not done, resolve might change stuff.\n        if (chunks[chunks.length - 1] !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            return [];\n        }\n        addResult(initialize, 0);\n        // Otherwise, resolve, and exit.\n        context.events = (0,micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_3__.resolveAll)(resolveAllConstructs, context.events, context);\n        return context.events;\n    }\n    //\n    // Tools.\n    //\n    /** @type {TokenizeContext['sliceSerialize']} */ function sliceSerialize(token, expandTabs) {\n        return serializeChunks(sliceStream(token), expandTabs);\n    }\n    /** @type {TokenizeContext['sliceStream']} */ function sliceStream(token) {\n        return sliceChunks(chunks, token);\n    }\n    /** @type {TokenizeContext['now']} */ function now() {\n        // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n        const { _bufferIndex, _index, line, column, offset } = point;\n        return {\n            _bufferIndex,\n            _index,\n            line,\n            column,\n            offset\n        };\n    }\n    /** @type {TokenizeContext['defineSkip']} */ function defineSkip(value) {\n        columnStart[value.line] = value.column;\n        accountForPotentialSkip();\n        debug(\"position: define skip: `%j`\", point);\n    }\n    //\n    // State management.\n    //\n    /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */ function main() {\n        /** @type {number} */ let chunkIndex;\n        while(point._index < chunks.length){\n            const chunk = chunks[point._index];\n            // If we’re in a buffer chunk, loop through it.\n            if (typeof chunk === \"string\") {\n                chunkIndex = point._index;\n                if (point._bufferIndex < 0) {\n                    point._bufferIndex = 0;\n                }\n                while(point._index === chunkIndex && point._bufferIndex < chunk.length){\n                    go(chunk.charCodeAt(point._bufferIndex));\n                }\n            } else {\n                go(chunk);\n            }\n        }\n    }\n    /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */ function go(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(consumed === true, \"expected character to be consumed\");\n        consumed = undefined;\n        debug(\"main: passing `%s` to %s\", code, state && state.name);\n        expectedCode = code;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(typeof state === \"function\", \"expected state\");\n        state = state(code);\n    }\n    /** @type {Effects['consume']} */ function consume(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(code === expectedCode, \"expected given code to equal expected code\");\n        debug(\"consume: `%s`\", code);\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(consumed === undefined, \"expected code to not have been consumed: this might be because `return x(code)` instead of `return x` was used\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(code === null ? context.events.length === 0 || context.events[context.events.length - 1][0] === \"exit\" : context.events[context.events.length - 1][0] === \"enter\", \"expected last token to be open\");\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {\n            point.line++;\n            point.column = 1;\n            point.offset += code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.carriageReturnLineFeed ? 2 : 1;\n            accountForPotentialSkip();\n            debug(\"position: after eol: `%j`\", point);\n        } else if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.virtualSpace) {\n            point.column++;\n            point.offset++;\n        }\n        // Not in a string chunk.\n        if (point._bufferIndex < 0) {\n            point._index++;\n        } else {\n            point._bufferIndex++;\n            // At end of string chunk.\n            if (point._bufferIndex === // Points w/ non-negative `_bufferIndex` reference\n            // strings.\n            /** @type {string} */ chunks[point._index].length) {\n                point._bufferIndex = -1;\n                point._index++;\n            }\n        }\n        // Expose the previous character.\n        context.previous = code;\n        // Mark as consumed.\n        consumed = true;\n    }\n    /** @type {Effects['enter']} */ function enter(type, fields) {\n        /** @type {Token} */ // @ts-expect-error Patch instead of assign required fields to help GC.\n        const token = fields || {};\n        token.type = type;\n        token.start = now();\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(typeof type === \"string\", \"expected string type\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(type.length > 0, \"expected non-empty string\");\n        debug(\"enter: `%s`\", type);\n        context.events.push([\n            \"enter\",\n            token,\n            context\n        ]);\n        stack.push(token);\n        return token;\n    }\n    /** @type {Effects['exit']} */ function exit(type) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(typeof type === \"string\", \"expected string type\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(type.length > 0, \"expected non-empty string\");\n        const token = stack.pop();\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(token, \"cannot close w/o open tokens\");\n        token.end = now();\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(type === token.type, \"expected exit token to match current token\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(!(token.start._index === token.end._index && token.start._bufferIndex === token.end._bufferIndex), \"expected non-empty token (`\" + type + \"`)\");\n        debug(\"exit: `%s`\", token.type);\n        context.events.push([\n            \"exit\",\n            token,\n            context\n        ]);\n        return token;\n    }\n    /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */ function onsuccessfulconstruct(construct, info) {\n        addResult(construct, info.from);\n    }\n    /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */ function onsuccessfulcheck(_, info) {\n        info.restore();\n    }\n    /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */ function constructFactory(onreturn, fields) {\n        return hook;\n        /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */ function hook(constructs, returnState, bogusState) {\n            /** @type {ReadonlyArray<Construct>} */ let listOfConstructs;\n            /** @type {number} */ let constructIndex;\n            /** @type {Construct} */ let currentConstruct;\n            /** @type {Info} */ let info;\n            return Array.isArray(constructs) ? /* c8 ignore next 1 */ handleListOfConstructs(constructs) : \"tokenize\" in constructs ? handleListOfConstructs([\n                /** @type {Construct} */ constructs\n            ]) : handleMapOfConstructs(constructs);\n            /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */ function handleMapOfConstructs(map) {\n                return start;\n                /** @type {State} */ function start(code) {\n                    const left = code !== null && map[code];\n                    const all = code !== null && map.null;\n                    const list = [\n                        // To do: add more extension tests.\n                        /* c8 ignore next 2 */ ...Array.isArray(left) ? left : left ? [\n                            left\n                        ] : [],\n                        ...Array.isArray(all) ? all : all ? [\n                            all\n                        ] : []\n                    ];\n                    return handleListOfConstructs(list)(code);\n                }\n            }\n            /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */ function handleListOfConstructs(list) {\n                listOfConstructs = list;\n                constructIndex = 0;\n                if (list.length === 0) {\n                    (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(bogusState, \"expected `bogusState` to be given\");\n                    return bogusState;\n                }\n                return handleConstruct(list[constructIndex]);\n            }\n            /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */ function handleConstruct(construct) {\n                return start;\n                /** @type {State} */ function start(code) {\n                    // To do: not needed to store if there is no bogus state, probably?\n                    // Currently doesn’t work because `inspect` in document does a check\n                    // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n                    // by not storing.\n                    info = store();\n                    currentConstruct = construct;\n                    if (!construct.partial) {\n                        context.currentConstruct = construct;\n                    }\n                    // Always populated by defaults.\n                    (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(context.parser.constructs.disable.null, \"expected `disable.null` to be populated\");\n                    if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n                        return nok(code);\n                    }\n                    return construct.tokenize.call(// If we do have fields, create an object w/ `context` as its\n                    // prototype.\n                    // This allows a “live binding”, which is needed for `interrupt`.\n                    fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n                }\n            }\n            /** @type {State} */ function ok(code) {\n                (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(code === expectedCode, \"expected code\");\n                consumed = true;\n                onreturn(currentConstruct, info);\n                return returnState;\n            }\n            /** @type {State} */ function nok(code) {\n                (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(code === expectedCode, \"expected code\");\n                consumed = true;\n                info.restore();\n                if (++constructIndex < listOfConstructs.length) {\n                    return handleConstruct(listOfConstructs[constructIndex]);\n                }\n                return bogusState;\n            }\n        }\n    }\n    /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */ function addResult(construct, from) {\n        if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n            resolveAllConstructs.push(construct);\n        }\n        if (construct.resolve) {\n            (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.splice)(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n        }\n        if (construct.resolveTo) {\n            context.events = construct.resolveTo(context.events, context);\n        }\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(construct.partial || context.events.length === 0 || context.events[context.events.length - 1][0] === \"exit\", \"expected last token to end\");\n    }\n    /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */ function store() {\n        const startPoint = now();\n        const startPrevious = context.previous;\n        const startCurrentConstruct = context.currentConstruct;\n        const startEventsIndex = context.events.length;\n        const startStack = Array.from(stack);\n        return {\n            from: startEventsIndex,\n            restore\n        };\n        /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */ function restore() {\n            point = startPoint;\n            context.previous = startPrevious;\n            context.currentConstruct = startCurrentConstruct;\n            context.events.length = startEventsIndex;\n            stack = startStack;\n            accountForPotentialSkip();\n            debug(\"position: restore: `%j`\", point);\n        }\n    }\n    /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */ function accountForPotentialSkip() {\n        if (point.line in columnStart && point.column < 2) {\n            point.column = columnStart[point.line];\n            point.offset += columnStart[point.line] - 1;\n        }\n    }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */ function sliceChunks(chunks, token) {\n    const startIndex = token.start._index;\n    const startBufferIndex = token.start._bufferIndex;\n    const endIndex = token.end._index;\n    const endBufferIndex = token.end._bufferIndex;\n    /** @type {Array<Chunk>} */ let view;\n    if (startIndex === endIndex) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(endBufferIndex > -1, \"expected non-negative end buffer index\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(startBufferIndex > -1, \"expected non-negative start buffer index\");\n        // @ts-expect-error `_bufferIndex` is used on string chunks.\n        view = [\n            chunks[startIndex].slice(startBufferIndex, endBufferIndex)\n        ];\n    } else {\n        view = chunks.slice(startIndex, endIndex);\n        if (startBufferIndex > -1) {\n            const head = view[0];\n            if (typeof head === \"string\") {\n                view[0] = head.slice(startBufferIndex);\n            /* c8 ignore next 4 -- used to be used, no longer */ } else {\n                (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(startBufferIndex === 0, \"expected `startBufferIndex` to be `0`\");\n                view.shift();\n            }\n        }\n        if (endBufferIndex > 0) {\n            // @ts-expect-error `_bufferIndex` is used on string chunks.\n            view.push(chunks[endIndex].slice(0, endBufferIndex));\n        }\n    }\n    return view;\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */ function serializeChunks(chunks, expandTabs) {\n    let index = -1;\n    /** @type {Array<string>} */ const result = [];\n    /** @type {boolean | undefined} */ let atTab;\n    while(++index < chunks.length){\n        const chunk = chunks[index];\n        /** @type {string} */ let value;\n        if (typeof chunk === \"string\") {\n            value = chunk;\n        } else switch(chunk){\n            case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.carriageReturn:\n                {\n                    value = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_6__.values.cr;\n                    break;\n                }\n            case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lineFeed:\n                {\n                    value = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_6__.values.lf;\n                    break;\n                }\n            case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.carriageReturnLineFeed:\n                {\n                    value = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_6__.values.cr + micromark_util_symbol__WEBPACK_IMPORTED_MODULE_6__.values.lf;\n                    break;\n                }\n            case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.horizontalTab:\n                {\n                    value = expandTabs ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_6__.values.space : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_6__.values.ht;\n                    break;\n                }\n            case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.virtualSpace:\n                {\n                    if (!expandTabs && atTab) continue;\n                    value = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_6__.values.space;\n                    break;\n                }\n            default:\n                {\n                    (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(typeof chunk === \"number\", \"expected number\");\n                    // Currently only replacement character.\n                    value = String.fromCharCode(chunk);\n                }\n        }\n        atTab = chunk === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.horizontalTab;\n        result.push(value);\n    }\n    return result.join(\"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/create-tokenizer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/content.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/content.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   content: function() { return /* binding */ content; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {InitialConstruct} */ const content = {\n    tokenize: initializeContent\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */ function initializeContent(effects) {\n    const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n    /** @type {Token} */ let previous;\n    return contentStart;\n    /** @type {State} */ function afterContentStartConstruct(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code), \"expected eol or eof\");\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            effects.consume(code);\n            return;\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding);\n        return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, contentStart, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.linePrefix);\n    }\n    /** @type {State} */ function paragraphInitial(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && !(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code), \"expected anything other than a line ending or EOF\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.paragraph);\n        return lineStart(code);\n    }\n    /** @type {State} */ function lineStart(code) {\n        const token = effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.chunkText, {\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.constants.contentTypeText,\n            previous\n        });\n        if (previous) {\n            previous.next = token;\n        }\n        previous = token;\n        return data(code);\n    }\n    /** @type {State} */ function data(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.chunkText);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.paragraph);\n            effects.consume(code);\n            return;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.chunkText);\n            return lineStart;\n        }\n        // Data.\n        effects.consume(code);\n        return data;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtANC4wLjIvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kZXYvbGliL2luaXRpYWxpemUvY29udGVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0NBUUMsR0FFa0M7QUFDaUI7QUFDTztBQUNFO0FBRTdELDZCQUE2QixHQUN0QixNQUFNTyxVQUFVO0lBQUNDLFVBQVVDO0FBQWlCLEVBQUM7QUFFcEQ7Ozs7O0NBS0MsR0FDRCxTQUFTQSxrQkFBa0JDLE9BQU87SUFDaEMsTUFBTUMsZUFBZUQsUUFBUUUsT0FBTyxDQUNsQyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDQyxjQUFjLEVBQ3JDQyw0QkFDQUM7SUFFRixrQkFBa0IsR0FDbEIsSUFBSUM7SUFFSixPQUFPUDtJQUVQLGtCQUFrQixHQUNsQixTQUFTSywyQkFBMkJHLElBQUk7UUFDdENsQiwwQ0FBTUEsQ0FDSmtCLFNBQVNmLHdEQUFLQSxDQUFDZ0IsR0FBRyxJQUFJakIsNEVBQWtCQSxDQUFDZ0IsT0FDekM7UUFHRixJQUFJQSxTQUFTZix3REFBS0EsQ0FBQ2dCLEdBQUcsRUFBRTtZQUN0QlYsUUFBUVcsT0FBTyxDQUFDRjtZQUNoQjtRQUNGO1FBRUFULFFBQVFZLEtBQUssQ0FBQ2hCLHdEQUFLQSxDQUFDaUIsVUFBVTtRQUM5QmIsUUFBUVcsT0FBTyxDQUFDRjtRQUNoQlQsUUFBUWMsSUFBSSxDQUFDbEIsd0RBQUtBLENBQUNpQixVQUFVO1FBQzdCLE9BQU9yQixxRUFBWUEsQ0FBQ1EsU0FBU0MsY0FBY0wsd0RBQUtBLENBQUNtQixVQUFVO0lBQzdEO0lBRUEsa0JBQWtCLEdBQ2xCLFNBQVNSLGlCQUFpQkUsSUFBSTtRQUM1QmxCLDBDQUFNQSxDQUNKa0IsU0FBU2Ysd0RBQUtBLENBQUNnQixHQUFHLElBQUksQ0FBQ2pCLDRFQUFrQkEsQ0FBQ2dCLE9BQzFDO1FBRUZULFFBQVFZLEtBQUssQ0FBQ2hCLHdEQUFLQSxDQUFDb0IsU0FBUztRQUM3QixPQUFPQyxVQUFVUjtJQUNuQjtJQUVBLGtCQUFrQixHQUNsQixTQUFTUSxVQUFVUixJQUFJO1FBQ3JCLE1BQU1TLFFBQVFsQixRQUFRWSxLQUFLLENBQUNoQix3REFBS0EsQ0FBQ3VCLFNBQVMsRUFBRTtZQUMzQ0MsYUFBYXpCLDREQUFTQSxDQUFDMEIsZUFBZTtZQUN0Q2I7UUFDRjtRQUVBLElBQUlBLFVBQVU7WUFDWkEsU0FBU2MsSUFBSSxHQUFHSjtRQUNsQjtRQUVBVixXQUFXVTtRQUVYLE9BQU9LLEtBQUtkO0lBQ2Q7SUFFQSxrQkFBa0IsR0FDbEIsU0FBU2MsS0FBS2QsSUFBSTtRQUNoQixJQUFJQSxTQUFTZix3REFBS0EsQ0FBQ2dCLEdBQUcsRUFBRTtZQUN0QlYsUUFBUWMsSUFBSSxDQUFDbEIsd0RBQUtBLENBQUN1QixTQUFTO1lBQzVCbkIsUUFBUWMsSUFBSSxDQUFDbEIsd0RBQUtBLENBQUNvQixTQUFTO1lBQzVCaEIsUUFBUVcsT0FBTyxDQUFDRjtZQUNoQjtRQUNGO1FBRUEsSUFBSWhCLDRFQUFrQkEsQ0FBQ2dCLE9BQU87WUFDNUJULFFBQVFXLE9BQU8sQ0FBQ0Y7WUFDaEJULFFBQVFjLElBQUksQ0FBQ2xCLHdEQUFLQSxDQUFDdUIsU0FBUztZQUM1QixPQUFPRjtRQUNUO1FBRUEsUUFBUTtRQUNSakIsUUFBUVcsT0FBTyxDQUFDRjtRQUNoQixPQUFPYztJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0A0LjAuMi9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rldi9saWIvaW5pdGlhbGl6ZS9jb250ZW50LmpzPzA2MGUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgSW5pdGlhbENvbnN0cnVjdCxcbiAqICAgSW5pdGlhbGl6ZXIsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZ30gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2RlcywgY29uc3RhbnRzLCB0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuXG4vKiogQHR5cGUge0luaXRpYWxDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgY29udGVudCA9IHt0b2tlbml6ZTogaW5pdGlhbGl6ZUNvbnRlbnR9XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtJbml0aWFsaXplcn1cbiAqICAgQ29udGVudC5cbiAqL1xuZnVuY3Rpb24gaW5pdGlhbGl6ZUNvbnRlbnQoZWZmZWN0cykge1xuICBjb25zdCBjb250ZW50U3RhcnQgPSBlZmZlY3RzLmF0dGVtcHQoXG4gICAgdGhpcy5wYXJzZXIuY29uc3RydWN0cy5jb250ZW50SW5pdGlhbCxcbiAgICBhZnRlckNvbnRlbnRTdGFydENvbnN0cnVjdCxcbiAgICBwYXJhZ3JhcGhJbml0aWFsXG4gIClcbiAgLyoqIEB0eXBlIHtUb2tlbn0gKi9cbiAgbGV0IHByZXZpb3VzXG5cbiAgcmV0dXJuIGNvbnRlbnRTdGFydFxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGFmdGVyQ29udGVudFN0YXJ0Q29uc3RydWN0KGNvZGUpIHtcbiAgICBhc3NlcnQoXG4gICAgICBjb2RlID09PSBjb2Rlcy5lb2YgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpLFxuICAgICAgJ2V4cGVjdGVkIGVvbCBvciBlb2YnXG4gICAgKVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmVvZikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmxpbmVFbmRpbmcpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmxpbmVFbmRpbmcpXG4gICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBjb250ZW50U3RhcnQsIHR5cGVzLmxpbmVQcmVmaXgpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBwYXJhZ3JhcGhJbml0aWFsKGNvZGUpIHtcbiAgICBhc3NlcnQoXG4gICAgICBjb2RlICE9PSBjb2Rlcy5lb2YgJiYgIW1hcmtkb3duTGluZUVuZGluZyhjb2RlKSxcbiAgICAgICdleHBlY3RlZCBhbnl0aGluZyBvdGhlciB0aGFuIGEgbGluZSBlbmRpbmcgb3IgRU9GJ1xuICAgIClcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLnBhcmFncmFwaClcbiAgICByZXR1cm4gbGluZVN0YXJ0KGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBsaW5lU3RhcnQoY29kZSkge1xuICAgIGNvbnN0IHRva2VuID0gZWZmZWN0cy5lbnRlcih0eXBlcy5jaHVua1RleHQsIHtcbiAgICAgIGNvbnRlbnRUeXBlOiBjb25zdGFudHMuY29udGVudFR5cGVUZXh0LFxuICAgICAgcHJldmlvdXNcbiAgICB9KVxuXG4gICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICBwcmV2aW91cy5uZXh0ID0gdG9rZW5cbiAgICB9XG5cbiAgICBwcmV2aW91cyA9IHRva2VuXG5cbiAgICByZXR1cm4gZGF0YShjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gZGF0YShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmVvZikge1xuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmNodW5rVGV4dClcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5wYXJhZ3JhcGgpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmNodW5rVGV4dClcbiAgICAgIHJldHVybiBsaW5lU3RhcnRcbiAgICB9XG5cbiAgICAvLyBEYXRhLlxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBkYXRhXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJvayIsImFzc2VydCIsImZhY3RvcnlTcGFjZSIsIm1hcmtkb3duTGluZUVuZGluZyIsImNvZGVzIiwiY29uc3RhbnRzIiwidHlwZXMiLCJjb250ZW50IiwidG9rZW5pemUiLCJpbml0aWFsaXplQ29udGVudCIsImVmZmVjdHMiLCJjb250ZW50U3RhcnQiLCJhdHRlbXB0IiwicGFyc2VyIiwiY29uc3RydWN0cyIsImNvbnRlbnRJbml0aWFsIiwiYWZ0ZXJDb250ZW50U3RhcnRDb25zdHJ1Y3QiLCJwYXJhZ3JhcGhJbml0aWFsIiwicHJldmlvdXMiLCJjb2RlIiwiZW9mIiwiY29uc3VtZSIsImVudGVyIiwibGluZUVuZGluZyIsImV4aXQiLCJsaW5lUHJlZml4IiwicGFyYWdyYXBoIiwibGluZVN0YXJ0IiwidG9rZW4iLCJjaHVua1RleHQiLCJjb250ZW50VHlwZSIsImNvbnRlbnRUeXBlVGV4dCIsIm5leHQiLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/content.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/document.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/document.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   document: function() { return /* binding */ document; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-chunked */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-chunked@2.0.1/node_modules/micromark-util-chunked/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */ /**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */ \n\n\n\n\n/** @type {InitialConstruct} */ const document = {\n    tokenize: initializeDocument\n};\n/** @type {Construct} */ const containerConstruct = {\n    tokenize: tokenizeContainer\n};\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */ function initializeDocument(effects) {\n    const self = this;\n    /** @type {Array<StackItem>} */ const stack = [];\n    let continued = 0;\n    /** @type {TokenizeContext | undefined} */ let childFlow;\n    /** @type {Token | undefined} */ let childToken;\n    /** @type {number} */ let lineStartOffset;\n    return start;\n    /** @type {State} */ function start(code) {\n        // First we iterate through the open blocks, starting with the root\n        // document, and descending through last children down to the last open\n        // block.\n        // Each block imposes a condition that the line must satisfy if the block is\n        // to remain open.\n        // For example, a block quote requires a `>` character.\n        // A paragraph requires a non-blank line.\n        // In this phase we may match all or just some of the open blocks.\n        // But we cannot close unmatched blocks yet, because we may have a lazy\n        // continuation line.\n        if (continued < stack.length) {\n            const item = stack[continued];\n            self.containerState = item[1];\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(item[0].continuation, \"expected `continuation` to be defined on container construct\");\n            return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n        }\n        // Done.\n        return checkNewContainers(code);\n    }\n    /** @type {State} */ function documentContinue(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(self.containerState, \"expected `containerState` to be defined after continuation\");\n        continued++;\n        // Note: this field is called `_closeFlow` but it also closes containers.\n        // Perhaps a good idea to rename it but it’s already used in the wild by\n        // extensions.\n        if (self.containerState._closeFlow) {\n            self.containerState._closeFlow = undefined;\n            if (childFlow) {\n                closeFlow();\n            }\n            // Note: this algorithm for moving events around is similar to the\n            // algorithm when dealing with lazy lines in `writeToChild`.\n            const indexBeforeExits = self.events.length;\n            let indexBeforeFlow = indexBeforeExits;\n            /** @type {Point | undefined} */ let point;\n            // Find the flow chunk.\n            while(indexBeforeFlow--){\n                if (self.events[indexBeforeFlow][0] === \"exit\" && self.events[indexBeforeFlow][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.chunkFlow) {\n                    point = self.events[indexBeforeFlow][1].end;\n                    break;\n                }\n            }\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(point, \"could not find previous flow chunk\");\n            exitContainers(continued);\n            // Fix positions.\n            let index = indexBeforeExits;\n            while(index < self.events.length){\n                self.events[index][1].end = {\n                    ...point\n                };\n                index++;\n            }\n            // Inject the exits earlier (they’re still also at the end).\n            (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.splice)(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n            // Discard the duplicate exits.\n            self.events.length = index;\n            return checkNewContainers(code);\n        }\n        return start(code);\n    }\n    /** @type {State} */ function checkNewContainers(code) {\n        // Next, after consuming the continuation markers for existing blocks, we\n        // look for new block starts (e.g. `>` for a block quote).\n        // If we encounter a new block start, we close any blocks unmatched in\n        // step 1 before creating the new block as a child of the last matched\n        // block.\n        if (continued === stack.length) {\n            // No need to `check` whether there’s a container, of `exitContainers`\n            // would be moot.\n            // We can instead immediately `attempt` to parse one.\n            if (!childFlow) {\n                return documentContinued(code);\n            }\n            // If we have concrete content, such as block HTML or fenced code,\n            // we can’t have containers “pierce” into them, so we can immediately\n            // start.\n            if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n                return flowStart(code);\n            }\n            // If we do have flow, it could still be a blank line,\n            // but we’d be interrupting it w/ a new container if there’s a current\n            // construct.\n            // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n            // needed in micromark-extension-gfm-table@1.0.6).\n            self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n        }\n        // Check if there is a new container.\n        self.containerState = {};\n        return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n    }\n    /** @type {State} */ function thereIsANewContainer(code) {\n        if (childFlow) closeFlow();\n        exitContainers(continued);\n        return documentContinued(code);\n    }\n    /** @type {State} */ function thereIsNoNewContainer(code) {\n        self.parser.lazy[self.now().line] = continued !== stack.length;\n        lineStartOffset = self.now().offset;\n        return flowStart(code);\n    }\n    /** @type {State} */ function documentContinued(code) {\n        // Try new containers.\n        self.containerState = {};\n        return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n    }\n    /** @type {State} */ function containerContinue(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(self.currentConstruct, \"expected `currentConstruct` to be defined on tokenizer\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(self.containerState, \"expected `containerState` to be defined on tokenizer\");\n        continued++;\n        stack.push([\n            self.currentConstruct,\n            self.containerState\n        ]);\n        // Try another.\n        return documentContinued(code);\n    }\n    /** @type {State} */ function flowStart(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.codes.eof) {\n            if (childFlow) closeFlow();\n            exitContainers(0);\n            effects.consume(code);\n            return;\n        }\n        childFlow = childFlow || self.parser.flow(self.now());\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.chunkFlow, {\n            _tokenizer: childFlow,\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.contentTypeFlow,\n            previous: childToken\n        });\n        return flowContinue(code);\n    }\n    /** @type {State} */ function flowContinue(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.codes.eof) {\n            writeToChild(effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.chunkFlow), true);\n            exitContainers(0);\n            effects.consume(code);\n            return;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {\n            effects.consume(code);\n            writeToChild(effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.chunkFlow));\n            // Get ready for the next line.\n            continued = 0;\n            self.interrupt = undefined;\n            return start;\n        }\n        effects.consume(code);\n        return flowContinue;\n    }\n    /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */ function writeToChild(token, endOfFile) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(childFlow, \"expected `childFlow` to be defined when continuing\");\n        const stream = self.sliceStream(token);\n        if (endOfFile) stream.push(null);\n        token.previous = childToken;\n        if (childToken) childToken.next = token;\n        childToken = token;\n        childFlow.defineSkip(token.start);\n        childFlow.write(stream);\n        // Alright, so we just added a lazy line:\n        //\n        // ```markdown\n        // > a\n        // b.\n        //\n        // Or:\n        //\n        // > ~~~c\n        // d\n        //\n        // Or:\n        //\n        // > | e |\n        // f\n        // ```\n        //\n        // The construct in the second example (fenced code) does not accept lazy\n        // lines, so it marked itself as done at the end of its first line, and\n        // then the content construct parses `d`.\n        // Most constructs in markdown match on the first line: if the first line\n        // forms a construct, a non-lazy line can’t “unmake” it.\n        //\n        // The construct in the third example is potentially a GFM table, and\n        // those are *weird*.\n        // It *could* be a table, from the first line, if the following line\n        // matches a condition.\n        // In this case, that second line is lazy, which “unmakes” the first line\n        // and turns the whole into one content block.\n        //\n        // We’ve now parsed the non-lazy and the lazy line, and can figure out\n        // whether the lazy line started a new flow block.\n        // If it did, we exit the current containers between the two flow blocks.\n        if (self.parser.lazy[token.start.line]) {\n            let index = childFlow.events.length;\n            while(index--){\n                if (// The token starts before the line ending…\n                childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n                (!childFlow.events[index][1].end || // …or ends after it.\n                childFlow.events[index][1].end.offset > lineStartOffset)) {\n                    // Exit: there’s still something open, which means it’s a lazy line\n                    // part of something.\n                    return;\n                }\n            }\n            // Note: this algorithm for moving events around is similar to the\n            // algorithm when closing flow in `documentContinue`.\n            const indexBeforeExits = self.events.length;\n            let indexBeforeFlow = indexBeforeExits;\n            /** @type {boolean | undefined} */ let seen;\n            /** @type {Point | undefined} */ let point;\n            // Find the previous chunk (the one before the lazy line).\n            while(indexBeforeFlow--){\n                if (self.events[indexBeforeFlow][0] === \"exit\" && self.events[indexBeforeFlow][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.chunkFlow) {\n                    if (seen) {\n                        point = self.events[indexBeforeFlow][1].end;\n                        break;\n                    }\n                    seen = true;\n                }\n            }\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(point, \"could not find previous flow chunk\");\n            exitContainers(continued);\n            // Fix positions.\n            index = indexBeforeExits;\n            while(index < self.events.length){\n                self.events[index][1].end = {\n                    ...point\n                };\n                index++;\n            }\n            // Inject the exits earlier (they’re still also at the end).\n            (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.splice)(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n            // Discard the duplicate exits.\n            self.events.length = index;\n        }\n    }\n    /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */ function exitContainers(size) {\n        let index = stack.length;\n        // Exit open containers.\n        while(index-- > size){\n            const entry = stack[index];\n            self.containerState = entry[1];\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(entry[0].exit, \"expected `exit` to be defined on container construct\");\n            entry[0].exit.call(self, effects);\n        }\n        stack.length = size;\n    }\n    function closeFlow() {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(self.containerState, \"expected `containerState` to be defined when closing flow\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(childFlow, \"expected `childFlow` to be defined when closing it\");\n        childFlow.write([\n            micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.codes.eof\n        ]);\n        childToken = undefined;\n        childFlow = undefined;\n        self.containerState._closeFlow = undefined;\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */ function tokenizeContainer(effects, ok, nok) {\n    // Always populated by defaults.\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(this.parser.constructs.disable.null, \"expected `disable.null` to be populated\");\n    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__.factorySpace)(effects, effects.attempt(this.parser.constructs.document, ok, nok), micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix, this.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/document.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/flow.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/flow.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   flow: function() { return /* binding */ flow; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/blank-line.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-core-commonmark */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/content.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-factory-space */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-util-character */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */ \n\n\n\n\n/** @type {InitialConstruct} */ const flow = {\n    tokenize: initializeFlow\n};\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */ function initializeFlow(effects) {\n    const self = this;\n    const initial = effects.attempt(// Try to parse a blank line.\n    micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_0__.blankLine, atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(this.parser.constructs.flowInitial, afterConstruct, (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_1__.factorySpace)(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_2__.content, afterConstruct)), micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.linePrefix)));\n    return initial;\n    /** @type {State} */ function atBlankEnding(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_6__.markdownLineEnding)(code), \"expected eol or eof\");\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.eof) {\n            effects.consume(code);\n            return;\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.lineEndingBlank);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.lineEndingBlank);\n        self.currentConstruct = undefined;\n        return initial;\n    }\n    /** @type {State} */ function afterConstruct(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_6__.markdownLineEnding)(code), \"expected eol or eof\");\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.eof) {\n            effects.consume(code);\n            return;\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding);\n        self.currentConstruct = undefined;\n        return initial;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtANC4wLjIvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kZXYvbGliL2luaXRpYWxpemUvZmxvdy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOzs7Ozs7O0NBT0MsR0FFa0M7QUFDeUI7QUFDUjtBQUNPO0FBQ1Q7QUFFbEQsNkJBQTZCLEdBQ3RCLE1BQU1RLE9BQU87SUFBQ0MsVUFBVUM7QUFBYyxFQUFDO0FBRTlDOzs7OztDQUtDLEdBQ0QsU0FBU0EsZUFBZUMsT0FBTztJQUM3QixNQUFNQyxPQUFPLElBQUk7SUFDakIsTUFBTUMsVUFBVUYsUUFBUUcsT0FBTyxDQUM3Qiw2QkFBNkI7SUFDN0JaLGdFQUFTQSxFQUNUYSxlQUNBLHNEQUFzRDtJQUN0REosUUFBUUcsT0FBTyxDQUNiLElBQUksQ0FBQ0UsTUFBTSxDQUFDQyxVQUFVLENBQUNDLFdBQVcsRUFDbENDLGdCQUNBZixxRUFBWUEsQ0FDVk8sU0FDQUEsUUFBUUcsT0FBTyxDQUNiLElBQUksQ0FBQ0UsTUFBTSxDQUFDQyxVQUFVLENBQUNULElBQUksRUFDM0JXLGdCQUNBUixRQUFRRyxPQUFPLENBQUNYLDhEQUFPQSxFQUFFZ0Isa0JBRTNCWix3REFBS0EsQ0FBQ2EsVUFBVTtJQUt0QixPQUFPUDtJQUVQLGtCQUFrQixHQUNsQixTQUFTRSxjQUFjTSxJQUFJO1FBQ3pCcEIsMENBQU1BLENBQ0pvQixTQUFTZix3REFBS0EsQ0FBQ2dCLEdBQUcsSUFBSWpCLDRFQUFrQkEsQ0FBQ2dCLE9BQ3pDO1FBR0YsSUFBSUEsU0FBU2Ysd0RBQUtBLENBQUNnQixHQUFHLEVBQUU7WUFDdEJYLFFBQVFZLE9BQU8sQ0FBQ0Y7WUFDaEI7UUFDRjtRQUVBVixRQUFRYSxLQUFLLENBQUNqQix3REFBS0EsQ0FBQ2tCLGVBQWU7UUFDbkNkLFFBQVFZLE9BQU8sQ0FBQ0Y7UUFDaEJWLFFBQVFlLElBQUksQ0FBQ25CLHdEQUFLQSxDQUFDa0IsZUFBZTtRQUNsQ2IsS0FBS2UsZ0JBQWdCLEdBQUdDO1FBQ3hCLE9BQU9mO0lBQ1Q7SUFFQSxrQkFBa0IsR0FDbEIsU0FBU00sZUFBZUUsSUFBSTtRQUMxQnBCLDBDQUFNQSxDQUNKb0IsU0FBU2Ysd0RBQUtBLENBQUNnQixHQUFHLElBQUlqQiw0RUFBa0JBLENBQUNnQixPQUN6QztRQUdGLElBQUlBLFNBQVNmLHdEQUFLQSxDQUFDZ0IsR0FBRyxFQUFFO1lBQ3RCWCxRQUFRWSxPQUFPLENBQUNGO1lBQ2hCO1FBQ0Y7UUFFQVYsUUFBUWEsS0FBSyxDQUFDakIsd0RBQUtBLENBQUNzQixVQUFVO1FBQzlCbEIsUUFBUVksT0FBTyxDQUFDRjtRQUNoQlYsUUFBUWUsSUFBSSxDQUFDbkIsd0RBQUtBLENBQUNzQixVQUFVO1FBQzdCakIsS0FBS2UsZ0JBQWdCLEdBQUdDO1FBQ3hCLE9BQU9mO0lBQ1Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDQuMC4yL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGV2L2xpYi9pbml0aWFsaXplL2Zsb3cuanM/OWZjMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1xuICogICBJbml0aWFsQ29uc3RydWN0LFxuICogICBJbml0aWFsaXplcixcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dFxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuaW1wb3J0IHtibGFua0xpbmUsIGNvbnRlbnR9IGZyb20gJ21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsnXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZ30gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2RlcywgdHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbCdcblxuLyoqIEB0eXBlIHtJbml0aWFsQ29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGZsb3cgPSB7dG9rZW5pemU6IGluaXRpYWxpemVGbG93fVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIFNlbGYuXG4gKiBAdHlwZSB7SW5pdGlhbGl6ZXJ9XG4gKiAgIEluaXRpYWxpemVyLlxuICovXG5mdW5jdGlvbiBpbml0aWFsaXplRmxvdyhlZmZlY3RzKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGNvbnN0IGluaXRpYWwgPSBlZmZlY3RzLmF0dGVtcHQoXG4gICAgLy8gVHJ5IHRvIHBhcnNlIGEgYmxhbmsgbGluZS5cbiAgICBibGFua0xpbmUsXG4gICAgYXRCbGFua0VuZGluZyxcbiAgICAvLyBUcnkgdG8gcGFyc2UgaW5pdGlhbCBmbG93IChlc3NlbnRpYWxseSwgb25seSBjb2RlKS5cbiAgICBlZmZlY3RzLmF0dGVtcHQoXG4gICAgICB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmZsb3dJbml0aWFsLFxuICAgICAgYWZ0ZXJDb25zdHJ1Y3QsXG4gICAgICBmYWN0b3J5U3BhY2UoXG4gICAgICAgIGVmZmVjdHMsXG4gICAgICAgIGVmZmVjdHMuYXR0ZW1wdChcbiAgICAgICAgICB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmZsb3csXG4gICAgICAgICAgYWZ0ZXJDb25zdHJ1Y3QsXG4gICAgICAgICAgZWZmZWN0cy5hdHRlbXB0KGNvbnRlbnQsIGFmdGVyQ29uc3RydWN0KVxuICAgICAgICApLFxuICAgICAgICB0eXBlcy5saW5lUHJlZml4XG4gICAgICApXG4gICAgKVxuICApXG5cbiAgcmV0dXJuIGluaXRpYWxcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBhdEJsYW5rRW5kaW5nKGNvZGUpIHtcbiAgICBhc3NlcnQoXG4gICAgICBjb2RlID09PSBjb2Rlcy5lb2YgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpLFxuICAgICAgJ2V4cGVjdGVkIGVvbCBvciBlb2YnXG4gICAgKVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmVvZikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmxpbmVFbmRpbmdCbGFuaylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMubGluZUVuZGluZ0JsYW5rKVxuICAgIHNlbGYuY3VycmVudENvbnN0cnVjdCA9IHVuZGVmaW5lZFxuICAgIHJldHVybiBpbml0aWFsXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBhZnRlckNvbnN0cnVjdChjb2RlKSB7XG4gICAgYXNzZXJ0KFxuICAgICAgY29kZSA9PT0gY29kZXMuZW9mIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSxcbiAgICAgICdleHBlY3RlZCBlb2wgb3IgZW9mJ1xuICAgIClcblxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5saW5lRW5kaW5nKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5saW5lRW5kaW5nKVxuICAgIHNlbGYuY3VycmVudENvbnN0cnVjdCA9IHVuZGVmaW5lZFxuICAgIHJldHVybiBpbml0aWFsXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJvayIsImFzc2VydCIsImJsYW5rTGluZSIsImNvbnRlbnQiLCJmYWN0b3J5U3BhY2UiLCJtYXJrZG93bkxpbmVFbmRpbmciLCJjb2RlcyIsInR5cGVzIiwiZmxvdyIsInRva2VuaXplIiwiaW5pdGlhbGl6ZUZsb3ciLCJlZmZlY3RzIiwic2VsZiIsImluaXRpYWwiLCJhdHRlbXB0IiwiYXRCbGFua0VuZGluZyIsInBhcnNlciIsImNvbnN0cnVjdHMiLCJmbG93SW5pdGlhbCIsImFmdGVyQ29uc3RydWN0IiwibGluZVByZWZpeCIsImNvZGUiLCJlb2YiLCJjb25zdW1lIiwiZW50ZXIiLCJsaW5lRW5kaW5nQmxhbmsiLCJleGl0IiwiY3VycmVudENvbnN0cnVjdCIsInVuZGVmaW5lZCIsImxpbmVFbmRpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/flow.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/text.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/text.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolver: function() { return /* binding */ resolver; },\n/* harmony export */   string: function() { return /* binding */ string; },\n/* harmony export */   text: function() { return /* binding */ text; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */ \n\nconst resolver = {\n    resolveAll: createResolver()\n};\nconst string = initializeFactory(\"string\");\nconst text = initializeFactory(\"text\");\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */ function initializeFactory(field) {\n    return {\n        resolveAll: createResolver(field === \"text\" ? resolveAllLineSuffixes : undefined),\n        tokenize: initializeText\n    };\n    /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */ function initializeText(effects) {\n        const self = this;\n        const constructs = this.parser.constructs[field];\n        const text = effects.attempt(constructs, start, notText);\n        return start;\n        /** @type {State} */ function start(code) {\n            return atBreak(code) ? text(code) : notText(code);\n        }\n        /** @type {State} */ function notText(code) {\n            if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof) {\n                effects.consume(code);\n                return;\n            }\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.data);\n            effects.consume(code);\n            return data;\n        }\n        /** @type {State} */ function data(code) {\n            if (atBreak(code)) {\n                effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.data);\n                return text(code);\n            }\n            // Data.\n            effects.consume(code);\n            return data;\n        }\n        /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */ function atBreak(code) {\n            if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof) {\n                return true;\n            }\n            const list = constructs[code];\n            let index = -1;\n            if (list) {\n                // Always populated by defaults.\n                (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(Array.isArray(list), \"expected `disable.null` to be populated\");\n                while(++index < list.length){\n                    const item = list[index];\n                    if (!item.previous || item.previous.call(self, self.previous)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n    }\n}\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */ function createResolver(extraResolver) {\n    return resolveAllText;\n    /** @type {Resolver} */ function resolveAllText(events, context) {\n        let index = -1;\n        /** @type {number | undefined} */ let enter;\n        // A rather boring computation (to merge adjacent `data` events) which\n        // improves mm performance by 29%.\n        while(++index <= events.length){\n            if (enter === undefined) {\n                if (events[index] && events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.data) {\n                    enter = index;\n                    index++;\n                }\n            } else if (!events[index] || events[index][1].type !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.data) {\n                // Don’t do anything if there is one data token.\n                if (index !== enter + 2) {\n                    events[enter][1].end = events[index - 1][1].end;\n                    events.splice(enter + 2, index - enter - 2);\n                    index = enter + 2;\n                }\n                enter = undefined;\n            }\n        }\n        return extraResolver ? extraResolver(events, context) : events;\n    }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */ function resolveAllLineSuffixes(events, context) {\n    let eventIndex = 0 // Skip first.\n    ;\n    while(++eventIndex <= events.length){\n        if ((eventIndex === events.length || events[eventIndex][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding) && events[eventIndex - 1][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.data) {\n            const data = events[eventIndex - 1][1];\n            const chunks = context.sliceStream(data);\n            let index = chunks.length;\n            let bufferIndex = -1;\n            let size = 0;\n            /** @type {boolean | undefined} */ let tabs;\n            while(index--){\n                const chunk = chunks[index];\n                if (typeof chunk === \"string\") {\n                    bufferIndex = chunk.length;\n                    while(chunk.charCodeAt(bufferIndex - 1) === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.space){\n                        size++;\n                        bufferIndex--;\n                    }\n                    if (bufferIndex) break;\n                    bufferIndex = -1;\n                } else if (chunk === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.horizontalTab) {\n                    tabs = true;\n                    size++;\n                } else if (chunk === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.virtualSpace) {\n                // Empty\n                } else {\n                    // Replacement character, exit.\n                    index++;\n                    break;\n                }\n            }\n            // Allow final trailing whitespace.\n            if (context._contentTypeTextTrailing && eventIndex === events.length) {\n                size = 0;\n            }\n            if (size) {\n                const token = {\n                    type: eventIndex === events.length || tabs || size < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.hardBreakPrefixSizeMin ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.lineSuffix : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.hardBreakTrailing,\n                    start: {\n                        _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n                        _index: data.start._index + index,\n                        line: data.end.line,\n                        column: data.end.column - size,\n                        offset: data.end.offset - size\n                    },\n                    end: {\n                        ...data.end\n                    }\n                };\n                data.end = {\n                    ...token.start\n                };\n                if (data.start.offset === data.end.offset) {\n                    Object.assign(data, token);\n                } else {\n                    events.splice(eventIndex, 0, [\n                        \"enter\",\n                        token,\n                        context\n                    ], [\n                        \"exit\",\n                        token,\n                        context\n                    ]);\n                    eventIndex += 2;\n                }\n            }\n            eventIndex++;\n        }\n    }\n    return events;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/text.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/parse.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/parse.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parse: function() { return /* binding */ parse; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_combine_extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-combine-extensions */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-combine-extensions@2.0.1/node_modules/micromark-util-combine-extensions/index.js\");\n/* harmony import */ var _initialize_content_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./initialize/content.js */ \"(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/content.js\");\n/* harmony import */ var _initialize_document_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./initialize/document.js */ \"(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/document.js\");\n/* harmony import */ var _initialize_flow_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./initialize/flow.js */ \"(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/flow.js\");\n/* harmony import */ var _initialize_text_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./initialize/text.js */ \"(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/initialize/text.js\");\n/* harmony import */ var _constructs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructs.js */ \"(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/constructs.js\");\n/* harmony import */ var _create_tokenizer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./create-tokenizer.js */ \"(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/create-tokenizer.js\");\n/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */ \n\n\n\n\n\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */ function parse(options) {\n    const settings = options || {};\n    const constructs = /** @type {FullNormalizedExtension} */ (0,micromark_util_combine_extensions__WEBPACK_IMPORTED_MODULE_0__.combineExtensions)([\n        _constructs_js__WEBPACK_IMPORTED_MODULE_1__,\n        ...settings.extensions || []\n    ]);\n    /** @type {ParseContext} */ const parser = {\n        constructs,\n        content: create(_initialize_content_js__WEBPACK_IMPORTED_MODULE_2__.content),\n        defined: [],\n        document: create(_initialize_document_js__WEBPACK_IMPORTED_MODULE_3__.document),\n        flow: create(_initialize_flow_js__WEBPACK_IMPORTED_MODULE_4__.flow),\n        lazy: {},\n        string: create(_initialize_text_js__WEBPACK_IMPORTED_MODULE_5__.string),\n        text: create(_initialize_text_js__WEBPACK_IMPORTED_MODULE_5__.text)\n    };\n    return parser;\n    /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */ function create(initial) {\n        return creator;\n        /** @type {Create} */ function creator(from) {\n            return (0,_create_tokenizer_js__WEBPACK_IMPORTED_MODULE_6__.createTokenizer)(parser, initial, from);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtANC4wLjIvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kZXYvbGliL3BhcnNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0NBUUMsR0FFa0U7QUFDcEI7QUFDRTtBQUNSO0FBQ1E7QUFDRztBQUNDO0FBRXJEOzs7OztDQUtDLEdBQ00sU0FBU1EsTUFBTUMsT0FBTztJQUMzQixNQUFNQyxXQUFXRCxXQUFXLENBQUM7SUFDN0IsTUFBTUUsYUFBYSxvQ0FBb0MsR0FDckRYLG9GQUFpQkEsQ0FBQztRQUFDTSwyQ0FBaUJBO1dBQU1JLFNBQVNFLFVBQVUsSUFBSSxFQUFFO0tBQUU7SUFHdkUseUJBQXlCLEdBQ3pCLE1BQU1DLFNBQVM7UUFDYkY7UUFDQVYsU0FBU2EsT0FBT2IsMkRBQU9BO1FBQ3ZCYyxTQUFTLEVBQUU7UUFDWGIsVUFBVVksT0FBT1osNkRBQVFBO1FBQ3pCQyxNQUFNVyxPQUFPWCxxREFBSUE7UUFDakJhLE1BQU0sQ0FBQztRQUNQWixRQUFRVSxPQUFPVix1REFBTUE7UUFDckJDLE1BQU1TLE9BQU9ULHFEQUFJQTtJQUNuQjtJQUVBLE9BQU9RO0lBRVA7Ozs7O0dBS0MsR0FDRCxTQUFTQyxPQUFPRyxPQUFPO1FBQ3JCLE9BQU9DO1FBQ1AsbUJBQW1CLEdBQ25CLFNBQVNBLFFBQVFDLElBQUk7WUFDbkIsT0FBT1oscUVBQWVBLENBQUNNLFFBQVFJLFNBQVNFO1FBQzFDO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDQuMC4yL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGV2L2xpYi9wYXJzZS5qcz85NjM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENyZWF0ZSxcbiAqICAgRnVsbE5vcm1hbGl6ZWRFeHRlbnNpb24sXG4gKiAgIEluaXRpYWxDb25zdHJ1Y3QsXG4gKiAgIFBhcnNlQ29udGV4dCxcbiAqICAgUGFyc2VPcHRpb25zXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7Y29tYmluZUV4dGVuc2lvbnN9IGZyb20gJ21pY3JvbWFyay11dGlsLWNvbWJpbmUtZXh0ZW5zaW9ucydcbmltcG9ydCB7Y29udGVudH0gZnJvbSAnLi9pbml0aWFsaXplL2NvbnRlbnQuanMnXG5pbXBvcnQge2RvY3VtZW50fSBmcm9tICcuL2luaXRpYWxpemUvZG9jdW1lbnQuanMnXG5pbXBvcnQge2Zsb3d9IGZyb20gJy4vaW5pdGlhbGl6ZS9mbG93LmpzJ1xuaW1wb3J0IHtzdHJpbmcsIHRleHR9IGZyb20gJy4vaW5pdGlhbGl6ZS90ZXh0LmpzJ1xuaW1wb3J0ICogYXMgZGVmYXVsdENvbnN0cnVjdHMgZnJvbSAnLi9jb25zdHJ1Y3RzLmpzJ1xuaW1wb3J0IHtjcmVhdGVUb2tlbml6ZXJ9IGZyb20gJy4vY3JlYXRlLXRva2VuaXplci5qcydcblxuLyoqXG4gKiBAcGFyYW0ge1BhcnNlT3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7UGFyc2VDb250ZXh0fVxuICogICBQYXJzZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShvcHRpb25zKSB7XG4gIGNvbnN0IHNldHRpbmdzID0gb3B0aW9ucyB8fCB7fVxuICBjb25zdCBjb25zdHJ1Y3RzID0gLyoqIEB0eXBlIHtGdWxsTm9ybWFsaXplZEV4dGVuc2lvbn0gKi8gKFxuICAgIGNvbWJpbmVFeHRlbnNpb25zKFtkZWZhdWx0Q29uc3RydWN0cywgLi4uKHNldHRpbmdzLmV4dGVuc2lvbnMgfHwgW10pXSlcbiAgKVxuXG4gIC8qKiBAdHlwZSB7UGFyc2VDb250ZXh0fSAqL1xuICBjb25zdCBwYXJzZXIgPSB7XG4gICAgY29uc3RydWN0cyxcbiAgICBjb250ZW50OiBjcmVhdGUoY29udGVudCksXG4gICAgZGVmaW5lZDogW10sXG4gICAgZG9jdW1lbnQ6IGNyZWF0ZShkb2N1bWVudCksXG4gICAgZmxvdzogY3JlYXRlKGZsb3cpLFxuICAgIGxhenk6IHt9LFxuICAgIHN0cmluZzogY3JlYXRlKHN0cmluZyksXG4gICAgdGV4dDogY3JlYXRlKHRleHQpXG4gIH1cblxuICByZXR1cm4gcGFyc2VyXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SW5pdGlhbENvbnN0cnVjdH0gaW5pdGlhbFxuICAgKiAgIENvbnN0cnVjdCB0byBzdGFydCB3aXRoLlxuICAgKiBAcmV0dXJucyB7Q3JlYXRlfVxuICAgKiAgIENyZWF0ZSBhIHRva2VuaXplci5cbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZShpbml0aWFsKSB7XG4gICAgcmV0dXJuIGNyZWF0b3JcbiAgICAvKiogQHR5cGUge0NyZWF0ZX0gKi9cbiAgICBmdW5jdGlvbiBjcmVhdG9yKGZyb20pIHtcbiAgICAgIHJldHVybiBjcmVhdGVUb2tlbml6ZXIocGFyc2VyLCBpbml0aWFsLCBmcm9tKVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbImNvbWJpbmVFeHRlbnNpb25zIiwiY29udGVudCIsImRvY3VtZW50IiwiZmxvdyIsInN0cmluZyIsInRleHQiLCJkZWZhdWx0Q29uc3RydWN0cyIsImNyZWF0ZVRva2VuaXplciIsInBhcnNlIiwib3B0aW9ucyIsInNldHRpbmdzIiwiY29uc3RydWN0cyIsImV4dGVuc2lvbnMiLCJwYXJzZXIiLCJjcmVhdGUiLCJkZWZpbmVkIiwibGF6eSIsImluaXRpYWwiLCJjcmVhdG9yIiwiZnJvbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/parse.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/postprocess.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/postprocess.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   postprocess: function() { return /* binding */ postprocess; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_subtokenize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-subtokenize */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-subtokenize@2.1.0/node_modules/micromark-util-subtokenize/dev/index.js\");\n/**\n * @import {Event} from 'micromark-util-types'\n */ \n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */ function postprocess(events) {\n    while(!(0,micromark_util_subtokenize__WEBPACK_IMPORTED_MODULE_0__.subtokenize)(events)){\n    // Empty\n    }\n    return events;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtANC4wLjIvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kZXYvbGliL3Bvc3Rwcm9jZXNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0NBRUMsR0FFcUQ7QUFFdEQ7Ozs7O0NBS0MsR0FDTSxTQUFTQyxZQUFZQyxNQUFNO0lBQ2hDLE1BQU8sQ0FBQ0YsdUVBQVdBLENBQUNFLFFBQVM7SUFDM0IsUUFBUTtJQUNWO0lBRUEsT0FBT0E7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDQuMC4yL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGV2L2xpYi9wb3N0cHJvY2Vzcy5qcz83N2Q4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7RXZlbnR9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7c3VidG9rZW5pemV9IGZyb20gJ21pY3JvbWFyay11dGlsLXN1YnRva2VuaXplJ1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8RXZlbnQ+fSBldmVudHNcbiAqICAgRXZlbnRzLlxuICogQHJldHVybnMge0FycmF5PEV2ZW50Pn1cbiAqICAgRXZlbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9zdHByb2Nlc3MoZXZlbnRzKSB7XG4gIHdoaWxlICghc3VidG9rZW5pemUoZXZlbnRzKSkge1xuICAgIC8vIEVtcHR5XG4gIH1cblxuICByZXR1cm4gZXZlbnRzXG59XG4iXSwibmFtZXMiOlsic3VidG9rZW5pemUiLCJwb3N0cHJvY2VzcyIsImV2ZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/postprocess.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/preprocess.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/preprocess.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   preprocess: function() { return /* binding */ preprocess; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(app-pages-browser)/./node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */ /**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */ \nconst search = /[\\0\\t\\n\\r]/g;\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */ function preprocess() {\n    let column = 1;\n    let buffer = \"\";\n    /** @type {boolean | undefined} */ let start = true;\n    /** @type {boolean | undefined} */ let atCarriageReturn;\n    return preprocessor;\n    /** @type {Preprocessor} */ // eslint-disable-next-line complexity\n    function preprocessor(value, encoding, end) {\n        /** @type {Array<Chunk>} */ const chunks = [];\n        /** @type {RegExpMatchArray | null} */ let match;\n        /** @type {number} */ let next;\n        /** @type {number} */ let startPosition;\n        /** @type {number} */ let endPosition;\n        /** @type {Code} */ let code;\n        value = buffer + (typeof value === \"string\" ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n        startPosition = 0;\n        buffer = \"\";\n        if (start) {\n            // To do: `markdown-rs` actually parses BOMs (byte order mark).\n            if (value.charCodeAt(0) === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.byteOrderMarker) {\n                startPosition++;\n            }\n            start = undefined;\n        }\n        while(startPosition < value.length){\n            search.lastIndex = startPosition;\n            match = search.exec(value);\n            endPosition = match && match.index !== undefined ? match.index : value.length;\n            code = value.charCodeAt(endPosition);\n            if (!match) {\n                buffer = value.slice(startPosition);\n                break;\n            }\n            if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lf && startPosition === endPosition && atCarriageReturn) {\n                chunks.push(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.carriageReturnLineFeed);\n                atCarriageReturn = undefined;\n            } else {\n                if (atCarriageReturn) {\n                    chunks.push(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.carriageReturn);\n                    atCarriageReturn = undefined;\n                }\n                if (startPosition < endPosition) {\n                    chunks.push(value.slice(startPosition, endPosition));\n                    column += endPosition - startPosition;\n                }\n                switch(code){\n                    case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.nul:\n                        {\n                            chunks.push(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.replacementCharacter);\n                            column++;\n                            break;\n                        }\n                    case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.ht:\n                        {\n                            next = Math.ceil(column / micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.constants.tabSize) * micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.constants.tabSize;\n                            chunks.push(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.horizontalTab);\n                            while(column++ < next)chunks.push(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.virtualSpace);\n                            break;\n                        }\n                    case micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lf:\n                        {\n                            chunks.push(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lineFeed);\n                            column = 1;\n                            break;\n                        }\n                    default:\n                        {\n                            atCarriageReturn = true;\n                            column = 1;\n                        }\n                }\n            }\n            startPosition = endPosition + 1;\n        }\n        if (end) {\n            if (atCarriageReturn) chunks.push(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.carriageReturn);\n            if (buffer) chunks.push(buffer);\n            chunks.push(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof);\n        }\n        return chunks;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/dev/lib/preprocess.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/index.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   find: function() { return /* reexport safe */ _lib_find_js__WEBPACK_IMPORTED_MODULE_7__.find; },\n/* harmony export */   hastToReact: function() { return /* reexport safe */ _lib_hast_to_react_js__WEBPACK_IMPORTED_MODULE_0__.hastToReact; },\n/* harmony export */   html: function() { return /* binding */ html; },\n/* harmony export */   normalize: function() { return /* reexport safe */ _lib_normalize_js__WEBPACK_IMPORTED_MODULE_8__.normalize; },\n/* harmony export */   svg: function() { return /* binding */ svg; }\n/* harmony export */ });\n/* harmony import */ var _lib_util_merge_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/util/merge.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/merge.js\");\n/* harmony import */ var _lib_aria_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/aria.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/aria.js\");\n/* harmony import */ var _lib_html_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/html.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/html.js\");\n/* harmony import */ var _lib_svg_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/svg.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/svg.js\");\n/* harmony import */ var _lib_xlink_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/xlink.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/xlink.js\");\n/* harmony import */ var _lib_xmlns_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/xmlns.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/xmlns.js\");\n/* harmony import */ var _lib_xml_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/xml.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/xml.js\");\n/* harmony import */ var _lib_hast_to_react_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/hast-to-react.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/hast-to-react.js\");\n/* harmony import */ var _lib_find_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/find.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/find.js\");\n/* harmony import */ var _lib_normalize_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/normalize.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/normalize.js\");\n// Note: types exposed from `index.d.ts`.\n\n\n\n\n\n\n\n\nconst html = (0,_lib_util_merge_js__WEBPACK_IMPORTED_MODULE_1__.merge)([\n    _lib_aria_js__WEBPACK_IMPORTED_MODULE_2__.aria,\n    _lib_html_js__WEBPACK_IMPORTED_MODULE_3__.html,\n    _lib_xlink_js__WEBPACK_IMPORTED_MODULE_4__.xlink,\n    _lib_xmlns_js__WEBPACK_IMPORTED_MODULE_5__.xmlns,\n    _lib_xml_js__WEBPACK_IMPORTED_MODULE_6__.xml\n], \"html\");\n\n\nconst svg = (0,_lib_util_merge_js__WEBPACK_IMPORTED_MODULE_1__.merge)([\n    _lib_aria_js__WEBPACK_IMPORTED_MODULE_2__.aria,\n    _lib_svg_js__WEBPACK_IMPORTED_MODULE_9__.svg,\n    _lib_xlink_js__WEBPACK_IMPORTED_MODULE_4__.xlink,\n    _lib_xmlns_js__WEBPACK_IMPORTED_MODULE_5__.xmlns,\n    _lib_xml_js__WEBPACK_IMPORTED_MODULE_6__.xml\n], \"svg\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEseUNBQXlDO0FBQ0E7QUFDUDtBQUNZO0FBQ0g7QUFDUDtBQUNBO0FBQ0o7QUFFa0I7QUFFM0MsTUFBTUUsT0FBT0YseURBQUtBLENBQUM7SUFBQ0MsOENBQUlBO0lBQUVFLDhDQUFRQTtJQUFFRyxnREFBS0E7SUFBRUMsZ0RBQUtBO0lBQUVDLDRDQUFHQTtDQUFDLEVBQUUsUUFBTztBQUVwQztBQUNVO0FBRXJDLE1BQU1KLE1BQU1KLHlEQUFLQSxDQUFDO0lBQUNDLDhDQUFJQTtJQUFFSSw0Q0FBT0E7SUFBRUMsZ0RBQUtBO0lBQUVDLGdEQUFLQTtJQUFFQyw0Q0FBR0E7Q0FBQyxFQUFFLE9BQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3Byb3BlcnR5LWluZm9ybWF0aW9uQDcuMC4wL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9pbmRleC5qcz9mOTI2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIE5vdGU6IHR5cGVzIGV4cG9zZWQgZnJvbSBgaW5kZXguZC50c2AuXG5pbXBvcnQge21lcmdlfSBmcm9tICcuL2xpYi91dGlsL21lcmdlLmpzJ1xuaW1wb3J0IHthcmlhfSBmcm9tICcuL2xpYi9hcmlhLmpzJ1xuaW1wb3J0IHtodG1sIGFzIGh0bWxCYXNlfSBmcm9tICcuL2xpYi9odG1sLmpzJ1xuaW1wb3J0IHtzdmcgYXMgc3ZnQmFzZX0gZnJvbSAnLi9saWIvc3ZnLmpzJ1xuaW1wb3J0IHt4bGlua30gZnJvbSAnLi9saWIveGxpbmsuanMnXG5pbXBvcnQge3htbG5zfSBmcm9tICcuL2xpYi94bWxucy5qcydcbmltcG9ydCB7eG1sfSBmcm9tICcuL2xpYi94bWwuanMnXG5cbmV4cG9ydCB7aGFzdFRvUmVhY3R9IGZyb20gJy4vbGliL2hhc3QtdG8tcmVhY3QuanMnXG5cbmV4cG9ydCBjb25zdCBodG1sID0gbWVyZ2UoW2FyaWEsIGh0bWxCYXNlLCB4bGluaywgeG1sbnMsIHhtbF0sICdodG1sJylcblxuZXhwb3J0IHtmaW5kfSBmcm9tICcuL2xpYi9maW5kLmpzJ1xuZXhwb3J0IHtub3JtYWxpemV9IGZyb20gJy4vbGliL25vcm1hbGl6ZS5qcydcblxuZXhwb3J0IGNvbnN0IHN2ZyA9IG1lcmdlKFthcmlhLCBzdmdCYXNlLCB4bGluaywgeG1sbnMsIHhtbF0sICdzdmcnKVxuIl0sIm5hbWVzIjpbIm1lcmdlIiwiYXJpYSIsImh0bWwiLCJodG1sQmFzZSIsInN2ZyIsInN2Z0Jhc2UiLCJ4bGluayIsInhtbG5zIiwieG1sIiwiaGFzdFRvUmVhY3QiLCJmaW5kIiwibm9ybWFsaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/aria.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/aria.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aria: function() { return /* binding */ aria; }\n/* harmony export */ });\n/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/create.js\");\n/* harmony import */ var _util_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/types.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/types.js\");\n\n\nconst aria = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({\n    properties: {\n        ariaActiveDescendant: null,\n        ariaAtomic: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        ariaAutoComplete: null,\n        ariaBusy: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        ariaChecked: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        ariaColCount: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        ariaColIndex: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        ariaColSpan: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        ariaControls: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        ariaCurrent: null,\n        ariaDescribedBy: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        ariaDetails: null,\n        ariaDisabled: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        ariaDropEffect: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        ariaErrorMessage: null,\n        ariaExpanded: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        ariaFlowTo: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        ariaGrabbed: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        ariaHasPopup: null,\n        ariaHidden: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        ariaInvalid: null,\n        ariaKeyShortcuts: null,\n        ariaLabel: null,\n        ariaLabelledBy: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        ariaLevel: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        ariaLive: null,\n        ariaModal: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        ariaMultiLine: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        ariaMultiSelectable: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        ariaOrientation: null,\n        ariaOwns: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        ariaPlaceholder: null,\n        ariaPosInSet: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        ariaPressed: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        ariaReadOnly: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        ariaRelevant: null,\n        ariaRequired: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        ariaRoleDescription: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        ariaRowCount: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        ariaRowIndex: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        ariaRowSpan: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        ariaSelected: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        ariaSetSize: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        ariaSort: null,\n        ariaValueMax: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        ariaValueMin: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        ariaValueNow: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        ariaValueText: null,\n        role: null\n    },\n    transform (_, property) {\n        return property === \"role\" ? property : \"aria-\" + property.slice(4).toLowerCase();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL2FyaWEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVDO0FBQzJCO0FBRTNELE1BQU1JLE9BQU9KLHVEQUFNQSxDQUFDO0lBQ3pCSyxZQUFZO1FBQ1ZDLHNCQUFzQjtRQUN0QkMsWUFBWU4sc0RBQVVBO1FBQ3RCTyxrQkFBa0I7UUFDbEJDLFVBQVVSLHNEQUFVQTtRQUNwQlMsYUFBYVQsc0RBQVVBO1FBQ3ZCVSxjQUFjVCxrREFBTUE7UUFDcEJVLGNBQWNWLGtEQUFNQTtRQUNwQlcsYUFBYVgsa0RBQU1BO1FBQ25CWSxjQUFjWCwwREFBY0E7UUFDNUJZLGFBQWE7UUFDYkMsaUJBQWlCYiwwREFBY0E7UUFDL0JjLGFBQWE7UUFDYkMsY0FBY2pCLHNEQUFVQTtRQUN4QmtCLGdCQUFnQmhCLDBEQUFjQTtRQUM5QmlCLGtCQUFrQjtRQUNsQkMsY0FBY3BCLHNEQUFVQTtRQUN4QnFCLFlBQVluQiwwREFBY0E7UUFDMUJvQixhQUFhdEIsc0RBQVVBO1FBQ3ZCdUIsY0FBYztRQUNkQyxZQUFZeEIsc0RBQVVBO1FBQ3RCeUIsYUFBYTtRQUNiQyxrQkFBa0I7UUFDbEJDLFdBQVc7UUFDWEMsZ0JBQWdCMUIsMERBQWNBO1FBQzlCMkIsV0FBVzVCLGtEQUFNQTtRQUNqQjZCLFVBQVU7UUFDVkMsV0FBVy9CLHNEQUFVQTtRQUNyQmdDLGVBQWVoQyxzREFBVUE7UUFDekJpQyxxQkFBcUJqQyxzREFBVUE7UUFDL0JrQyxpQkFBaUI7UUFDakJDLFVBQVVqQywwREFBY0E7UUFDeEJrQyxpQkFBaUI7UUFDakJDLGNBQWNwQyxrREFBTUE7UUFDcEJxQyxhQUFhdEMsc0RBQVVBO1FBQ3ZCdUMsY0FBY3ZDLHNEQUFVQTtRQUN4QndDLGNBQWM7UUFDZEMsY0FBY3pDLHNEQUFVQTtRQUN4QjBDLHFCQUFxQnhDLDBEQUFjQTtRQUNuQ3lDLGNBQWMxQyxrREFBTUE7UUFDcEIyQyxjQUFjM0Msa0RBQU1BO1FBQ3BCNEMsYUFBYTVDLGtEQUFNQTtRQUNuQjZDLGNBQWM5QyxzREFBVUE7UUFDeEIrQyxhQUFhOUMsa0RBQU1BO1FBQ25CK0MsVUFBVTtRQUNWQyxjQUFjaEQsa0RBQU1BO1FBQ3BCaUQsY0FBY2pELGtEQUFNQTtRQUNwQmtELGNBQWNsRCxrREFBTUE7UUFDcEJtRCxlQUFlO1FBQ2ZDLE1BQU07SUFDUjtJQUNBQyxXQUFVQyxDQUFDLEVBQUVDLFFBQVE7UUFDbkIsT0FBT0EsYUFBYSxTQUNoQkEsV0FDQSxVQUFVQSxTQUFTQyxLQUFLLENBQUMsR0FBR0MsV0FBVztJQUM3QztBQUNGLEdBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3Byb3BlcnR5LWluZm9ybWF0aW9uQDcuMC4wL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvYXJpYS5qcz9hY2VlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3JlYXRlfSBmcm9tICcuL3V0aWwvY3JlYXRlLmpzJ1xuaW1wb3J0IHtib29sZWFuaXNoLCBudW1iZXIsIHNwYWNlU2VwYXJhdGVkfSBmcm9tICcuL3V0aWwvdHlwZXMuanMnXG5cbmV4cG9ydCBjb25zdCBhcmlhID0gY3JlYXRlKHtcbiAgcHJvcGVydGllczoge1xuICAgIGFyaWFBY3RpdmVEZXNjZW5kYW50OiBudWxsLFxuICAgIGFyaWFBdG9taWM6IGJvb2xlYW5pc2gsXG4gICAgYXJpYUF1dG9Db21wbGV0ZTogbnVsbCxcbiAgICBhcmlhQnVzeTogYm9vbGVhbmlzaCxcbiAgICBhcmlhQ2hlY2tlZDogYm9vbGVhbmlzaCxcbiAgICBhcmlhQ29sQ291bnQ6IG51bWJlcixcbiAgICBhcmlhQ29sSW5kZXg6IG51bWJlcixcbiAgICBhcmlhQ29sU3BhbjogbnVtYmVyLFxuICAgIGFyaWFDb250cm9sczogc3BhY2VTZXBhcmF0ZWQsXG4gICAgYXJpYUN1cnJlbnQ6IG51bGwsXG4gICAgYXJpYURlc2NyaWJlZEJ5OiBzcGFjZVNlcGFyYXRlZCxcbiAgICBhcmlhRGV0YWlsczogbnVsbCxcbiAgICBhcmlhRGlzYWJsZWQ6IGJvb2xlYW5pc2gsXG4gICAgYXJpYURyb3BFZmZlY3Q6IHNwYWNlU2VwYXJhdGVkLFxuICAgIGFyaWFFcnJvck1lc3NhZ2U6IG51bGwsXG4gICAgYXJpYUV4cGFuZGVkOiBib29sZWFuaXNoLFxuICAgIGFyaWFGbG93VG86IHNwYWNlU2VwYXJhdGVkLFxuICAgIGFyaWFHcmFiYmVkOiBib29sZWFuaXNoLFxuICAgIGFyaWFIYXNQb3B1cDogbnVsbCxcbiAgICBhcmlhSGlkZGVuOiBib29sZWFuaXNoLFxuICAgIGFyaWFJbnZhbGlkOiBudWxsLFxuICAgIGFyaWFLZXlTaG9ydGN1dHM6IG51bGwsXG4gICAgYXJpYUxhYmVsOiBudWxsLFxuICAgIGFyaWFMYWJlbGxlZEJ5OiBzcGFjZVNlcGFyYXRlZCxcbiAgICBhcmlhTGV2ZWw6IG51bWJlcixcbiAgICBhcmlhTGl2ZTogbnVsbCxcbiAgICBhcmlhTW9kYWw6IGJvb2xlYW5pc2gsXG4gICAgYXJpYU11bHRpTGluZTogYm9vbGVhbmlzaCxcbiAgICBhcmlhTXVsdGlTZWxlY3RhYmxlOiBib29sZWFuaXNoLFxuICAgIGFyaWFPcmllbnRhdGlvbjogbnVsbCxcbiAgICBhcmlhT3duczogc3BhY2VTZXBhcmF0ZWQsXG4gICAgYXJpYVBsYWNlaG9sZGVyOiBudWxsLFxuICAgIGFyaWFQb3NJblNldDogbnVtYmVyLFxuICAgIGFyaWFQcmVzc2VkOiBib29sZWFuaXNoLFxuICAgIGFyaWFSZWFkT25seTogYm9vbGVhbmlzaCxcbiAgICBhcmlhUmVsZXZhbnQ6IG51bGwsXG4gICAgYXJpYVJlcXVpcmVkOiBib29sZWFuaXNoLFxuICAgIGFyaWFSb2xlRGVzY3JpcHRpb246IHNwYWNlU2VwYXJhdGVkLFxuICAgIGFyaWFSb3dDb3VudDogbnVtYmVyLFxuICAgIGFyaWFSb3dJbmRleDogbnVtYmVyLFxuICAgIGFyaWFSb3dTcGFuOiBudW1iZXIsXG4gICAgYXJpYVNlbGVjdGVkOiBib29sZWFuaXNoLFxuICAgIGFyaWFTZXRTaXplOiBudW1iZXIsXG4gICAgYXJpYVNvcnQ6IG51bGwsXG4gICAgYXJpYVZhbHVlTWF4OiBudW1iZXIsXG4gICAgYXJpYVZhbHVlTWluOiBudW1iZXIsXG4gICAgYXJpYVZhbHVlTm93OiBudW1iZXIsXG4gICAgYXJpYVZhbHVlVGV4dDogbnVsbCxcbiAgICByb2xlOiBudWxsXG4gIH0sXG4gIHRyYW5zZm9ybShfLCBwcm9wZXJ0eSkge1xuICAgIHJldHVybiBwcm9wZXJ0eSA9PT0gJ3JvbGUnXG4gICAgICA/IHByb3BlcnR5XG4gICAgICA6ICdhcmlhLScgKyBwcm9wZXJ0eS5zbGljZSg0KS50b0xvd2VyQ2FzZSgpXG4gIH1cbn0pXG4iXSwibmFtZXMiOlsiY3JlYXRlIiwiYm9vbGVhbmlzaCIsIm51bWJlciIsInNwYWNlU2VwYXJhdGVkIiwiYXJpYSIsInByb3BlcnRpZXMiLCJhcmlhQWN0aXZlRGVzY2VuZGFudCIsImFyaWFBdG9taWMiLCJhcmlhQXV0b0NvbXBsZXRlIiwiYXJpYUJ1c3kiLCJhcmlhQ2hlY2tlZCIsImFyaWFDb2xDb3VudCIsImFyaWFDb2xJbmRleCIsImFyaWFDb2xTcGFuIiwiYXJpYUNvbnRyb2xzIiwiYXJpYUN1cnJlbnQiLCJhcmlhRGVzY3JpYmVkQnkiLCJhcmlhRGV0YWlscyIsImFyaWFEaXNhYmxlZCIsImFyaWFEcm9wRWZmZWN0IiwiYXJpYUVycm9yTWVzc2FnZSIsImFyaWFFeHBhbmRlZCIsImFyaWFGbG93VG8iLCJhcmlhR3JhYmJlZCIsImFyaWFIYXNQb3B1cCIsImFyaWFIaWRkZW4iLCJhcmlhSW52YWxpZCIsImFyaWFLZXlTaG9ydGN1dHMiLCJhcmlhTGFiZWwiLCJhcmlhTGFiZWxsZWRCeSIsImFyaWFMZXZlbCIsImFyaWFMaXZlIiwiYXJpYU1vZGFsIiwiYXJpYU11bHRpTGluZSIsImFyaWFNdWx0aVNlbGVjdGFibGUiLCJhcmlhT3JpZW50YXRpb24iLCJhcmlhT3ducyIsImFyaWFQbGFjZWhvbGRlciIsImFyaWFQb3NJblNldCIsImFyaWFQcmVzc2VkIiwiYXJpYVJlYWRPbmx5IiwiYXJpYVJlbGV2YW50IiwiYXJpYVJlcXVpcmVkIiwiYXJpYVJvbGVEZXNjcmlwdGlvbiIsImFyaWFSb3dDb3VudCIsImFyaWFSb3dJbmRleCIsImFyaWFSb3dTcGFuIiwiYXJpYVNlbGVjdGVkIiwiYXJpYVNldFNpemUiLCJhcmlhU29ydCIsImFyaWFWYWx1ZU1heCIsImFyaWFWYWx1ZU1pbiIsImFyaWFWYWx1ZU5vdyIsImFyaWFWYWx1ZVRleHQiLCJyb2xlIiwidHJhbnNmb3JtIiwiXyIsInByb3BlcnR5Iiwic2xpY2UiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/aria.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/find.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/find.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   find: function() { return /* binding */ find; }\n/* harmony export */ });\n/* harmony import */ var _util_defined_info_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/defined-info.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/defined-info.js\");\n/* harmony import */ var _util_info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/info.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/info.js\");\n/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./normalize.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/normalize.js\");\n/**\n * @import {Schema} from 'property-information'\n */ \n\n\nconst cap = /[A-Z]/g;\nconst dash = /-[a-z]/g;\nconst valid = /^data[-\\w.:]+$/i;\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */ function find(schema, value) {\n    const normal = (0,_normalize_js__WEBPACK_IMPORTED_MODULE_0__.normalize)(value);\n    let property = value;\n    let Type = _util_info_js__WEBPACK_IMPORTED_MODULE_1__.Info;\n    if (normal in schema.normal) {\n        return schema.property[schema.normal[normal]];\n    }\n    if (normal.length > 4 && normal.slice(0, 4) === \"data\" && valid.test(value)) {\n        // Attribute or property.\n        if (value.charAt(4) === \"-\") {\n            // Turn it into a property.\n            const rest = value.slice(5).replace(dash, camelcase);\n            property = \"data\" + rest.charAt(0).toUpperCase() + rest.slice(1);\n        } else {\n            // Turn it into an attribute.\n            const rest = value.slice(4);\n            if (!dash.test(rest)) {\n                let dashes = rest.replace(cap, kebab);\n                if (dashes.charAt(0) !== \"-\") {\n                    dashes = \"-\" + dashes;\n                }\n                value = \"data\" + dashes;\n            }\n        }\n        Type = _util_defined_info_js__WEBPACK_IMPORTED_MODULE_2__.DefinedInfo;\n    }\n    return new Type(property, value);\n}\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */ function kebab($0) {\n    return \"-\" + $0.toLowerCase();\n}\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */ function camelcase($0) {\n    return $0.charAt(1).toUpperCase();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL2ZpbmQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztDQUVDLEdBRWlEO0FBQ2Y7QUFDSztBQUV4QyxNQUFNRyxNQUFNO0FBQ1osTUFBTUMsT0FBTztBQUNiLE1BQU1DLFFBQVE7QUFFZDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E2QkMsR0FDTSxTQUFTQyxLQUFLQyxNQUFNLEVBQUVDLEtBQUs7SUFDaEMsTUFBTUMsU0FBU1Asd0RBQVNBLENBQUNNO0lBQ3pCLElBQUlFLFdBQVdGO0lBQ2YsSUFBSUcsT0FBT1YsK0NBQUlBO0lBRWYsSUFBSVEsVUFBVUYsT0FBT0UsTUFBTSxFQUFFO1FBQzNCLE9BQU9GLE9BQU9HLFFBQVEsQ0FBQ0gsT0FBT0UsTUFBTSxDQUFDQSxPQUFPLENBQUM7SUFDL0M7SUFFQSxJQUFJQSxPQUFPRyxNQUFNLEdBQUcsS0FBS0gsT0FBT0ksS0FBSyxDQUFDLEdBQUcsT0FBTyxVQUFVUixNQUFNUyxJQUFJLENBQUNOLFFBQVE7UUFDM0UseUJBQXlCO1FBQ3pCLElBQUlBLE1BQU1PLE1BQU0sQ0FBQyxPQUFPLEtBQUs7WUFDM0IsMkJBQTJCO1lBQzNCLE1BQU1DLE9BQU9SLE1BQU1LLEtBQUssQ0FBQyxHQUFHSSxPQUFPLENBQUNiLE1BQU1jO1lBQzFDUixXQUFXLFNBQVNNLEtBQUtELE1BQU0sQ0FBQyxHQUFHSSxXQUFXLEtBQUtILEtBQUtILEtBQUssQ0FBQztRQUNoRSxPQUFPO1lBQ0wsNkJBQTZCO1lBQzdCLE1BQU1HLE9BQU9SLE1BQU1LLEtBQUssQ0FBQztZQUV6QixJQUFJLENBQUNULEtBQUtVLElBQUksQ0FBQ0UsT0FBTztnQkFDcEIsSUFBSUksU0FBU0osS0FBS0MsT0FBTyxDQUFDZCxLQUFLa0I7Z0JBRS9CLElBQUlELE9BQU9MLE1BQU0sQ0FBQyxPQUFPLEtBQUs7b0JBQzVCSyxTQUFTLE1BQU1BO2dCQUNqQjtnQkFFQVosUUFBUSxTQUFTWTtZQUNuQjtRQUNGO1FBRUFULE9BQU9YLDhEQUFXQTtJQUNwQjtJQUVBLE9BQU8sSUFBSVcsS0FBS0QsVUFBVUY7QUFDNUI7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNhLE1BQU1DLEVBQUU7SUFDZixPQUFPLE1BQU1BLEdBQUdDLFdBQVc7QUFDN0I7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNMLFVBQVVJLEVBQUU7SUFDbkIsT0FBT0EsR0FBR1AsTUFBTSxDQUFDLEdBQUdJLFdBQVc7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3Byb3BlcnR5LWluZm9ybWF0aW9uQDcuMC4wL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvZmluZC5qcz84Y2ZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7U2NoZW1hfSBmcm9tICdwcm9wZXJ0eS1pbmZvcm1hdGlvbidcbiAqL1xuXG5pbXBvcnQge0RlZmluZWRJbmZvfSBmcm9tICcuL3V0aWwvZGVmaW5lZC1pbmZvLmpzJ1xuaW1wb3J0IHtJbmZvfSBmcm9tICcuL3V0aWwvaW5mby5qcydcbmltcG9ydCB7bm9ybWFsaXplfSBmcm9tICcuL25vcm1hbGl6ZS5qcydcblxuY29uc3QgY2FwID0gL1tBLVpdL2dcbmNvbnN0IGRhc2ggPSAvLVthLXpdL2dcbmNvbnN0IHZhbGlkID0gL15kYXRhWy1cXHcuOl0rJC9pXG5cbi8qKlxuICogTG9vayB1cCBpbmZvIG9uIGEgcHJvcGVydHkuXG4gKlxuICogSW4gbW9zdCBjYXNlcyB0aGUgZ2l2ZW4gYHNjaGVtYWAgY29udGFpbnMgaW5mbyBvbiB0aGUgcHJvcGVydHkuXG4gKiBBbGwgc3RhbmRhcmQsXG4gKiBtb3N0IGxlZ2FjeSxcbiAqIGFuZCBzb21lIG5vbi1zdGFuZGFyZCBwcm9wZXJ0aWVzIGFyZSBzdXBwb3J0ZWQuXG4gKiBGb3IgdGhlc2UgY2FzZXMsXG4gKiB0aGUgcmV0dXJuZWQgYEluZm9gIGhhcyBoaW50cyBhYm91dCB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5LlxuICpcbiAqIGBuYW1lYCBjYW4gYWxzbyBiZSBhIHZhbGlkIGRhdGEgYXR0cmlidXRlIG9yIHByb3BlcnR5LFxuICogaW4gd2hpY2ggY2FzZSBhbiBgSW5mb2Agb2JqZWN0IHdpdGggdGhlIGNvcnJlY3RseSBjYXNlZCBgYXR0cmlidXRlYCBhbmRcbiAqIGBwcm9wZXJ0eWAgaXMgcmV0dXJuZWQuXG4gKlxuICogYG5hbWVgIGNhbiBiZSBhbiB1bmtub3duIGF0dHJpYnV0ZSxcbiAqIGluIHdoaWNoIGNhc2UgYW4gYEluZm9gIG9iamVjdCB3aXRoIGBhdHRyaWJ1dGVgIGFuZCBgcHJvcGVydHlgIHNldCB0byB0aGVcbiAqIGdpdmVuIG5hbWUgaXMgcmV0dXJuZWQuXG4gKiBJdCBpcyBub3QgcmVjb21tZW5kZWQgdG8gcHJvdmlkZSB1bnN1cHBvcnRlZCBsZWdhY3kgb3IgcmVjZW50bHkgc3BlY2NlZFxuICogcHJvcGVydGllcy5cbiAqXG4gKlxuICogQHBhcmFtIHtTY2hlbWF9IHNjaGVtYVxuICogICBTY2hlbWE7XG4gKiAgIGVpdGhlciB0aGUgYGh0bWxgIG9yIGBzdmdgIGV4cG9ydC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogICBBbiBhdHRyaWJ1dGUtbGlrZSBvciBwcm9wZXJ0eS1saWtlIG5hbWU7XG4gKiAgIGl0IHdpbGwgYmUgcGFzc2VkIHRocm91Z2ggYG5vcm1hbGl6ZWAgdG8gaG9wZWZ1bGx5IGZpbmQgdGhlIGNvcnJlY3QgaW5mby5cbiAqIEByZXR1cm5zIHtJbmZvfVxuICogICBJbmZvLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmluZChzY2hlbWEsIHZhbHVlKSB7XG4gIGNvbnN0IG5vcm1hbCA9IG5vcm1hbGl6ZSh2YWx1ZSlcbiAgbGV0IHByb3BlcnR5ID0gdmFsdWVcbiAgbGV0IFR5cGUgPSBJbmZvXG5cbiAgaWYgKG5vcm1hbCBpbiBzY2hlbWEubm9ybWFsKSB7XG4gICAgcmV0dXJuIHNjaGVtYS5wcm9wZXJ0eVtzY2hlbWEubm9ybWFsW25vcm1hbF1dXG4gIH1cblxuICBpZiAobm9ybWFsLmxlbmd0aCA+IDQgJiYgbm9ybWFsLnNsaWNlKDAsIDQpID09PSAnZGF0YScgJiYgdmFsaWQudGVzdCh2YWx1ZSkpIHtcbiAgICAvLyBBdHRyaWJ1dGUgb3IgcHJvcGVydHkuXG4gICAgaWYgKHZhbHVlLmNoYXJBdCg0KSA9PT0gJy0nKSB7XG4gICAgICAvLyBUdXJuIGl0IGludG8gYSBwcm9wZXJ0eS5cbiAgICAgIGNvbnN0IHJlc3QgPSB2YWx1ZS5zbGljZSg1KS5yZXBsYWNlKGRhc2gsIGNhbWVsY2FzZSlcbiAgICAgIHByb3BlcnR5ID0gJ2RhdGEnICsgcmVzdC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHJlc3Quc2xpY2UoMSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVHVybiBpdCBpbnRvIGFuIGF0dHJpYnV0ZS5cbiAgICAgIGNvbnN0IHJlc3QgPSB2YWx1ZS5zbGljZSg0KVxuXG4gICAgICBpZiAoIWRhc2gudGVzdChyZXN0KSkge1xuICAgICAgICBsZXQgZGFzaGVzID0gcmVzdC5yZXBsYWNlKGNhcCwga2ViYWIpXG5cbiAgICAgICAgaWYgKGRhc2hlcy5jaGFyQXQoMCkgIT09ICctJykge1xuICAgICAgICAgIGRhc2hlcyA9ICctJyArIGRhc2hlc1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWUgPSAnZGF0YScgKyBkYXNoZXNcbiAgICAgIH1cbiAgICB9XG5cbiAgICBUeXBlID0gRGVmaW5lZEluZm9cbiAgfVxuXG4gIHJldHVybiBuZXcgVHlwZShwcm9wZXJ0eSwgdmFsdWUpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9ICQwXG4gKiAgIFZhbHVlLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgS2ViYWIuXG4gKi9cbmZ1bmN0aW9uIGtlYmFiKCQwKSB7XG4gIHJldHVybiAnLScgKyAkMC50b0xvd2VyQ2FzZSgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9ICQwXG4gKiAgIFZhbHVlLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgQ2FtZWwuXG4gKi9cbmZ1bmN0aW9uIGNhbWVsY2FzZSgkMCkge1xuICByZXR1cm4gJDAuY2hhckF0KDEpLnRvVXBwZXJDYXNlKClcbn1cbiJdLCJuYW1lcyI6WyJEZWZpbmVkSW5mbyIsIkluZm8iLCJub3JtYWxpemUiLCJjYXAiLCJkYXNoIiwidmFsaWQiLCJmaW5kIiwic2NoZW1hIiwidmFsdWUiLCJub3JtYWwiLCJwcm9wZXJ0eSIsIlR5cGUiLCJsZW5ndGgiLCJzbGljZSIsInRlc3QiLCJjaGFyQXQiLCJyZXN0IiwicmVwbGFjZSIsImNhbWVsY2FzZSIsInRvVXBwZXJDYXNlIiwiZGFzaGVzIiwia2ViYWIiLCIkMCIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/find.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/hast-to-react.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/hast-to-react.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hastToReact: function() { return /* binding */ hastToReact; }\n/* harmony export */ });\n/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */ const hastToReact = {\n    classId: \"classID\",\n    dataType: \"datatype\",\n    itemId: \"itemID\",\n    strokeDashArray: \"strokeDasharray\",\n    strokeDashOffset: \"strokeDashoffset\",\n    strokeLineCap: \"strokeLinecap\",\n    strokeLineJoin: \"strokeLinejoin\",\n    strokeMiterLimit: \"strokeMiterlimit\",\n    typeOf: \"typeof\",\n    xLinkActuate: \"xlinkActuate\",\n    xLinkArcRole: \"xlinkArcrole\",\n    xLinkHref: \"xlinkHref\",\n    xLinkRole: \"xlinkRole\",\n    xLinkShow: \"xlinkShow\",\n    xLinkTitle: \"xlinkTitle\",\n    xLinkType: \"xlinkType\",\n    xmlnsXLink: \"xmlnsXlink\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL2hhc3QtdG8tcmVhY3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Ozs7O0NBVUMsR0FDTSxNQUFNQSxjQUFjO0lBQ3pCQyxTQUFTO0lBQ1RDLFVBQVU7SUFDVkMsUUFBUTtJQUNSQyxpQkFBaUI7SUFDakJDLGtCQUFrQjtJQUNsQkMsZUFBZTtJQUNmQyxnQkFBZ0I7SUFDaEJDLGtCQUFrQjtJQUNsQkMsUUFBUTtJQUNSQyxjQUFjO0lBQ2RDLGNBQWM7SUFDZEMsV0FBVztJQUNYQyxXQUFXO0lBQ1hDLFdBQVc7SUFDWEMsWUFBWTtJQUNaQyxXQUFXO0lBQ1hDLFlBQVk7QUFDZCxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL2hhc3QtdG8tcmVhY3QuanM/YTE1MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNwZWNpYWwgY2FzZXMgZm9yIFJlYWN0IChgUmVjb3JkPHN0cmluZywgc3RyaW5nPmApLlxuICpcbiAqIGBoYXN0YCBpcyBjbG9zZSB0byBgUmVhY3RgIGJ1dCBkaWZmZXJzIGluIGEgY291cGxlIG9mIGNhc2VzLlxuICogVG8gZ2V0IGEgUmVhY3QgcHJvcGVydHkgZnJvbSBhIGhhc3QgcHJvcGVydHksXG4gKiBjaGVjayBpZiBpdCBpcyBpbiBgaGFzdFRvUmVhY3RgLlxuICogSWYgaXQgaXMsIHVzZSB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZTtcbiAqIG90aGVyd2lzZSwgdXNlIHRoZSBoYXN0IHByb3BlcnR5LlxuICpcbiAqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+fVxuICovXG5leHBvcnQgY29uc3QgaGFzdFRvUmVhY3QgPSB7XG4gIGNsYXNzSWQ6ICdjbGFzc0lEJyxcbiAgZGF0YVR5cGU6ICdkYXRhdHlwZScsXG4gIGl0ZW1JZDogJ2l0ZW1JRCcsXG4gIHN0cm9rZURhc2hBcnJheTogJ3N0cm9rZURhc2hhcnJheScsXG4gIHN0cm9rZURhc2hPZmZzZXQ6ICdzdHJva2VEYXNob2Zmc2V0JyxcbiAgc3Ryb2tlTGluZUNhcDogJ3N0cm9rZUxpbmVjYXAnLFxuICBzdHJva2VMaW5lSm9pbjogJ3N0cm9rZUxpbmVqb2luJyxcbiAgc3Ryb2tlTWl0ZXJMaW1pdDogJ3N0cm9rZU1pdGVybGltaXQnLFxuICB0eXBlT2Y6ICd0eXBlb2YnLFxuICB4TGlua0FjdHVhdGU6ICd4bGlua0FjdHVhdGUnLFxuICB4TGlua0FyY1JvbGU6ICd4bGlua0FyY3JvbGUnLFxuICB4TGlua0hyZWY6ICd4bGlua0hyZWYnLFxuICB4TGlua1JvbGU6ICd4bGlua1JvbGUnLFxuICB4TGlua1Nob3c6ICd4bGlua1Nob3cnLFxuICB4TGlua1RpdGxlOiAneGxpbmtUaXRsZScsXG4gIHhMaW5rVHlwZTogJ3hsaW5rVHlwZScsXG4gIHhtbG5zWExpbms6ICd4bWxuc1hsaW5rJ1xufVxuIl0sIm5hbWVzIjpbImhhc3RUb1JlYWN0IiwiY2xhc3NJZCIsImRhdGFUeXBlIiwiaXRlbUlkIiwic3Ryb2tlRGFzaEFycmF5Iiwic3Ryb2tlRGFzaE9mZnNldCIsInN0cm9rZUxpbmVDYXAiLCJzdHJva2VMaW5lSm9pbiIsInN0cm9rZU1pdGVyTGltaXQiLCJ0eXBlT2YiLCJ4TGlua0FjdHVhdGUiLCJ4TGlua0FyY1JvbGUiLCJ4TGlua0hyZWYiLCJ4TGlua1JvbGUiLCJ4TGlua1Nob3ciLCJ4TGlua1RpdGxlIiwieExpbmtUeXBlIiwieG1sbnNYTGluayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/hast-to-react.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/html.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/html.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   html: function() { return /* binding */ html; }\n/* harmony export */ });\n/* harmony import */ var _util_case_insensitive_transform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/case-insensitive-transform.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/case-insensitive-transform.js\");\n/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/create.js\");\n/* harmony import */ var _util_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/types.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/types.js\");\n\n\n\nconst html = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({\n    attributes: {\n        acceptcharset: \"accept-charset\",\n        classname: \"class\",\n        htmlfor: \"for\",\n        httpequiv: \"http-equiv\"\n    },\n    mustUseProperty: [\n        \"checked\",\n        \"multiple\",\n        \"muted\",\n        \"selected\"\n    ],\n    properties: {\n        // Standard Properties.\n        abbr: null,\n        accept: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaSeparated,\n        acceptCharset: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        accessKey: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        action: null,\n        allow: null,\n        allowFullScreen: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        allowPaymentRequest: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        allowUserMedia: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        alt: null,\n        as: null,\n        async: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        autoCapitalize: null,\n        autoComplete: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        autoFocus: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        autoPlay: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        blocking: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        capture: null,\n        charSet: null,\n        checked: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        cite: null,\n        className: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        cols: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        colSpan: null,\n        content: null,\n        contentEditable: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        controls: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        controlsList: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        coords: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number | _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaSeparated,\n        crossOrigin: null,\n        data: null,\n        dateTime: null,\n        decoding: null,\n        default: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        defer: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        dir: null,\n        dirName: null,\n        disabled: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        download: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.overloadedBoolean,\n        draggable: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        encType: null,\n        enterKeyHint: null,\n        fetchPriority: null,\n        form: null,\n        formAction: null,\n        formEncType: null,\n        formMethod: null,\n        formNoValidate: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        formTarget: null,\n        headers: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        height: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        hidden: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        high: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        href: null,\n        hrefLang: null,\n        htmlFor: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        httpEquiv: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        id: null,\n        imageSizes: null,\n        imageSrcSet: null,\n        inert: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        inputMode: null,\n        integrity: null,\n        is: null,\n        isMap: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        itemId: null,\n        itemProp: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        itemRef: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        itemScope: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        itemType: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        kind: null,\n        label: null,\n        lang: null,\n        language: null,\n        list: null,\n        loading: null,\n        loop: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        low: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        manifest: null,\n        max: null,\n        maxLength: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        media: null,\n        method: null,\n        min: null,\n        minLength: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        multiple: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        muted: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        name: null,\n        nonce: null,\n        noModule: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        noValidate: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        onAbort: null,\n        onAfterPrint: null,\n        onAuxClick: null,\n        onBeforeMatch: null,\n        onBeforePrint: null,\n        onBeforeToggle: null,\n        onBeforeUnload: null,\n        onBlur: null,\n        onCancel: null,\n        onCanPlay: null,\n        onCanPlayThrough: null,\n        onChange: null,\n        onClick: null,\n        onClose: null,\n        onContextLost: null,\n        onContextMenu: null,\n        onContextRestored: null,\n        onCopy: null,\n        onCueChange: null,\n        onCut: null,\n        onDblClick: null,\n        onDrag: null,\n        onDragEnd: null,\n        onDragEnter: null,\n        onDragExit: null,\n        onDragLeave: null,\n        onDragOver: null,\n        onDragStart: null,\n        onDrop: null,\n        onDurationChange: null,\n        onEmptied: null,\n        onEnded: null,\n        onError: null,\n        onFocus: null,\n        onFormData: null,\n        onHashChange: null,\n        onInput: null,\n        onInvalid: null,\n        onKeyDown: null,\n        onKeyPress: null,\n        onKeyUp: null,\n        onLanguageChange: null,\n        onLoad: null,\n        onLoadedData: null,\n        onLoadedMetadata: null,\n        onLoadEnd: null,\n        onLoadStart: null,\n        onMessage: null,\n        onMessageError: null,\n        onMouseDown: null,\n        onMouseEnter: null,\n        onMouseLeave: null,\n        onMouseMove: null,\n        onMouseOut: null,\n        onMouseOver: null,\n        onMouseUp: null,\n        onOffline: null,\n        onOnline: null,\n        onPageHide: null,\n        onPageShow: null,\n        onPaste: null,\n        onPause: null,\n        onPlay: null,\n        onPlaying: null,\n        onPopState: null,\n        onProgress: null,\n        onRateChange: null,\n        onRejectionHandled: null,\n        onReset: null,\n        onResize: null,\n        onScroll: null,\n        onScrollEnd: null,\n        onSecurityPolicyViolation: null,\n        onSeeked: null,\n        onSeeking: null,\n        onSelect: null,\n        onSlotChange: null,\n        onStalled: null,\n        onStorage: null,\n        onSubmit: null,\n        onSuspend: null,\n        onTimeUpdate: null,\n        onToggle: null,\n        onUnhandledRejection: null,\n        onUnload: null,\n        onVolumeChange: null,\n        onWaiting: null,\n        onWheel: null,\n        open: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        optimum: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        pattern: null,\n        ping: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        placeholder: null,\n        playsInline: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        popover: null,\n        popoverTarget: null,\n        popoverTargetAction: null,\n        poster: null,\n        preload: null,\n        readOnly: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        referrerPolicy: null,\n        rel: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        required: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        reversed: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        rows: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        rowSpan: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        sandbox: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        scope: null,\n        scoped: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        seamless: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        selected: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        shadowRootClonable: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        shadowRootDelegatesFocus: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        shadowRootMode: null,\n        shape: null,\n        size: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        sizes: null,\n        slot: null,\n        span: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        spellCheck: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        src: null,\n        srcDoc: null,\n        srcLang: null,\n        srcSet: null,\n        start: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        step: null,\n        style: null,\n        tabIndex: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        target: null,\n        title: null,\n        translate: null,\n        type: null,\n        typeMustMatch: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        useMap: null,\n        value: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        width: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        wrap: null,\n        writingSuggestions: null,\n        // Legacy.\n        // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n        align: null,\n        aLink: null,\n        archive: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        axis: null,\n        background: null,\n        bgColor: null,\n        border: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        borderColor: null,\n        bottomMargin: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        cellPadding: null,\n        cellSpacing: null,\n        char: null,\n        charOff: null,\n        classId: null,\n        clear: null,\n        code: null,\n        codeBase: null,\n        codeType: null,\n        color: null,\n        compact: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        declare: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        event: null,\n        face: null,\n        frame: null,\n        frameBorder: null,\n        hSpace: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        leftMargin: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        link: null,\n        longDesc: null,\n        lowSrc: null,\n        marginHeight: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        marginWidth: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        noResize: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        noHref: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        noShade: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        noWrap: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        object: null,\n        profile: null,\n        prompt: null,\n        rev: null,\n        rightMargin: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        rules: null,\n        scheme: null,\n        scrolling: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,\n        standby: null,\n        summary: null,\n        text: null,\n        topMargin: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        valueType: null,\n        version: null,\n        vAlign: null,\n        vLink: null,\n        vSpace: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        // Non-standard Properties.\n        allowTransparency: null,\n        autoCorrect: null,\n        autoSave: null,\n        disablePictureInPicture: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        disableRemotePlayback: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        prefix: null,\n        property: null,\n        results: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        security: null,\n        unselectable: null\n    },\n    space: \"html\",\n    transform: _util_case_insensitive_transform_js__WEBPACK_IMPORTED_MODULE_2__.caseInsensitiveTransform\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/html.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/normalize.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/normalize.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalize: function() { return /* binding */ normalize; }\n/* harmony export */ });\n/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */ function normalize(value) {\n    return value.toLowerCase();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL25vcm1hbGl6ZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7O0NBUUMsR0FDTSxTQUFTQSxVQUFVQyxLQUFLO0lBQzdCLE9BQU9BLE1BQU1DLFdBQVc7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3Byb3BlcnR5LWluZm9ybWF0aW9uQDcuMC4wL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvbm9ybWFsaXplLmpzP2VhZWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZXQgdGhlIGNsZWFuZWQgY2FzZSBpbnNlbnNpdGl2ZSBmb3JtIG9mIGFuIGF0dHJpYnV0ZSBvciBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqICAgQW4gYXR0cmlidXRlLWxpa2Ugb3IgcHJvcGVydHktbGlrZSBuYW1lLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgVmFsdWUgdGhhdCBjYW4gYmUgdXNlZCB0byBsb29rIHVwIHRoZSBwcm9wZXJseSBjYXNlZCBwcm9wZXJ0eSBvbiBhXG4gKiAgIGBTY2hlbWFgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpXG59XG4iXSwibmFtZXMiOlsibm9ybWFsaXplIiwidmFsdWUiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/normalize.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/svg.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/svg.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   svg: function() { return /* binding */ svg; }\n/* harmony export */ });\n/* harmony import */ var _util_case_sensitive_transform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/case-sensitive-transform.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/case-sensitive-transform.js\");\n/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/create.js\");\n/* harmony import */ var _util_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/types.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/types.js\");\n\n\n\nconst svg = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({\n    attributes: {\n        accentHeight: \"accent-height\",\n        alignmentBaseline: \"alignment-baseline\",\n        arabicForm: \"arabic-form\",\n        baselineShift: \"baseline-shift\",\n        capHeight: \"cap-height\",\n        className: \"class\",\n        clipPath: \"clip-path\",\n        clipRule: \"clip-rule\",\n        colorInterpolation: \"color-interpolation\",\n        colorInterpolationFilters: \"color-interpolation-filters\",\n        colorProfile: \"color-profile\",\n        colorRendering: \"color-rendering\",\n        crossOrigin: \"crossorigin\",\n        dataType: \"datatype\",\n        dominantBaseline: \"dominant-baseline\",\n        enableBackground: \"enable-background\",\n        fillOpacity: \"fill-opacity\",\n        fillRule: \"fill-rule\",\n        floodColor: \"flood-color\",\n        floodOpacity: \"flood-opacity\",\n        fontFamily: \"font-family\",\n        fontSize: \"font-size\",\n        fontSizeAdjust: \"font-size-adjust\",\n        fontStretch: \"font-stretch\",\n        fontStyle: \"font-style\",\n        fontVariant: \"font-variant\",\n        fontWeight: \"font-weight\",\n        glyphName: \"glyph-name\",\n        glyphOrientationHorizontal: \"glyph-orientation-horizontal\",\n        glyphOrientationVertical: \"glyph-orientation-vertical\",\n        hrefLang: \"hreflang\",\n        horizAdvX: \"horiz-adv-x\",\n        horizOriginX: \"horiz-origin-x\",\n        horizOriginY: \"horiz-origin-y\",\n        imageRendering: \"image-rendering\",\n        letterSpacing: \"letter-spacing\",\n        lightingColor: \"lighting-color\",\n        markerEnd: \"marker-end\",\n        markerMid: \"marker-mid\",\n        markerStart: \"marker-start\",\n        navDown: \"nav-down\",\n        navDownLeft: \"nav-down-left\",\n        navDownRight: \"nav-down-right\",\n        navLeft: \"nav-left\",\n        navNext: \"nav-next\",\n        navPrev: \"nav-prev\",\n        navRight: \"nav-right\",\n        navUp: \"nav-up\",\n        navUpLeft: \"nav-up-left\",\n        navUpRight: \"nav-up-right\",\n        onAbort: \"onabort\",\n        onActivate: \"onactivate\",\n        onAfterPrint: \"onafterprint\",\n        onBeforePrint: \"onbeforeprint\",\n        onBegin: \"onbegin\",\n        onCancel: \"oncancel\",\n        onCanPlay: \"oncanplay\",\n        onCanPlayThrough: \"oncanplaythrough\",\n        onChange: \"onchange\",\n        onClick: \"onclick\",\n        onClose: \"onclose\",\n        onCopy: \"oncopy\",\n        onCueChange: \"oncuechange\",\n        onCut: \"oncut\",\n        onDblClick: \"ondblclick\",\n        onDrag: \"ondrag\",\n        onDragEnd: \"ondragend\",\n        onDragEnter: \"ondragenter\",\n        onDragExit: \"ondragexit\",\n        onDragLeave: \"ondragleave\",\n        onDragOver: \"ondragover\",\n        onDragStart: \"ondragstart\",\n        onDrop: \"ondrop\",\n        onDurationChange: \"ondurationchange\",\n        onEmptied: \"onemptied\",\n        onEnd: \"onend\",\n        onEnded: \"onended\",\n        onError: \"onerror\",\n        onFocus: \"onfocus\",\n        onFocusIn: \"onfocusin\",\n        onFocusOut: \"onfocusout\",\n        onHashChange: \"onhashchange\",\n        onInput: \"oninput\",\n        onInvalid: \"oninvalid\",\n        onKeyDown: \"onkeydown\",\n        onKeyPress: \"onkeypress\",\n        onKeyUp: \"onkeyup\",\n        onLoad: \"onload\",\n        onLoadedData: \"onloadeddata\",\n        onLoadedMetadata: \"onloadedmetadata\",\n        onLoadStart: \"onloadstart\",\n        onMessage: \"onmessage\",\n        onMouseDown: \"onmousedown\",\n        onMouseEnter: \"onmouseenter\",\n        onMouseLeave: \"onmouseleave\",\n        onMouseMove: \"onmousemove\",\n        onMouseOut: \"onmouseout\",\n        onMouseOver: \"onmouseover\",\n        onMouseUp: \"onmouseup\",\n        onMouseWheel: \"onmousewheel\",\n        onOffline: \"onoffline\",\n        onOnline: \"ononline\",\n        onPageHide: \"onpagehide\",\n        onPageShow: \"onpageshow\",\n        onPaste: \"onpaste\",\n        onPause: \"onpause\",\n        onPlay: \"onplay\",\n        onPlaying: \"onplaying\",\n        onPopState: \"onpopstate\",\n        onProgress: \"onprogress\",\n        onRateChange: \"onratechange\",\n        onRepeat: \"onrepeat\",\n        onReset: \"onreset\",\n        onResize: \"onresize\",\n        onScroll: \"onscroll\",\n        onSeeked: \"onseeked\",\n        onSeeking: \"onseeking\",\n        onSelect: \"onselect\",\n        onShow: \"onshow\",\n        onStalled: \"onstalled\",\n        onStorage: \"onstorage\",\n        onSubmit: \"onsubmit\",\n        onSuspend: \"onsuspend\",\n        onTimeUpdate: \"ontimeupdate\",\n        onToggle: \"ontoggle\",\n        onUnload: \"onunload\",\n        onVolumeChange: \"onvolumechange\",\n        onWaiting: \"onwaiting\",\n        onZoom: \"onzoom\",\n        overlinePosition: \"overline-position\",\n        overlineThickness: \"overline-thickness\",\n        paintOrder: \"paint-order\",\n        panose1: \"panose-1\",\n        pointerEvents: \"pointer-events\",\n        referrerPolicy: \"referrerpolicy\",\n        renderingIntent: \"rendering-intent\",\n        shapeRendering: \"shape-rendering\",\n        stopColor: \"stop-color\",\n        stopOpacity: \"stop-opacity\",\n        strikethroughPosition: \"strikethrough-position\",\n        strikethroughThickness: \"strikethrough-thickness\",\n        strokeDashArray: \"stroke-dasharray\",\n        strokeDashOffset: \"stroke-dashoffset\",\n        strokeLineCap: \"stroke-linecap\",\n        strokeLineJoin: \"stroke-linejoin\",\n        strokeMiterLimit: \"stroke-miterlimit\",\n        strokeOpacity: \"stroke-opacity\",\n        strokeWidth: \"stroke-width\",\n        tabIndex: \"tabindex\",\n        textAnchor: \"text-anchor\",\n        textDecoration: \"text-decoration\",\n        textRendering: \"text-rendering\",\n        transformOrigin: \"transform-origin\",\n        typeOf: \"typeof\",\n        underlinePosition: \"underline-position\",\n        underlineThickness: \"underline-thickness\",\n        unicodeBidi: \"unicode-bidi\",\n        unicodeRange: \"unicode-range\",\n        unitsPerEm: \"units-per-em\",\n        vAlphabetic: \"v-alphabetic\",\n        vHanging: \"v-hanging\",\n        vIdeographic: \"v-ideographic\",\n        vMathematical: \"v-mathematical\",\n        vectorEffect: \"vector-effect\",\n        vertAdvY: \"vert-adv-y\",\n        vertOriginX: \"vert-origin-x\",\n        vertOriginY: \"vert-origin-y\",\n        wordSpacing: \"word-spacing\",\n        writingMode: \"writing-mode\",\n        xHeight: \"x-height\",\n        // These were camelcased in Tiny. Now lowercased in SVG 2\n        playbackOrder: \"playbackorder\",\n        timelineBegin: \"timelinebegin\"\n    },\n    properties: {\n        about: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaOrSpaceSeparated,\n        accentHeight: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        accumulate: null,\n        additive: null,\n        alignmentBaseline: null,\n        alphabetic: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        amplitude: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        arabicForm: null,\n        ascent: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        attributeName: null,\n        attributeType: null,\n        azimuth: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        bandwidth: null,\n        baselineShift: null,\n        baseFrequency: null,\n        baseProfile: null,\n        bbox: null,\n        begin: null,\n        bias: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        by: null,\n        calcMode: null,\n        capHeight: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        className: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        clip: null,\n        clipPath: null,\n        clipPathUnits: null,\n        clipRule: null,\n        color: null,\n        colorInterpolation: null,\n        colorInterpolationFilters: null,\n        colorProfile: null,\n        colorRendering: null,\n        content: null,\n        contentScriptType: null,\n        contentStyleType: null,\n        crossOrigin: null,\n        cursor: null,\n        cx: null,\n        cy: null,\n        d: null,\n        dataType: null,\n        defaultAction: null,\n        descent: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        diffuseConstant: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        direction: null,\n        display: null,\n        dur: null,\n        divisor: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        dominantBaseline: null,\n        download: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.boolean,\n        dx: null,\n        dy: null,\n        edgeMode: null,\n        editable: null,\n        elevation: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        enableBackground: null,\n        end: null,\n        event: null,\n        exponent: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        externalResourcesRequired: null,\n        fill: null,\n        fillOpacity: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        fillRule: null,\n        filter: null,\n        filterRes: null,\n        filterUnits: null,\n        floodColor: null,\n        floodOpacity: null,\n        focusable: null,\n        focusHighlight: null,\n        fontFamily: null,\n        fontSize: null,\n        fontSizeAdjust: null,\n        fontStretch: null,\n        fontStyle: null,\n        fontVariant: null,\n        fontWeight: null,\n        format: null,\n        fr: null,\n        from: null,\n        fx: null,\n        fy: null,\n        g1: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaSeparated,\n        g2: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaSeparated,\n        glyphName: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaSeparated,\n        glyphOrientationHorizontal: null,\n        glyphOrientationVertical: null,\n        glyphRef: null,\n        gradientTransform: null,\n        gradientUnits: null,\n        handler: null,\n        hanging: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        hatchContentUnits: null,\n        hatchUnits: null,\n        height: null,\n        href: null,\n        hrefLang: null,\n        horizAdvX: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        horizOriginX: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        horizOriginY: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        id: null,\n        ideographic: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        imageRendering: null,\n        initialVisibility: null,\n        in: null,\n        in2: null,\n        intercept: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        k: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        k1: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        k2: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        k3: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        k4: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        kernelMatrix: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaOrSpaceSeparated,\n        kernelUnitLength: null,\n        keyPoints: null,\n        keySplines: null,\n        keyTimes: null,\n        kerning: null,\n        lang: null,\n        lengthAdjust: null,\n        letterSpacing: null,\n        lightingColor: null,\n        limitingConeAngle: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        local: null,\n        markerEnd: null,\n        markerMid: null,\n        markerStart: null,\n        markerHeight: null,\n        markerUnits: null,\n        markerWidth: null,\n        mask: null,\n        maskContentUnits: null,\n        maskUnits: null,\n        mathematical: null,\n        max: null,\n        media: null,\n        mediaCharacterEncoding: null,\n        mediaContentEncodings: null,\n        mediaSize: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        mediaTime: null,\n        method: null,\n        min: null,\n        mode: null,\n        name: null,\n        navDown: null,\n        navDownLeft: null,\n        navDownRight: null,\n        navLeft: null,\n        navNext: null,\n        navPrev: null,\n        navRight: null,\n        navUp: null,\n        navUpLeft: null,\n        navUpRight: null,\n        numOctaves: null,\n        observer: null,\n        offset: null,\n        onAbort: null,\n        onActivate: null,\n        onAfterPrint: null,\n        onBeforePrint: null,\n        onBegin: null,\n        onCancel: null,\n        onCanPlay: null,\n        onCanPlayThrough: null,\n        onChange: null,\n        onClick: null,\n        onClose: null,\n        onCopy: null,\n        onCueChange: null,\n        onCut: null,\n        onDblClick: null,\n        onDrag: null,\n        onDragEnd: null,\n        onDragEnter: null,\n        onDragExit: null,\n        onDragLeave: null,\n        onDragOver: null,\n        onDragStart: null,\n        onDrop: null,\n        onDurationChange: null,\n        onEmptied: null,\n        onEnd: null,\n        onEnded: null,\n        onError: null,\n        onFocus: null,\n        onFocusIn: null,\n        onFocusOut: null,\n        onHashChange: null,\n        onInput: null,\n        onInvalid: null,\n        onKeyDown: null,\n        onKeyPress: null,\n        onKeyUp: null,\n        onLoad: null,\n        onLoadedData: null,\n        onLoadedMetadata: null,\n        onLoadStart: null,\n        onMessage: null,\n        onMouseDown: null,\n        onMouseEnter: null,\n        onMouseLeave: null,\n        onMouseMove: null,\n        onMouseOut: null,\n        onMouseOver: null,\n        onMouseUp: null,\n        onMouseWheel: null,\n        onOffline: null,\n        onOnline: null,\n        onPageHide: null,\n        onPageShow: null,\n        onPaste: null,\n        onPause: null,\n        onPlay: null,\n        onPlaying: null,\n        onPopState: null,\n        onProgress: null,\n        onRateChange: null,\n        onRepeat: null,\n        onReset: null,\n        onResize: null,\n        onScroll: null,\n        onSeeked: null,\n        onSeeking: null,\n        onSelect: null,\n        onShow: null,\n        onStalled: null,\n        onStorage: null,\n        onSubmit: null,\n        onSuspend: null,\n        onTimeUpdate: null,\n        onToggle: null,\n        onUnload: null,\n        onVolumeChange: null,\n        onWaiting: null,\n        onZoom: null,\n        opacity: null,\n        operator: null,\n        order: null,\n        orient: null,\n        orientation: null,\n        origin: null,\n        overflow: null,\n        overlay: null,\n        overlinePosition: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        overlineThickness: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        paintOrder: null,\n        panose1: null,\n        path: null,\n        pathLength: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        patternContentUnits: null,\n        patternTransform: null,\n        patternUnits: null,\n        phase: null,\n        ping: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,\n        pitch: null,\n        playbackOrder: null,\n        pointerEvents: null,\n        points: null,\n        pointsAtX: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        pointsAtY: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        pointsAtZ: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        preserveAlpha: null,\n        preserveAspectRatio: null,\n        primitiveUnits: null,\n        propagate: null,\n        property: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaOrSpaceSeparated,\n        r: null,\n        radius: null,\n        referrerPolicy: null,\n        refX: null,\n        refY: null,\n        rel: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaOrSpaceSeparated,\n        rev: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaOrSpaceSeparated,\n        renderingIntent: null,\n        repeatCount: null,\n        repeatDur: null,\n        requiredExtensions: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaOrSpaceSeparated,\n        requiredFeatures: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaOrSpaceSeparated,\n        requiredFonts: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaOrSpaceSeparated,\n        requiredFormats: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaOrSpaceSeparated,\n        resource: null,\n        restart: null,\n        result: null,\n        rotate: null,\n        rx: null,\n        ry: null,\n        scale: null,\n        seed: null,\n        shapeRendering: null,\n        side: null,\n        slope: null,\n        snapshotTime: null,\n        specularConstant: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        specularExponent: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        spreadMethod: null,\n        spacing: null,\n        startOffset: null,\n        stdDeviation: null,\n        stemh: null,\n        stemv: null,\n        stitchTiles: null,\n        stopColor: null,\n        stopOpacity: null,\n        strikethroughPosition: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        strikethroughThickness: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        string: null,\n        stroke: null,\n        strokeDashArray: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaOrSpaceSeparated,\n        strokeDashOffset: null,\n        strokeLineCap: null,\n        strokeLineJoin: null,\n        strokeMiterLimit: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        strokeOpacity: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        strokeWidth: null,\n        style: null,\n        surfaceScale: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        syncBehavior: null,\n        syncBehaviorDefault: null,\n        syncMaster: null,\n        syncTolerance: null,\n        syncToleranceDefault: null,\n        systemLanguage: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaOrSpaceSeparated,\n        tabIndex: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        tableValues: null,\n        target: null,\n        targetX: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        targetY: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        textAnchor: null,\n        textDecoration: null,\n        textRendering: null,\n        textLength: null,\n        timelineBegin: null,\n        title: null,\n        transformBehavior: null,\n        type: null,\n        typeOf: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.commaOrSpaceSeparated,\n        to: null,\n        transform: null,\n        transformOrigin: null,\n        u1: null,\n        u2: null,\n        underlinePosition: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        underlineThickness: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        unicode: null,\n        unicodeBidi: null,\n        unicodeRange: null,\n        unitsPerEm: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        values: null,\n        vAlphabetic: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        vMathematical: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        vectorEffect: null,\n        vHanging: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        vIdeographic: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        version: null,\n        vertAdvY: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        vertOriginX: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        vertOriginY: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        viewBox: null,\n        viewTarget: null,\n        visibility: null,\n        width: null,\n        widths: null,\n        wordSpacing: null,\n        writingMode: null,\n        x: null,\n        x1: null,\n        x2: null,\n        xChannelSelector: null,\n        xHeight: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,\n        y: null,\n        y1: null,\n        y2: null,\n        yChannelSelector: null,\n        z: null,\n        zoomAndPan: null\n    },\n    space: \"svg\",\n    transform: _util_case_sensitive_transform_js__WEBPACK_IMPORTED_MODULE_2__.caseSensitiveTransform\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/svg.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/case-insensitive-transform.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/case-insensitive-transform.js ***!
  \********************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   caseInsensitiveTransform: function() { return /* binding */ caseInsensitiveTransform; }\n/* harmony export */ });\n/* harmony import */ var _case_sensitive_transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./case-sensitive-transform.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/case-sensitive-transform.js\");\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */ function caseInsensitiveTransform(attributes, property) {\n    return (0,_case_sensitive_transform_js__WEBPACK_IMPORTED_MODULE_0__.caseSensitiveTransform)(attributes, property.toLowerCase());\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3V0aWwvY2FzZS1pbnNlbnNpdGl2ZS10cmFuc2Zvcm0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0U7QUFFcEU7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNDLHlCQUF5QkMsVUFBVSxFQUFFQyxRQUFRO0lBQzNELE9BQU9ILG9GQUFzQkEsQ0FBQ0UsWUFBWUMsU0FBU0MsV0FBVztBQUNoRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcHJvcGVydHktaW5mb3JtYXRpb25ANy4wLjAvbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi91dGlsL2Nhc2UtaW5zZW5zaXRpdmUtdHJhbnNmb3JtLmpzP2Q0YTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjYXNlU2Vuc2l0aXZlVHJhbnNmb3JtfSBmcm9tICcuL2Nhc2Utc2Vuc2l0aXZlLXRyYW5zZm9ybS5qcydcblxuLyoqXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIHN0cmluZz59IGF0dHJpYnV0ZXNcbiAqICAgQXR0cmlidXRlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVxuICogICBQcm9wZXJ0eS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIFRyYW5zZm9ybWVkIHByb3BlcnR5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FzZUluc2Vuc2l0aXZlVHJhbnNmb3JtKGF0dHJpYnV0ZXMsIHByb3BlcnR5KSB7XG4gIHJldHVybiBjYXNlU2Vuc2l0aXZlVHJhbnNmb3JtKGF0dHJpYnV0ZXMsIHByb3BlcnR5LnRvTG93ZXJDYXNlKCkpXG59XG4iXSwibmFtZXMiOlsiY2FzZVNlbnNpdGl2ZVRyYW5zZm9ybSIsImNhc2VJbnNlbnNpdGl2ZVRyYW5zZm9ybSIsImF0dHJpYnV0ZXMiLCJwcm9wZXJ0eSIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/case-insensitive-transform.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/case-sensitive-transform.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/case-sensitive-transform.js ***!
  \******************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   caseSensitiveTransform: function() { return /* binding */ caseSensitiveTransform; }\n/* harmony export */ });\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */ function caseSensitiveTransform(attributes, attribute) {\n    return attribute in attributes ? attributes[attribute] : attribute;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3V0aWwvY2FzZS1zZW5zaXRpdmUtdHJhbnNmb3JtLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7OztDQU9DLEdBQ00sU0FBU0EsdUJBQXVCQyxVQUFVLEVBQUVDLFNBQVM7SUFDMUQsT0FBT0EsYUFBYUQsYUFBYUEsVUFBVSxDQUFDQyxVQUFVLEdBQUdBO0FBQzNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3V0aWwvY2FzZS1zZW5zaXRpdmUtdHJhbnNmb3JtLmpzPzc5ZTkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIHN0cmluZz59IGF0dHJpYnV0ZXNcbiAqICAgQXR0cmlidXRlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcbiAqICAgQXR0cmlidXRlLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgVHJhbnNmb3JtZWQgYXR0cmlidXRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FzZVNlbnNpdGl2ZVRyYW5zZm9ybShhdHRyaWJ1dGVzLCBhdHRyaWJ1dGUpIHtcbiAgcmV0dXJuIGF0dHJpYnV0ZSBpbiBhdHRyaWJ1dGVzID8gYXR0cmlidXRlc1thdHRyaWJ1dGVdIDogYXR0cmlidXRlXG59XG4iXSwibmFtZXMiOlsiY2FzZVNlbnNpdGl2ZVRyYW5zZm9ybSIsImF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/case-sensitive-transform.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/create.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/create.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: function() { return /* binding */ create; }\n/* harmony export */ });\n/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../normalize.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/normalize.js\");\n/* harmony import */ var _defined_info_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defined-info.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/defined-info.js\");\n/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/schema.js\");\n/**\n * @import {Info, Space} from 'property-information'\n */ /**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */ /**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */ \n\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */ function create(definition) {\n    /** @type {Record<string, Info>} */ const properties = {};\n    /** @type {Record<string, string>} */ const normals = {};\n    for (const [property, value] of Object.entries(definition.properties)){\n        const info = new _defined_info_js__WEBPACK_IMPORTED_MODULE_0__.DefinedInfo(property, definition.transform(definition.attributes || {}, property), value, definition.space);\n        if (definition.mustUseProperty && definition.mustUseProperty.includes(property)) {\n            info.mustUseProperty = true;\n        }\n        properties[property] = info;\n        normals[(0,_normalize_js__WEBPACK_IMPORTED_MODULE_1__.normalize)(property)] = property;\n        normals[(0,_normalize_js__WEBPACK_IMPORTED_MODULE_1__.normalize)(info.attribute)] = property;\n    }\n    return new _schema_js__WEBPACK_IMPORTED_MODULE_2__.Schema(properties, normals, definition.space);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3V0aWwvY3JlYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Q0FFQyxHQUVEOzs7Ozs7Ozs7Ozs7O0NBYUMsR0FFRDs7Ozs7Ozs7O0NBU0MsR0FFd0M7QUFDSTtBQUNYO0FBRWxDOzs7OztDQUtDLEdBQ00sU0FBU0csT0FBT0MsVUFBVTtJQUMvQixpQ0FBaUMsR0FDakMsTUFBTUMsYUFBYSxDQUFDO0lBQ3BCLG1DQUFtQyxHQUNuQyxNQUFNQyxVQUFVLENBQUM7SUFFakIsS0FBSyxNQUFNLENBQUNDLFVBQVVDLE1BQU0sSUFBSUMsT0FBT0MsT0FBTyxDQUFDTixXQUFXQyxVQUFVLEVBQUc7UUFDckUsTUFBTU0sT0FBTyxJQUFJVix5REFBV0EsQ0FDMUJNLFVBQ0FILFdBQVdRLFNBQVMsQ0FBQ1IsV0FBV1MsVUFBVSxJQUFJLENBQUMsR0FBR04sV0FDbERDLE9BQ0FKLFdBQVdVLEtBQUs7UUFHbEIsSUFDRVYsV0FBV1csZUFBZSxJQUMxQlgsV0FBV1csZUFBZSxDQUFDQyxRQUFRLENBQUNULFdBQ3BDO1lBQ0FJLEtBQUtJLGVBQWUsR0FBRztRQUN6QjtRQUVBVixVQUFVLENBQUNFLFNBQVMsR0FBR0k7UUFFdkJMLE9BQU8sQ0FBQ04sd0RBQVNBLENBQUNPLFVBQVUsR0FBR0E7UUFDL0JELE9BQU8sQ0FBQ04sd0RBQVNBLENBQUNXLEtBQUtNLFNBQVMsRUFBRSxHQUFHVjtJQUN2QztJQUVBLE9BQU8sSUFBSUwsOENBQU1BLENBQUNHLFlBQVlDLFNBQVNGLFdBQVdVLEtBQUs7QUFDekQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3Byb3BlcnR5LWluZm9ybWF0aW9uQDcuMC4wL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvdXRpbC9jcmVhdGUuanM/NTdmMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge0luZm8sIFNwYWNlfSBmcm9tICdwcm9wZXJ0eS1pbmZvcm1hdGlvbidcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIERlZmluaXRpb25cbiAqICAgRGVmaW5pdGlvbiBvZiBhIHNjaGVtYS5cbiAqIEBwcm9wZXJ0eSB7UmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IHVuZGVmaW5lZH0gW2F0dHJpYnV0ZXNdXG4gKiAgIE5vcm1hbHplZCBuYW1lcyB0byBzcGVjaWFsIGF0dHJpYnV0ZSBjYXNlLlxuICogQHByb3BlcnR5IHtSZWFkb25seUFycmF5PHN0cmluZz4gfCB1bmRlZmluZWR9IFttdXN0VXNlUHJvcGVydHldXG4gKiAgIE5vcm1hbGl6ZWQgbmFtZXMgdGhhdCBtdXN0IGJlIHNldCBhcyBwcm9wZXJ0aWVzLlxuICogQHByb3BlcnR5IHtSZWNvcmQ8c3RyaW5nLCBudW1iZXIgfCBudWxsPn0gcHJvcGVydGllc1xuICogICBQcm9wZXJ0eSBuYW1lcyB0byB0aGVpciB0eXBlcy5cbiAqIEBwcm9wZXJ0eSB7U3BhY2UgfCB1bmRlZmluZWR9IFtzcGFjZV1cbiAqICAgU3BhY2UuXG4gKiBAcHJvcGVydHkge1RyYW5zZm9ybX0gdHJhbnNmb3JtXG4gKiAgIFRyYW5zZm9ybSBhIHByb3BlcnR5IG5hbWUuXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgVHJhbnNmb3JtXG4gKiAgIFRyYW5zZm9ybS5cbiAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgc3RyaW5nPn0gYXR0cmlidXRlc1xuICogICBBdHRyaWJ1dGVzLlxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gKiAgIFByb3BlcnR5LlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgQXR0cmlidXRlLlxuICovXG5cbmltcG9ydCB7bm9ybWFsaXplfSBmcm9tICcuLi9ub3JtYWxpemUuanMnXG5pbXBvcnQge0RlZmluZWRJbmZvfSBmcm9tICcuL2RlZmluZWQtaW5mby5qcydcbmltcG9ydCB7U2NoZW1hfSBmcm9tICcuL3NjaGVtYS5qcydcblxuLyoqXG4gKiBAcGFyYW0ge0RlZmluaXRpb259IGRlZmluaXRpb25cbiAqICAgRGVmaW5pdGlvbi5cbiAqIEByZXR1cm5zIHtTY2hlbWF9XG4gKiAgIFNjaGVtYS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShkZWZpbml0aW9uKSB7XG4gIC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgSW5mbz59ICovXG4gIGNvbnN0IHByb3BlcnRpZXMgPSB7fVxuICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIHN0cmluZz59ICovXG4gIGNvbnN0IG5vcm1hbHMgPSB7fVxuXG4gIGZvciAoY29uc3QgW3Byb3BlcnR5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZGVmaW5pdGlvbi5wcm9wZXJ0aWVzKSkge1xuICAgIGNvbnN0IGluZm8gPSBuZXcgRGVmaW5lZEluZm8oXG4gICAgICBwcm9wZXJ0eSxcbiAgICAgIGRlZmluaXRpb24udHJhbnNmb3JtKGRlZmluaXRpb24uYXR0cmlidXRlcyB8fCB7fSwgcHJvcGVydHkpLFxuICAgICAgdmFsdWUsXG4gICAgICBkZWZpbml0aW9uLnNwYWNlXG4gICAgKVxuXG4gICAgaWYgKFxuICAgICAgZGVmaW5pdGlvbi5tdXN0VXNlUHJvcGVydHkgJiZcbiAgICAgIGRlZmluaXRpb24ubXVzdFVzZVByb3BlcnR5LmluY2x1ZGVzKHByb3BlcnR5KVxuICAgICkge1xuICAgICAgaW5mby5tdXN0VXNlUHJvcGVydHkgPSB0cnVlXG4gICAgfVxuXG4gICAgcHJvcGVydGllc1twcm9wZXJ0eV0gPSBpbmZvXG5cbiAgICBub3JtYWxzW25vcm1hbGl6ZShwcm9wZXJ0eSldID0gcHJvcGVydHlcbiAgICBub3JtYWxzW25vcm1hbGl6ZShpbmZvLmF0dHJpYnV0ZSldID0gcHJvcGVydHlcbiAgfVxuXG4gIHJldHVybiBuZXcgU2NoZW1hKHByb3BlcnRpZXMsIG5vcm1hbHMsIGRlZmluaXRpb24uc3BhY2UpXG59XG4iXSwibmFtZXMiOlsibm9ybWFsaXplIiwiRGVmaW5lZEluZm8iLCJTY2hlbWEiLCJjcmVhdGUiLCJkZWZpbml0aW9uIiwicHJvcGVydGllcyIsIm5vcm1hbHMiLCJwcm9wZXJ0eSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsImluZm8iLCJ0cmFuc2Zvcm0iLCJhdHRyaWJ1dGVzIiwic3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJpbmNsdWRlcyIsImF0dHJpYnV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/create.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/defined-info.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/defined-info.js ***!
  \******************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefinedInfo: function() { return /* binding */ DefinedInfo; }\n/* harmony export */ });\n/* harmony import */ var _info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./info.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/info.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/types.js\");\n/**\n * @import {Space} from 'property-information'\n */ \n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ Object.keys(_types_js__WEBPACK_IMPORTED_MODULE_0__);\nclass DefinedInfo extends _info_js__WEBPACK_IMPORTED_MODULE_1__.Info {\n    /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */ constructor(property, attribute, mask, space){\n        let index = -1;\n        super(property, attribute);\n        mark(this, \"space\", space);\n        if (typeof mask === \"number\") {\n            while(++index < checks.length){\n                const check = checks[index];\n                mark(this, checks[index], (mask & _types_js__WEBPACK_IMPORTED_MODULE_0__[check]) === _types_js__WEBPACK_IMPORTED_MODULE_0__[check]);\n            }\n        }\n    }\n}\nDefinedInfo.prototype.defined = true;\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */ function mark(values, key, value) {\n    if (value) {\n        values[key] = value;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3V0aWwvZGVmaW5lZC1pbmZvLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztDQUVDLEdBRTZCO0FBQ0s7QUFFbkMsTUFBTUUsU0FBUyw4Q0FBOEMsR0FDM0RDLE9BQU9DLElBQUksQ0FBQ0gsc0NBQUtBO0FBR1osTUFBTUksb0JBQW9CTCwwQ0FBSUE7SUFDbkM7Ozs7Ozs7Ozs7OztHQVlDLEdBQ0RNLFlBQVlDLFFBQVEsRUFBRUMsU0FBUyxFQUFFQyxJQUFJLEVBQUVDLEtBQUssQ0FBRTtRQUM1QyxJQUFJQyxRQUFRLENBQUM7UUFFYixLQUFLLENBQUNKLFVBQVVDO1FBRWhCSSxLQUFLLElBQUksRUFBRSxTQUFTRjtRQUVwQixJQUFJLE9BQU9ELFNBQVMsVUFBVTtZQUM1QixNQUFPLEVBQUVFLFFBQVFULE9BQU9XLE1BQU0sQ0FBRTtnQkFDOUIsTUFBTUMsUUFBUVosTUFBTSxDQUFDUyxNQUFNO2dCQUMzQkMsS0FBSyxJQUFJLEVBQUVWLE1BQU0sQ0FBQ1MsTUFBTSxFQUFFLENBQUNGLE9BQU9SLHNDQUFLLENBQUNhLE1BQU0sTUFBTWIsc0NBQUssQ0FBQ2EsTUFBTTtZQUNsRTtRQUNGO0lBQ0Y7QUFDRjtBQUVBVCxZQUFZVSxTQUFTLENBQUNDLE9BQU8sR0FBRztBQUVoQzs7Ozs7Ozs7Ozs7Q0FXQyxHQUNELFNBQVNKLEtBQUtLLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxLQUFLO0lBQzlCLElBQUlBLE9BQU87UUFDVEYsTUFBTSxDQUFDQyxJQUFJLEdBQUdDO0lBQ2hCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3Byb3BlcnR5LWluZm9ybWF0aW9uQDcuMC4wL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvdXRpbC9kZWZpbmVkLWluZm8uanM/ZTRlOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1NwYWNlfSBmcm9tICdwcm9wZXJ0eS1pbmZvcm1hdGlvbidcbiAqL1xuXG5pbXBvcnQge0luZm99IGZyb20gJy4vaW5mby5qcydcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4vdHlwZXMuanMnXG5cbmNvbnN0IGNoZWNrcyA9IC8qKiBAdHlwZSB7UmVhZG9ubHlBcnJheTxrZXlvZiB0eXBlb2YgdHlwZXM+fSAqLyAoXG4gIE9iamVjdC5rZXlzKHR5cGVzKVxuKVxuXG5leHBvcnQgY2xhc3MgRGVmaW5lZEluZm8gZXh0ZW5kcyBJbmZvIHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAgICogICBQcm9wZXJ0eS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZVxuICAgKiAgIEF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbbWFza11cbiAgICogICBNYXNrLlxuICAgKiBAcGFyYW0ge1NwYWNlIHwgdW5kZWZpbmVkfSBbc3BhY2VdXG4gICAqICAgU3BhY2UuXG4gICAqIEByZXR1cm5zXG4gICAqICAgSW5mby5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb3BlcnR5LCBhdHRyaWJ1dGUsIG1hc2ssIHNwYWNlKSB7XG4gICAgbGV0IGluZGV4ID0gLTFcblxuICAgIHN1cGVyKHByb3BlcnR5LCBhdHRyaWJ1dGUpXG5cbiAgICBtYXJrKHRoaXMsICdzcGFjZScsIHNwYWNlKVxuXG4gICAgaWYgKHR5cGVvZiBtYXNrID09PSAnbnVtYmVyJykge1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBjaGVja3MubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGNoZWNrID0gY2hlY2tzW2luZGV4XVxuICAgICAgICBtYXJrKHRoaXMsIGNoZWNrc1tpbmRleF0sIChtYXNrICYgdHlwZXNbY2hlY2tdKSA9PT0gdHlwZXNbY2hlY2tdKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5EZWZpbmVkSW5mby5wcm90b3R5cGUuZGVmaW5lZCA9IHRydWVcblxuLyoqXG4gKiBAdGVtcGxhdGUge2tleW9mIERlZmluZWRJbmZvfSBLZXlcbiAqICAgS2V5IHR5cGUuXG4gKiBAcGFyYW0ge0RlZmluZWRJbmZvfSB2YWx1ZXNcbiAqICAgSW5mby5cbiAqIEBwYXJhbSB7S2V5fSBrZXlcbiAqICAgS2V5LlxuICogQHBhcmFtIHtEZWZpbmVkSW5mb1tLZXldfSB2YWx1ZVxuICogICBWYWx1ZS5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmZ1bmN0aW9uIG1hcmsodmFsdWVzLCBrZXksIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIHZhbHVlc1trZXldID0gdmFsdWVcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkluZm8iLCJ0eXBlcyIsImNoZWNrcyIsIk9iamVjdCIsImtleXMiLCJEZWZpbmVkSW5mbyIsImNvbnN0cnVjdG9yIiwicHJvcGVydHkiLCJhdHRyaWJ1dGUiLCJtYXNrIiwic3BhY2UiLCJpbmRleCIsIm1hcmsiLCJsZW5ndGgiLCJjaGVjayIsInByb3RvdHlwZSIsImRlZmluZWQiLCJ2YWx1ZXMiLCJrZXkiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/defined-info.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/info.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/info.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Info: function() { return /* binding */ Info; }\n/* harmony export */ });\n/**\n * @import {Info as InfoType} from 'property-information'\n */ /** @type {InfoType} */ class Info {\n    /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */ constructor(property, attribute){\n        this.attribute = attribute;\n        this.property = property;\n    }\n}\nInfo.prototype.attribute = \"\";\nInfo.prototype.booleanish = false;\nInfo.prototype.boolean = false;\nInfo.prototype.commaOrSpaceSeparated = false;\nInfo.prototype.commaSeparated = false;\nInfo.prototype.defined = false;\nInfo.prototype.mustUseProperty = false;\nInfo.prototype.number = false;\nInfo.prototype.overloadedBoolean = false;\nInfo.prototype.property = \"\";\nInfo.prototype.spaceSeparated = false;\nInfo.prototype.space = undefined;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3V0aWwvaW5mby5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FFRCxxQkFBcUIsR0FDZCxNQUFNQTtJQUNYOzs7Ozs7O0dBT0MsR0FDREMsWUFBWUMsUUFBUSxFQUFFQyxTQUFTLENBQUU7UUFDL0IsSUFBSSxDQUFDQSxTQUFTLEdBQUdBO1FBQ2pCLElBQUksQ0FBQ0QsUUFBUSxHQUFHQTtJQUNsQjtBQUNGO0FBRUFGLEtBQUtJLFNBQVMsQ0FBQ0QsU0FBUyxHQUFHO0FBQzNCSCxLQUFLSSxTQUFTLENBQUNDLFVBQVUsR0FBRztBQUM1QkwsS0FBS0ksU0FBUyxDQUFDRSxPQUFPLEdBQUc7QUFDekJOLEtBQUtJLFNBQVMsQ0FBQ0cscUJBQXFCLEdBQUc7QUFDdkNQLEtBQUtJLFNBQVMsQ0FBQ0ksY0FBYyxHQUFHO0FBQ2hDUixLQUFLSSxTQUFTLENBQUNLLE9BQU8sR0FBRztBQUN6QlQsS0FBS0ksU0FBUyxDQUFDTSxlQUFlLEdBQUc7QUFDakNWLEtBQUtJLFNBQVMsQ0FBQ08sTUFBTSxHQUFHO0FBQ3hCWCxLQUFLSSxTQUFTLENBQUNRLGlCQUFpQixHQUFHO0FBQ25DWixLQUFLSSxTQUFTLENBQUNGLFFBQVEsR0FBRztBQUMxQkYsS0FBS0ksU0FBUyxDQUFDUyxjQUFjLEdBQUc7QUFDaENiLEtBQUtJLFNBQVMsQ0FBQ1UsS0FBSyxHQUFHQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcHJvcGVydHktaW5mb3JtYXRpb25ANy4wLjAvbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi91dGlsL2luZm8uanM/YmJhNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge0luZm8gYXMgSW5mb1R5cGV9IGZyb20gJ3Byb3BlcnR5LWluZm9ybWF0aW9uJ1xuICovXG5cbi8qKiBAdHlwZSB7SW5mb1R5cGV9ICovXG5leHBvcnQgY2xhc3MgSW5mbyB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAgICogICBQcm9wZXJ0eS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZVxuICAgKiAgIEF0dHJpYnV0ZS5cbiAgICogQHJldHVybnNcbiAgICogICBJbmZvLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJvcGVydHksIGF0dHJpYnV0ZSkge1xuICAgIHRoaXMuYXR0cmlidXRlID0gYXR0cmlidXRlXG4gICAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5XG4gIH1cbn1cblxuSW5mby5wcm90b3R5cGUuYXR0cmlidXRlID0gJydcbkluZm8ucHJvdG90eXBlLmJvb2xlYW5pc2ggPSBmYWxzZVxuSW5mby5wcm90b3R5cGUuYm9vbGVhbiA9IGZhbHNlXG5JbmZvLnByb3RvdHlwZS5jb21tYU9yU3BhY2VTZXBhcmF0ZWQgPSBmYWxzZVxuSW5mby5wcm90b3R5cGUuY29tbWFTZXBhcmF0ZWQgPSBmYWxzZVxuSW5mby5wcm90b3R5cGUuZGVmaW5lZCA9IGZhbHNlXG5JbmZvLnByb3RvdHlwZS5tdXN0VXNlUHJvcGVydHkgPSBmYWxzZVxuSW5mby5wcm90b3R5cGUubnVtYmVyID0gZmFsc2VcbkluZm8ucHJvdG90eXBlLm92ZXJsb2FkZWRCb29sZWFuID0gZmFsc2VcbkluZm8ucHJvdG90eXBlLnByb3BlcnR5ID0gJydcbkluZm8ucHJvdG90eXBlLnNwYWNlU2VwYXJhdGVkID0gZmFsc2VcbkluZm8ucHJvdG90eXBlLnNwYWNlID0gdW5kZWZpbmVkXG4iXSwibmFtZXMiOlsiSW5mbyIsImNvbnN0cnVjdG9yIiwicHJvcGVydHkiLCJhdHRyaWJ1dGUiLCJwcm90b3R5cGUiLCJib29sZWFuaXNoIiwiYm9vbGVhbiIsImNvbW1hT3JTcGFjZVNlcGFyYXRlZCIsImNvbW1hU2VwYXJhdGVkIiwiZGVmaW5lZCIsIm11c3RVc2VQcm9wZXJ0eSIsIm51bWJlciIsIm92ZXJsb2FkZWRCb29sZWFuIiwic3BhY2VTZXBhcmF0ZWQiLCJzcGFjZSIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/info.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/merge.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/merge.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   merge: function() { return /* binding */ merge; }\n/* harmony export */ });\n/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schema.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/schema.js\");\n/**\n * @import {Info, Space} from 'property-information'\n */ \n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */ function merge(definitions, space) {\n    /** @type {Record<string, Info>} */ const property = {};\n    /** @type {Record<string, string>} */ const normal = {};\n    for (const definition of definitions){\n        Object.assign(property, definition.property);\n        Object.assign(normal, definition.normal);\n    }\n    return new _schema_js__WEBPACK_IMPORTED_MODULE_0__.Schema(property, normal, space);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3V0aWwvbWVyZ2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Q0FFQyxHQUVpQztBQUVsQzs7Ozs7OztDQU9DLEdBQ00sU0FBU0MsTUFBTUMsV0FBVyxFQUFFQyxLQUFLO0lBQ3RDLGlDQUFpQyxHQUNqQyxNQUFNQyxXQUFXLENBQUM7SUFDbEIsbUNBQW1DLEdBQ25DLE1BQU1DLFNBQVMsQ0FBQztJQUVoQixLQUFLLE1BQU1DLGNBQWNKLFlBQWE7UUFDcENLLE9BQU9DLE1BQU0sQ0FBQ0osVUFBVUUsV0FBV0YsUUFBUTtRQUMzQ0csT0FBT0MsTUFBTSxDQUFDSCxRQUFRQyxXQUFXRCxNQUFNO0lBQ3pDO0lBRUEsT0FBTyxJQUFJTCw4Q0FBTUEsQ0FBQ0ksVUFBVUMsUUFBUUY7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3Byb3BlcnR5LWluZm9ybWF0aW9uQDcuMC4wL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvdXRpbC9tZXJnZS5qcz8wOGNhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7SW5mbywgU3BhY2V9IGZyb20gJ3Byb3BlcnR5LWluZm9ybWF0aW9uJ1xuICovXG5cbmltcG9ydCB7U2NoZW1hfSBmcm9tICcuL3NjaGVtYS5qcydcblxuLyoqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8U2NoZW1hPn0gZGVmaW5pdGlvbnNcbiAqICAgRGVmaW5pdGlvbnMuXG4gKiBAcGFyYW0ge1NwYWNlIHwgdW5kZWZpbmVkfSBbc3BhY2VdXG4gKiAgIFNwYWNlLlxuICogQHJldHVybnMge1NjaGVtYX1cbiAqICAgU2NoZW1hLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2UoZGVmaW5pdGlvbnMsIHNwYWNlKSB7XG4gIC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgSW5mbz59ICovXG4gIGNvbnN0IHByb3BlcnR5ID0ge31cbiAgLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+fSAqL1xuICBjb25zdCBub3JtYWwgPSB7fVxuXG4gIGZvciAoY29uc3QgZGVmaW5pdGlvbiBvZiBkZWZpbml0aW9ucykge1xuICAgIE9iamVjdC5hc3NpZ24ocHJvcGVydHksIGRlZmluaXRpb24ucHJvcGVydHkpXG4gICAgT2JqZWN0LmFzc2lnbihub3JtYWwsIGRlZmluaXRpb24ubm9ybWFsKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTY2hlbWEocHJvcGVydHksIG5vcm1hbCwgc3BhY2UpXG59XG4iXSwibmFtZXMiOlsiU2NoZW1hIiwibWVyZ2UiLCJkZWZpbml0aW9ucyIsInNwYWNlIiwicHJvcGVydHkiLCJub3JtYWwiLCJkZWZpbml0aW9uIiwiT2JqZWN0IiwiYXNzaWduIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/merge.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/schema.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/schema.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Schema: function() { return /* binding */ Schema; }\n/* harmony export */ });\n/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */ /** @type {SchemaType} */ class Schema {\n    /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */ constructor(property, normal, space){\n        this.normal = normal;\n        this.property = property;\n        if (space) {\n            this.space = space;\n        }\n    }\n}\nSchema.prototype.normal = {};\nSchema.prototype.property = {};\nSchema.prototype.space = undefined;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3V0aWwvc2NoZW1hLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUVELHVCQUF1QixHQUNoQixNQUFNQTtJQUNYOzs7Ozs7Ozs7R0FTQyxHQUNEQyxZQUFZQyxRQUFRLEVBQUVDLE1BQU0sRUFBRUMsS0FBSyxDQUFFO1FBQ25DLElBQUksQ0FBQ0QsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0QsUUFBUSxHQUFHQTtRQUVoQixJQUFJRSxPQUFPO1lBQ1QsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO1FBQ2Y7SUFDRjtBQUNGO0FBRUFKLE9BQU9LLFNBQVMsQ0FBQ0YsTUFBTSxHQUFHLENBQUM7QUFDM0JILE9BQU9LLFNBQVMsQ0FBQ0gsUUFBUSxHQUFHLENBQUM7QUFDN0JGLE9BQU9LLFNBQVMsQ0FBQ0QsS0FBSyxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcHJvcGVydHktaW5mb3JtYXRpb25ANy4wLjAvbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi91dGlsL3NjaGVtYS5qcz9iNDY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7U2NoZW1hIGFzIFNjaGVtYVR5cGUsIFNwYWNlfSBmcm9tICdwcm9wZXJ0eS1pbmZvcm1hdGlvbidcbiAqL1xuXG4vKiogQHR5cGUge1NjaGVtYVR5cGV9ICovXG5leHBvcnQgY2xhc3MgU2NoZW1hIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7U2NoZW1hVHlwZVsncHJvcGVydHknXX0gcHJvcGVydHlcbiAgICogICBQcm9wZXJ0eS5cbiAgICogQHBhcmFtIHtTY2hlbWFUeXBlWydub3JtYWwnXX0gbm9ybWFsXG4gICAqICAgTm9ybWFsLlxuICAgKiBAcGFyYW0ge1NwYWNlIHwgdW5kZWZpbmVkfSBbc3BhY2VdXG4gICAqICAgU3BhY2UuXG4gICAqIEByZXR1cm5zXG4gICAqICAgU2NoZW1hLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJvcGVydHksIG5vcm1hbCwgc3BhY2UpIHtcbiAgICB0aGlzLm5vcm1hbCA9IG5vcm1hbFxuICAgIHRoaXMucHJvcGVydHkgPSBwcm9wZXJ0eVxuXG4gICAgaWYgKHNwYWNlKSB7XG4gICAgICB0aGlzLnNwYWNlID0gc3BhY2VcbiAgICB9XG4gIH1cbn1cblxuU2NoZW1hLnByb3RvdHlwZS5ub3JtYWwgPSB7fVxuU2NoZW1hLnByb3RvdHlwZS5wcm9wZXJ0eSA9IHt9XG5TY2hlbWEucHJvdG90eXBlLnNwYWNlID0gdW5kZWZpbmVkXG4iXSwibmFtZXMiOlsiU2NoZW1hIiwiY29uc3RydWN0b3IiLCJwcm9wZXJ0eSIsIm5vcm1hbCIsInNwYWNlIiwicHJvdG90eXBlIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/schema.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/types.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/types.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   boolean: function() { return /* binding */ boolean; },\n/* harmony export */   booleanish: function() { return /* binding */ booleanish; },\n/* harmony export */   commaOrSpaceSeparated: function() { return /* binding */ commaOrSpaceSeparated; },\n/* harmony export */   commaSeparated: function() { return /* binding */ commaSeparated; },\n/* harmony export */   number: function() { return /* binding */ number; },\n/* harmony export */   overloadedBoolean: function() { return /* binding */ overloadedBoolean; },\n/* harmony export */   spaceSeparated: function() { return /* binding */ spaceSeparated; }\n/* harmony export */ });\nlet powers = 0;\nconst boolean = increment();\nconst booleanish = increment();\nconst overloadedBoolean = increment();\nconst number = increment();\nconst spaceSeparated = increment();\nconst commaSeparated = increment();\nconst commaOrSpaceSeparated = increment();\nfunction increment() {\n    return 2 ** ++powers;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3V0aWwvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQUlBLFNBQVM7QUFFTixNQUFNQyxVQUFVQyxZQUFXO0FBQzNCLE1BQU1DLGFBQWFELFlBQVc7QUFDOUIsTUFBTUUsb0JBQW9CRixZQUFXO0FBQ3JDLE1BQU1HLFNBQVNILFlBQVc7QUFDMUIsTUFBTUksaUJBQWlCSixZQUFXO0FBQ2xDLE1BQU1LLGlCQUFpQkwsWUFBVztBQUNsQyxNQUFNTSx3QkFBd0JOLFlBQVc7QUFFaEQsU0FBU0E7SUFDUCxPQUFPLEtBQUssRUFBRUY7QUFDaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3Byb3BlcnR5LWluZm9ybWF0aW9uQDcuMC4wL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvdXRpbC90eXBlcy5qcz9iYjhiIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBwb3dlcnMgPSAwXG5cbmV4cG9ydCBjb25zdCBib29sZWFuID0gaW5jcmVtZW50KClcbmV4cG9ydCBjb25zdCBib29sZWFuaXNoID0gaW5jcmVtZW50KClcbmV4cG9ydCBjb25zdCBvdmVybG9hZGVkQm9vbGVhbiA9IGluY3JlbWVudCgpXG5leHBvcnQgY29uc3QgbnVtYmVyID0gaW5jcmVtZW50KClcbmV4cG9ydCBjb25zdCBzcGFjZVNlcGFyYXRlZCA9IGluY3JlbWVudCgpXG5leHBvcnQgY29uc3QgY29tbWFTZXBhcmF0ZWQgPSBpbmNyZW1lbnQoKVxuZXhwb3J0IGNvbnN0IGNvbW1hT3JTcGFjZVNlcGFyYXRlZCA9IGluY3JlbWVudCgpXG5cbmZ1bmN0aW9uIGluY3JlbWVudCgpIHtcbiAgcmV0dXJuIDIgKiogKytwb3dlcnNcbn1cbiJdLCJuYW1lcyI6WyJwb3dlcnMiLCJib29sZWFuIiwiaW5jcmVtZW50IiwiYm9vbGVhbmlzaCIsIm92ZXJsb2FkZWRCb29sZWFuIiwibnVtYmVyIiwic3BhY2VTZXBhcmF0ZWQiLCJjb21tYVNlcGFyYXRlZCIsImNvbW1hT3JTcGFjZVNlcGFyYXRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/types.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/xlink.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/xlink.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   xlink: function() { return /* binding */ xlink; }\n/* harmony export */ });\n/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/create.js\");\n\nconst xlink = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({\n    properties: {\n        xLinkActuate: null,\n        xLinkArcRole: null,\n        xLinkHref: null,\n        xLinkRole: null,\n        xLinkShow: null,\n        xLinkTitle: null,\n        xLinkType: null\n    },\n    space: \"xlink\",\n    transform (_, property) {\n        return \"xlink:\" + property.slice(5).toLowerCase();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3hsaW5rLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVDO0FBRWhDLE1BQU1DLFFBQVFELHVEQUFNQSxDQUFDO0lBQzFCRSxZQUFZO1FBQ1ZDLGNBQWM7UUFDZEMsY0FBYztRQUNkQyxXQUFXO1FBQ1hDLFdBQVc7UUFDWEMsV0FBVztRQUNYQyxZQUFZO1FBQ1pDLFdBQVc7SUFDYjtJQUNBQyxPQUFPO0lBQ1BDLFdBQVVDLENBQUMsRUFBRUMsUUFBUTtRQUNuQixPQUFPLFdBQVdBLFNBQVNDLEtBQUssQ0FBQyxHQUFHQyxXQUFXO0lBQ2pEO0FBQ0YsR0FBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcHJvcGVydHktaW5mb3JtYXRpb25ANy4wLjAvbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi94bGluay5qcz82ZGQxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3JlYXRlfSBmcm9tICcuL3V0aWwvY3JlYXRlLmpzJ1xuXG5leHBvcnQgY29uc3QgeGxpbmsgPSBjcmVhdGUoe1xuICBwcm9wZXJ0aWVzOiB7XG4gICAgeExpbmtBY3R1YXRlOiBudWxsLFxuICAgIHhMaW5rQXJjUm9sZTogbnVsbCxcbiAgICB4TGlua0hyZWY6IG51bGwsXG4gICAgeExpbmtSb2xlOiBudWxsLFxuICAgIHhMaW5rU2hvdzogbnVsbCxcbiAgICB4TGlua1RpdGxlOiBudWxsLFxuICAgIHhMaW5rVHlwZTogbnVsbFxuICB9LFxuICBzcGFjZTogJ3hsaW5rJyxcbiAgdHJhbnNmb3JtKF8sIHByb3BlcnR5KSB7XG4gICAgcmV0dXJuICd4bGluazonICsgcHJvcGVydHkuc2xpY2UoNSkudG9Mb3dlckNhc2UoKVxuICB9XG59KVxuIl0sIm5hbWVzIjpbImNyZWF0ZSIsInhsaW5rIiwicHJvcGVydGllcyIsInhMaW5rQWN0dWF0ZSIsInhMaW5rQXJjUm9sZSIsInhMaW5rSHJlZiIsInhMaW5rUm9sZSIsInhMaW5rU2hvdyIsInhMaW5rVGl0bGUiLCJ4TGlua1R5cGUiLCJzcGFjZSIsInRyYW5zZm9ybSIsIl8iLCJwcm9wZXJ0eSIsInNsaWNlIiwidG9Mb3dlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/xlink.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/xml.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/xml.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   xml: function() { return /* binding */ xml; }\n/* harmony export */ });\n/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/create.js\");\n\nconst xml = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({\n    properties: {\n        xmlBase: null,\n        xmlLang: null,\n        xmlSpace: null\n    },\n    space: \"xml\",\n    transform (_, property) {\n        return \"xml:\" + property.slice(3).toLowerCase();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3htbC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF1QztBQUVoQyxNQUFNQyxNQUFNRCx1REFBTUEsQ0FBQztJQUN4QkUsWUFBWTtRQUFDQyxTQUFTO1FBQU1DLFNBQVM7UUFBTUMsVUFBVTtJQUFJO0lBQ3pEQyxPQUFPO0lBQ1BDLFdBQVVDLENBQUMsRUFBRUMsUUFBUTtRQUNuQixPQUFPLFNBQVNBLFNBQVNDLEtBQUssQ0FBQyxHQUFHQyxXQUFXO0lBQy9DO0FBQ0YsR0FBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vcHJvcGVydHktaW5mb3JtYXRpb25ANy4wLjAvbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi94bWwuanM/ZTVmZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NyZWF0ZX0gZnJvbSAnLi91dGlsL2NyZWF0ZS5qcydcblxuZXhwb3J0IGNvbnN0IHhtbCA9IGNyZWF0ZSh7XG4gIHByb3BlcnRpZXM6IHt4bWxCYXNlOiBudWxsLCB4bWxMYW5nOiBudWxsLCB4bWxTcGFjZTogbnVsbH0sXG4gIHNwYWNlOiAneG1sJyxcbiAgdHJhbnNmb3JtKF8sIHByb3BlcnR5KSB7XG4gICAgcmV0dXJuICd4bWw6JyArIHByb3BlcnR5LnNsaWNlKDMpLnRvTG93ZXJDYXNlKClcbiAgfVxufSlcbiJdLCJuYW1lcyI6WyJjcmVhdGUiLCJ4bWwiLCJwcm9wZXJ0aWVzIiwieG1sQmFzZSIsInhtbExhbmciLCJ4bWxTcGFjZSIsInNwYWNlIiwidHJhbnNmb3JtIiwiXyIsInByb3BlcnR5Iiwic2xpY2UiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/xml.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/xmlns.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/xmlns.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   xmlns: function() { return /* binding */ xmlns; }\n/* harmony export */ });\n/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/create.js\");\n/* harmony import */ var _util_case_insensitive_transform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/case-insensitive-transform.js */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/util/case-insensitive-transform.js\");\n\n\nconst xmlns = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({\n    attributes: {\n        xmlnsxlink: \"xmlns:xlink\"\n    },\n    properties: {\n        xmlnsXLink: null,\n        xmlns: null\n    },\n    space: \"xmlns\",\n    transform: _util_case_insensitive_transform_js__WEBPACK_IMPORTED_MODULE_1__.caseInsensitiveTransform\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3htbG5zLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1QztBQUNzQztBQUV0RSxNQUFNRSxRQUFRRix1REFBTUEsQ0FBQztJQUMxQkcsWUFBWTtRQUFDQyxZQUFZO0lBQWE7SUFDdENDLFlBQVk7UUFBQ0MsWUFBWTtRQUFNSixPQUFPO0lBQUk7SUFDMUNLLE9BQU87SUFDUEMsV0FBV1AseUZBQXdCQTtBQUNyQyxHQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wZXJ0eS1pbmZvcm1hdGlvbkA3LjAuMC9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3htbG5zLmpzP2IxNDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjcmVhdGV9IGZyb20gJy4vdXRpbC9jcmVhdGUuanMnXG5pbXBvcnQge2Nhc2VJbnNlbnNpdGl2ZVRyYW5zZm9ybX0gZnJvbSAnLi91dGlsL2Nhc2UtaW5zZW5zaXRpdmUtdHJhbnNmb3JtLmpzJ1xuXG5leHBvcnQgY29uc3QgeG1sbnMgPSBjcmVhdGUoe1xuICBhdHRyaWJ1dGVzOiB7eG1sbnN4bGluazogJ3htbG5zOnhsaW5rJ30sXG4gIHByb3BlcnRpZXM6IHt4bWxuc1hMaW5rOiBudWxsLCB4bWxuczogbnVsbH0sXG4gIHNwYWNlOiAneG1sbnMnLFxuICB0cmFuc2Zvcm06IGNhc2VJbnNlbnNpdGl2ZVRyYW5zZm9ybVxufSlcbiJdLCJuYW1lcyI6WyJjcmVhdGUiLCJjYXNlSW5zZW5zaXRpdmVUcmFuc2Zvcm0iLCJ4bWxucyIsImF0dHJpYnV0ZXMiLCJ4bWxuc3hsaW5rIiwicHJvcGVydGllcyIsInhtbG5zWExpbmsiLCJzcGFjZSIsInRyYW5zZm9ybSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/xmlns.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/react-markdown@9.1.0_@types+react@18.3.20_react@18.3.1/node_modules/react-markdown/lib/index.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-markdown@9.1.0_@types+react@18.3.20_react@18.3.1/node_modules/react-markdown/lib/index.js ***!
  \****************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Markdown: function() { return /* binding */ Markdown; },\n/* harmony export */   MarkdownAsync: function() { return /* binding */ MarkdownAsync; },\n/* harmony export */   MarkdownHooks: function() { return /* binding */ MarkdownHooks; },\n/* harmony export */   defaultUrlTransform: function() { return /* binding */ defaultUrlTransform; }\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var hast_util_to_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! hast-util-to-jsx-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-jsx-runtime@2.3.6/node_modules/hast-util-to-jsx-runtime/lib/index.js\");\n/* harmony import */ var html_url_attributes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! html-url-attributes */ \"(app-pages-browser)/./node_modules/.pnpm/html-url-attributes@3.0.1/node_modules/html-url-attributes/lib/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! remark-parse */ \"(app-pages-browser)/./node_modules/.pnpm/remark-parse@11.0.0/node_modules/remark-parse/lib/index.js\");\n/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! remark-rehype */ \"(app-pages-browser)/./node_modules/.pnpm/remark-rehype@11.1.1/node_modules/remark-rehype/lib/index.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unified */ \"(app-pages-browser)/./node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! unist-util-visit */ \"(app-pages-browser)/./node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js\");\n/* harmony import */ var vfile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vfile */ \"(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/index.js\");\n/**\n * @import {Element, ElementContent, Nodes, Parents, Root} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {ComponentProps, ElementType, ReactElement} from 'react'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {BuildVisitor} from 'unist-util-visit'\n * @import {PluggableList, Processor} from 'unified'\n */ /**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n */ /**\n * @typedef ExtraProps\n *   Extra fields we pass.\n * @property {Element | undefined} [node]\n *   passed when `passNode` is on.\n */ /**\n * @typedef {{\n *   [Key in Extract<ElementType, string>]?: ElementType<ComponentProps<Key> & ExtraProps>\n * }} Components\n *   Map tag names to components.\n */ /**\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n */ /**\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n */ /**\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */ var _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\nconst changelog = \"https://github.com/remarkjs/react-markdown/blob/main/changelog.md\";\n/** @type {PluggableList} */ const emptyPlugins = [];\n/** @type {Readonly<RemarkRehypeOptions>} */ const emptyRemarkRehypeOptions = {\n    allowDangerousHtml: true\n};\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i;\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */ const deprecations = [\n    {\n        from: \"astPlugins\",\n        id: \"remove-buggy-html-in-markdown-parser\"\n    },\n    {\n        from: \"allowDangerousHtml\",\n        id: \"remove-buggy-html-in-markdown-parser\"\n    },\n    {\n        from: \"allowNode\",\n        id: \"replace-allownode-allowedtypes-and-disallowedtypes\",\n        to: \"allowElement\"\n    },\n    {\n        from: \"allowedTypes\",\n        id: \"replace-allownode-allowedtypes-and-disallowedtypes\",\n        to: \"allowedElements\"\n    },\n    {\n        from: \"disallowedTypes\",\n        id: \"replace-allownode-allowedtypes-and-disallowedtypes\",\n        to: \"disallowedElements\"\n    },\n    {\n        from: \"escapeHtml\",\n        id: \"remove-buggy-html-in-markdown-parser\"\n    },\n    {\n        from: \"includeElementIndex\",\n        id: \"#remove-includeelementindex\"\n    },\n    {\n        from: \"includeNodeIndex\",\n        id: \"change-includenodeindex-to-includeelementindex\"\n    },\n    {\n        from: \"linkTarget\",\n        id: \"remove-linktarget\"\n    },\n    {\n        from: \"plugins\",\n        id: \"change-plugins-to-remarkplugins\",\n        to: \"remarkPlugins\"\n    },\n    {\n        from: \"rawSourcePos\",\n        id: \"#remove-rawsourcepos\"\n    },\n    {\n        from: \"renderers\",\n        id: \"change-renderers-to-components\",\n        to: \"components\"\n    },\n    {\n        from: \"source\",\n        id: \"change-source-to-children\",\n        to: \"children\"\n    },\n    {\n        from: \"sourcePos\",\n        id: \"#remove-sourcepos\"\n    },\n    {\n        from: \"transformImageUri\",\n        id: \"#add-urltransform\",\n        to: \"urlTransform\"\n    },\n    {\n        from: \"transformLinkUri\",\n        id: \"#add-urltransform\",\n        to: \"urlTransform\"\n    }\n];\n/**\n * Component to render markdown.\n *\n * This is a synchronous component.\n * When using async plugins,\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */ function Markdown(options) {\n    const processor = createProcessor(options);\n    const file = createFile(options);\n    return post(processor.runSync(processor.parse(file), file), options);\n}\n_c = Markdown;\n/**\n * Component to render markdown with support for async plugins\n * through async/await.\n *\n * Components returning promises are supported on the server.\n * For async support on the client,\n * see {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Promise<ReactElement>}\n *   Promise to a React element.\n */ async function MarkdownAsync(options) {\n    const processor = createProcessor(options);\n    const file = createFile(options);\n    const tree = await processor.run(processor.parse(file), file);\n    return post(tree, options);\n}\n_c1 = MarkdownAsync;\n/**\n * Component to render markdown with support for async plugins through hooks.\n *\n * This uses `useEffect` and `useState` hooks.\n * Hooks run on the client and do not immediately render something.\n * For async support on the server,\n * see {@linkcode MarkdownAsync}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */ function MarkdownHooks(options) {\n    _s();\n    const processor = createProcessor(options);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(/** @type {Error | undefined} */ undefined);\n    const [tree, setTree] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(/** @type {Root | undefined} */ undefined);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(/* c8 ignore next 7 -- hooks are client-only. */ function() {\n        const file = createFile(options);\n        processor.run(processor.parse(file), file, function(error, tree) {\n            setError(error);\n            setTree(tree);\n        });\n    }, [\n        options.children,\n        options.rehypePlugins,\n        options.remarkPlugins,\n        options.remarkRehypeOptions\n    ]);\n    /* c8 ignore next -- hooks are client-only. */ if (error) throw error;\n    /* c8 ignore next -- hooks are client-only. */ return tree ? post(tree, options) : /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment);\n}\n_s(MarkdownHooks, \"x31cFELcJUYrGn+KLai8nitt+Wc=\");\n_c2 = MarkdownHooks;\n/**\n * Set up the `unified` processor.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\n *   Result.\n */ function createProcessor(options) {\n    const rehypePlugins = options.rehypePlugins || emptyPlugins;\n    const remarkPlugins = options.remarkPlugins || emptyPlugins;\n    const remarkRehypeOptions = options.remarkRehypeOptions ? {\n        ...options.remarkRehypeOptions,\n        ...emptyRemarkRehypeOptions\n    } : emptyRemarkRehypeOptions;\n    const processor = (0,unified__WEBPACK_IMPORTED_MODULE_2__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_3__[\"default\"]).use(remarkPlugins).use(remark_rehype__WEBPACK_IMPORTED_MODULE_4__[\"default\"], remarkRehypeOptions).use(rehypePlugins);\n    return processor;\n}\n/**\n * Set up the virtual file.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {VFile}\n *   Result.\n */ function createFile(options) {\n    const children = options.children || \"\";\n    const file = new vfile__WEBPACK_IMPORTED_MODULE_5__.VFile();\n    if (typeof children === \"string\") {\n        file.value = children;\n    } else {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_6__.unreachable)(\"Unexpected value `\" + children + \"` for `children` prop, expected `string`\");\n    }\n    return file;\n}\n/**\n * Process the result from unified some more.\n *\n * @param {Nodes} tree\n *   Tree.\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */ function post(tree, options) {\n    const allowedElements = options.allowedElements;\n    const allowElement = options.allowElement;\n    const components = options.components;\n    const disallowedElements = options.disallowedElements;\n    const skipHtml = options.skipHtml;\n    const unwrapDisallowed = options.unwrapDisallowed;\n    const urlTransform = options.urlTransform || defaultUrlTransform;\n    for (const deprecation of deprecations){\n        if (Object.hasOwn(options, deprecation.from)) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_6__.unreachable)(\"Unexpected `\" + deprecation.from + \"` prop, \" + (deprecation.to ? \"use `\" + deprecation.to + \"` instead\" : \"remove it\") + \" (see <\" + changelog + \"#\" + deprecation.id + \"> for more info)\");\n        }\n    }\n    if (allowedElements && disallowedElements) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_6__.unreachable)(\"Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other\");\n    }\n    // Wrap in `div` if there’s a class name.\n    if (options.className) {\n        tree = {\n            type: \"element\",\n            tagName: \"div\",\n            properties: {\n                className: options.className\n            },\n            // Assume no doctypes.\n            children: /** @type {Array<ElementContent>} */ tree.type === \"root\" ? tree.children : [\n                tree\n            ]\n        };\n    }\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_7__.visit)(tree, transform);\n    return (0,hast_util_to_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.toJsxRuntime)(tree, {\n        Fragment: react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment,\n        // @ts-expect-error\n        // React components are allowed to return numbers,\n        // but not according to the types in hast-util-to-jsx-runtime\n        components,\n        ignoreInvalidStyle: true,\n        jsx: react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx,\n        jsxs: react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs,\n        passKeys: true,\n        passNode: true\n    });\n    /** @type {BuildVisitor<Root>} */ function transform(node, index, parent) {\n        if (node.type === \"raw\" && parent && typeof index === \"number\") {\n            if (skipHtml) {\n                parent.children.splice(index, 1);\n            } else {\n                parent.children[index] = {\n                    type: \"text\",\n                    value: node.value\n                };\n            }\n            return index;\n        }\n        if (node.type === \"element\") {\n            /** @type {string} */ let key;\n            for(key in html_url_attributes__WEBPACK_IMPORTED_MODULE_9__.urlAttributes){\n                if (Object.hasOwn(html_url_attributes__WEBPACK_IMPORTED_MODULE_9__.urlAttributes, key) && Object.hasOwn(node.properties, key)) {\n                    const value = node.properties[key];\n                    const test = html_url_attributes__WEBPACK_IMPORTED_MODULE_9__.urlAttributes[key];\n                    if (test === null || test.includes(node.tagName)) {\n                        node.properties[key] = urlTransform(String(value || \"\"), key, node);\n                    }\n                }\n            }\n        }\n        if (node.type === \"element\") {\n            let remove = allowedElements ? !allowedElements.includes(node.tagName) : disallowedElements ? disallowedElements.includes(node.tagName) : false;\n            if (!remove && allowElement && typeof index === \"number\") {\n                remove = !allowElement(node, index, parent);\n            }\n            if (remove && parent && typeof index === \"number\") {\n                if (unwrapDisallowed && node.children) {\n                    parent.children.splice(index, 1, ...node.children);\n                } else {\n                    parent.children.splice(index, 1);\n                }\n                return index;\n            }\n        }\n    }\n}\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */ function defaultUrlTransform(value) {\n    // Same as:\n    // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n    // But without the `encode` part.\n    const colon = value.indexOf(\":\");\n    const questionMark = value.indexOf(\"?\");\n    const numberSign = value.indexOf(\"#\");\n    const slash = value.indexOf(\"/\");\n    if (// If there is no protocol, it’s relative.\n    colon === -1 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    slash !== -1 && colon > slash || questionMark !== -1 && colon > questionMark || numberSign !== -1 && colon > numberSign || // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))) {\n        return value;\n    }\n    return \"\";\n}\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"Markdown\");\n$RefreshReg$(_c1, \"MarkdownAsync\");\n$RefreshReg$(_c2, \"MarkdownHooks\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/react-markdown@9.1.0_@types+react@18.3.20_react@18.3.1/node_modules/react-markdown/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/remark-parse@11.0.0/node_modules/remark-parse/lib/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/remark-parse@11.0.0/node_modules/remark-parse/lib/index.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ remarkParse; }\n/* harmony export */ });\n/* harmony import */ var mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mdast-util-from-markdown */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-from-markdown@2.0.2/node_modules/mdast-util-from-markdown/dev/lib/index.js\");\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */ /**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */ \n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */ function remarkParse(options) {\n    /** @type {Processor} */ // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n    const self = this;\n    self.parser = parser;\n    /**\n   * @type {Parser}\n   */ function parser(doc) {\n        return (0,mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_0__.fromMarkdown)(doc, {\n            ...self.data(\"settings\"),\n            ...options,\n            // Note: these options are not in the readme.\n            // The goal is for them to be set by plugins on `data` instead of being\n            // passed by users.\n            extensions: self.data(\"micromarkExtensions\") || [],\n            mdastExtensions: self.data(\"fromMarkdownExtensions\") || []\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yZW1hcmstcGFyc2VAMTEuMC4wL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7O0NBS0MsR0FFRDs7Q0FFQyxHQUVvRDtBQUVyRDs7Ozs7OztDQU9DLEdBQ2MsU0FBU0MsWUFBWUMsT0FBTztJQUN6QyxzQkFBc0IsR0FDdEIsb0ZBQW9GO0lBQ3BGLE1BQU1DLE9BQU8sSUFBSTtJQUVqQkEsS0FBS0MsTUFBTSxHQUFHQTtJQUVkOztHQUVDLEdBQ0QsU0FBU0EsT0FBT0MsR0FBRztRQUNqQixPQUFPTCxzRUFBWUEsQ0FBQ0ssS0FBSztZQUN2QixHQUFHRixLQUFLRyxJQUFJLENBQUMsV0FBVztZQUN4QixHQUFHSixPQUFPO1lBQ1YsNkNBQTZDO1lBQzdDLHVFQUF1RTtZQUN2RSxtQkFBbUI7WUFDbkJLLFlBQVlKLEtBQUtHLElBQUksQ0FBQywwQkFBMEIsRUFBRTtZQUNsREUsaUJBQWlCTCxLQUFLRyxJQUFJLENBQUMsNkJBQTZCLEVBQUU7UUFDNUQ7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yZW1hcmstcGFyc2VAMTEuMC4wL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2luZGV4LmpzP2UyMzciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlJvb3R9IFJvb3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0LXV0aWwtZnJvbS1tYXJrZG93bicpLk9wdGlvbnN9IEZyb21NYXJrZG93bk9wdGlvbnNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaWZpZWQnKS5QYXJzZXI8Um9vdD59IFBhcnNlclxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pZmllZCcpLlByb2Nlc3NvcjxSb290Pn0gUHJvY2Vzc29yXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T21pdDxGcm9tTWFya2Rvd25PcHRpb25zLCAnZXh0ZW5zaW9ucycgfCAnbWRhc3RFeHRlbnNpb25zJz59IE9wdGlvbnNcbiAqL1xuXG5pbXBvcnQge2Zyb21NYXJrZG93bn0gZnJvbSAnbWRhc3QtdXRpbC1mcm9tLW1hcmtkb3duJ1xuXG4vKipcbiAqIEFhZGQgc3VwcG9ydCBmb3IgcGFyc2luZyBmcm9tIG1hcmtkb3duLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8T3B0aW9ucz4gfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTm90aGluZy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtYXJrUGFyc2Uob3B0aW9ucykge1xuICAvKiogQHR5cGUge1Byb2Nlc3Nvcn0gKi9cbiAgLy8gQHRzLWV4cGVjdC1lcnJvcjogVFMgaW4gSlNEb2MgZ2VuZXJhdGVzIHdyb25nIHR5cGVzIGlmIGB0aGlzYCBpcyB0eXBlZCByZWd1bGFybHkuXG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgc2VsZi5wYXJzZXIgPSBwYXJzZXJcblxuICAvKipcbiAgICogQHR5cGUge1BhcnNlcn1cbiAgICovXG4gIGZ1bmN0aW9uIHBhcnNlcihkb2MpIHtcbiAgICByZXR1cm4gZnJvbU1hcmtkb3duKGRvYywge1xuICAgICAgLi4uc2VsZi5kYXRhKCdzZXR0aW5ncycpLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIC8vIE5vdGU6IHRoZXNlIG9wdGlvbnMgYXJlIG5vdCBpbiB0aGUgcmVhZG1lLlxuICAgICAgLy8gVGhlIGdvYWwgaXMgZm9yIHRoZW0gdG8gYmUgc2V0IGJ5IHBsdWdpbnMgb24gYGRhdGFgIGluc3RlYWQgb2YgYmVpbmdcbiAgICAgIC8vIHBhc3NlZCBieSB1c2Vycy5cbiAgICAgIGV4dGVuc2lvbnM6IHNlbGYuZGF0YSgnbWljcm9tYXJrRXh0ZW5zaW9ucycpIHx8IFtdLFxuICAgICAgbWRhc3RFeHRlbnNpb25zOiBzZWxmLmRhdGEoJ2Zyb21NYXJrZG93bkV4dGVuc2lvbnMnKSB8fCBbXVxuICAgIH0pXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJmcm9tTWFya2Rvd24iLCJyZW1hcmtQYXJzZSIsIm9wdGlvbnMiLCJzZWxmIiwicGFyc2VyIiwiZG9jIiwiZGF0YSIsImV4dGVuc2lvbnMiLCJtZGFzdEV4dGVuc2lvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/remark-parse@11.0.0/node_modules/remark-parse/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/remark-rehype@11.1.1/node_modules/remark-rehype/lib/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/remark-rehype@11.1.1/node_modules/remark-rehype/lib/index.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ remarkRehype; }\n/* harmony export */ });\n/* harmony import */ var mdast_util_to_hast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mdast-util-to-hast */ \"(app-pages-browser)/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/index.js\");\n// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */ /**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */ \n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */ function remarkRehype(destination, options) {\n    if (destination && \"run\" in destination) {\n        /**\n     * @type {TransformBridge}\n     */ return async function(tree, file) {\n            // Cast because root in -> root out.\n            const hastTree = /** @type {HastRoot} */ (0,mdast_util_to_hast__WEBPACK_IMPORTED_MODULE_0__.toHast)(tree, {\n                file,\n                ...options\n            });\n            await destination.run(hastTree, file);\n        };\n    }\n    /**\n   * @type {TransformMutate}\n   */ return function(tree, file) {\n        // Cast because root in -> root out.\n        // To do: in the future, disallow ` || options` fallback.\n        // With `unified-engine`, `destination` can be `undefined` but\n        // `options` will be the file set.\n        // We should not pass that as `options`.\n        return /** @type {HastRoot} */ (0,mdast_util_to_hast__WEBPACK_IMPORTED_MODULE_0__.toHast)(tree, {\n            file,\n            ...destination || options\n        });\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/remark-rehype@11.1.1/node_modules/remark-rehype/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/space-separated-tokens@2.0.2/node_modules/space-separated-tokens/index.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/space-separated-tokens@2.0.2/node_modules/space-separated-tokens/index.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parse: function() { return /* binding */ parse; },\n/* harmony export */   stringify: function() { return /* binding */ stringify; }\n/* harmony export */ });\n/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */ function parse(value) {\n    const input = String(value || \"\").trim();\n    return input ? input.split(/[ \\t\\n\\r\\f]+/g) : [];\n}\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */ function stringify(values) {\n    return values.join(\" \").trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zcGFjZS1zZXBhcmF0ZWQtdG9rZW5zQDIuMC4yL25vZGVfbW9kdWxlcy9zcGFjZS1zZXBhcmF0ZWQtdG9rZW5zL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNBLE1BQU1DLEtBQUs7SUFDekIsTUFBTUMsUUFBUUMsT0FBT0YsU0FBUyxJQUFJRyxJQUFJO0lBQ3RDLE9BQU9GLFFBQVFBLE1BQU1HLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtBQUNsRDtBQUVBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTQyxVQUFVQyxNQUFNO0lBQzlCLE9BQU9BLE9BQU9DLElBQUksQ0FBQyxLQUFLSixJQUFJO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zcGFjZS1zZXBhcmF0ZWQtdG9rZW5zQDIuMC4yL25vZGVfbW9kdWxlcy9zcGFjZS1zZXBhcmF0ZWQtdG9rZW5zL2luZGV4LmpzP2Y3ODEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQYXJzZSBzcGFjZS1zZXBhcmF0ZWQgdG9rZW5zIHRvIGFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiAgIFNwYWNlLXNlcGFyYXRlZCB0b2tlbnMuXG4gKiBAcmV0dXJucyB7QXJyYXk8c3RyaW5nPn1cbiAqICAgTGlzdCBvZiB0b2tlbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZSh2YWx1ZSkge1xuICBjb25zdCBpbnB1dCA9IFN0cmluZyh2YWx1ZSB8fCAnJykudHJpbSgpXG4gIHJldHVybiBpbnB1dCA/IGlucHV0LnNwbGl0KC9bIFxcdFxcblxcclxcZl0rL2cpIDogW11cbn1cblxuLyoqXG4gKiBTZXJpYWxpemUgYW4gYXJyYXkgb2Ygc3RyaW5ncyBhcyBzcGFjZSBzZXBhcmF0ZWQtdG9rZW5zLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfG51bWJlcj59IHZhbHVlc1xuICogICBMaXN0IG9mIHRva2Vucy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIFNwYWNlLXNlcGFyYXRlZCB0b2tlbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkodmFsdWVzKSB7XG4gIHJldHVybiB2YWx1ZXMuam9pbignICcpLnRyaW0oKVxufVxuIl0sIm5hbWVzIjpbInBhcnNlIiwidmFsdWUiLCJpbnB1dCIsIlN0cmluZyIsInRyaW0iLCJzcGxpdCIsInN0cmluZ2lmeSIsInZhbHVlcyIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/space-separated-tokens@2.0.2/node_modules/space-separated-tokens/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/trim-lines@3.0.1/node_modules/trim-lines/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/trim-lines@3.0.1/node_modules/trim-lines/index.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   trimLines: function() { return /* binding */ trimLines; }\n/* harmony export */ });\nconst tab = 9 /* `\\t` */ ;\nconst space = 32 /* ` ` */ ;\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */ function trimLines(value) {\n    const source = String(value);\n    const search = /\\r?\\n|\\r/g;\n    let match = search.exec(source);\n    let last = 0;\n    /** @type {Array<string>} */ const lines = [];\n    while(match){\n        lines.push(trimLine(source.slice(last, match.index), last > 0, true), match[0]);\n        last = match.index + match[0].length;\n        match = search.exec(source);\n    }\n    lines.push(trimLine(source.slice(last), last > 0, false));\n    return lines.join(\"\");\n}\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */ function trimLine(value, start, end) {\n    let startIndex = 0;\n    let endIndex = value.length;\n    if (start) {\n        let code = value.codePointAt(startIndex);\n        while(code === tab || code === space){\n            startIndex++;\n            code = value.codePointAt(startIndex);\n        }\n    }\n    if (end) {\n        let code = value.codePointAt(endIndex - 1);\n        while(code === tab || code === space){\n            endIndex--;\n            code = value.codePointAt(endIndex - 1);\n        }\n    }\n    return endIndex > startIndex ? value.slice(startIndex, endIndex) : \"\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS90cmltLWxpbmVzQDMuMC4xL25vZGVfbW9kdWxlcy90cmltLWxpbmVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxNQUFNLEVBQUUsUUFBUTtBQUN0QixNQUFNQyxRQUFRLEdBQUcsT0FBTztBQUV4Qjs7Ozs7Ozs7Q0FRQyxHQUNNLFNBQVNDLFVBQVVDLEtBQUs7SUFDN0IsTUFBTUMsU0FBU0MsT0FBT0Y7SUFDdEIsTUFBTUcsU0FBUztJQUNmLElBQUlDLFFBQVFELE9BQU9FLElBQUksQ0FBQ0o7SUFDeEIsSUFBSUssT0FBTztJQUNYLDBCQUEwQixHQUMxQixNQUFNQyxRQUFRLEVBQUU7SUFFaEIsTUFBT0gsTUFBTztRQUNaRyxNQUFNQyxJQUFJLENBQ1JDLFNBQVNSLE9BQU9TLEtBQUssQ0FBQ0osTUFBTUYsTUFBTU8sS0FBSyxHQUFHTCxPQUFPLEdBQUcsT0FDcERGLEtBQUssQ0FBQyxFQUFFO1FBR1ZFLE9BQU9GLE1BQU1PLEtBQUssR0FBR1AsS0FBSyxDQUFDLEVBQUUsQ0FBQ1EsTUFBTTtRQUNwQ1IsUUFBUUQsT0FBT0UsSUFBSSxDQUFDSjtJQUN0QjtJQUVBTSxNQUFNQyxJQUFJLENBQUNDLFNBQVNSLE9BQU9TLEtBQUssQ0FBQ0osT0FBT0EsT0FBTyxHQUFHO0lBRWxELE9BQU9DLE1BQU1NLElBQUksQ0FBQztBQUNwQjtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNKLFNBQVNULEtBQUssRUFBRWMsS0FBSyxFQUFFQyxHQUFHO0lBQ2pDLElBQUlDLGFBQWE7SUFDakIsSUFBSUMsV0FBV2pCLE1BQU1ZLE1BQU07SUFFM0IsSUFBSUUsT0FBTztRQUNULElBQUlJLE9BQU9sQixNQUFNbUIsV0FBVyxDQUFDSDtRQUU3QixNQUFPRSxTQUFTckIsT0FBT3FCLFNBQVNwQixNQUFPO1lBQ3JDa0I7WUFDQUUsT0FBT2xCLE1BQU1tQixXQUFXLENBQUNIO1FBQzNCO0lBQ0Y7SUFFQSxJQUFJRCxLQUFLO1FBQ1AsSUFBSUcsT0FBT2xCLE1BQU1tQixXQUFXLENBQUNGLFdBQVc7UUFFeEMsTUFBT0MsU0FBU3JCLE9BQU9xQixTQUFTcEIsTUFBTztZQUNyQ21CO1lBQ0FDLE9BQU9sQixNQUFNbUIsV0FBVyxDQUFDRixXQUFXO1FBQ3RDO0lBQ0Y7SUFFQSxPQUFPQSxXQUFXRCxhQUFhaEIsTUFBTVUsS0FBSyxDQUFDTSxZQUFZQyxZQUFZO0FBQ3JFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS90cmltLWxpbmVzQDMuMC4xL25vZGVfbW9kdWxlcy90cmltLWxpbmVzL2luZGV4LmpzPzliYjMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFiID0gOSAvKiBgXFx0YCAqL1xuY29uc3Qgc3BhY2UgPSAzMiAvKiBgIGAgKi9cblxuLyoqXG4gKiBSZW1vdmUgaW5pdGlhbCBhbmQgZmluYWwgc3BhY2VzIGFuZCB0YWJzIGF0IHRoZSBsaW5lIGJyZWFrcyBpbiBgdmFsdWVgLlxuICogRG9lcyBub3QgdHJpbSBpbml0aWFsIGFuZCBmaW5hbCBzcGFjZXMgYW5kIHRhYnMgb2YgdGhlIHZhbHVlIGl0c2VsZi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqICAgVmFsdWUgdG8gdHJpbS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIFRyaW1tZWQgdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmltTGluZXModmFsdWUpIHtcbiAgY29uc3Qgc291cmNlID0gU3RyaW5nKHZhbHVlKVxuICBjb25zdCBzZWFyY2ggPSAvXFxyP1xcbnxcXHIvZ1xuICBsZXQgbWF0Y2ggPSBzZWFyY2guZXhlYyhzb3VyY2UpXG4gIGxldCBsYXN0ID0gMFxuICAvKiogQHR5cGUge0FycmF5PHN0cmluZz59ICovXG4gIGNvbnN0IGxpbmVzID0gW11cblxuICB3aGlsZSAobWF0Y2gpIHtcbiAgICBsaW5lcy5wdXNoKFxuICAgICAgdHJpbUxpbmUoc291cmNlLnNsaWNlKGxhc3QsIG1hdGNoLmluZGV4KSwgbGFzdCA+IDAsIHRydWUpLFxuICAgICAgbWF0Y2hbMF1cbiAgICApXG5cbiAgICBsYXN0ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGhcbiAgICBtYXRjaCA9IHNlYXJjaC5leGVjKHNvdXJjZSlcbiAgfVxuXG4gIGxpbmVzLnB1c2godHJpbUxpbmUoc291cmNlLnNsaWNlKGxhc3QpLCBsYXN0ID4gMCwgZmFsc2UpKVxuXG4gIHJldHVybiBsaW5lcy5qb2luKCcnKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogICBMaW5lIHRvIHRyaW0uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXJ0XG4gKiAgIFdoZXRoZXIgdG8gdHJpbSB0aGUgc3RhcnQgb2YgdGhlIGxpbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGVuZFxuICogICBXaGV0aGVyIHRvIHRyaW0gdGhlIGVuZCBvZiB0aGUgbGluZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIFRyaW1tZWQgbGluZS5cbiAqL1xuZnVuY3Rpb24gdHJpbUxpbmUodmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IHN0YXJ0SW5kZXggPSAwXG4gIGxldCBlbmRJbmRleCA9IHZhbHVlLmxlbmd0aFxuXG4gIGlmIChzdGFydCkge1xuICAgIGxldCBjb2RlID0gdmFsdWUuY29kZVBvaW50QXQoc3RhcnRJbmRleClcblxuICAgIHdoaWxlIChjb2RlID09PSB0YWIgfHwgY29kZSA9PT0gc3BhY2UpIHtcbiAgICAgIHN0YXJ0SW5kZXgrK1xuICAgICAgY29kZSA9IHZhbHVlLmNvZGVQb2ludEF0KHN0YXJ0SW5kZXgpXG4gICAgfVxuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIGxldCBjb2RlID0gdmFsdWUuY29kZVBvaW50QXQoZW5kSW5kZXggLSAxKVxuXG4gICAgd2hpbGUgKGNvZGUgPT09IHRhYiB8fCBjb2RlID09PSBzcGFjZSkge1xuICAgICAgZW5kSW5kZXgtLVxuICAgICAgY29kZSA9IHZhbHVlLmNvZGVQb2ludEF0KGVuZEluZGV4IC0gMSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZW5kSW5kZXggPiBzdGFydEluZGV4ID8gdmFsdWUuc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpIDogJydcbn1cbiJdLCJuYW1lcyI6WyJ0YWIiLCJzcGFjZSIsInRyaW1MaW5lcyIsInZhbHVlIiwic291cmNlIiwiU3RyaW5nIiwic2VhcmNoIiwibWF0Y2giLCJleGVjIiwibGFzdCIsImxpbmVzIiwicHVzaCIsInRyaW1MaW5lIiwic2xpY2UiLCJpbmRleCIsImxlbmd0aCIsImpvaW4iLCJzdGFydCIsImVuZCIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsImNvZGUiLCJjb2RlUG9pbnRBdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/trim-lines@3.0.1/node_modules/trim-lines/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/trough@2.2.0/node_modules/trough/lib/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/.pnpm/trough@2.2.0/node_modules/trough/lib/index.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   trough: function() { return /* binding */ trough; },\n/* harmony export */   wrap: function() { return /* binding */ wrap; }\n/* harmony export */ });\n// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */ /**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */ function trough() {\n    /** @type {Array<Middleware>} */ const fns = [];\n    /** @type {Pipeline} */ const pipeline = {\n        run,\n        use\n    };\n    return pipeline;\n    /** @type {Run} */ function run() {\n        for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){\n            values[_key] = arguments[_key];\n        }\n        let middlewareIndex = -1;\n        /** @type {Callback} */ const callback = values.pop();\n        if (typeof callback !== \"function\") {\n            throw new TypeError(\"Expected function as last argument, not \" + callback);\n        }\n        next(null, ...values);\n        /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */ function next(error) {\n            for(var _len = arguments.length, output = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                output[_key - 1] = arguments[_key];\n            }\n            const fn = fns[++middlewareIndex];\n            let index = -1;\n            if (error) {\n                callback(error);\n                return;\n            }\n            // Copy non-nullish input into values.\n            while(++index < values.length){\n                if (output[index] === null || output[index] === undefined) {\n                    output[index] = values[index];\n                }\n            }\n            // Save the newly created `output` for the next call.\n            values = output;\n            // Next or done.\n            if (fn) {\n                wrap(fn, next)(...output);\n            } else {\n                callback(null, ...output);\n            }\n        }\n    }\n    /** @type {Use} */ function use(middelware) {\n        if (typeof middelware !== \"function\") {\n            throw new TypeError(\"Expected `middelware` to be a function, not \" + middelware);\n        }\n        fns.push(middelware);\n        return pipeline;\n    }\n}\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */ function wrap(middleware, callback) {\n    /** @type {boolean} */ let called;\n    return wrapped;\n    /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */ function wrapped() {\n        for(var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++){\n            parameters[_key] = arguments[_key];\n        }\n        const fnExpectsCallback = middleware.length > parameters.length;\n        /** @type {any} */ let result;\n        if (fnExpectsCallback) {\n            parameters.push(done);\n        }\n        try {\n            result = middleware.apply(this, parameters);\n        } catch (error) {\n            const exception = /** @type {Error} */ error;\n            // Well, this is quite the pickle.\n            // `middleware` received a callback and called it synchronously, but that\n            // threw an error.\n            // The only thing left to do is to throw the thing instead.\n            if (fnExpectsCallback && called) {\n                throw exception;\n            }\n            return done(exception);\n        }\n        if (!fnExpectsCallback) {\n            if (result && result.then && typeof result.then === \"function\") {\n                result.then(then, done);\n            } else if (result instanceof Error) {\n                done(result);\n            } else {\n                then(result);\n            }\n        }\n    }\n    /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */ function done(error) {\n        for(var _len = arguments.length, output = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            output[_key - 1] = arguments[_key];\n        }\n        if (!called) {\n            called = true;\n            callback(error, ...output);\n        }\n    }\n    /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */ function then(value) {\n        done(null, value);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/trough@2.2.0/node_modules/trough/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/callable-instance.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/callable-instance.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CallableInstance: function() { return /* binding */ CallableInstance; }\n/* harmony export */ });\nconst CallableInstance = /** @type {unknown} */ /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */ function(property) {\n    const self = this;\n    const constr = self.constructor;\n    const proto = /** @type {Record<string | symbol, Function>} */ // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    constr.prototype;\n    const value = proto[property];\n    /** @type {(...parameters: Array<unknown>) => unknown} */ const apply = function() {\n        return value.apply(apply, arguments);\n    };\n    Object.setPrototypeOf(apply, proto);\n    // Not needed for us in `unified`: we only call this on the `copy`\n    // function,\n    // and we don't need to add its fields (`length`, `name`)\n    // over.\n    // See also: GH-246.\n    // const names = Object.getOwnPropertyNames(value)\n    //\n    // for (const p of names) {\n    //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n    //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n    // }\n    return apply;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmlmaWVkQDExLjAuNS9ub2RlX21vZHVsZXMvdW5pZmllZC9saWIvY2FsbGFibGUtaW5zdGFuY2UuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLG1CQUtULG9CQUFvQixHQUVsQjs7OztPQUlDLEdBQ0QsU0FBVUMsUUFBUTtJQUNoQixNQUFNQyxPQUFPLElBQUk7SUFDakIsTUFBTUMsU0FBU0QsS0FBS0UsV0FBVztJQUMvQixNQUFNQyxRQUFRLDhDQUE4QyxHQUMxRCx1QkFBdUI7SUFDdkIsaUNBQWlDO0lBQ2pDRixPQUFPRyxTQUFTO0lBRWxCLE1BQU1DLFFBQVFGLEtBQUssQ0FBQ0osU0FBUztJQUM3Qix1REFBdUQsR0FDdkQsTUFBTU8sUUFBUTtRQUNaLE9BQU9ELE1BQU1DLEtBQUssQ0FBQ0EsT0FBT0M7SUFDNUI7SUFFQUMsT0FBT0MsY0FBYyxDQUFDSCxPQUFPSDtJQUU3QixrRUFBa0U7SUFDbEUsWUFBWTtJQUNaLHlEQUF5RDtJQUN6RCxRQUFRO0lBQ1Isb0JBQW9CO0lBQ3BCLGtEQUFrRDtJQUNsRCxFQUFFO0lBQ0YsMkJBQTJCO0lBQzNCLGlFQUFpRTtJQUNqRSxnRUFBZ0U7SUFDaEUsSUFBSTtJQUVKLE9BQU9HO0FBQ1QsRUFFSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5pZmllZEAxMS4wLjUvbm9kZV9tb2R1bGVzL3VuaWZpZWQvbGliL2NhbGxhYmxlLWluc3RhbmNlLmpzP2Q1ZDEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IENhbGxhYmxlSW5zdGFuY2UgPVxuICAvKipcbiAgICogQHR5cGUge25ldyA8UGFyYW1ldGVycyBleHRlbmRzIEFycmF5PHVua25vd24+LCBSZXN1bHQ+KHByb3BlcnR5OiBzdHJpbmcgfCBzeW1ib2wpID0+ICguLi5wYXJhbWV0ZXJzOiBQYXJhbWV0ZXJzKSA9PiBSZXN1bHR9XG4gICAqL1xuICAoXG4gICAgLyoqIEB0eXBlIHt1bmtub3dufSAqL1xuICAgIChcbiAgICAgIC8qKlxuICAgICAgICogQHRoaXMge0Z1bmN0aW9ufVxuICAgICAgICogQHBhcmFtIHtzdHJpbmcgfCBzeW1ib2x9IHByb3BlcnR5XG4gICAgICAgKiBAcmV0dXJucyB7KC4uLnBhcmFtZXRlcnM6IEFycmF5PHVua25vd24+KSA9PiB1bmtub3dufVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgICAgICAgY29uc3QgY29uc3RyID0gc2VsZi5jb25zdHJ1Y3RvclxuICAgICAgICBjb25zdCBwcm90byA9IC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZyB8IHN5bWJvbCwgRnVuY3Rpb24+fSAqLyAoXG4gICAgICAgICAgLy8gUHJvdG90eXBlcyBkbyBleGlzdC5cbiAgICAgICAgICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgICAgICAgICBjb25zdHIucHJvdG90eXBlXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwcm90b1twcm9wZXJ0eV1cbiAgICAgICAgLyoqIEB0eXBlIHsoLi4ucGFyYW1ldGVyczogQXJyYXk8dW5rbm93bj4pID0+IHVua25vd259ICovXG4gICAgICAgIGNvbnN0IGFwcGx5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZS5hcHBseShhcHBseSwgYXJndW1lbnRzKVxuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGFwcGx5LCBwcm90bylcblxuICAgICAgICAvLyBOb3QgbmVlZGVkIGZvciB1cyBpbiBgdW5pZmllZGA6IHdlIG9ubHkgY2FsbCB0aGlzIG9uIHRoZSBgY29weWBcbiAgICAgICAgLy8gZnVuY3Rpb24sXG4gICAgICAgIC8vIGFuZCB3ZSBkb24ndCBuZWVkIHRvIGFkZCBpdHMgZmllbGRzIChgbGVuZ3RoYCwgYG5hbWVgKVxuICAgICAgICAvLyBvdmVyLlxuICAgICAgICAvLyBTZWUgYWxzbzogR0gtMjQ2LlxuICAgICAgICAvLyBjb25zdCBuYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKVxuICAgICAgICAvL1xuICAgICAgICAvLyBmb3IgKGNvbnN0IHAgb2YgbmFtZXMpIHtcbiAgICAgICAgLy8gICBjb25zdCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwgcClcbiAgICAgICAgLy8gICBpZiAoZGVzY3JpcHRvcikgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcGx5LCBwLCBkZXNjcmlwdG9yKVxuICAgICAgICAvLyB9XG5cbiAgICAgICAgcmV0dXJuIGFwcGx5XG4gICAgICB9XG4gICAgKVxuICApXG4iXSwibmFtZXMiOlsiQ2FsbGFibGVJbnN0YW5jZSIsInByb3BlcnR5Iiwic2VsZiIsImNvbnN0ciIsImNvbnN0cnVjdG9yIiwicHJvdG8iLCJwcm90b3R5cGUiLCJ2YWx1ZSIsImFwcGx5IiwiYXJndW1lbnRzIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/callable-instance.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/index.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Processor: function() { return /* binding */ Processor; },\n/* harmony export */   unified: function() { return /* binding */ unified; }\n/* harmony export */ });\n/* harmony import */ var bail__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bail */ \"(app-pages-browser)/./node_modules/.pnpm/bail@2.0.2/node_modules/bail/index.js\");\n/* harmony import */ var extend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! extend */ \"(app-pages-browser)/./node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js\");\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! devlop */ \"(app-pages-browser)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var is_plain_obj__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! is-plain-obj */ \"(app-pages-browser)/./node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js\");\n/* harmony import */ var trough__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! trough */ \"(app-pages-browser)/./node_modules/.pnpm/trough@2.2.0/node_modules/trough/lib/index.js\");\n/* harmony import */ var vfile__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! vfile */ \"(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/index.js\");\n/* harmony import */ var _callable_instance_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./callable-instance.js */ \"(app-pages-browser)/./node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/callable-instance.js\");\n/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */ /**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */ /**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */ /**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */ /**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */ /**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */ // Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */ /**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */ /**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */ /**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */ /**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */ /**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */ /**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */ /**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */ /**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */ \n\n\n\n\n\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\nconst own = {}.hasOwnProperty;\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */ class Processor extends _callable_instance_js__WEBPACK_IMPORTED_MODULE_2__.CallableInstance {\n    /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */ copy() {\n        // Cast as the type parameters will be the same after attaching.\n        const destination = /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ new Processor();\n        let index = -1;\n        while(++index < this.attachers.length){\n            const attacher = this.attachers[index];\n            destination.use(...attacher);\n        }\n        destination.data(extend__WEBPACK_IMPORTED_MODULE_0__(true, {}, this.namespace));\n        return destination;\n    }\n    /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */ data(key, value) {\n        if (typeof key === \"string\") {\n            // Set `key`.\n            if (arguments.length === 2) {\n                assertUnfrozen(\"data\", this.frozen);\n                this.namespace[key] = value;\n                return this;\n            }\n            // Get `key`.\n            return own.call(this.namespace, key) && this.namespace[key] || undefined;\n        }\n        // Set space.\n        if (key) {\n            assertUnfrozen(\"data\", this.frozen);\n            this.namespace = key;\n            return this;\n        }\n        // Get space.\n        return this.namespace;\n    }\n    /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */ freeze() {\n        if (this.frozen) {\n            return this;\n        }\n        // Cast so that we can type plugins easier.\n        // Plugins are supposed to be usable on different processors, not just on\n        // this exact processor.\n        const self = /** @type {unknown} */ this;\n        while(++this.freezeIndex < this.attachers.length){\n            const [attacher, ...options] = this.attachers[this.freezeIndex];\n            if (options[0] === false) {\n                continue;\n            }\n            if (options[0] === true) {\n                options[0] = undefined;\n            }\n            const transformer = attacher.call(self, ...options);\n            if (typeof transformer === \"function\") {\n                this.transformers.use(transformer);\n            }\n        }\n        this.frozen = true;\n        this.freezeIndex = Number.POSITIVE_INFINITY;\n        return this;\n    }\n    /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */ parse(file) {\n        this.freeze();\n        const realFile = vfile(file);\n        const parser = this.parser || this.Parser;\n        assertParser(\"parse\", parser);\n        return parser(String(realFile), realFile);\n    }\n    /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */ process(file, done) {\n        const self = this;\n        this.freeze();\n        assertParser(\"process\", this.parser || this.Parser);\n        assertCompiler(\"process\", this.compiler || this.Compiler);\n        return done ? executor(undefined, done) : new Promise(executor);\n        // Note: `void`s needed for TS.\n        /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */ function executor(resolve, reject) {\n            const realFile = vfile(file);\n            // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n            // input of the first transform).\n            const parseTree = /** @type {unknown} */ self.parse(realFile);\n            self.run(parseTree, realFile, function(error, tree, file) {\n                if (error || !tree || !file) {\n                    return realDone(error);\n                }\n                // Assume `TailTree` (the output of the last transform) matches\n                // `CompileTree` (the input of the compiler).\n                const compileTree = /** @type {unknown} */ tree;\n                const compileResult = self.stringify(compileTree, file);\n                if (looksLikeAValue(compileResult)) {\n                    file.value = compileResult;\n                } else {\n                    file.result = compileResult;\n                }\n                realDone(error, /** @type {VFileWithOutput<CompileResult>} */ file);\n            });\n            /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */ function realDone(error, file) {\n                if (error || !file) {\n                    reject(error);\n                } else if (resolve) {\n                    resolve(file);\n                } else {\n                    (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(done, \"`done` is defined if `resolve` is not\");\n                    done(undefined, file);\n                }\n            }\n        }\n    }\n    /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */ processSync(file) {\n        /** @type {boolean} */ let complete = false;\n        /** @type {VFileWithOutput<CompileResult> | undefined} */ let result;\n        this.freeze();\n        assertParser(\"processSync\", this.parser || this.Parser);\n        assertCompiler(\"processSync\", this.compiler || this.Compiler);\n        this.process(file, realDone);\n        assertDone(\"processSync\", \"process\", complete);\n        (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(result, \"we either bailed on an error or have a tree\");\n        return result;\n        /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */ function realDone(error, file) {\n            complete = true;\n            (0,bail__WEBPACK_IMPORTED_MODULE_4__.bail)(error);\n            result = file;\n        }\n    }\n    /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */ run(tree, file, done) {\n        assertNode(tree);\n        this.freeze();\n        const transformers = this.transformers;\n        if (!done && typeof file === \"function\") {\n            done = file;\n            file = undefined;\n        }\n        return done ? executor(undefined, done) : new Promise(executor);\n        // Note: `void`s needed for TS.\n        /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */ function executor(resolve, reject) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(typeof file !== \"function\", \"`file` can’t be a `done` anymore, we checked\");\n            const realFile = vfile(file);\n            transformers.run(tree, realFile, realDone);\n            /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */ function realDone(error, outputTree, file) {\n                const resultingTree = /** @type {TailTree extends undefined ? Node : TailTree} */ outputTree || tree;\n                if (error) {\n                    reject(error);\n                } else if (resolve) {\n                    resolve(resultingTree);\n                } else {\n                    (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(done, \"`done` is defined if `resolve` is not\");\n                    done(undefined, resultingTree, file);\n                }\n            }\n        }\n    }\n    /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */ runSync(tree, file) {\n        /** @type {boolean} */ let complete = false;\n        /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */ let result;\n        this.run(tree, file, realDone);\n        assertDone(\"runSync\", \"run\", complete);\n        (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(result, \"we either bailed on an error or have a tree\");\n        return result;\n        /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */ function realDone(error, tree) {\n            (0,bail__WEBPACK_IMPORTED_MODULE_4__.bail)(error);\n            result = tree;\n            complete = true;\n        }\n    }\n    /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */ stringify(tree, file) {\n        this.freeze();\n        const realFile = vfile(file);\n        const compiler = this.compiler || this.Compiler;\n        assertCompiler(\"stringify\", compiler);\n        assertNode(tree);\n        return compiler(tree, realFile);\n    }\n    /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */ use(value) {\n        for(var _len = arguments.length, parameters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            parameters[_key - 1] = arguments[_key];\n        }\n        const attachers = this.attachers;\n        const namespace = this.namespace;\n        assertUnfrozen(\"use\", this.frozen);\n        if (value === null || value === undefined) {\n        // Empty.\n        } else if (typeof value === \"function\") {\n            addPlugin(value, parameters);\n        } else if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                addList(value);\n            } else {\n                addPreset(value);\n            }\n        } else {\n            throw new TypeError(\"Expected usable value, not `\" + value + \"`\");\n        }\n        return this;\n        /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */ function add(value) {\n            if (typeof value === \"function\") {\n                addPlugin(value, []);\n            } else if (typeof value === \"object\") {\n                if (Array.isArray(value)) {\n                    const [plugin, ...parameters] = /** @type {PluginTuple<Array<unknown>>} */ value;\n                    addPlugin(plugin, parameters);\n                } else {\n                    addPreset(value);\n                }\n            } else {\n                throw new TypeError(\"Expected usable value, not `\" + value + \"`\");\n            }\n        }\n        /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */ function addPreset(result) {\n            if (!(\"plugins\" in result) && !(\"settings\" in result)) {\n                throw new Error(\"Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither\");\n            }\n            addList(result.plugins);\n            if (result.settings) {\n                namespace.settings = extend__WEBPACK_IMPORTED_MODULE_0__(true, namespace.settings, result.settings);\n            }\n        }\n        /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */ function addList(plugins) {\n            let index = -1;\n            if (plugins === null || plugins === undefined) {\n            // Empty.\n            } else if (Array.isArray(plugins)) {\n                while(++index < plugins.length){\n                    const thing = plugins[index];\n                    add(thing);\n                }\n            } else {\n                throw new TypeError(\"Expected a list of plugins, not `\" + plugins + \"`\");\n            }\n        }\n        /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */ function addPlugin(plugin, parameters) {\n            let index = -1;\n            let entryIndex = -1;\n            while(++index < attachers.length){\n                if (attachers[index][0] === plugin) {\n                    entryIndex = index;\n                    break;\n                }\n            }\n            if (entryIndex === -1) {\n                attachers.push([\n                    plugin,\n                    ...parameters\n                ]);\n            } else if (parameters.length > 0) {\n                let [primary, ...rest] = parameters;\n                const currentPrimary = attachers[entryIndex][1];\n                if ((0,is_plain_obj__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(currentPrimary) && (0,is_plain_obj__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(primary)) {\n                    primary = extend__WEBPACK_IMPORTED_MODULE_0__(true, currentPrimary, primary);\n                }\n                attachers[entryIndex] = [\n                    plugin,\n                    primary,\n                    ...rest\n                ];\n            }\n        }\n    }\n    /**\n   * Create a processor.\n   */ constructor(){\n        // If `Processor()` is called (w/o new), `copy` is called instead.\n        super(\"copy\");\n        /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */ this.Compiler = undefined;\n        /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */ this.Parser = undefined;\n        // Note: the following fields are considered private.\n        // However, they are needed for tests, and TSC generates an untyped\n        // `private freezeIndex` field for, which trips `type-coverage` up.\n        // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n        /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */ this.attachers = [];\n        /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */ this.compiler = undefined;\n        /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */ this.freezeIndex = -1;\n        /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */ this.frozen = undefined;\n        /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */ this.namespace = {};\n        /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */ this.parser = undefined;\n        /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */ this.transformers = (0,trough__WEBPACK_IMPORTED_MODULE_5__.trough)();\n    }\n}\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */ const unified = new Processor().freeze();\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */ function assertParser(name, value) {\n    if (typeof value !== \"function\") {\n        throw new TypeError(\"Cannot `\" + name + \"` without `parser`\");\n    }\n}\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */ function assertCompiler(name, value) {\n    if (typeof value !== \"function\") {\n        throw new TypeError(\"Cannot `\" + name + \"` without `compiler`\");\n    }\n}\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */ function assertUnfrozen(name, frozen) {\n    if (frozen) {\n        throw new Error(\"Cannot call `\" + name + \"` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.\");\n    }\n}\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */ function assertNode(node) {\n    // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n    // type-coverage:ignore-next-line\n    if (!(0,is_plain_obj__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(node) || typeof node.type !== \"string\") {\n        throw new TypeError(\"Expected node, got `\" + node + \"`\");\n    // Fine.\n    }\n}\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */ function assertDone(name, asyncName, complete) {\n    if (!complete) {\n        throw new Error(\"`\" + name + \"` finished async. Use `\" + asyncName + \"` instead\");\n    }\n}\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */ function vfile(value) {\n    return looksLikeAVFile(value) ? value : new vfile__WEBPACK_IMPORTED_MODULE_6__.VFile(value);\n}\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */ function looksLikeAVFile(value) {\n    return Boolean(value && typeof value === \"object\" && \"message\" in value && \"messages\" in value);\n}\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */ function looksLikeAValue(value) {\n    return typeof value === \"string\" || isUint8Array(value);\n}\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */ function isUint8Array(value) {\n    return Boolean(value && typeof value === \"object\" && \"byteLength\" in value && \"byteOffset\" in value);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/unist-util-is@6.0.0/node_modules/unist-util-is/lib/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/unist-util-is@6.0.0/node_modules/unist-util-is/lib/index.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert: function() { return /* binding */ convert; },\n/* harmony export */   is: function() { return /* binding */ is; }\n/* harmony export */ });\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */ /**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */ /**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */ /**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */ const is = // Note: overloads in JSDoc can’t yet use different `@template`s.\n/**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */ /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */ // eslint-disable-next-line max-params\nfunction(node, test, index, parent, context) {\n    const check = convert(test);\n    if (index !== undefined && index !== null && (typeof index !== \"number\" || index < 0 || index === Number.POSITIVE_INFINITY)) {\n        throw new Error(\"Expected positive finite index\");\n    }\n    if (parent !== undefined && parent !== null && (!is(parent) || !parent.children)) {\n        throw new Error(\"Expected parent node\");\n    }\n    if ((parent === undefined || parent === null) !== (index === undefined || index === null)) {\n        throw new Error(\"Expected both parent and index\");\n    }\n    return looksLikeANode(node) ? check.call(context, node, index, parent) : false;\n};\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */ const convert = // Note: overloads in JSDoc can’t yet use different `@template`s.\n/**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */ /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */ function(test) {\n    if (test === null || test === undefined) {\n        return ok;\n    }\n    if (typeof test === \"function\") {\n        return castFactory(test);\n    }\n    if (typeof test === \"object\") {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test);\n    }\n    if (typeof test === \"string\") {\n        return typeFactory(test);\n    }\n    throw new Error(\"Expected function, string, or object as test\");\n};\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */ function anyFactory(tests) {\n    /** @type {Array<Check>} */ const checks = [];\n    let index = -1;\n    while(++index < tests.length){\n        checks[index] = convert(tests[index]);\n    }\n    return castFactory(any);\n    /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */ function any() {\n        for(var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++){\n            parameters[_key] = arguments[_key];\n        }\n        let index = -1;\n        while(++index < checks.length){\n            if (checks[index].apply(this, parameters)) return true;\n        }\n        return false;\n    }\n}\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */ function propsFactory(check) {\n    const checkAsRecord = /** @type {Record<string, unknown>} */ check;\n    return castFactory(all);\n    /**\n   * @param {Node} node\n   * @returns {boolean}\n   */ function all(node) {\n        const nodeAsRecord = /** @type {unknown} */ node;\n        /** @type {string} */ let key;\n        for(key in check){\n            if (nodeAsRecord[key] !== checkAsRecord[key]) return false;\n        }\n        return true;\n    }\n}\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */ function typeFactory(check) {\n    return castFactory(type);\n    /**\n   * @param {Node} node\n   */ function type(node) {\n        return node && node.type === check;\n    }\n}\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */ function castFactory(testFunction) {\n    return check;\n    /**\n   * @this {unknown}\n   * @type {Check}\n   */ function check(value, index, parent) {\n        return Boolean(looksLikeANode(value) && testFunction.call(this, value, typeof index === \"number\" ? index : undefined, parent || undefined));\n    }\n}\nfunction ok() {\n    return true;\n}\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */ function looksLikeANode(value) {\n    return value !== null && typeof value === \"object\" && \"type\" in value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/unist-util-is@6.0.0/node_modules/unist-util-is/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/unist-util-position@5.0.0/node_modules/unist-util-position/lib/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/unist-util-position@5.0.0/node_modules/unist-util-position/lib/index.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pointEnd: function() { return /* binding */ pointEnd; },\n/* harmony export */   pointStart: function() { return /* binding */ pointStart; },\n/* harmony export */   position: function() { return /* binding */ position; }\n/* harmony export */ });\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */ /**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */ /**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */ const pointEnd = point(\"end\");\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */ const pointStart = point(\"start\");\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */ function point(type) {\n    return point;\n    /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */ function point(node) {\n        const point = node && node.position && node.position[type] || {};\n        if (typeof point.line === \"number\" && point.line > 0 && typeof point.column === \"number\" && point.column > 0) {\n            return {\n                line: point.line,\n                column: point.column,\n                offset: typeof point.offset === \"number\" && point.offset > -1 ? point.offset : undefined\n            };\n        }\n    }\n}\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */ function position(node) {\n    const start = pointStart(node);\n    const end = pointEnd(node);\n    if (start && end) {\n        return {\n            start,\n            end\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmlzdC11dGlsLXBvc2l0aW9uQDUuMC4wL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXBvc2l0aW9uL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztDQUlDLEdBRUQ7Ozs7Ozs7Ozs7Ozs7Q0FhQyxHQUVEOzs7Ozs7O0NBT0MsR0FDTSxNQUFNQSxXQUFXQyxNQUFNLE9BQU07QUFFcEM7Ozs7Ozs7Q0FPQyxHQUNNLE1BQU1DLGFBQWFELE1BQU0sU0FBUTtBQUV4Qzs7Ozs7OztDQU9DLEdBQ0QsU0FBU0EsTUFBTUUsSUFBSTtJQUNqQixPQUFPRjtJQUVQOzs7OztHQUtDLEdBQ0QsU0FBU0EsTUFBTUcsSUFBSTtRQUNqQixNQUFNSCxRQUFRLFFBQVNHLEtBQUtDLFFBQVEsSUFBSUQsS0FBS0MsUUFBUSxDQUFDRixLQUFLLElBQUssQ0FBQztRQUVqRSxJQUNFLE9BQU9GLE1BQU1LLElBQUksS0FBSyxZQUN0QkwsTUFBTUssSUFBSSxHQUFHLEtBQ2IsT0FBT0wsTUFBTU0sTUFBTSxLQUFLLFlBQ3hCTixNQUFNTSxNQUFNLEdBQUcsR0FDZjtZQUNBLE9BQU87Z0JBQ0xELE1BQU1MLE1BQU1LLElBQUk7Z0JBQ2hCQyxRQUFRTixNQUFNTSxNQUFNO2dCQUNwQkMsUUFDRSxPQUFPUCxNQUFNTyxNQUFNLEtBQUssWUFBWVAsTUFBTU8sTUFBTSxHQUFHLENBQUMsSUFDaERQLE1BQU1PLE1BQU0sR0FDWkM7WUFDUjtRQUNGO0lBQ0Y7QUFDRjtBQUVBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTSixTQUFTRCxJQUFJO0lBQzNCLE1BQU1NLFFBQVFSLFdBQVdFO0lBQ3pCLE1BQU1PLE1BQU1YLFNBQVNJO0lBRXJCLElBQUlNLFNBQVNDLEtBQUs7UUFDaEIsT0FBTztZQUFDRDtZQUFPQztRQUFHO0lBQ3BCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuaXN0LXV0aWwtcG9zaXRpb25ANS4wLjAvbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtcG9zaXRpb24vbGliL2luZGV4LmpzPzc2NGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUG9pbnR9IFBvaW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLlBvc2l0aW9ufSBQb3NpdGlvblxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgTm9kZUxpa2VcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlXG4gKiBAcHJvcGVydHkge1Bvc2l0aW9uTGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IFtwb3NpdGlvbl1cbiAqXG4gKiBAdHlwZWRlZiBQb3NpdGlvbkxpa2VcbiAqIEBwcm9wZXJ0eSB7UG9pbnRMaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3N0YXJ0XVxuICogQHByb3BlcnR5IHtQb2ludExpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBbZW5kXVxuICpcbiAqIEB0eXBlZGVmIFBvaW50TGlrZVxuICogQHByb3BlcnR5IHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbbGluZV1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbHVtbl1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29mZnNldF1cbiAqL1xuXG4vKipcbiAqIEdldCB0aGUgZW5kaW5nIHBvaW50IG9mIGBub2RlYC5cbiAqXG4gKiBAcGFyYW0gbm9kZVxuICogICBOb2RlLlxuICogQHJldHVybnNcbiAqICAgUG9pbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBwb2ludEVuZCA9IHBvaW50KCdlbmQnKVxuXG4vKipcbiAqIEdldCB0aGUgc3RhcnRpbmcgcG9pbnQgb2YgYG5vZGVgLlxuICpcbiAqIEBwYXJhbSBub2RlXG4gKiAgIE5vZGUuXG4gKiBAcmV0dXJuc1xuICogICBQb2ludC5cbiAqL1xuZXhwb3J0IGNvbnN0IHBvaW50U3RhcnQgPSBwb2ludCgnc3RhcnQnKVxuXG4vKipcbiAqIEdldCB0aGUgcG9zaXRpb25hbCBpbmZvIG9mIGBub2RlYC5cbiAqXG4gKiBAcGFyYW0geydlbmQnIHwgJ3N0YXJ0J30gdHlwZVxuICogICBTaWRlLlxuICogQHJldHVybnNcbiAqICAgR2V0dGVyLlxuICovXG5mdW5jdGlvbiBwb2ludCh0eXBlKSB7XG4gIHJldHVybiBwb2ludFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHBvaW50IGluZm8gb2YgYG5vZGVgIGF0IGEgYm91bmQgc2lkZS5cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlIHwgTm9kZUxpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBbbm9kZV1cbiAgICogQHJldHVybnMge1BvaW50IHwgdW5kZWZpbmVkfVxuICAgKi9cbiAgZnVuY3Rpb24gcG9pbnQobm9kZSkge1xuICAgIGNvbnN0IHBvaW50ID0gKG5vZGUgJiYgbm9kZS5wb3NpdGlvbiAmJiBub2RlLnBvc2l0aW9uW3R5cGVdKSB8fCB7fVxuXG4gICAgaWYgKFxuICAgICAgdHlwZW9mIHBvaW50LmxpbmUgPT09ICdudW1iZXInICYmXG4gICAgICBwb2ludC5saW5lID4gMCAmJlxuICAgICAgdHlwZW9mIHBvaW50LmNvbHVtbiA9PT0gJ251bWJlcicgJiZcbiAgICAgIHBvaW50LmNvbHVtbiA+IDBcbiAgICApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbmU6IHBvaW50LmxpbmUsXG4gICAgICAgIGNvbHVtbjogcG9pbnQuY29sdW1uLFxuICAgICAgICBvZmZzZXQ6XG4gICAgICAgICAgdHlwZW9mIHBvaW50Lm9mZnNldCA9PT0gJ251bWJlcicgJiYgcG9pbnQub2Zmc2V0ID4gLTFcbiAgICAgICAgICAgID8gcG9pbnQub2Zmc2V0XG4gICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgcG9zaXRpb25hbCBpbmZvIG9mIGBub2RlYC5cbiAqXG4gKiBAcGFyYW0ge05vZGUgfCBOb2RlTGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IFtub2RlXVxuICogICBOb2RlLlxuICogQHJldHVybnMge1Bvc2l0aW9uIHwgdW5kZWZpbmVkfVxuICogICBQb3NpdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uKG5vZGUpIHtcbiAgY29uc3Qgc3RhcnQgPSBwb2ludFN0YXJ0KG5vZGUpXG4gIGNvbnN0IGVuZCA9IHBvaW50RW5kKG5vZGUpXG5cbiAgaWYgKHN0YXJ0ICYmIGVuZCkge1xuICAgIHJldHVybiB7c3RhcnQsIGVuZH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbInBvaW50RW5kIiwicG9pbnQiLCJwb2ludFN0YXJ0IiwidHlwZSIsIm5vZGUiLCJwb3NpdGlvbiIsImxpbmUiLCJjb2x1bW4iLCJvZmZzZXQiLCJ1bmRlZmluZWQiLCJzdGFydCIsImVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/unist-util-position@5.0.0/node_modules/unist-util-position/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js ***!
  \************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringifyPosition: function() { return /* binding */ stringifyPosition; }\n/* harmony export */ });\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */ /**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */ /**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */ function stringifyPosition(value) {\n    // Nothing.\n    if (!value || typeof value !== \"object\") {\n        return \"\";\n    }\n    // Node.\n    if (\"position\" in value || \"type\" in value) {\n        return position(value.position);\n    }\n    // Position.\n    if (\"start\" in value || \"end\" in value) {\n        return position(value);\n    }\n    // Point.\n    if (\"line\" in value || \"column\" in value) {\n        return point(value);\n    }\n    // ?\n    return \"\";\n}\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */ function point(point) {\n    return index(point && point.line) + \":\" + index(point && point.column);\n}\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */ function position(pos) {\n    return point(pos && pos.start) + \"-\" + point(pos && pos.end);\n}\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */ function index(value) {\n    return value && typeof value === \"number\" ? value : 1;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmlzdC11dGlsLXN0cmluZ2lmeS1wb3NpdGlvbkA0LjAuMC9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC1zdHJpbmdpZnktcG9zaXRpb24vbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztDQUlDLEdBRUQ7Ozs7Ozs7Ozs7Ozs7Q0FhQyxHQUVEOzs7Ozs7Ozs7Ozs7OztDQWNDLEdBQ00sU0FBU0Esa0JBQWtCQyxLQUFLO0lBQ3JDLFdBQVc7SUFDWCxJQUFJLENBQUNBLFNBQVMsT0FBT0EsVUFBVSxVQUFVO1FBQ3ZDLE9BQU87SUFDVDtJQUVBLFFBQVE7SUFDUixJQUFJLGNBQWNBLFNBQVMsVUFBVUEsT0FBTztRQUMxQyxPQUFPQyxTQUFTRCxNQUFNQyxRQUFRO0lBQ2hDO0lBRUEsWUFBWTtJQUNaLElBQUksV0FBV0QsU0FBUyxTQUFTQSxPQUFPO1FBQ3RDLE9BQU9DLFNBQVNEO0lBQ2xCO0lBRUEsU0FBUztJQUNULElBQUksVUFBVUEsU0FBUyxZQUFZQSxPQUFPO1FBQ3hDLE9BQU9FLE1BQU1GO0lBQ2Y7SUFFQSxJQUFJO0lBQ0osT0FBTztBQUNUO0FBRUE7OztDQUdDLEdBQ0QsU0FBU0UsTUFBTUEsS0FBSztJQUNsQixPQUFPQyxNQUFNRCxTQUFTQSxNQUFNRSxJQUFJLElBQUksTUFBTUQsTUFBTUQsU0FBU0EsTUFBTUcsTUFBTTtBQUN2RTtBQUVBOzs7Q0FHQyxHQUNELFNBQVNKLFNBQVNLLEdBQUc7SUFDbkIsT0FBT0osTUFBTUksT0FBT0EsSUFBSUMsS0FBSyxJQUFJLE1BQU1MLE1BQU1JLE9BQU9BLElBQUlFLEdBQUc7QUFDN0Q7QUFFQTs7O0NBR0MsR0FDRCxTQUFTTCxNQUFNSCxLQUFLO0lBQ2xCLE9BQU9BLFNBQVMsT0FBT0EsVUFBVSxXQUFXQSxRQUFRO0FBQ3REIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmlzdC11dGlsLXN0cmluZ2lmeS1wb3NpdGlvbkA0LjAuMC9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC1zdHJpbmdpZnktcG9zaXRpb24vbGliL2luZGV4LmpzP2M2MDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUG9pbnR9IFBvaW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLlBvc2l0aW9ufSBQb3NpdGlvblxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgTm9kZUxpa2VcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlXG4gKiBAcHJvcGVydHkge1Bvc2l0aW9uTGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IFtwb3NpdGlvbl1cbiAqXG4gKiBAdHlwZWRlZiBQb2ludExpa2VcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2xpbmVdXG4gKiBAcHJvcGVydHkge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IFtjb2x1bW5dXG4gKiBAcHJvcGVydHkge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IFtvZmZzZXRdXG4gKlxuICogQHR5cGVkZWYgUG9zaXRpb25MaWtlXG4gKiBAcHJvcGVydHkge1BvaW50TGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IFtzdGFydF1cbiAqIEBwcm9wZXJ0eSB7UG9pbnRMaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2VuZF1cbiAqL1xuXG4vKipcbiAqIFNlcmlhbGl6ZSB0aGUgcG9zaXRpb25hbCBpbmZvIG9mIGEgcG9pbnQsIHBvc2l0aW9uIChzdGFydCBhbmQgZW5kIHBvaW50cyksXG4gKiBvciBub2RlLlxuICpcbiAqIEBwYXJhbSB7Tm9kZSB8IE5vZGVMaWtlIHwgUG9pbnQgfCBQb2ludExpa2UgfCBQb3NpdGlvbiB8IFBvc2l0aW9uTGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IFt2YWx1ZV1cbiAqICAgTm9kZSwgcG9zaXRpb24sIG9yIHBvaW50LlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgUHJldHR5IHByaW50ZWQgcG9zaXRpb25hbCBpbmZvIG9mIGEgbm9kZSAoYHN0cmluZ2ApLlxuICpcbiAqICAgSW4gdGhlIGZvcm1hdCBvZiBhIHJhbmdlIGBsczpjcy1sZTpjZWAgKHdoZW4gZ2l2ZW4gYG5vZGVgIG9yIGBwb3NpdGlvbmApXG4gKiAgIG9yIGEgcG9pbnQgYGw6Y2AgKHdoZW4gZ2l2ZW4gYHBvaW50YCksIHdoZXJlIGBsYCBzdGFuZHMgZm9yIGxpbmUsIGBjYCBmb3JcbiAqICAgY29sdW1uLCBgc2AgZm9yIGBzdGFydGAsIGFuZCBgZWAgZm9yIGVuZC5cbiAqICAgQW4gZW1wdHkgc3RyaW5nIChgJydgKSBpcyByZXR1cm5lZCBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgbmVpdGhlciBgbm9kZWAsXG4gKiAgIGBwb3NpdGlvbmAsIG5vciBgcG9pbnRgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5UG9zaXRpb24odmFsdWUpIHtcbiAgLy8gTm90aGluZy5cbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBOb2RlLlxuICBpZiAoJ3Bvc2l0aW9uJyBpbiB2YWx1ZSB8fCAndHlwZScgaW4gdmFsdWUpIHtcbiAgICByZXR1cm4gcG9zaXRpb24odmFsdWUucG9zaXRpb24pXG4gIH1cblxuICAvLyBQb3NpdGlvbi5cbiAgaWYgKCdzdGFydCcgaW4gdmFsdWUgfHwgJ2VuZCcgaW4gdmFsdWUpIHtcbiAgICByZXR1cm4gcG9zaXRpb24odmFsdWUpXG4gIH1cblxuICAvLyBQb2ludC5cbiAgaWYgKCdsaW5lJyBpbiB2YWx1ZSB8fCAnY29sdW1uJyBpbiB2YWx1ZSkge1xuICAgIHJldHVybiBwb2ludCh2YWx1ZSlcbiAgfVxuXG4gIC8vID9cbiAgcmV0dXJuICcnXG59XG5cbi8qKlxuICogQHBhcmFtIHtQb2ludCB8IFBvaW50TGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IHBvaW50XG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBwb2ludChwb2ludCkge1xuICByZXR1cm4gaW5kZXgocG9pbnQgJiYgcG9pbnQubGluZSkgKyAnOicgKyBpbmRleChwb2ludCAmJiBwb2ludC5jb2x1bW4pXG59XG5cbi8qKlxuICogQHBhcmFtIHtQb3NpdGlvbiB8IFBvc2l0aW9uTGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IHBvc1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gcG9zaXRpb24ocG9zKSB7XG4gIHJldHVybiBwb2ludChwb3MgJiYgcG9zLnN0YXJ0KSArICctJyArIHBvaW50KHBvcyAmJiBwb3MuZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGluZGV4KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gdmFsdWUgOiAxXG59XG4iXSwibmFtZXMiOlsic3RyaW5naWZ5UG9zaXRpb24iLCJ2YWx1ZSIsInBvc2l0aW9uIiwicG9pbnQiLCJpbmRleCIsImxpbmUiLCJjb2x1bW4iLCJwb3MiLCJzdGFydCIsImVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/color.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/color.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   color: function() { return /* binding */ color; }\n/* harmony export */ });\n/**\n * @param {string} d\n * @returns {string}\n */ function color(d) {\n    return d;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmlzdC11dGlsLXZpc2l0LXBhcmVudHNANi4wLjEvbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cy9saWIvY29sb3IuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Q0FHQyxHQUNNLFNBQVNBLE1BQU1DLENBQUM7SUFDckIsT0FBT0E7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzQDYuMC4xL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXZpc2l0LXBhcmVudHMvbGliL2NvbG9yLmpzP2E0N2UiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbG9yKGQpIHtcbiAgcmV0dXJuIGRcbn1cbiJdLCJuYW1lcyI6WyJjb2xvciIsImQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/color.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/index.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/index.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONTINUE: function() { return /* binding */ CONTINUE; },\n/* harmony export */   EXIT: function() { return /* binding */ EXIT; },\n/* harmony export */   SKIP: function() { return /* binding */ SKIP; },\n/* harmony export */   visitParents: function() { return /* binding */ visitParents; }\n/* harmony export */ });\n/* harmony import */ var unist_util_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-is */ \"(app-pages-browser)/./node_modules/.pnpm/unist-util-is@6.0.0/node_modules/unist-util-is/lib/index.js\");\n/* harmony import */ var unist_util_visit_parents_do_not_use_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unist-util-visit-parents/do-not-use-color */ \"(app-pages-browser)/./node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/color.js\");\n/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */ /**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */ /**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */ /**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */ /**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */ /**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */ /**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */ /**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */ /**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */ /**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */ /**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */ /**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */ /**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */ /**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */ /**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */ \n\n/** @type {Readonly<ActionTuple>} */ const empty = [];\n/**\n * Continue traversing as normal.\n */ const CONTINUE = true;\n/**\n * Stop traversing immediately.\n */ const EXIT = false;\n/**\n * Do not traverse this node’s children.\n */ const SKIP = \"skip\";\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */ function visitParents(tree, test, visitor, reverse) {\n    /** @type {Test} */ let check;\n    if (typeof test === \"function\" && typeof visitor !== \"function\") {\n        reverse = visitor;\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test;\n    } else {\n        // @ts-expect-error visitor given, so `test` isn’t a visitor.\n        check = test;\n    }\n    const is = (0,unist_util_is__WEBPACK_IMPORTED_MODULE_0__.convert)(check);\n    const step = reverse ? -1 : 1;\n    factory(tree, undefined, [])();\n    /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */ function factory(node, index, parents) {\n        const value = /** @type {Record<string, unknown>} */ node && typeof node === \"object\" ? node : {};\n        if (typeof value.type === \"string\") {\n            const name = // `hast`\n            typeof value.tagName === \"string\" ? value.tagName : typeof value.name === \"string\" ? value.name : undefined;\n            Object.defineProperty(visit, \"name\", {\n                value: \"node (\" + (0,unist_util_visit_parents_do_not_use_color__WEBPACK_IMPORTED_MODULE_1__.color)(node.type + (name ? \"<\" + name + \">\" : \"\")) + \")\"\n            });\n        }\n        return visit;\n        function visit() {\n            /** @type {Readonly<ActionTuple>} */ let result = empty;\n            /** @type {Readonly<ActionTuple>} */ let subresult;\n            /** @type {number} */ let offset;\n            /** @type {Array<UnistParent>} */ let grandparents;\n            if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n                // @ts-expect-error: `visitor` is now a visitor.\n                result = toResult(visitor(node, parents));\n                if (result[0] === EXIT) {\n                    return result;\n                }\n            }\n            if (\"children\" in node && node.children) {\n                const nodeAsParent = /** @type {UnistParent} */ node;\n                if (nodeAsParent.children && result[0] !== SKIP) {\n                    offset = (reverse ? nodeAsParent.children.length : -1) + step;\n                    grandparents = parents.concat(nodeAsParent);\n                    while(offset > -1 && offset < nodeAsParent.children.length){\n                        const child = nodeAsParent.children[offset];\n                        subresult = factory(child, offset, grandparents)();\n                        if (subresult[0] === EXIT) {\n                            return subresult;\n                        }\n                        offset = typeof subresult[1] === \"number\" ? subresult[1] : offset + step;\n                    }\n                }\n            }\n            return result;\n        }\n    }\n}\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */ function toResult(value) {\n    if (Array.isArray(value)) {\n        return value;\n    }\n    if (typeof value === \"number\") {\n        return [\n            CONTINUE,\n            value\n        ];\n    }\n    return value === null || value === undefined ? empty : [\n        value\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONTINUE: function() { return /* reexport safe */ unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_0__.CONTINUE; },\n/* harmony export */   EXIT: function() { return /* reexport safe */ unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_0__.EXIT; },\n/* harmony export */   SKIP: function() { return /* reexport safe */ unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_0__.SKIP; },\n/* harmony export */   visit: function() { return /* binding */ visit; }\n/* harmony export */ });\n/* harmony import */ var unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit-parents */ \"(app-pages-browser)/./node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/index.js\");\n/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */ /**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */ // To do: use types from `unist-util-visit-parents` when it’s released.\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */ /**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */ /**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */ /**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */ /**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */ /**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */ /**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */ /**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */ /**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */ /**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */ /**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */ /**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */ /**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */ \n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */ function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n    /** @type {boolean | null | undefined} */ let reverse;\n    /** @type {Test} */ let test;\n    /** @type {Visitor} */ let visitor;\n    if (typeof testOrVisitor === \"function\" && typeof visitorOrReverse !== \"function\") {\n        test = undefined;\n        visitor = testOrVisitor;\n        reverse = visitorOrReverse;\n    } else {\n        // @ts-expect-error: assume the overload with test was given.\n        test = testOrVisitor;\n        // @ts-expect-error: assume the overload with test was given.\n        visitor = visitorOrReverse;\n        reverse = maybeReverse;\n    }\n    (0,unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_0__.visitParents)(tree, test, overload, reverse);\n    /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */ function overload(node, parents) {\n        const parent = parents[parents.length - 1];\n        const index = parent ? parent.children.indexOf(node) : undefined;\n        return visitor(node, index, parent);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VFileMessage: function() { return /* binding */ VFileMessage; }\n/* harmony export */ });\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-stringify-position */ \"(app-pages-browser)/./node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js\");\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */ /**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */ \n/**\n * Message.\n */ class VFileMessage extends Error {\n    /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */ // eslint-disable-next-line complexity\n    constructor(causeOrReason, optionsOrParentOrPlace, origin){\n        super();\n        if (typeof optionsOrParentOrPlace === \"string\") {\n            origin = optionsOrParentOrPlace;\n            optionsOrParentOrPlace = undefined;\n        }\n        /** @type {string} */ let reason = \"\";\n        /** @type {Options} */ let options = {};\n        let legacyCause = false;\n        if (optionsOrParentOrPlace) {\n            // Point.\n            if (\"line\" in optionsOrParentOrPlace && \"column\" in optionsOrParentOrPlace) {\n                options = {\n                    place: optionsOrParentOrPlace\n                };\n            } else if (\"start\" in optionsOrParentOrPlace && \"end\" in optionsOrParentOrPlace) {\n                options = {\n                    place: optionsOrParentOrPlace\n                };\n            } else if (\"type\" in optionsOrParentOrPlace) {\n                options = {\n                    ancestors: [\n                        optionsOrParentOrPlace\n                    ],\n                    place: optionsOrParentOrPlace.position\n                };\n            } else {\n                options = {\n                    ...optionsOrParentOrPlace\n                };\n            }\n        }\n        if (typeof causeOrReason === \"string\") {\n            reason = causeOrReason;\n        } else if (!options.cause && causeOrReason) {\n            legacyCause = true;\n            reason = causeOrReason.message;\n            options.cause = causeOrReason;\n        }\n        if (!options.ruleId && !options.source && typeof origin === \"string\") {\n            const index = origin.indexOf(\":\");\n            if (index === -1) {\n                options.ruleId = origin;\n            } else {\n                options.source = origin.slice(0, index);\n                options.ruleId = origin.slice(index + 1);\n            }\n        }\n        if (!options.place && options.ancestors && options.ancestors) {\n            const parent = options.ancestors[options.ancestors.length - 1];\n            if (parent) {\n                options.place = parent.position;\n            }\n        }\n        const start = options.place && \"start\" in options.place ? options.place.start : options.place;\n        /* eslint-disable no-unused-expressions */ /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */ this.ancestors = options.ancestors || undefined;\n        /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */ this.cause = options.cause || undefined;\n        /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */ this.column = start ? start.column : undefined;\n        /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */ this.fatal = undefined;\n        /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */ this.file;\n        // Field from `Error`.\n        /**\n     * Reason for message.\n     *\n     * @type {string}\n     */ this.message = reason;\n        /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */ this.line = start ? start.line : undefined;\n        // Field from `Error`.\n        /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */ this.name = (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_0__.stringifyPosition)(options.place) || \"1:1\";\n        /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */ this.place = options.place || undefined;\n        /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */ this.reason = this.message;\n        /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */ this.ruleId = options.ruleId || undefined;\n        /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */ this.source = options.source || undefined;\n        // Field from `Error`.\n        /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */ this.stack = legacyCause && options.cause && typeof options.cause.stack === \"string\" ? options.cause.stack : \"\";\n        // The following fields are “well known”.\n        // Not standard.\n        // Feel free to add other non-standard fields to your messages.\n        /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */ this.actual;\n        /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */ this.expected;\n        /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */ this.note;\n        /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */ this.url;\n    /* eslint-enable no-unused-expressions */ }\n}\nVFileMessage.prototype.file = \"\";\nVFileMessage.prototype.name = \"\";\nVFileMessage.prototype.reason = \"\";\nVFileMessage.prototype.message = \"\";\nVFileMessage.prototype.stack = \"\";\nVFileMessage.prototype.column = undefined;\nVFileMessage.prototype.line = undefined;\nVFileMessage.prototype.ancestors = undefined;\nVFileMessage.prototype.cause = undefined;\nVFileMessage.prototype.fatal = undefined;\nVFileMessage.prototype.place = undefined;\nVFileMessage.prototype.ruleId = undefined;\nVFileMessage.prototype.source = undefined;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VFile: function() { return /* binding */ VFile; }\n/* harmony export */ });\n/* harmony import */ var vfile_message__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vfile-message */ \"(app-pages-browser)/./node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.js\");\n/* harmony import */ var _minpath__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! #minpath */ \"(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minpath.browser.js\");\n/* harmony import */ var _minproc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! #minproc */ \"(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minproc.browser.js\");\n/* harmony import */ var _minurl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! #minurl */ \"(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minurl.shared.js\");\n/* harmony import */ var _minurl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! #minurl */ \"(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minurl.browser.js\");\n/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */ /**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */ \n\n\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */ const order = /** @type {const} */ [\n    \"history\",\n    \"path\",\n    \"basename\",\n    \"stem\",\n    \"extname\",\n    \"dirname\"\n];\nclass VFile {\n    /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */ get basename() {\n        return typeof this.path === \"string\" ? _minpath__WEBPACK_IMPORTED_MODULE_0__.minpath.basename(this.path) : undefined;\n    }\n    /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */ set basename(basename) {\n        assertNonEmpty(basename, \"basename\");\n        assertPart(basename, \"basename\");\n        this.path = _minpath__WEBPACK_IMPORTED_MODULE_0__.minpath.join(this.dirname || \"\", basename);\n    }\n    /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */ get dirname() {\n        return typeof this.path === \"string\" ? _minpath__WEBPACK_IMPORTED_MODULE_0__.minpath.dirname(this.path) : undefined;\n    }\n    /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */ set dirname(dirname) {\n        assertPath(this.basename, \"dirname\");\n        this.path = _minpath__WEBPACK_IMPORTED_MODULE_0__.minpath.join(dirname || \"\", this.basename);\n    }\n    /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */ get extname() {\n        return typeof this.path === \"string\" ? _minpath__WEBPACK_IMPORTED_MODULE_0__.minpath.extname(this.path) : undefined;\n    }\n    /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */ set extname(extname) {\n        assertPart(extname, \"extname\");\n        assertPath(this.dirname, \"extname\");\n        if (extname) {\n            if (extname.codePointAt(0) !== 46 /* `.` */ ) {\n                throw new Error(\"`extname` must start with `.`\");\n            }\n            if (extname.includes(\".\", 1)) {\n                throw new Error(\"`extname` cannot contain multiple dots\");\n            }\n        }\n        this.path = _minpath__WEBPACK_IMPORTED_MODULE_0__.minpath.join(this.dirname, this.stem + (extname || \"\"));\n    }\n    /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */ get path() {\n        return this.history[this.history.length - 1];\n    }\n    /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */ set path(path) {\n        if ((0,_minurl__WEBPACK_IMPORTED_MODULE_1__.isUrl)(path)) {\n            path = (0,_minurl__WEBPACK_IMPORTED_MODULE_2__.urlToPath)(path);\n        }\n        assertNonEmpty(path, \"path\");\n        if (this.path !== path) {\n            this.history.push(path);\n        }\n    }\n    /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */ get stem() {\n        return typeof this.path === \"string\" ? _minpath__WEBPACK_IMPORTED_MODULE_0__.minpath.basename(this.path, this.extname) : undefined;\n    }\n    /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */ set stem(stem) {\n        assertNonEmpty(stem, \"stem\");\n        assertPart(stem, \"stem\");\n        this.path = _minpath__WEBPACK_IMPORTED_MODULE_0__.minpath.join(this.dirname || \"\", stem + (this.extname || \"\"));\n    }\n    // Normal prototypal methods.\n    /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */ fail(causeOrReason, optionsOrParentOrPlace, origin) {\n        // @ts-expect-error: the overloads are fine.\n        const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);\n        message.fatal = true;\n        throw message;\n    }\n    /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */ info(causeOrReason, optionsOrParentOrPlace, origin) {\n        // @ts-expect-error: the overloads are fine.\n        const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);\n        message.fatal = undefined;\n        return message;\n    }\n    /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */ message(causeOrReason, optionsOrParentOrPlace, origin) {\n        const message = new vfile_message__WEBPACK_IMPORTED_MODULE_3__.VFileMessage(// @ts-expect-error: the overloads are fine.\n        causeOrReason, optionsOrParentOrPlace, origin);\n        if (this.path) {\n            message.name = this.path + \":\" + message.name;\n            message.file = this.path;\n        }\n        message.fatal = false;\n        this.messages.push(message);\n        return message;\n    }\n    /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */ toString(encoding) {\n        if (this.value === undefined) {\n            return \"\";\n        }\n        if (typeof this.value === \"string\") {\n            return this.value;\n        }\n        const decoder = new TextDecoder(encoding || undefined);\n        return decoder.decode(this.value);\n    }\n    /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */ constructor(value){\n        /** @type {Options | VFile} */ let options;\n        if (!value) {\n            options = {};\n        } else if ((0,_minurl__WEBPACK_IMPORTED_MODULE_1__.isUrl)(value)) {\n            options = {\n                path: value\n            };\n        } else if (typeof value === \"string\" || isUint8Array(value)) {\n            options = {\n                value\n            };\n        } else {\n            options = value;\n        }\n        /* eslint-disable no-unused-expressions */ /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */ // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n        // the empty string will be overridden in the next block.\n        this.cwd = \"cwd\" in options ? \"\" : _minproc__WEBPACK_IMPORTED_MODULE_4__.minproc.cwd();\n        /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */ this.data = {};\n        /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */ this.history = [];\n        /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */ this.messages = [];\n        /**\n     * Raw value.\n     *\n     * @type {Value}\n     */ this.value;\n        // The below are non-standard, they are “well-known”.\n        // As in, used in several tools.\n        /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */ this.map;\n        /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */ this.result;\n        /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */ this.stored;\n        /* eslint-enable no-unused-expressions */ // Set path related properties in the correct order.\n        let index = -1;\n        while(++index < order.length){\n            const field = order[index];\n            // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n            // `vfile`s too.\n            if (field in options && options[field] !== undefined && options[field] !== null) {\n                // @ts-expect-error: TS doesn’t understand basic reality.\n                this[field] = field === \"history\" ? [\n                    ...options[field]\n                ] : options[field];\n            }\n        }\n        /** @type {string} */ let field;\n        // Set non-path related properties.\n        for(field in options){\n            // @ts-expect-error: fine to set other things.\n            if (!order.includes(field)) {\n                // @ts-expect-error: fine to set other things.\n                this[field] = options[field];\n            }\n        }\n    }\n}\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */ function assertPart(part, name) {\n    if (part && part.includes(_minpath__WEBPACK_IMPORTED_MODULE_0__.minpath.sep)) {\n        throw new Error(\"`\" + name + \"` cannot be a path: did not expect `\" + _minpath__WEBPACK_IMPORTED_MODULE_0__.minpath.sep + \"`\");\n    }\n}\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */ function assertNonEmpty(part, name) {\n    if (!part) {\n        throw new Error(\"`\" + name + \"` cannot be empty\");\n    }\n}\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */ function assertPath(path, name) {\n    if (!path) {\n        throw new Error(\"Setting `\" + name + \"` requires `path` to be set too\");\n    }\n}\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */ function isUint8Array(value) {\n    return Boolean(value && typeof value === \"object\" && \"byteLength\" in value && \"byteOffset\" in value);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS92ZmlsZUA2LjAuMy9ub2RlX21vZHVsZXMvdmZpbGUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7O0NBSUMsR0FFRDs7Q0FFQyxHQUV5QztBQUNWO0FBQ0E7QUFDUTtBQUV4Qzs7OztDQUlDLEdBQ0QsTUFBTUssUUFBUSxrQkFBa0IsR0FBSTtJQUNsQztJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUVNLE1BQU1DO0lBZ0pYOzs7OztHQUtDLEdBQ0QsSUFBSUMsV0FBVztRQUNiLE9BQU8sT0FBTyxJQUFJLENBQUNDLElBQUksS0FBSyxXQUN4QlAsNkNBQU9BLENBQUNNLFFBQVEsQ0FBQyxJQUFJLENBQUNDLElBQUksSUFDMUJDO0lBQ047SUFFQTs7Ozs7Ozs7Ozs7R0FXQyxHQUNELElBQUlGLFNBQVNBLFFBQVEsRUFBRTtRQUNyQkcsZUFBZUgsVUFBVTtRQUN6QkksV0FBV0osVUFBVTtRQUNyQixJQUFJLENBQUNDLElBQUksR0FBR1AsNkNBQU9BLENBQUNXLElBQUksQ0FBQyxJQUFJLENBQUNDLE9BQU8sSUFBSSxJQUFJTjtJQUMvQztJQUVBOzs7OztHQUtDLEdBQ0QsSUFBSU0sVUFBVTtRQUNaLE9BQU8sT0FBTyxJQUFJLENBQUNMLElBQUksS0FBSyxXQUN4QlAsNkNBQU9BLENBQUNZLE9BQU8sQ0FBQyxJQUFJLENBQUNMLElBQUksSUFDekJDO0lBQ047SUFFQTs7Ozs7Ozs7O0dBU0MsR0FDRCxJQUFJSSxRQUFRQSxPQUFPLEVBQUU7UUFDbkJDLFdBQVcsSUFBSSxDQUFDUCxRQUFRLEVBQUU7UUFDMUIsSUFBSSxDQUFDQyxJQUFJLEdBQUdQLDZDQUFPQSxDQUFDVyxJQUFJLENBQUNDLFdBQVcsSUFBSSxJQUFJLENBQUNOLFFBQVE7SUFDdkQ7SUFFQTs7Ozs7R0FLQyxHQUNELElBQUlRLFVBQVU7UUFDWixPQUFPLE9BQU8sSUFBSSxDQUFDUCxJQUFJLEtBQUssV0FDeEJQLDZDQUFPQSxDQUFDYyxPQUFPLENBQUMsSUFBSSxDQUFDUCxJQUFJLElBQ3pCQztJQUNOO0lBRUE7Ozs7Ozs7Ozs7O0dBV0MsR0FDRCxJQUFJTSxRQUFRQSxPQUFPLEVBQUU7UUFDbkJKLFdBQVdJLFNBQVM7UUFDcEJELFdBQVcsSUFBSSxDQUFDRCxPQUFPLEVBQUU7UUFFekIsSUFBSUUsU0FBUztZQUNYLElBQUlBLFFBQVFDLFdBQVcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxLQUFJO2dCQUMzQyxNQUFNLElBQUlDLE1BQU07WUFDbEI7WUFFQSxJQUFJRixRQUFRRyxRQUFRLENBQUMsS0FBSyxJQUFJO2dCQUM1QixNQUFNLElBQUlELE1BQU07WUFDbEI7UUFDRjtRQUVBLElBQUksQ0FBQ1QsSUFBSSxHQUFHUCw2Q0FBT0EsQ0FBQ1csSUFBSSxDQUFDLElBQUksQ0FBQ0MsT0FBTyxFQUFFLElBQUksQ0FBQ00sSUFBSSxHQUFJSixDQUFBQSxXQUFXLEVBQUM7SUFDbEU7SUFFQTs7Ozs7R0FLQyxHQUNELElBQUlQLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQ1ksT0FBTyxDQUFDLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLEdBQUcsRUFBRTtJQUM5QztJQUVBOzs7Ozs7Ozs7OztHQVdDLEdBQ0QsSUFBSWIsS0FBS0EsSUFBSSxFQUFFO1FBQ2IsSUFBSUosOENBQUtBLENBQUNJLE9BQU87WUFDZkEsT0FBT0wsa0RBQVNBLENBQUNLO1FBQ25CO1FBRUFFLGVBQWVGLE1BQU07UUFFckIsSUFBSSxJQUFJLENBQUNBLElBQUksS0FBS0EsTUFBTTtZQUN0QixJQUFJLENBQUNZLE9BQU8sQ0FBQ0UsSUFBSSxDQUFDZDtRQUNwQjtJQUNGO0lBRUE7Ozs7O0dBS0MsR0FDRCxJQUFJVyxPQUFPO1FBQ1QsT0FBTyxPQUFPLElBQUksQ0FBQ1gsSUFBSSxLQUFLLFdBQ3hCUCw2Q0FBT0EsQ0FBQ00sUUFBUSxDQUFDLElBQUksQ0FBQ0MsSUFBSSxFQUFFLElBQUksQ0FBQ08sT0FBTyxJQUN4Q047SUFDTjtJQUVBOzs7Ozs7Ozs7OztHQVdDLEdBQ0QsSUFBSVUsS0FBS0EsSUFBSSxFQUFFO1FBQ2JULGVBQWVTLE1BQU07UUFDckJSLFdBQVdRLE1BQU07UUFDakIsSUFBSSxDQUFDWCxJQUFJLEdBQUdQLDZDQUFPQSxDQUFDVyxJQUFJLENBQUMsSUFBSSxDQUFDQyxPQUFPLElBQUksSUFBSU0sT0FBUSxLQUFJLENBQUNKLE9BQU8sSUFBSSxFQUFDO0lBQ3hFO0lBRUEsNkJBQTZCO0lBQzdCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTJEQyxHQUNEUSxLQUFLQyxhQUFhLEVBQUVDLHNCQUFzQixFQUFFQyxNQUFNLEVBQUU7UUFDbEQsNENBQTRDO1FBQzVDLE1BQU1DLFVBQVUsSUFBSSxDQUFDQSxPQUFPLENBQUNILGVBQWVDLHdCQUF3QkM7UUFFcEVDLFFBQVFDLEtBQUssR0FBRztRQUVoQixNQUFNRDtJQUNSO0lBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXlEQyxHQUNERSxLQUFLTCxhQUFhLEVBQUVDLHNCQUFzQixFQUFFQyxNQUFNLEVBQUU7UUFDbEQsNENBQTRDO1FBQzVDLE1BQU1DLFVBQVUsSUFBSSxDQUFDQSxPQUFPLENBQUNILGVBQWVDLHdCQUF3QkM7UUFFcEVDLFFBQVFDLEtBQUssR0FBR25CO1FBRWhCLE9BQU9rQjtJQUNUO0lBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXlEQyxHQUNEQSxRQUFRSCxhQUFhLEVBQUVDLHNCQUFzQixFQUFFQyxNQUFNLEVBQUU7UUFDckQsTUFBTUMsVUFBVSxJQUFJM0IsdURBQVlBLENBQzlCLDRDQUE0QztRQUM1Q3dCLGVBQ0FDLHdCQUNBQztRQUdGLElBQUksSUFBSSxDQUFDbEIsSUFBSSxFQUFFO1lBQ2JtQixRQUFRRyxJQUFJLEdBQUcsSUFBSSxDQUFDdEIsSUFBSSxHQUFHLE1BQU1tQixRQUFRRyxJQUFJO1lBQzdDSCxRQUFRSSxJQUFJLEdBQUcsSUFBSSxDQUFDdkIsSUFBSTtRQUMxQjtRQUVBbUIsUUFBUUMsS0FBSyxHQUFHO1FBRWhCLElBQUksQ0FBQ0ksUUFBUSxDQUFDVixJQUFJLENBQUNLO1FBRW5CLE9BQU9BO0lBQ1Q7SUFFQTs7Ozs7Ozs7Ozs7O0dBWUMsR0FDRE0sU0FBU0MsUUFBUSxFQUFFO1FBQ2pCLElBQUksSUFBSSxDQUFDQyxLQUFLLEtBQUsxQixXQUFXO1lBQzVCLE9BQU87UUFDVDtRQUVBLElBQUksT0FBTyxJQUFJLENBQUMwQixLQUFLLEtBQUssVUFBVTtZQUNsQyxPQUFPLElBQUksQ0FBQ0EsS0FBSztRQUNuQjtRQUVBLE1BQU1DLFVBQVUsSUFBSUMsWUFBWUgsWUFBWXpCO1FBQzVDLE9BQU8yQixRQUFRRSxNQUFNLENBQUMsSUFBSSxDQUFDSCxLQUFLO0lBQ2xDO0lBaGlCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBcUJDLEdBQ0RJLFlBQVlKLEtBQUssQ0FBRTtRQUNqQiw0QkFBNEIsR0FDNUIsSUFBSUs7UUFFSixJQUFJLENBQUNMLE9BQU87WUFDVkssVUFBVSxDQUFDO1FBQ2IsT0FBTyxJQUFJcEMsOENBQUtBLENBQUMrQixRQUFRO1lBQ3ZCSyxVQUFVO2dCQUFDaEMsTUFBTTJCO1lBQUs7UUFDeEIsT0FBTyxJQUFJLE9BQU9BLFVBQVUsWUFBWU0sYUFBYU4sUUFBUTtZQUMzREssVUFBVTtnQkFBQ0w7WUFBSztRQUNsQixPQUFPO1lBQ0xLLFVBQVVMO1FBQ1o7UUFFQSx3Q0FBd0MsR0FFeEM7Ozs7S0FJQyxHQUNELHVFQUF1RTtRQUN2RSx5REFBeUQ7UUFDekQsSUFBSSxDQUFDTyxHQUFHLEdBQUcsU0FBU0YsVUFBVSxLQUFLdEMsNkNBQU9BLENBQUN3QyxHQUFHO1FBRTlDOzs7Ozs7O0tBT0MsR0FDRCxJQUFJLENBQUNDLElBQUksR0FBRyxDQUFDO1FBRWI7Ozs7OztLQU1DLEdBQ0QsSUFBSSxDQUFDdkIsT0FBTyxHQUFHLEVBQUU7UUFFakI7Ozs7S0FJQyxHQUNELElBQUksQ0FBQ1ksUUFBUSxHQUFHLEVBQUU7UUFFbEI7Ozs7S0FJQyxHQUNELElBQUksQ0FBQ0csS0FBSztRQUVWLHFEQUFxRDtRQUNyRCxnQ0FBZ0M7UUFDaEM7Ozs7Ozs7S0FPQyxHQUNELElBQUksQ0FBQ1MsR0FBRztRQUVSOzs7Ozs7O0tBT0MsR0FDRCxJQUFJLENBQUNDLE1BQU07UUFFWDs7Ozs7O0tBTUMsR0FDRCxJQUFJLENBQUNDLE1BQU07UUFDWCx1Q0FBdUMsR0FFdkMsb0RBQW9EO1FBQ3BELElBQUlDLFFBQVEsQ0FBQztRQUViLE1BQU8sRUFBRUEsUUFBUTFDLE1BQU1nQixNQUFNLENBQUU7WUFDN0IsTUFBTTJCLFFBQVEzQyxLQUFLLENBQUMwQyxNQUFNO1lBRTFCLHVFQUF1RTtZQUN2RSxnQkFBZ0I7WUFDaEIsSUFDRUMsU0FBU1IsV0FDVEEsT0FBTyxDQUFDUSxNQUFNLEtBQUt2QyxhQUNuQitCLE9BQU8sQ0FBQ1EsTUFBTSxLQUFLLE1BQ25CO2dCQUNBLHlEQUF5RDtnQkFDekQsSUFBSSxDQUFDQSxNQUFNLEdBQUdBLFVBQVUsWUFBWTt1QkFBSVIsT0FBTyxDQUFDUSxNQUFNO2lCQUFDLEdBQUdSLE9BQU8sQ0FBQ1EsTUFBTTtZQUMxRTtRQUNGO1FBRUEsbUJBQW1CLEdBQ25CLElBQUlBO1FBRUosbUNBQW1DO1FBQ25DLElBQUtBLFNBQVNSLFFBQVM7WUFDckIsOENBQThDO1lBQzlDLElBQUksQ0FBQ25DLE1BQU1hLFFBQVEsQ0FBQzhCLFFBQVE7Z0JBQzFCLDhDQUE4QztnQkFDOUMsSUFBSSxDQUFDQSxNQUFNLEdBQUdSLE9BQU8sQ0FBQ1EsTUFBTTtZQUM5QjtRQUNGO0lBQ0Y7QUFvWkY7QUFFQTs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTckMsV0FBV3NDLElBQUksRUFBRW5CLElBQUk7SUFDNUIsSUFBSW1CLFFBQVFBLEtBQUsvQixRQUFRLENBQUNqQiw2Q0FBT0EsQ0FBQ2lELEdBQUcsR0FBRztRQUN0QyxNQUFNLElBQUlqQyxNQUNSLE1BQU1hLE9BQU8seUNBQXlDN0IsNkNBQU9BLENBQUNpRCxHQUFHLEdBQUc7SUFFeEU7QUFDRjtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVN4QyxlQUFldUMsSUFBSSxFQUFFbkIsSUFBSTtJQUNoQyxJQUFJLENBQUNtQixNQUFNO1FBQ1QsTUFBTSxJQUFJaEMsTUFBTSxNQUFNYSxPQUFPO0lBQy9CO0FBQ0Y7QUFFQTs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTaEIsV0FBV04sSUFBSSxFQUFFc0IsSUFBSTtJQUM1QixJQUFJLENBQUN0QixNQUFNO1FBQ1QsTUFBTSxJQUFJUyxNQUFNLGNBQWNhLE9BQU87SUFDdkM7QUFDRjtBQUVBOzs7Ozs7O0NBT0MsR0FDRCxTQUFTVyxhQUFhTixLQUFLO0lBQ3pCLE9BQU9nQixRQUNMaEIsU0FDRSxPQUFPQSxVQUFVLFlBQ2pCLGdCQUFnQkEsU0FDaEIsZ0JBQWdCQTtBQUV0QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vdmZpbGVANi4wLjMvbm9kZV9tb2R1bGVzL3ZmaWxlL2xpYi9pbmRleC5qcz85OGJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7Tm9kZSwgUG9pbnQsIFBvc2l0aW9ufSBmcm9tICd1bmlzdCdcbiAqIEBpbXBvcnQge09wdGlvbnMgYXMgTWVzc2FnZU9wdGlvbnN9IGZyb20gJ3ZmaWxlLW1lc3NhZ2UnXG4gKiBAaW1wb3J0IHtDb21wYXRpYmxlLCBEYXRhLCBNYXAsIE9wdGlvbnMsIFZhbHVlfSBmcm9tICd2ZmlsZSdcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3QgJiB7dHlwZTogc3RyaW5nLCBwb3NpdGlvbj86IFBvc2l0aW9uIHwgdW5kZWZpbmVkfX0gTm9kZUxpa2VcbiAqL1xuXG5pbXBvcnQge1ZGaWxlTWVzc2FnZX0gZnJvbSAndmZpbGUtbWVzc2FnZSdcbmltcG9ydCB7bWlucGF0aH0gZnJvbSAnI21pbnBhdGgnXG5pbXBvcnQge21pbnByb2N9IGZyb20gJyNtaW5wcm9jJ1xuaW1wb3J0IHt1cmxUb1BhdGgsIGlzVXJsfSBmcm9tICcjbWludXJsJ1xuXG4vKipcbiAqIE9yZGVyIG9mIHNldHRpbmcgKGxlYXN0IHNwZWNpZmljIHRvIG1vc3QpLCB3ZSBuZWVkIHRoaXMgYmVjYXVzZSBvdGhlcndpc2VcbiAqIGB7c3RlbTogJ2EnLCBwYXRoOiAnfi9iLmpzJ31gIHdvdWxkIHRocm93LCBhcyBhIHBhdGggaXMgbmVlZGVkIGJlZm9yZSBhXG4gKiBzdGVtIGNhbiBiZSBzZXQuXG4gKi9cbmNvbnN0IG9yZGVyID0gLyoqIEB0eXBlIHtjb25zdH0gKi8gKFtcbiAgJ2hpc3RvcnknLFxuICAncGF0aCcsXG4gICdiYXNlbmFtZScsXG4gICdzdGVtJyxcbiAgJ2V4dG5hbWUnLFxuICAnZGlybmFtZSdcbl0pXG5cbmV4cG9ydCBjbGFzcyBWRmlsZSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgdmlydHVhbCBmaWxlLlxuICAgKlxuICAgKiBgb3B0aW9uc2AgaXMgdHJlYXRlZCBhczpcbiAgICpcbiAgICogKiAgIGBzdHJpbmdgIG9yIGBVaW50OEFycmF5YCDigJQgYHt2YWx1ZTogb3B0aW9uc31gXG4gICAqICogICBgVVJMYCDigJQgYHtwYXRoOiBvcHRpb25zfWBcbiAgICogKiAgIGBWRmlsZWAg4oCUIHNoYWxsb3cgY29waWVzIGl0cyBkYXRhIG92ZXIgdG8gdGhlIG5ldyBmaWxlXG4gICAqICogICBgb2JqZWN0YCDigJQgYWxsIGZpZWxkcyBhcmUgc2hhbGxvdyBjb3BpZWQgb3ZlciB0byB0aGUgbmV3IGZpbGVcbiAgICpcbiAgICogUGF0aCByZWxhdGVkIGZpZWxkcyBhcmUgc2V0IGluIHRoZSBmb2xsb3dpbmcgb3JkZXIgKGxlYXN0IHNwZWNpZmljIHRvXG4gICAqIG1vc3Qgc3BlY2lmaWMpOiBgaGlzdG9yeWAsIGBwYXRoYCwgYGJhc2VuYW1lYCwgYHN0ZW1gLCBgZXh0bmFtZWAsXG4gICAqIGBkaXJuYW1lYC5cbiAgICpcbiAgICogWW91IGNhbm5vdCBzZXQgYGRpcm5hbWVgIG9yIGBleHRuYW1lYCB3aXRob3V0IHNldHRpbmcgZWl0aGVyIGBoaXN0b3J5YCxcbiAgICogYHBhdGhgLCBgYmFzZW5hbWVgLCBvciBgc3RlbWAgdG9vLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbXBhdGlibGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbdmFsdWVdXG4gICAqICAgRmlsZSB2YWx1ZS5cbiAgICogQHJldHVybnNcbiAgICogICBOZXcgaW5zdGFuY2UuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIC8qKiBAdHlwZSB7T3B0aW9ucyB8IFZGaWxlfSAqL1xuICAgIGxldCBvcHRpb25zXG5cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICBvcHRpb25zID0ge31cbiAgICB9IGVsc2UgaWYgKGlzVXJsKHZhbHVlKSkge1xuICAgICAgb3B0aW9ucyA9IHtwYXRoOiB2YWx1ZX1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgaXNVaW50OEFycmF5KHZhbHVlKSkge1xuICAgICAgb3B0aW9ucyA9IHt2YWx1ZX1cbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IHZhbHVlXG4gICAgfVxuXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG5cbiAgICAvKipcbiAgICAgKiBCYXNlIG9mIGBwYXRoYCAoZGVmYXVsdDogYHByb2Nlc3MuY3dkKClgIG9yIGAnLydgIGluIGJyb3dzZXJzKS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgLy8gUHJldmVudCBjYWxsaW5nIGBjd2RgICh3aGljaCBjb3VsZCBiZSBleHBlbnNpdmUpIGlmIGl04oCZcyBub3QgbmVlZGVkO1xuICAgIC8vIHRoZSBlbXB0eSBzdHJpbmcgd2lsbCBiZSBvdmVycmlkZGVuIGluIHRoZSBuZXh0IGJsb2NrLlxuICAgIHRoaXMuY3dkID0gJ2N3ZCcgaW4gb3B0aW9ucyA/ICcnIDogbWlucHJvYy5jd2QoKVxuXG4gICAgLyoqXG4gICAgICogUGxhY2UgdG8gc3RvcmUgY3VzdG9tIGluZm8gKGRlZmF1bHQ6IGB7fWApLlxuICAgICAqXG4gICAgICogSXTigJlzIE9LIHRvIHN0b3JlIGN1c3RvbSBkYXRhIGRpcmVjdGx5IG9uIHRoZSBmaWxlIGJ1dCBtb3ZpbmcgaXQgdG9cbiAgICAgKiBgZGF0YWAgaXMgcmVjb21tZW5kZWQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7RGF0YX1cbiAgICAgKi9cbiAgICB0aGlzLmRhdGEgPSB7fVxuXG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBmaWxlIHBhdGhzIHRoZSBmaWxlIG1vdmVkIGJldHdlZW4uXG4gICAgICpcbiAgICAgKiBUaGUgZmlyc3QgaXMgdGhlIG9yaWdpbmFsIHBhdGggYW5kIHRoZSBsYXN0IGlzIHRoZSBjdXJyZW50IHBhdGguXG4gICAgICpcbiAgICAgKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn1cbiAgICAgKi9cbiAgICB0aGlzLmhpc3RvcnkgPSBbXVxuXG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBtZXNzYWdlcyBhc3NvY2lhdGVkIHdpdGggdGhlIGZpbGUuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7QXJyYXk8VkZpbGVNZXNzYWdlPn1cbiAgICAgKi9cbiAgICB0aGlzLm1lc3NhZ2VzID0gW11cblxuICAgIC8qKlxuICAgICAqIFJhdyB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtWYWx1ZX1cbiAgICAgKi9cbiAgICB0aGlzLnZhbHVlXG5cbiAgICAvLyBUaGUgYmVsb3cgYXJlIG5vbi1zdGFuZGFyZCwgdGhleSBhcmUg4oCcd2VsbC1rbm93buKAnS5cbiAgICAvLyBBcyBpbiwgdXNlZCBpbiBzZXZlcmFsIHRvb2xzLlxuICAgIC8qKlxuICAgICAqIFNvdXJjZSBtYXAuXG4gICAgICpcbiAgICAgKiBUaGlzIHR5cGUgaXMgZXF1aXZhbGVudCB0byB0aGUgYFJhd1NvdXJjZU1hcGAgdHlwZSBmcm9tIHRoZSBgc291cmNlLW1hcGBcbiAgICAgKiBtb2R1bGUuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TWFwIHwgbnVsbCB8IHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLm1hcFxuXG4gICAgLyoqXG4gICAgICogQ3VzdG9tLCBub24tc3RyaW5nLCBjb21waWxlZCwgcmVwcmVzZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHVzZWQgYnkgdW5pZmllZCB0byBzdG9yZSBub24tc3RyaW5nIHJlc3VsdHMuXG4gICAgICogT25lIGV4YW1wbGUgaXMgd2hlbiB0dXJuaW5nIG1hcmtkb3duIGludG8gUmVhY3Qgbm9kZXMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7dW5rbm93bn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdFxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBhIGZpbGUgd2FzIHNhdmVkIHRvIGRpc2suXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHVzZWQgYnkgdmZpbGUgcmVwb3J0ZXJzLlxuICAgICAqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zdG9yZWRcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuXG4gICAgLy8gU2V0IHBhdGggcmVsYXRlZCBwcm9wZXJ0aWVzIGluIHRoZSBjb3JyZWN0IG9yZGVyLlxuICAgIGxldCBpbmRleCA9IC0xXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG9yZGVyLmxlbmd0aCkge1xuICAgICAgY29uc3QgZmllbGQgPSBvcmRlcltpbmRleF1cblxuICAgICAgLy8gTm90ZTogd2Ugc3BlY2lmaWNhbGx5IHVzZSBgaW5gIGluc3RlYWQgb2YgYGhhc093blByb3BlcnR5YCB0byBhY2NlcHRcbiAgICAgIC8vIGB2ZmlsZWBzIHRvby5cbiAgICAgIGlmIChcbiAgICAgICAgZmllbGQgaW4gb3B0aW9ucyAmJlxuICAgICAgICBvcHRpb25zW2ZpZWxkXSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIG9wdGlvbnNbZmllbGRdICE9PSBudWxsXG4gICAgICApIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogVFMgZG9lc27igJl0IHVuZGVyc3RhbmQgYmFzaWMgcmVhbGl0eS5cbiAgICAgICAgdGhpc1tmaWVsZF0gPSBmaWVsZCA9PT0gJ2hpc3RvcnknID8gWy4uLm9wdGlvbnNbZmllbGRdXSA6IG9wdGlvbnNbZmllbGRdXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgbGV0IGZpZWxkXG5cbiAgICAvLyBTZXQgbm9uLXBhdGggcmVsYXRlZCBwcm9wZXJ0aWVzLlxuICAgIGZvciAoZmllbGQgaW4gb3B0aW9ucykge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogZmluZSB0byBzZXQgb3RoZXIgdGhpbmdzLlxuICAgICAgaWYgKCFvcmRlci5pbmNsdWRlcyhmaWVsZCkpIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogZmluZSB0byBzZXQgb3RoZXIgdGhpbmdzLlxuICAgICAgICB0aGlzW2ZpZWxkXSA9IG9wdGlvbnNbZmllbGRdXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgYmFzZW5hbWUgKGluY2x1ZGluZyBleHRuYW1lKSAoZXhhbXBsZTogYCdpbmRleC5taW4uanMnYCkuXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmcgfCB1bmRlZmluZWR9XG4gICAqICAgQmFzZW5hbWUuXG4gICAqL1xuICBnZXQgYmFzZW5hbWUoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnBhdGggPT09ICdzdHJpbmcnXG4gICAgICA/IG1pbnBhdGguYmFzZW5hbWUodGhpcy5wYXRoKVxuICAgICAgOiB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYmFzZW5hbWUgKGluY2x1ZGluZyBleHRuYW1lKSAoYCdpbmRleC5taW4uanMnYCkuXG4gICAqXG4gICAqIENhbm5vdCBjb250YWluIHBhdGggc2VwYXJhdG9ycyAoYCcvJ2Agb24gdW5peCwgbWFjT1MsIGFuZCBicm93c2VycywgYCdcXCdgXG4gICAqIG9uIHdpbmRvd3MpLlxuICAgKiBDYW5ub3QgYmUgbnVsbGlmaWVkICh1c2UgYGZpbGUucGF0aCA9IGZpbGUuZGlybmFtZWAgaW5zdGVhZCkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlbmFtZVxuICAgKiAgIEJhc2VuYW1lLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICBzZXQgYmFzZW5hbWUoYmFzZW5hbWUpIHtcbiAgICBhc3NlcnROb25FbXB0eShiYXNlbmFtZSwgJ2Jhc2VuYW1lJylcbiAgICBhc3NlcnRQYXJ0KGJhc2VuYW1lLCAnYmFzZW5hbWUnKVxuICAgIHRoaXMucGF0aCA9IG1pbnBhdGguam9pbih0aGlzLmRpcm5hbWUgfHwgJycsIGJhc2VuYW1lKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcGFyZW50IHBhdGggKGV4YW1wbGU6IGAnfidgKS5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZyB8IHVuZGVmaW5lZH1cbiAgICogICBEaXJuYW1lLlxuICAgKi9cbiAgZ2V0IGRpcm5hbWUoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnBhdGggPT09ICdzdHJpbmcnXG4gICAgICA/IG1pbnBhdGguZGlybmFtZSh0aGlzLnBhdGgpXG4gICAgICA6IHVuZGVmaW5lZFxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgcGFyZW50IHBhdGggKGV4YW1wbGU6IGAnfidgKS5cbiAgICpcbiAgICogQ2Fubm90IGJlIHNldCBpZiB0aGVyZeKAmXMgbm8gYHBhdGhgIHlldC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmcgfCB1bmRlZmluZWR9IGRpcm5hbWVcbiAgICogICBEaXJuYW1lLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICBzZXQgZGlybmFtZShkaXJuYW1lKSB7XG4gICAgYXNzZXJ0UGF0aCh0aGlzLmJhc2VuYW1lLCAnZGlybmFtZScpXG4gICAgdGhpcy5wYXRoID0gbWlucGF0aC5qb2luKGRpcm5hbWUgfHwgJycsIHRoaXMuYmFzZW5hbWUpXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBleHRuYW1lIChpbmNsdWRpbmcgZG90KSAoZXhhbXBsZTogYCcuanMnYCkuXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmcgfCB1bmRlZmluZWR9XG4gICAqICAgRXh0bmFtZS5cbiAgICovXG4gIGdldCBleHRuYW1lKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5wYXRoID09PSAnc3RyaW5nJ1xuICAgICAgPyBtaW5wYXRoLmV4dG5hbWUodGhpcy5wYXRoKVxuICAgICAgOiB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGV4dG5hbWUgKGluY2x1ZGluZyBkb3QpIChleGFtcGxlOiBgJy5qcydgKS5cbiAgICpcbiAgICogQ2Fubm90IGNvbnRhaW4gcGF0aCBzZXBhcmF0b3JzIChgJy8nYCBvbiB1bml4LCBtYWNPUywgYW5kIGJyb3dzZXJzLCBgJ1xcJ2BcbiAgICogb24gd2luZG93cykuXG4gICAqIENhbm5vdCBiZSBzZXQgaWYgdGhlcmXigJlzIG5vIGBwYXRoYCB5ZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkfSBleHRuYW1lXG4gICAqICAgRXh0bmFtZS5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICogICBOb3RoaW5nLlxuICAgKi9cbiAgc2V0IGV4dG5hbWUoZXh0bmFtZSkge1xuICAgIGFzc2VydFBhcnQoZXh0bmFtZSwgJ2V4dG5hbWUnKVxuICAgIGFzc2VydFBhdGgodGhpcy5kaXJuYW1lLCAnZXh0bmFtZScpXG5cbiAgICBpZiAoZXh0bmFtZSkge1xuICAgICAgaWYgKGV4dG5hbWUuY29kZVBvaW50QXQoMCkgIT09IDQ2IC8qIGAuYCAqLykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BleHRuYW1lYCBtdXN0IHN0YXJ0IHdpdGggYC5gJylcbiAgICAgIH1cblxuICAgICAgaWYgKGV4dG5hbWUuaW5jbHVkZXMoJy4nLCAxKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BleHRuYW1lYCBjYW5ub3QgY29udGFpbiBtdWx0aXBsZSBkb3RzJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnBhdGggPSBtaW5wYXRoLmpvaW4odGhpcy5kaXJuYW1lLCB0aGlzLnN0ZW0gKyAoZXh0bmFtZSB8fCAnJykpXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBmdWxsIHBhdGggKGV4YW1wbGU6IGAnfi9pbmRleC5taW4uanMnYCkuXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqICAgUGF0aC5cbiAgICovXG4gIGdldCBwYXRoKCkge1xuICAgIHJldHVybiB0aGlzLmhpc3RvcnlbdGhpcy5oaXN0b3J5Lmxlbmd0aCAtIDFdXG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBmdWxsIHBhdGggKGV4YW1wbGU6IGAnfi9pbmRleC5taW4uanMnYCkuXG4gICAqXG4gICAqIENhbm5vdCBiZSBudWxsaWZpZWQuXG4gICAqIFlvdSBjYW4gc2V0IGEgZmlsZSBVUkwgKGEgYFVSTGAgb2JqZWN0IHdpdGggYSBgZmlsZTpgIHByb3RvY29sKSB3aGljaCB3aWxsXG4gICAqIGJlIHR1cm5lZCBpbnRvIGEgcGF0aCB3aXRoIGB1cmwuZmlsZVVSTFRvUGF0aGAuXG4gICAqXG4gICAqIEBwYXJhbSB7VVJMIHwgc3RyaW5nfSBwYXRoXG4gICAqICAgUGF0aC5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICogICBOb3RoaW5nLlxuICAgKi9cbiAgc2V0IHBhdGgocGF0aCkge1xuICAgIGlmIChpc1VybChwYXRoKSkge1xuICAgICAgcGF0aCA9IHVybFRvUGF0aChwYXRoKVxuICAgIH1cblxuICAgIGFzc2VydE5vbkVtcHR5KHBhdGgsICdwYXRoJylcblxuICAgIGlmICh0aGlzLnBhdGggIT09IHBhdGgpIHtcbiAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKHBhdGgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgc3RlbSAoYmFzZW5hbWUgdy9vIGV4dG5hbWUpIChleGFtcGxlOiBgJ2luZGV4Lm1pbidgKS5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZyB8IHVuZGVmaW5lZH1cbiAgICogICBTdGVtLlxuICAgKi9cbiAgZ2V0IHN0ZW0oKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnBhdGggPT09ICdzdHJpbmcnXG4gICAgICA/IG1pbnBhdGguYmFzZW5hbWUodGhpcy5wYXRoLCB0aGlzLmV4dG5hbWUpXG4gICAgICA6IHVuZGVmaW5lZFxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgc3RlbSAoYmFzZW5hbWUgdy9vIGV4dG5hbWUpIChleGFtcGxlOiBgJ2luZGV4Lm1pbidgKS5cbiAgICpcbiAgICogQ2Fubm90IGNvbnRhaW4gcGF0aCBzZXBhcmF0b3JzIChgJy8nYCBvbiB1bml4LCBtYWNPUywgYW5kIGJyb3dzZXJzLCBgJ1xcJ2BcbiAgICogb24gd2luZG93cykuXG4gICAqIENhbm5vdCBiZSBudWxsaWZpZWQgKHVzZSBgZmlsZS5wYXRoID0gZmlsZS5kaXJuYW1lYCBpbnN0ZWFkKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0ZW1cbiAgICogICBTdGVtLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICBzZXQgc3RlbShzdGVtKSB7XG4gICAgYXNzZXJ0Tm9uRW1wdHkoc3RlbSwgJ3N0ZW0nKVxuICAgIGFzc2VydFBhcnQoc3RlbSwgJ3N0ZW0nKVxuICAgIHRoaXMucGF0aCA9IG1pbnBhdGguam9pbih0aGlzLmRpcm5hbWUgfHwgJycsIHN0ZW0gKyAodGhpcy5leHRuYW1lIHx8ICcnKSlcbiAgfVxuXG4gIC8vIE5vcm1hbCBwcm90b3R5cGFsIG1ldGhvZHMuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBmYXRhbCBtZXNzYWdlIGZvciBgcmVhc29uYCBhc3NvY2lhdGVkIHdpdGggdGhlIGZpbGUuXG4gICAqXG4gICAqIFRoZSBgZmF0YWxgIGZpZWxkIG9mIHRoZSBtZXNzYWdlIGlzIHNldCB0byBgdHJ1ZWAgKGVycm9yOyBmaWxlIG5vdCB1c2FibGUpXG4gICAqIGFuZCB0aGUgYGZpbGVgIGZpZWxkIGlzIHNldCB0byB0aGUgY3VycmVudCBmaWxlIHBhdGguXG4gICAqIFRoZSBtZXNzYWdlIGlzIGFkZGVkIHRvIHRoZSBgbWVzc2FnZXNgIGZpZWxkIG9uIGBmaWxlYC5cbiAgICpcbiAgICogPiDwn6qmICoqTm90ZSoqOiBhbHNvIGhhcyBvYnNvbGV0ZSBzaWduYXR1cmVzLlxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvblxuICAgKiBAcGFyYW0ge01lc3NhZ2VPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gICAqIEByZXR1cm5zIHtuZXZlcn1cbiAgICpcbiAgICogQG92ZXJsb2FkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb25cbiAgICogQHBhcmFtIHtOb2RlIHwgTm9kZUxpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiBAcmV0dXJucyB7bmV2ZXJ9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uXG4gICAqIEBwYXJhbSB7UG9pbnQgfCBQb3NpdGlvbiB8IG51bGwgfCB1bmRlZmluZWR9IHBsYWNlXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29yaWdpbl1cbiAgICogQHJldHVybnMge25ldmVyfVxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvblxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtuZXZlcn1cbiAgICpcbiAgICogQG92ZXJsb2FkXG4gICAqIEBwYXJhbSB7RXJyb3IgfCBWRmlsZU1lc3NhZ2V9IGNhdXNlXG4gICAqIEBwYXJhbSB7Tm9kZSB8IE5vZGVMaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gcGFyZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29yaWdpbl1cbiAgICogQHJldHVybnMge25ldmVyfVxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtFcnJvciB8IFZGaWxlTWVzc2FnZX0gY2F1c2VcbiAgICogQHBhcmFtIHtQb2ludCB8IFBvc2l0aW9uIHwgbnVsbCB8IHVuZGVmaW5lZH0gcGxhY2VcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiBAcmV0dXJucyB7bmV2ZXJ9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge0Vycm9yIHwgVkZpbGVNZXNzYWdlfSBjYXVzZVxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtuZXZlcn1cbiAgICpcbiAgICogQHBhcmFtIHtFcnJvciB8IFZGaWxlTWVzc2FnZSB8IHN0cmluZ30gY2F1c2VPclJlYXNvblxuICAgKiAgIFJlYXNvbiBmb3IgbWVzc2FnZSwgc2hvdWxkIHVzZSBtYXJrZG93bi5cbiAgICogQHBhcmFtIHtOb2RlIHwgTm9kZUxpa2UgfCBNZXNzYWdlT3B0aW9ucyB8IFBvaW50IHwgUG9zaXRpb24gfCBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc09yUGFyZW50T3JQbGFjZV1cbiAgICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29yaWdpbl1cbiAgICogICBQbGFjZSBpbiBjb2RlIHdoZXJlIHRoZSBtZXNzYWdlIG9yaWdpbmF0ZXMgKGV4YW1wbGU6XG4gICAqICAgYCdteS1wYWNrYWdlOm15LXJ1bGUnYCBvciBgJ215LXJ1bGUnYCkuXG4gICAqIEByZXR1cm5zIHtuZXZlcn1cbiAgICogICBOZXZlci5cbiAgICogQHRocm93cyB7VkZpbGVNZXNzYWdlfVxuICAgKiAgIE1lc3NhZ2UuXG4gICAqL1xuICBmYWlsKGNhdXNlT3JSZWFzb24sIG9wdGlvbnNPclBhcmVudE9yUGxhY2UsIG9yaWdpbikge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHRoZSBvdmVybG9hZHMgYXJlIGZpbmUuXG4gICAgY29uc3QgbWVzc2FnZSA9IHRoaXMubWVzc2FnZShjYXVzZU9yUmVhc29uLCBvcHRpb25zT3JQYXJlbnRPclBsYWNlLCBvcmlnaW4pXG5cbiAgICBtZXNzYWdlLmZhdGFsID0gdHJ1ZVxuXG4gICAgdGhyb3cgbWVzc2FnZVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbmZvIG1lc3NhZ2UgZm9yIGByZWFzb25gIGFzc29jaWF0ZWQgd2l0aCB0aGUgZmlsZS5cbiAgICpcbiAgICogVGhlIGBmYXRhbGAgZmllbGQgb2YgdGhlIG1lc3NhZ2UgaXMgc2V0IHRvIGB1bmRlZmluZWRgIChpbmZvOyBjaGFuZ2VcbiAgICogbGlrZWx5IG5vdCBuZWVkZWQpIGFuZCB0aGUgYGZpbGVgIGZpZWxkIGlzIHNldCB0byB0aGUgY3VycmVudCBmaWxlIHBhdGguXG4gICAqIFRoZSBtZXNzYWdlIGlzIGFkZGVkIHRvIHRoZSBgbWVzc2FnZXNgIGZpZWxkIG9uIGBmaWxlYC5cbiAgICpcbiAgICogPiDwn6qmICoqTm90ZSoqOiBhbHNvIGhhcyBvYnNvbGV0ZSBzaWduYXR1cmVzLlxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvblxuICAgKiBAcGFyYW0ge01lc3NhZ2VPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uXG4gICAqIEBwYXJhbSB7Tm9kZSB8IE5vZGVMaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gcGFyZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29yaWdpbl1cbiAgICogQHJldHVybnMge1ZGaWxlTWVzc2FnZX1cbiAgICpcbiAgICogQG92ZXJsb2FkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb25cbiAgICogQHBhcmFtIHtQb2ludCB8IFBvc2l0aW9uIHwgbnVsbCB8IHVuZGVmaW5lZH0gcGxhY2VcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiBAcmV0dXJucyB7VkZpbGVNZXNzYWdlfVxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvblxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge0Vycm9yIHwgVkZpbGVNZXNzYWdlfSBjYXVzZVxuICAgKiBAcGFyYW0ge05vZGUgfCBOb2RlTGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IHBhcmVudFxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge0Vycm9yIHwgVkZpbGVNZXNzYWdlfSBjYXVzZVxuICAgKiBAcGFyYW0ge1BvaW50IHwgUG9zaXRpb24gfCBudWxsIHwgdW5kZWZpbmVkfSBwbGFjZVxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge0Vycm9yIHwgVkZpbGVNZXNzYWdlfSBjYXVzZVxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBwYXJhbSB7RXJyb3IgfCBWRmlsZU1lc3NhZ2UgfCBzdHJpbmd9IGNhdXNlT3JSZWFzb25cbiAgICogICBSZWFzb24gZm9yIG1lc3NhZ2UsIHNob3VsZCB1c2UgbWFya2Rvd24uXG4gICAqIEBwYXJhbSB7Tm9kZSB8IE5vZGVMaWtlIHwgTWVzc2FnZU9wdGlvbnMgfCBQb2ludCB8IFBvc2l0aW9uIHwgc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNPclBhcmVudE9yUGxhY2VdXG4gICAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqICAgUGxhY2UgaW4gY29kZSB3aGVyZSB0aGUgbWVzc2FnZSBvcmlnaW5hdGVzIChleGFtcGxlOlxuICAgKiAgIGAnbXktcGFja2FnZTpteS1ydWxlJ2Agb3IgYCdteS1ydWxlJ2ApLlxuICAgKiBAcmV0dXJucyB7VkZpbGVNZXNzYWdlfVxuICAgKiAgIE1lc3NhZ2UuXG4gICAqL1xuICBpbmZvKGNhdXNlT3JSZWFzb24sIG9wdGlvbnNPclBhcmVudE9yUGxhY2UsIG9yaWdpbikge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHRoZSBvdmVybG9hZHMgYXJlIGZpbmUuXG4gICAgY29uc3QgbWVzc2FnZSA9IHRoaXMubWVzc2FnZShjYXVzZU9yUmVhc29uLCBvcHRpb25zT3JQYXJlbnRPclBsYWNlLCBvcmlnaW4pXG5cbiAgICBtZXNzYWdlLmZhdGFsID0gdW5kZWZpbmVkXG5cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG1lc3NhZ2UgZm9yIGByZWFzb25gIGFzc29jaWF0ZWQgd2l0aCB0aGUgZmlsZS5cbiAgICpcbiAgICogVGhlIGBmYXRhbGAgZmllbGQgb2YgdGhlIG1lc3NhZ2UgaXMgc2V0IHRvIGBmYWxzZWAgKHdhcm5pbmc7IGNoYW5nZSBtYXkgYmVcbiAgICogbmVlZGVkKSBhbmQgdGhlIGBmaWxlYCBmaWVsZCBpcyBzZXQgdG8gdGhlIGN1cnJlbnQgZmlsZSBwYXRoLlxuICAgKiBUaGUgbWVzc2FnZSBpcyBhZGRlZCB0byB0aGUgYG1lc3NhZ2VzYCBmaWVsZCBvbiBgZmlsZWAuXG4gICAqXG4gICAqID4g8J+qpiAqKk5vdGUqKjogYWxzbyBoYXMgb2Jzb2xldGUgc2lnbmF0dXJlcy5cbiAgICpcbiAgICogQG92ZXJsb2FkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb25cbiAgICogQHBhcmFtIHtNZXNzYWdlT3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICAgKiBAcmV0dXJucyB7VkZpbGVNZXNzYWdlfVxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvblxuICAgKiBAcGFyYW0ge05vZGUgfCBOb2RlTGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IHBhcmVudFxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uXG4gICAqIEBwYXJhbSB7UG9pbnQgfCBQb3NpdGlvbiB8IG51bGwgfCB1bmRlZmluZWR9IHBsYWNlXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29yaWdpbl1cbiAgICogQHJldHVybnMge1ZGaWxlTWVzc2FnZX1cbiAgICpcbiAgICogQG92ZXJsb2FkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb25cbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiBAcmV0dXJucyB7VkZpbGVNZXNzYWdlfVxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtFcnJvciB8IFZGaWxlTWVzc2FnZX0gY2F1c2VcbiAgICogQHBhcmFtIHtOb2RlIHwgTm9kZUxpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiBAcmV0dXJucyB7VkZpbGVNZXNzYWdlfVxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtFcnJvciB8IFZGaWxlTWVzc2FnZX0gY2F1c2VcbiAgICogQHBhcmFtIHtQb2ludCB8IFBvc2l0aW9uIHwgbnVsbCB8IHVuZGVmaW5lZH0gcGxhY2VcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiBAcmV0dXJucyB7VkZpbGVNZXNzYWdlfVxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtFcnJvciB8IFZGaWxlTWVzc2FnZX0gY2F1c2VcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiBAcmV0dXJucyB7VkZpbGVNZXNzYWdlfVxuICAgKlxuICAgKiBAcGFyYW0ge0Vycm9yIHwgVkZpbGVNZXNzYWdlIHwgc3RyaW5nfSBjYXVzZU9yUmVhc29uXG4gICAqICAgUmVhc29uIGZvciBtZXNzYWdlLCBzaG91bGQgdXNlIG1hcmtkb3duLlxuICAgKiBAcGFyYW0ge05vZGUgfCBOb2RlTGlrZSB8IE1lc3NhZ2VPcHRpb25zIHwgUG9pbnQgfCBQb3NpdGlvbiB8IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zT3JQYXJlbnRPclBsYWNlXVxuICAgKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiAgIFBsYWNlIGluIGNvZGUgd2hlcmUgdGhlIG1lc3NhZ2Ugb3JpZ2luYXRlcyAoZXhhbXBsZTpcbiAgICogICBgJ215LXBhY2thZ2U6bXktcnVsZSdgIG9yIGAnbXktcnVsZSdgKS5cbiAgICogQHJldHVybnMge1ZGaWxlTWVzc2FnZX1cbiAgICogICBNZXNzYWdlLlxuICAgKi9cbiAgbWVzc2FnZShjYXVzZU9yUmVhc29uLCBvcHRpb25zT3JQYXJlbnRPclBsYWNlLCBvcmlnaW4pIHtcbiAgICBjb25zdCBtZXNzYWdlID0gbmV3IFZGaWxlTWVzc2FnZShcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHRoZSBvdmVybG9hZHMgYXJlIGZpbmUuXG4gICAgICBjYXVzZU9yUmVhc29uLFxuICAgICAgb3B0aW9uc09yUGFyZW50T3JQbGFjZSxcbiAgICAgIG9yaWdpblxuICAgIClcblxuICAgIGlmICh0aGlzLnBhdGgpIHtcbiAgICAgIG1lc3NhZ2UubmFtZSA9IHRoaXMucGF0aCArICc6JyArIG1lc3NhZ2UubmFtZVxuICAgICAgbWVzc2FnZS5maWxlID0gdGhpcy5wYXRoXG4gICAgfVxuXG4gICAgbWVzc2FnZS5mYXRhbCA9IGZhbHNlXG5cbiAgICB0aGlzLm1lc3NhZ2VzLnB1c2gobWVzc2FnZSlcblxuICAgIHJldHVybiBtZXNzYWdlXG4gIH1cblxuICAvKipcbiAgICogU2VyaWFsaXplIHRoZSBmaWxlLlxuICAgKlxuICAgKiA+ICoqTm90ZSoqOiB3aGljaCBlbmNvZGluZ3MgYXJlIHN1cHBvcnRlZCBkZXBlbmRzIG9uIHRoZSBlbmdpbmUuXG4gICAqID4gRm9yIGluZm8gb24gTm9kZS5qcywgc2VlOlxuICAgKiA+IDxodHRwczovL25vZGVqcy5vcmcvYXBpL3V0aWwuaHRtbCN3aGF0d2ctc3VwcG9ydGVkLWVuY29kaW5ncz4uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2VuY29kaW5nPSd1dGY4J11cbiAgICogICBDaGFyYWN0ZXIgZW5jb2RpbmcgdG8gdW5kZXJzdGFuZCBgdmFsdWVgIGFzIHdoZW4gaXTigJlzIGEgYFVpbnQ4QXJyYXlgXG4gICAqICAgKGRlZmF1bHQ6IGAndXRmLTgnYCkuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqICAgU2VyaWFsaXplZCBmaWxlLlxuICAgKi9cbiAgdG9TdHJpbmcoZW5jb2RpbmcpIHtcbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gJydcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRoaXMudmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZVxuICAgIH1cblxuICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoZW5jb2RpbmcgfHwgdW5kZWZpbmVkKVxuICAgIHJldHVybiBkZWNvZGVyLmRlY29kZSh0aGlzLnZhbHVlKVxuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgYHBhcnRgIGlzIG5vdCBhIHBhdGggKGFzIGluLCBkb2VzIG5vdCBjb250YWluIGBwYXRoLnNlcGApLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gcGFydFxuICogICBGaWxlIHBhdGggcGFydC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiAgIFBhcnQgbmFtZS5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFBhcnQocGFydCwgbmFtZSkge1xuICBpZiAocGFydCAmJiBwYXJ0LmluY2x1ZGVzKG1pbnBhdGguc2VwKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdgJyArIG5hbWUgKyAnYCBjYW5ub3QgYmUgYSBwYXRoOiBkaWQgbm90IGV4cGVjdCBgJyArIG1pbnBhdGguc2VwICsgJ2AnXG4gICAgKVxuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgYHBhcnRgIGlzIG5vdCBlbXB0eS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZyB8IHVuZGVmaW5lZH0gcGFydFxuICogICBUaGluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiAgIFBhcnQgbmFtZS5cbiAqIEByZXR1cm5zIHthc3NlcnRzIHBhcnQgaXMgc3RyaW5nfVxuICogICBOb3RoaW5nLlxuICovXG5mdW5jdGlvbiBhc3NlcnROb25FbXB0eShwYXJ0LCBuYW1lKSB7XG4gIGlmICghcGFydCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYCcgKyBuYW1lICsgJ2AgY2Fubm90IGJlIGVtcHR5JylcbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCBgcGF0aGAgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkfSBwYXRoXG4gKiAgIFBhdGguXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogICBEZXBlbmRlbmN5IG5hbWUuXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyBwYXRoIGlzIHN0cmluZ31cbiAqICAgTm90aGluZy5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UGF0aChwYXRoLCBuYW1lKSB7XG4gIGlmICghcGF0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2V0dGluZyBgJyArIG5hbWUgKyAnYCByZXF1aXJlcyBgcGF0aGAgdG8gYmUgc2V0IHRvbycpXG4gIH1cbn1cblxuLyoqXG4gKiBBc3NlcnQgYHZhbHVlYCBpcyBhbiBgVWludDhBcnJheWAuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSB2YWx1ZVxuICogICB0aGluZy5cbiAqIEByZXR1cm5zIHt2YWx1ZSBpcyBVaW50OEFycmF5fVxuICogICBXaGV0aGVyIGB2YWx1ZWAgaXMgYW4gYFVpbnQ4QXJyYXlgLlxuICovXG5mdW5jdGlvbiBpc1VpbnQ4QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIEJvb2xlYW4oXG4gICAgdmFsdWUgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICdieXRlTGVuZ3RoJyBpbiB2YWx1ZSAmJlxuICAgICAgJ2J5dGVPZmZzZXQnIGluIHZhbHVlXG4gIClcbn1cbiJdLCJuYW1lcyI6WyJWRmlsZU1lc3NhZ2UiLCJtaW5wYXRoIiwibWlucHJvYyIsInVybFRvUGF0aCIsImlzVXJsIiwib3JkZXIiLCJWRmlsZSIsImJhc2VuYW1lIiwicGF0aCIsInVuZGVmaW5lZCIsImFzc2VydE5vbkVtcHR5IiwiYXNzZXJ0UGFydCIsImpvaW4iLCJkaXJuYW1lIiwiYXNzZXJ0UGF0aCIsImV4dG5hbWUiLCJjb2RlUG9pbnRBdCIsIkVycm9yIiwiaW5jbHVkZXMiLCJzdGVtIiwiaGlzdG9yeSIsImxlbmd0aCIsInB1c2giLCJmYWlsIiwiY2F1c2VPclJlYXNvbiIsIm9wdGlvbnNPclBhcmVudE9yUGxhY2UiLCJvcmlnaW4iLCJtZXNzYWdlIiwiZmF0YWwiLCJpbmZvIiwibmFtZSIsImZpbGUiLCJtZXNzYWdlcyIsInRvU3RyaW5nIiwiZW5jb2RpbmciLCJ2YWx1ZSIsImRlY29kZXIiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImlzVWludDhBcnJheSIsImN3ZCIsImRhdGEiLCJtYXAiLCJyZXN1bHQiLCJzdG9yZWQiLCJpbmRleCIsImZpZWxkIiwicGFydCIsInNlcCIsIkJvb2xlYW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minpath.browser.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minpath.browser.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   minpath: function() { return /* binding */ minpath; }\n/* harmony export */ });\n// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nconst minpath = {\n    basename,\n    dirname,\n    extname,\n    join,\n    sep: \"/\"\n};\n/* eslint-disable max-depth, complexity */ /**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */ function basename(path, extname) {\n    if (extname !== undefined && typeof extname !== \"string\") {\n        throw new TypeError('\"ext\" argument must be a string');\n    }\n    assertPath(path);\n    let start = 0;\n    let end = -1;\n    let index = path.length;\n    /** @type {boolean | undefined} */ let seenNonSlash;\n    if (extname === undefined || extname.length === 0 || extname.length > path.length) {\n        while(index--){\n            if (path.codePointAt(index) === 47 /* `/` */ ) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now.\n                if (seenNonSlash) {\n                    start = index + 1;\n                    break;\n                }\n            } else if (end < 0) {\n                // We saw the first non-path separator, mark this as the end of our\n                // path component.\n                seenNonSlash = true;\n                end = index + 1;\n            }\n        }\n        return end < 0 ? \"\" : path.slice(start, end);\n    }\n    if (extname === path) {\n        return \"\";\n    }\n    let firstNonSlashEnd = -1;\n    let extnameIndex = extname.length - 1;\n    while(index--){\n        if (path.codePointAt(index) === 47 /* `/` */ ) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now.\n            if (seenNonSlash) {\n                start = index + 1;\n                break;\n            }\n        } else {\n            if (firstNonSlashEnd < 0) {\n                // We saw the first non-path separator, remember this index in case\n                // we need it if the extension ends up not matching.\n                seenNonSlash = true;\n                firstNonSlashEnd = index + 1;\n            }\n            if (extnameIndex > -1) {\n                // Try to match the explicit extension.\n                if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n                    if (extnameIndex < 0) {\n                        // We matched the extension, so mark this as the end of our path\n                        // component\n                        end = index;\n                    }\n                } else {\n                    // Extension does not match, so our result is the entire path\n                    // component\n                    extnameIndex = -1;\n                    end = firstNonSlashEnd;\n                }\n            }\n        }\n    }\n    if (start === end) {\n        end = firstNonSlashEnd;\n    } else if (end < 0) {\n        end = path.length;\n    }\n    return path.slice(start, end);\n}\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */ function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) {\n        return \".\";\n    }\n    let end = -1;\n    let index = path.length;\n    /** @type {boolean | undefined} */ let unmatchedSlash;\n    // Prefix `--` is important to not run on `0`.\n    while(--index){\n        if (path.codePointAt(index) === 47 /* `/` */ ) {\n            if (unmatchedSlash) {\n                end = index;\n                break;\n            }\n        } else if (!unmatchedSlash) {\n            // We saw the first non-path separator\n            unmatchedSlash = true;\n        }\n    }\n    return end < 0 ? path.codePointAt(0) === 47 /* `/` */  ? \"/\" : \".\" : end === 1 && path.codePointAt(0) === 47 /* `/` */  ? \"//\" : path.slice(0, end);\n}\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */ function extname(path) {\n    assertPath(path);\n    let index = path.length;\n    let end = -1;\n    let startPart = 0;\n    let startDot = -1;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find.\n    let preDotState = 0;\n    /** @type {boolean | undefined} */ let unmatchedSlash;\n    while(index--){\n        const code = path.codePointAt(index);\n        if (code === 47 /* `/` */ ) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now.\n            if (unmatchedSlash) {\n                startPart = index + 1;\n                break;\n            }\n            continue;\n        }\n        if (end < 0) {\n            // We saw the first non-path separator, mark this as the end of our\n            // extension.\n            unmatchedSlash = true;\n            end = index + 1;\n        }\n        if (code === 46 /* `.` */ ) {\n            // If this is our first dot, mark it as the start of our extension.\n            if (startDot < 0) {\n                startDot = index;\n            } else if (preDotState !== 1) {\n                preDotState = 1;\n            }\n        } else if (startDot > -1) {\n            // We saw a non-dot and non-path separator before our dot, so we should\n            // have a good chance at having a non-empty extension.\n            preDotState = -1;\n        }\n    }\n    if (startDot < 0 || end < 0 || // We saw a non-dot character immediately before the dot.\n    preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n        return \"\";\n    }\n    return path.slice(startDot, end);\n}\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */ function join() {\n    for(var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++){\n        segments[_key] = arguments[_key];\n    }\n    let index = -1;\n    /** @type {string | undefined} */ let joined;\n    while(++index < segments.length){\n        assertPath(segments[index]);\n        if (segments[index]) {\n            joined = joined === undefined ? segments[index] : joined + \"/\" + segments[index];\n        }\n    }\n    return joined === undefined ? \".\" : normalize(joined);\n}\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */ // Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n    assertPath(path);\n    const absolute = path.codePointAt(0) === 47 /* `/` */ ;\n    // Normalize the path according to POSIX rules.\n    let value = normalizeString(path, !absolute);\n    if (value.length === 0 && !absolute) {\n        value = \".\";\n    }\n    if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */ ) {\n        value += \"/\";\n    }\n    return absolute ? \"/\" + value : value;\n}\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */ function normalizeString(path, allowAboveRoot) {\n    let result = \"\";\n    let lastSegmentLength = 0;\n    let lastSlash = -1;\n    let dots = 0;\n    let index = -1;\n    /** @type {number | undefined} */ let code;\n    /** @type {number} */ let lastSlashIndex;\n    while(++index <= path.length){\n        if (index < path.length) {\n            code = path.codePointAt(index);\n        } else if (code === 47 /* `/` */ ) {\n            break;\n        } else {\n            code = 47 /* `/` */ ;\n        }\n        if (code === 47 /* `/` */ ) {\n            if (lastSlash === index - 1 || dots === 1) {\n            // Empty.\n            } else if (lastSlash !== index - 1 && dots === 2) {\n                if (result.length < 2 || lastSegmentLength !== 2 || result.codePointAt(result.length - 1) !== 46 /* `.` */  || result.codePointAt(result.length - 2) !== 46 /* `.` */ ) {\n                    if (result.length > 2) {\n                        lastSlashIndex = result.lastIndexOf(\"/\");\n                        if (lastSlashIndex !== result.length - 1) {\n                            if (lastSlashIndex < 0) {\n                                result = \"\";\n                                lastSegmentLength = 0;\n                            } else {\n                                result = result.slice(0, lastSlashIndex);\n                                lastSegmentLength = result.length - 1 - result.lastIndexOf(\"/\");\n                            }\n                            lastSlash = index;\n                            dots = 0;\n                            continue;\n                        }\n                    } else if (result.length > 0) {\n                        result = \"\";\n                        lastSegmentLength = 0;\n                        lastSlash = index;\n                        dots = 0;\n                        continue;\n                    }\n                }\n                if (allowAboveRoot) {\n                    result = result.length > 0 ? result + \"/..\" : \"..\";\n                    lastSegmentLength = 2;\n                }\n            } else {\n                if (result.length > 0) {\n                    result += \"/\" + path.slice(lastSlash + 1, index);\n                } else {\n                    result = path.slice(lastSlash + 1, index);\n                }\n                lastSegmentLength = index - lastSlash - 1;\n            }\n            lastSlash = index;\n            dots = 0;\n        } else if (code === 46 /* `.` */  && dots > -1) {\n            dots++;\n        } else {\n            dots = -1;\n        }\n    }\n    return result;\n}\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */ function assertPath(path) {\n    if (typeof path !== \"string\") {\n        throw new TypeError(\"Path must be a string. Received \" + JSON.stringify(path));\n    }\n} /* eslint-enable max-depth, complexity */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minpath.browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minproc.browser.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minproc.browser.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   minproc: function() { return /* binding */ minproc; }\n/* harmony export */ });\n// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nconst minproc = {\n    cwd\n};\nfunction cwd() {\n    return \"/\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS92ZmlsZUA2LjAuMy9ub2RlX21vZHVsZXMvdmZpbGUvbGliL21pbnByb2MuYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEscUJBQXFCO0FBQ3JCLDBFQUEwRTtBQUMxRSxpRUFBaUU7QUFDMUQsTUFBTUEsVUFBVTtJQUFDQztBQUFHLEVBQUM7QUFFNUIsU0FBU0E7SUFDUCxPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3ZmaWxlQDYuMC4zL25vZGVfbW9kdWxlcy92ZmlsZS9saWIvbWlucHJvYy5icm93c2VyLmpzPzUwZGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU29tZXdoYXQgYmFzZWQgb246XG4vLyA8aHR0cHM6Ly9naXRodWIuY29tL2RlZnVuY3R6b21iaWUvbm9kZS1wcm9jZXNzL2Jsb2IvbWFzdGVyL2Jyb3dzZXIuanM+LlxuLy8gQnV0IEkgZG9u4oCZdCB0aGluayBvbmUgdGlueSBsaW5lIG9mIGNvZGUgY2FuIGJlIGNvcHlyaWdodGVkLiDwn5iFXG5leHBvcnQgY29uc3QgbWlucHJvYyA9IHtjd2R9XG5cbmZ1bmN0aW9uIGN3ZCgpIHtcbiAgcmV0dXJuICcvJ1xufVxuIl0sIm5hbWVzIjpbIm1pbnByb2MiLCJjd2QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minproc.browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minurl.browser.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minurl.browser.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isUrl: function() { return /* reexport safe */ _minurl_shared_js__WEBPACK_IMPORTED_MODULE_0__.isUrl; },\n/* harmony export */   urlToPath: function() { return /* binding */ urlToPath; }\n/* harmony export */ });\n/* harmony import */ var _minurl_shared_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./minurl.shared.js */ \"(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minurl.shared.js\");\n\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */ function urlToPath(path) {\n    if (typeof path === \"string\") {\n        path = new URL(path);\n    } else if (!(0,_minurl_shared_js__WEBPACK_IMPORTED_MODULE_0__.isUrl)(path)) {\n        /** @type {NodeJS.ErrnoException} */ const error = new TypeError('The \"path\" argument must be of type string or an instance of URL. Received `' + path + \"`\");\n        error.code = \"ERR_INVALID_ARG_TYPE\";\n        throw error;\n    }\n    if (path.protocol !== \"file:\") {\n        /** @type {NodeJS.ErrnoException} */ const error = new TypeError(\"The URL must be of scheme file\");\n        error.code = \"ERR_INVALID_URL_SCHEME\";\n        throw error;\n    }\n    return getPathFromURLPosix(path);\n}\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */ function getPathFromURLPosix(url) {\n    if (url.hostname !== \"\") {\n        /** @type {NodeJS.ErrnoException} */ const error = new TypeError('File URL host must be \"localhost\" or empty on darwin');\n        error.code = \"ERR_INVALID_FILE_URL_HOST\";\n        throw error;\n    }\n    const pathname = url.pathname;\n    let index = -1;\n    while(++index < pathname.length){\n        if (pathname.codePointAt(index) === 37 /* `%` */  && pathname.codePointAt(index + 1) === 50 /* `2` */ ) {\n            const third = pathname.codePointAt(index + 2);\n            if (third === 70 /* `F` */  || third === 102 /* `f` */ ) {\n                /** @type {NodeJS.ErrnoException} */ const error = new TypeError(\"File URL path must not include encoded / characters\");\n                error.code = \"ERR_INVALID_FILE_URL_PATH\";\n                throw error;\n            }\n        }\n    }\n    return decodeURIComponent(pathname);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS92ZmlsZUA2LjAuMy9ub2RlX21vZHVsZXMvdmZpbGUvbGliL21pbnVybC5icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF3QztBQUVBO0FBRXhDLHlFQUF5RTtBQUV6RTs7Ozs7Q0FLQyxHQUNNLFNBQVNDLFVBQVVDLElBQUk7SUFDNUIsSUFBSSxPQUFPQSxTQUFTLFVBQVU7UUFDNUJBLE9BQU8sSUFBSUMsSUFBSUQ7SUFDakIsT0FBTyxJQUFJLENBQUNGLHdEQUFLQSxDQUFDRSxPQUFPO1FBQ3ZCLGtDQUFrQyxHQUNsQyxNQUFNRSxRQUFRLElBQUlDLFVBQ2hCLGlGQUNFSCxPQUNBO1FBRUpFLE1BQU1FLElBQUksR0FBRztRQUNiLE1BQU1GO0lBQ1I7SUFFQSxJQUFJRixLQUFLSyxRQUFRLEtBQUssU0FBUztRQUM3QixrQ0FBa0MsR0FDbEMsTUFBTUgsUUFBUSxJQUFJQyxVQUFVO1FBQzVCRCxNQUFNRSxJQUFJLEdBQUc7UUFDYixNQUFNRjtJQUNSO0lBRUEsT0FBT0ksb0JBQW9CTjtBQUM3QjtBQUVBOzs7Ozs7O0NBT0MsR0FDRCxTQUFTTSxvQkFBb0JDLEdBQUc7SUFDOUIsSUFBSUEsSUFBSUMsUUFBUSxLQUFLLElBQUk7UUFDdkIsa0NBQWtDLEdBQ2xDLE1BQU1OLFFBQVEsSUFBSUMsVUFDaEI7UUFFRkQsTUFBTUUsSUFBSSxHQUFHO1FBQ2IsTUFBTUY7SUFDUjtJQUVBLE1BQU1PLFdBQVdGLElBQUlFLFFBQVE7SUFDN0IsSUFBSUMsUUFBUSxDQUFDO0lBRWIsTUFBTyxFQUFFQSxRQUFRRCxTQUFTRSxNQUFNLENBQUU7UUFDaEMsSUFDRUYsU0FBU0csV0FBVyxDQUFDRixXQUFXLEdBQUcsT0FBTyxPQUMxQ0QsU0FBU0csV0FBVyxDQUFDRixRQUFRLE9BQU8sR0FBRyxPQUFPLEtBQzlDO1lBQ0EsTUFBTUcsUUFBUUosU0FBU0csV0FBVyxDQUFDRixRQUFRO1lBQzNDLElBQUlHLFVBQVUsR0FBRyxPQUFPLE9BQU1BLFVBQVUsSUFBSSxPQUFPLEtBQUk7Z0JBQ3JELGtDQUFrQyxHQUNsQyxNQUFNWCxRQUFRLElBQUlDLFVBQ2hCO2dCQUVGRCxNQUFNRSxJQUFJLEdBQUc7Z0JBQ2IsTUFBTUY7WUFDUjtRQUNGO0lBQ0Y7SUFFQSxPQUFPWSxtQkFBbUJMO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS92ZmlsZUA2LjAuMy9ub2RlX21vZHVsZXMvdmZpbGUvbGliL21pbnVybC5icm93c2VyLmpzP2M2OTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpc1VybH0gZnJvbSAnLi9taW51cmwuc2hhcmVkLmpzJ1xuXG5leHBvcnQge2lzVXJsfSBmcm9tICcuL21pbnVybC5zaGFyZWQuanMnXG5cbi8vIFNlZTogPGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iLzZhMzQwM2MvbGliL2ludGVybmFsL3VybC5qcz5cblxuLyoqXG4gKiBAcGFyYW0ge1VSTCB8IHN0cmluZ30gcGF0aFxuICogICBGaWxlIFVSTC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIEZpbGUgVVJMLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXJsVG9QYXRoKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIHBhdGggPSBuZXcgVVJMKHBhdGgpXG4gIH0gZWxzZSBpZiAoIWlzVXJsKHBhdGgpKSB7XG4gICAgLyoqIEB0eXBlIHtOb2RlSlMuRXJybm9FeGNlcHRpb259ICovXG4gICAgY29uc3QgZXJyb3IgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInBhdGhcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nIG9yIGFuIGluc3RhbmNlIG9mIFVSTC4gUmVjZWl2ZWQgYCcgK1xuICAgICAgICBwYXRoICtcbiAgICAgICAgJ2AnXG4gICAgKVxuICAgIGVycm9yLmNvZGUgPSAnRVJSX0lOVkFMSURfQVJHX1RZUEUnXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxuXG4gIGlmIChwYXRoLnByb3RvY29sICE9PSAnZmlsZTonKSB7XG4gICAgLyoqIEB0eXBlIHtOb2RlSlMuRXJybm9FeGNlcHRpb259ICovXG4gICAgY29uc3QgZXJyb3IgPSBuZXcgVHlwZUVycm9yKCdUaGUgVVJMIG11c3QgYmUgb2Ygc2NoZW1lIGZpbGUnKVxuICAgIGVycm9yLmNvZGUgPSAnRVJSX0lOVkFMSURfVVJMX1NDSEVNRSdcbiAgICB0aHJvdyBlcnJvclxuICB9XG5cbiAgcmV0dXJuIGdldFBhdGhGcm9tVVJMUG9zaXgocGF0aClcbn1cblxuLyoqXG4gKiBHZXQgYSBwYXRoIGZyb20gYSBQT1NJWCBVUkwuXG4gKlxuICogQHBhcmFtIHtVUkx9IHVybFxuICogICBVUkwuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBGaWxlIHBhdGguXG4gKi9cbmZ1bmN0aW9uIGdldFBhdGhGcm9tVVJMUG9zaXgodXJsKSB7XG4gIGlmICh1cmwuaG9zdG5hbWUgIT09ICcnKSB7XG4gICAgLyoqIEB0eXBlIHtOb2RlSlMuRXJybm9FeGNlcHRpb259ICovXG4gICAgY29uc3QgZXJyb3IgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgJ0ZpbGUgVVJMIGhvc3QgbXVzdCBiZSBcImxvY2FsaG9zdFwiIG9yIGVtcHR5IG9uIGRhcndpbidcbiAgICApXG4gICAgZXJyb3IuY29kZSA9ICdFUlJfSU5WQUxJRF9GSUxFX1VSTF9IT1NUJ1xuICAgIHRocm93IGVycm9yXG4gIH1cblxuICBjb25zdCBwYXRobmFtZSA9IHVybC5wYXRobmFtZVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgcGF0aG5hbWUubGVuZ3RoKSB7XG4gICAgaWYgKFxuICAgICAgcGF0aG5hbWUuY29kZVBvaW50QXQoaW5kZXgpID09PSAzNyAvKiBgJWAgKi8gJiZcbiAgICAgIHBhdGhuYW1lLmNvZGVQb2ludEF0KGluZGV4ICsgMSkgPT09IDUwIC8qIGAyYCAqL1xuICAgICkge1xuICAgICAgY29uc3QgdGhpcmQgPSBwYXRobmFtZS5jb2RlUG9pbnRBdChpbmRleCArIDIpXG4gICAgICBpZiAodGhpcmQgPT09IDcwIC8qIGBGYCAqLyB8fCB0aGlyZCA9PT0gMTAyIC8qIGBmYCAqLykge1xuICAgICAgICAvKiogQHR5cGUge05vZGVKUy5FcnJub0V4Y2VwdGlvbn0gKi9cbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdGaWxlIFVSTCBwYXRoIG11c3Qgbm90IGluY2x1ZGUgZW5jb2RlZCAvIGNoYXJhY3RlcnMnXG4gICAgICAgIClcbiAgICAgICAgZXJyb3IuY29kZSA9ICdFUlJfSU5WQUxJRF9GSUxFX1VSTF9QQVRIJ1xuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocGF0aG5hbWUpXG59XG4iXSwibmFtZXMiOlsiaXNVcmwiLCJ1cmxUb1BhdGgiLCJwYXRoIiwiVVJMIiwiZXJyb3IiLCJUeXBlRXJyb3IiLCJjb2RlIiwicHJvdG9jb2wiLCJnZXRQYXRoRnJvbVVSTFBvc2l4IiwidXJsIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsImluZGV4IiwibGVuZ3RoIiwiY29kZVBvaW50QXQiLCJ0aGlyZCIsImRlY29kZVVSSUNvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minurl.browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minurl.shared.js":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minurl.shared.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isUrl: function() { return /* binding */ isUrl; }\n/* harmony export */ });\n/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */ // From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nfunction isUrl(fileUrlOrPath) {\n    return Boolean(fileUrlOrPath !== null && typeof fileUrlOrPath === \"object\" && \"href\" in fileUrlOrPath && fileUrlOrPath.href && \"protocol\" in fileUrlOrPath && fileUrlOrPath.protocol && // @ts-expect-error: indexing is fine.\n    fileUrlOrPath.auth === undefined);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS92ZmlsZUA2LjAuMy9ub2RlX21vZHVsZXMvdmZpbGUvbGliL21pbnVybC5zaGFyZWQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztDQWlCQyxHQUNELCtFQUErRTtBQUN4RSxTQUFTQSxNQUFNQyxhQUFhO0lBQ2pDLE9BQU9DLFFBQ0xELGtCQUFrQixRQUNoQixPQUFPQSxrQkFBa0IsWUFDekIsVUFBVUEsaUJBQ1ZBLGNBQWNFLElBQUksSUFDbEIsY0FBY0YsaUJBQ2RBLGNBQWNHLFFBQVEsSUFDdEIsc0NBQXNDO0lBQ3RDSCxjQUFjSSxJQUFJLEtBQUtDO0FBRTdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS92ZmlsZUA2LjAuMy9ub2RlX21vZHVsZXMvdmZpbGUvbGliL21pbnVybC5zaGFyZWQuanM/NjU4YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENoZWNrcyBpZiBhIHZhbHVlIGhhcyB0aGUgc2hhcGUgb2YgYSBXSEFUV0cgVVJMIG9iamVjdC5cbiAqXG4gKiBVc2luZyBhIHN5bWJvbCBvciBpbnN0YW5jZW9mIHdvdWxkIG5vdCBiZSBhYmxlIHRvIHJlY29nbml6ZSBVUkwgb2JqZWN0c1xuICogY29taW5nIGZyb20gb3RoZXIgaW1wbGVtZW50YXRpb25zIChlLmcuIGluIEVsZWN0cm9uKSwgc28gaW5zdGVhZCB3ZSBhcmVcbiAqIGNoZWNraW5nIHNvbWUgd2VsbCBrbm93biBwcm9wZXJ0aWVzIGZvciBhIGxhY2sgb2YgYSBiZXR0ZXIgdGVzdC5cbiAqXG4gKiBXZSB1c2UgYGhyZWZgIGFuZCBgcHJvdG9jb2xgIGFzIHRoZXkgYXJlIHRoZSBvbmx5IHByb3BlcnRpZXMgdGhhdCBhcmVcbiAqIGVhc3kgdG8gcmV0cmlldmUgYW5kIGNhbGN1bGF0ZSBkdWUgdG8gdGhlIGxhenkgbmF0dXJlIG9mIHRoZSBnZXR0ZXJzLlxuICpcbiAqIFdlIGNoZWNrIGZvciBhdXRoIGF0dHJpYnV0ZSB0byBkaXN0aW5ndWlzaCBsZWdhY3kgdXJsIGluc3RhbmNlIHdpdGhcbiAqIFdIQVRXRyBVUkwgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSBmaWxlVXJsT3JQYXRoXG4gKiAgIEZpbGUgcGF0aCBvciBVUkwuXG4gKiBAcmV0dXJucyB7ZmlsZVVybE9yUGF0aCBpcyBVUkx9XG4gKiAgIFdoZXRoZXIgaXTigJlzIGEgVVJMLlxuICovXG4vLyBGcm9tOiA8aHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvNmEzNDAzYy9saWIvaW50ZXJuYWwvdXJsLmpzI0w3MjA+XG5leHBvcnQgZnVuY3Rpb24gaXNVcmwoZmlsZVVybE9yUGF0aCkge1xuICByZXR1cm4gQm9vbGVhbihcbiAgICBmaWxlVXJsT3JQYXRoICE9PSBudWxsICYmXG4gICAgICB0eXBlb2YgZmlsZVVybE9yUGF0aCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICdocmVmJyBpbiBmaWxlVXJsT3JQYXRoICYmXG4gICAgICBmaWxlVXJsT3JQYXRoLmhyZWYgJiZcbiAgICAgICdwcm90b2NvbCcgaW4gZmlsZVVybE9yUGF0aCAmJlxuICAgICAgZmlsZVVybE9yUGF0aC5wcm90b2NvbCAmJlxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogaW5kZXhpbmcgaXMgZmluZS5cbiAgICAgIGZpbGVVcmxPclBhdGguYXV0aCA9PT0gdW5kZWZpbmVkXG4gIClcbn1cbiJdLCJuYW1lcyI6WyJpc1VybCIsImZpbGVVcmxPclBhdGgiLCJCb29sZWFuIiwiaHJlZiIsInByb3RvY29sIiwiYXV0aCIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minurl.shared.js\n"));

/***/ })

});